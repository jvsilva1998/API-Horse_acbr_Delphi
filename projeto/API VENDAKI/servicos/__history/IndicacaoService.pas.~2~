unit IndicacaoService;

interface

uses
  XData.Server.Module,
  XData.Service.Common,
  parametros,
  Json,
  funcoes,
  indicacao,
  System.SysUtils;

type
  [ServiceContract]
  Iindicacoes= interface(IInvokable)
    ['{04FB9CCB-F5E2-477C-9AD3-639CCB8D5592}']
    [httpget]function  indicador([FromPath] codigoIndicador:string):TJSONObject;
  end;

  [ServiceImplementation]
  TIindicacoes = class(TInterfacedObject, Iindicacoes)
  private

   function  indicador([FromPath] codigoIndicador:string):TJSONObject;
  end;

implementation


function TIindicacoes.indicador(codigoIndicador: string): TJSONObject;
  var
   resultado      : TJSONObject;
   usuarioADM     : TJSONObject;
 begin
   usuarioADM    := verificaTokenADM(TXDataOperationContext.Current.Request.Headers.Get('Authorization'));

    if usuarioADM.FindValue('codigoHttp').Value = '200' then
      begin
            resultado  :=  indicacao.busca_indicador(codigoIndicador);
            if resultado.FindValue('codigoHttp').Value = '200' then
               begin
                result      := TJSonObject.ParseJSONValue(resultado.P['dadosRetorno'].ToString) as TJSonObject;
               end else
                   begin
                    result  :=  TJSonObject.ParseJSONValue(resultado.P['mensagemRetorno'].ToString) as TJSonObject;
                   end;
            funcoes.statusHTTP(strtoint(resultado.FindValue('codigoHttp').Value));
      end else
           begin
             funcoes.statusHTTP(strtoint(usuarioADM.FindValue('codigoHttp').Value));
             result  := TJSonObject.ParseJSONValue(usuarioADM.P['mensagemRetorno'].ToString) as TJSonObject;
           end;
 end;



initialization
  RegisterServiceType(TypeInfo(Iindicacoes));
  RegisterServiceType(TIindicacoes);
end.

