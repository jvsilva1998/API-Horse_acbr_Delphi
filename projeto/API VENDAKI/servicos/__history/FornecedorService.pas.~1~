unit FornecedorService;

interface

uses
  XData.Server.Module,
  XData.Service.Common,
  funcoes,
  parametros,
  fornecedor,
  System.JSON;

type
  [ServiceContract]
  Ifornecedores= interface(IInvokable)
    ['{04FB9CCB-F5E2-477C-9AD3-639CCB8D5592}']
    [httppost]   function cadastrar(dados:parametros.fornecedor):boolean;
    [httpdelete] function remover(codigo:string):boolean;
    [httpput]    function alterar(codigo:string;dados:parametros.fornecedor):boolean;
    [httpget]    function buscar(cnpj,descricao:string):TJSONObject;
  end;

  [ServiceImplementation]
  TIfornecedores = class(TInterfacedObject, Ifornecedores)
  private
   function cadastrar(dados:parametros.fornecedor):boolean;
   function remover(codigo:string):boolean;
   function alterar(codigo:string;dados:parametros.fornecedor):boolean;
   function buscar(cnpj,descricao:string):TJSONObject;
  end;

implementation



{ TIfornecedores }


function TIfornecedores.alterar(codigo: string;dados: parametros.fornecedor): boolean;
 var
  resultado :integer;
 begin
    if funcoes.verificaTokenlogado(TXDataOperationContext.Current.Request.Headers.Get('Authorization')) = true then
      begin
            resultado := fornecedor.alterar_fornecedor(codigo,dados);
        if  resultado = 200 then
              begin
               Result := True;
              end else
                    begin
                       Result   := False;
                    end;
            funcoes.statusHTTP(resultado);
      end;
 end;

function TIfornecedores.buscar(cnpj, descricao: string): TJSONObject;
 var
  resultado :integer;
 begin
    if funcoes.verificaTokenlogado(TXDataOperationContext.Current.Request.Headers.Get('Authorization')) = true then
      begin
            resultado := fornecedor.buscar_fornecedor(cnpj,descricao);
            result    := TJSonObject.ParseJSONValue(funcoes.ResultadoJson) as TJSonObject;
            funcoes.statusHTTP(resultado);
      end else
           begin
            result := TJSonObject.ParseJSONValue(funcoes.JsonNegado) as TJSonObject;
           end;
 end;

function TIfornecedores.cadastrar(dados: parametros.fornecedor): boolean;
 var
  resultado :integer;
 begin
    if funcoes.verificaTokenlogado(TXDataOperationContext.Current.Request.Headers.Get('Authorization')) = true then
      begin
            resultado := fornecedor.cadastra_fornecedor(dados);
        if  resultado = 201 then
              begin
               Result := True;
              end else
                    begin
                       Result   := False;
                    end;
            funcoes.statusHTTP(resultado);
      end;
 end;

function TIfornecedores.remover(codigo: string): boolean;
 var
  resultado :integer;
 begin
    if funcoes.verificaTokenlogado(TXDataOperationContext.Current.Request.Headers.Get('Authorization')) = true then
      begin
            resultado := fornecedor.remover_fornecedor(codigo);
        if  resultado = 200 then
              begin
               Result := True;
              end else
                    begin
                       Result   := False;
                    end;
            funcoes.statusHTTP(resultado);
      end;
 end;




initialization
  RegisterServiceType(TypeInfo(Ifornecedores));
  RegisterServiceType(TIfornecedores);

end.

