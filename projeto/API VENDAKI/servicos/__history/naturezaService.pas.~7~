unit NaturezaService;

interface

uses
  XData.Server.Module,
  XData.Service.Common,
  parametros,
  funcoes,
  natureza,
  System.JSON,
  retornos;


type
  [ServiceContract]
  Inaturezas= interface(IInvokable)
    ['{04FB9CCB-F5E2-477C-9AD3-639CCB8D5592}']
    [httppost]function   cadastrar(dados:parametros.naturezas):TJSONObject;
    [httpdelete]function remover([FromPath]  codigo:string):TJSONObject;
    [httpget]function    buscar([FromPath] descricao:string):TJSONObject;

  end;

  [ServiceImplementation]
  TInaturezas = class(TInterfacedObject, Inaturezas)
  private
     function cadastrar(dados:parametros.naturezas):TJSONObject;
     function remover(codigo:string):TJSONObject;
     function  buscar(descricao:string):TJSONObject;
  end;

implementation






  {BUSCAR}
function TInaturezas.buscar(descricao: string): TJSONObject;
 var
  resultado :integer;
 begin
    if funcoes.verificaTokenlogado(TXDataOperationContext.Current.Request.Headers.Get('Authorization')) = true then
      begin
            resultado := natureza.buscar_natureza(descricao);
            result    := TJSonObject.ParseJSONValue(funcoes.ResultadoJson) as TJSonObject;
            funcoes.statusHTTP(resultado);
      end else
           begin
            result := TJSonObject.ParseJSONValue(funcoes.JsonNegado) as TJSonObject;
           end;
 end;


 {CADASTRAR}
function TInaturezas.cadastrar(dados:parametros.naturezas): TJSONObject;
  var
  resultado :integer;
 begin
    if funcoes.verificaTokenlogado(TXDataOperationContext.Current.Request.Headers.Get('Authorization')) = true then
      begin
            resultado :=  natureza.cadastra_natureza(dados);
            result := TJSonObject.ParseJSONValue(retornos.retorno) as TJSonObject;
            funcoes.statusHTTP(resultado);
      end else
           begin
             result := TJSonObject.ParseJSONValue(retornos.retorno) as TJSonObject;
           end;
 end;




 {REMOVER}
function TInaturezas.remover(codigo: string): TJSONObject;
  var
  resultado :integer;
 begin
    if funcoes.verificaTokenlogado(TXDataOperationContext.Current.Request.Headers.Get('Authorization')) = true then
      begin
            resultado :=  natureza.remover_natureza(codigo);
            result := TJSonObject.ParseJSONValue(retornos.retorno) as TJSonObject;
            funcoes.statusHTTP(resultado);
      end else
           begin
             result := TJSonObject.ParseJSONValue(retornos.retorno) as TJSonObject;
           end;
 end;

initialization
  RegisterServiceType(TypeInfo(Inaturezas));
  RegisterServiceType(TInaturezas);

end.

