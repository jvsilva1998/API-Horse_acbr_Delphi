unit Chilkat_v9_5_0_TLB;

// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// $Rev: 52393 $
// File generated on 29/06/2021 11:42:27 from Type Library described below.

// ************************************************************************  //
// Type Lib: C:\Users\a\Desktop\chilkatax-9.5.0-win32\ChilkatAx-9.5.0-win32.dll (1)
// LIBID: {004CB902-F437-4D01-BD85-9E18836DA5C2}
// LCID: 0
// Helpfile: 
// HelpString: Chilkat ActiveX v9.5.0
// DepndLst: 
//   (1) v2.0 stdole, (C:\Windows\SysWOW64\stdole2.tlb)
// SYS_KIND: SYS_WIN32
// ************************************************************************ //
{$TYPEDADDRESS OFF} // Unit must be compiled without type-checked pointers. 
{$WARN SYMBOL_PLATFORM OFF}
{$WRITEABLECONST ON}
{$VARPROPSETTER ON}
{$ALIGN 4}

interface

uses Winapi.Windows, System.Classes, System.Variants, System.Win.StdVCL, Vcl.Graphics, Vcl.OleCtrls, Vcl.OleServer, Winapi.ActiveX;
  


// *********************************************************************//
// GUIDS declared in the TypeLibrary. Following prefixes are used:        
//   Type Libraries     : LIBID_xxxx                                      
//   CoClasses          : CLASS_xxxx                                      
//   DISPInterfaces     : DIID_xxxx                                       
//   Non-DISP interfaces: IID_xxxx                                        
// *********************************************************************//
const
  // TypeLibrary Major and minor versions
  Chilkat_v9_5_0MajorVersion = 1;
  Chilkat_v9_5_0MinorVersion = 0;

  LIBID_Chilkat_v9_5_0: TGUID = '{004CB902-F437-4D01-BD85-9E18836DA5C2}';

  DIID__IChilkatEvents: TGUID = '{91D24DB1-0F9E-4E77-B629-70BEE2F61D36}';
  IID_IChilkatTask: TGUID = '{F312552A-2E77-4866-95CA-A3699D7D6ED2}';
  DIID__IChilkatZipEvents: TGUID = '{F0C2D9C1-0B80-432D-A60C-0957A5A03AAE}';
  DIID__IChilkatTarEvents: TGUID = '{1BCCF756-2714-431F-A92A-30B7DFFF3A56}';
  DIID__IChilkatSFtpEvents: TGUID = '{97DAB705-84AB-4228-8EB7-2A3E657462F7}';
  DIID__IChilkatMailManEvents: TGUID = '{3AB70566-E8D9-474F-A244-5DA0260892C1}';
  DIID__IChilkatHttpEvents: TGUID = '{A02D931E-49CC-4D6F-85F5-2D74AB061990}';
  DIID__IChilkatFtp2Events: TGUID = '{D57DD27C-0065-41FA-ACB5-EBD8AB552A1E}';
  IID_IChilkatAsn: TGUID = '{4A129764-F661-4DD9-B357-8F523B17FF94}';
  CLASS_ChilkatAsn: TGUID = '{2935F301-12A9-47A9-97C4-8B7879124EF1}';
  IID_IChilkatBinData: TGUID = '{DDD8463D-2F40-43F8-8C05-F9090816D65D}';
  IID_IChilkatStringBuilder: TGUID = '{78C0A2E3-8712-4C8E-9FD0-24FB3E003A72}';
  IID_IChilkatAtom: TGUID = '{784E1D7C-F1E5-472F-AA06-AA6F1563ED94}';
  CLASS_ChilkatAtom: TGUID = '{3D80DB49-232B-4139-8697-E0202E8B8B8E}';
  IID_ICkDateTime: TGUID = '{F063D06F-1395-4CB0-AB8A-3C86C80F077E}';
  IID_IDtObj: TGUID = '{1ACAAAB7-E818-41AE-AF3F-8F6911A91467}';
  IID_IChilkatAuthAws: TGUID = '{4E737594-4147-4E1D-A1A9-8A55E3FE603E}';
  CLASS_ChilkatAuthAws: TGUID = '{0481098A-742F-4E3C-BBF5-B1D94EC62CE0}';
  IID_IChilkatAuthAzureAD: TGUID = '{B2AA3D60-500A-4725-8430-3A5F16D97D58}';
  CLASS_ChilkatAuthAzureAD: TGUID = '{B1BB04F7-7CA9-4BD7-AE19-EA936D611F91}';
  IID_IChilkatSocket: TGUID = '{93FCA31B-08C3-4E72-836B-B31123F7C2CC}';
  IID_IChilkatCert: TGUID = '{2CABA7DB-F1DD-4E6D-943B-330CF27F6A5D}';
  IID_IPrivateKey: TGUID = '{C791AB84-B72F-4DEF-82ED-156F4B027876}';
  IID_IPublicKey: TGUID = '{D1EC207F-F466-4114-A304-DF34751223A1}';
  IID_IChilkatXmlCertVault: TGUID = '{4C963716-FB14-4D7F-A176-1AC6E30BDEDA}';
  IID_IChilkatPfx: TGUID = '{1B708D67-5ED0-4A1E-8894-144C531FB095}';
  IID_IChilkatCertChain: TGUID = '{E05C10E0-F9E3-4E4E-8784-E4DA4285A085}';
  IID_IChilkatTrustedRoots: TGUID = '{8B32E2E7-6846-4B3F-B686-A2E62F6A85C4}';
  IID_IChilkatJavaKeyStore: TGUID = '{ACB125C6-B8C9-46E1-8B9F-2DB44DB1B5EE}';
  IID_IChilkatPem: TGUID = '{011A33C5-ABFF-431E-A08C-D6038DDA1CAA}';
  IID_IChilkatJsonObject: TGUID = '{BDAB5180-01A8-4D6C-AD56-CFD444EA4C07}';
  IID_IChilkatJsonArray: TGUID = '{06F8688C-465F-45DB-A2F5-E1E4EF222D39}';
  IID_IChilkatHashtable: TGUID = '{D9F89B84-C49F-432A-82BF-F44C1BF16871}';
  IID_IChilkatStringTable: TGUID = '{589D07F4-1FED-450D-B896-87C88DC56F70}';
  IID_IChilkatSshKey: TGUID = '{C574CD73-D2A4-43C4-8A00-3A8A8FC3FA79}';
  IID_IChilkatSsh: TGUID = '{792D2027-B40F-4894-9248-5E9A3FA09F36}';
  IID_ICkStringArray: TGUID = '{6DF65A40-F292-4D8D-8738-4814084CCD6B}';
  IID_IChilkatSecureString: TGUID = '{0652E658-CB05-447B-95E5-0FB06EB8C23B}';
  IID_IChilkatAuthAzureSAS: TGUID = '{4558E02C-E015-41EC-89A3-0A71BC70E627}';
  CLASS_ChilkatAuthAzureSAS: TGUID = '{6999AD77-7D2B-4929-B8BA-A253EDE63752}';
  IID_IChilkatAuthAzureStorage: TGUID = '{C9BEAC5F-76C4-4011-9ED3-BD92D8DC577D}';
  CLASS_ChilkatAuthAzureStorage: TGUID = '{66ABCD9E-0B52-4AEC-872C-837C3D7CC9C1}';
  IID_IChilkatAuthGoogle: TGUID = '{30444DA6-9559-43D3-876F-E6C0FC709D18}';
  CLASS_ChilkatAuthGoogle: TGUID = '{6EBA710B-0C0F-4E86-859A-94829089E436}';
  IID_IChilkatAuthUtil: TGUID = '{FE065188-0A9D-4822-9017-05A5A68CE33C}';
  CLASS_ChilkatAuthUtil: TGUID = '{5915A8E1-EF48-44C5-B6C0-5D2433A00400}';
  CLASS_ChilkatBinData: TGUID = '{FF6CA005-E9AA-418C-9555-3842B8BD54BB}';
  IID_IChilkatBounce: TGUID = '{32C35CC7-1CA6-4897-B21A-116D6DD42381}';
  CLASS_ChilkatBounce: TGUID = '{01AFB62C-BE3C-4706-B77E-CB20DEDA1D4D}';
  IID_IChilkatEmail: TGUID = '{3EC2BC0F-8ECB-4008-AEB7-758972455492}';
  IID_IChilkatCsp: TGUID = '{26377592-38BD-42DC-9C8B-CB38900F250B}';
  IID_IChilkatBz2: TGUID = '{E597F80D-BF1A-44AD-A038-D6AC9881B335}';
  CLASS_ChilkatBz2: TGUID = '{647EC4D1-B7EE-494D-9AE8-823C7FF683D9}';
  IID_IChilkatCache: TGUID = '{064748FA-01E3-4ACD-8DAD-859556B263BD}';
  CLASS_ChilkatCache: TGUID = '{68993996-4448-4B92-99B7-3715CE60D316}';
  CLASS_ChilkatCert: TGUID = '{B4EC2631-0DC1-4791-B691-BE333E574CC2}';
  CLASS_ChilkatCertChain: TGUID = '{30CE0223-B0E1-49CA-97A7-9FC0B49DDB13}';
  IID_IChilkatCertStore: TGUID = '{8CBE1840-52FA-4404-824C-139577309528}';
  CLASS_ChilkatCertStore: TGUID = '{00E685A8-7AE9-4DC5-8C78-54C03A8646FC}';
  IID_IChilkatCgi: TGUID = '{C71DB905-E991-4089-9FFB-BB692A8A8D1D}';
  CLASS_ChilkatCgi: TGUID = '{F21F7AF3-32B0-48D9-B99D-A08159D2B463}';
  IID_IChilkatCharset: TGUID = '{54E9A3A9-44F6-4E38-AA16-F27FB906EE7A}';
  CLASS_ChilkatCharset: TGUID = '{DF519DD3-CF6D-4BC1-A68C-9049FFF6713D}';
  CLASS_CkDateTime: TGUID = '{0B30402C-CDB2-45D2-B7BC-7C1F78C72C1C}';
  IID_ICkString: TGUID = '{47F0E40C-D2E5-4E14-8133-750275823B82}';
  CLASS_CkString: TGUID = '{70A93698-84F4-4B7A-9D04-B354DBC6C3F9}';
  IID_IChilkatCompression: TGUID = '{73B5832B-AACE-4975-9238-09579CB89232}';
  CLASS_ChilkatCompression: TGUID = '{D6CEA276-E79C-4026-BD46-933E3C8F88D8}';
  IID_IChilkatStream: TGUID = '{9DF35ADF-B748-4435-B6A5-0EA8397114D7}';
  IID_IChilkatCreateCS: TGUID = '{08114E7A-8556-40E9-8CE1-0BE2E7A041A8}';
  CLASS_ChilkatCreateCS: TGUID = '{E98C2D0C-6053-4568-9BCE-D6350C39CD93}';
  IID_IChilkatCrypt2: TGUID = '{380B144D-5AF4-4DC3-BBDF-AD8E25F16188}';
  CLASS_ChilkatCrypt2: TGUID = '{1AF44DC7-C896-46BA-B45B-C168FA7612A6}';
  IID_IChilkatHttp: TGUID = '{C754C4B4-6B0A-4664-ADDD-45467F0BCB7E}';
  IID_IChilkatHttpResponse: TGUID = '{C143C715-0FED-4392-B207-1CA3CDF84C88}';
  IID_IChilkatHttpRequest: TGUID = '{495F8CD2-9F03-4A83-A9BC-FEEAE2182D9B}';
  CLASS_ChilkatCsp: TGUID = '{6A10A7BB-7828-4050-9BD3-F4D2D97C6AB5}';
  IID_IChilkatCsr: TGUID = '{1129D7E0-450F-40E6-875F-5CA923E84CA2}';
  CLASS_ChilkatCsr: TGUID = '{BA1083B2-D377-4650-8688-B7972CD5B570}';
  IID_IChilkatCsv: TGUID = '{3B8C1209-EEFB-408B-8FA3-A59EE8034072}';
  CLASS_ChilkatCsv: TGUID = '{E9464A9F-B8D4-443D-88C3-DF3E9C6308AA}';
  IID_IChilkatDh: TGUID = '{9EDDA6C9-A95E-4CE6-B4A3-6C4FE24B08C9}';
  CLASS_ChilkatDh: TGUID = '{F19E7679-F483-46D4-9E87-0253F0820A02}';
  IID_ICkDirTree: TGUID = '{C8B4F6DF-1E35-43B9-913C-B235F91B6D4D}';
  CLASS_CkDirTree: TGUID = '{ABC37F7C-0423-42E4-BBD2-E713B8BD3BA1}';
  IID_IChilkatDkim: TGUID = '{2D924A0F-A828-4482-A1DB-DD80E2FF35EF}';
  CLASS_ChilkatDkim: TGUID = '{B70D813F-5CE3-4C93-A793-B21CD8CE133A}';
  IID_IChilkatDsa: TGUID = '{D39623DD-417F-4651-8E8B-3BAE5A8F4D4D}';
  CLASS_ChilkatDsa: TGUID = '{628C899B-7559-4062-9E65-A47386343965}';
  CLASS_DtObj: TGUID = '{1D304D4B-3E7F-475C-800E-16177166E43A}';
  IID_IChilkatEcc: TGUID = '{A1F4B713-D40B-4B92-BAB8-016AD671ACE8}';
  CLASS_ChilkatEcc: TGUID = '{FA61EA29-BFF4-4CC4-AEC6-C7BA6590178F}';
  IID_IChilkatPrng: TGUID = '{9C1C50C2-C003-4348-BD42-BF6D51852D7D}';
  IID_IChilkatEdDSA: TGUID = '{AD9E69CC-E2E6-4C63-90A9-29084032D024}';
  CLASS_ChilkatEdDSA: TGUID = '{1CE47E56-B8E4-4964-83E2-D14BEE0AED03}';
  CLASS_ChilkatEmail: TGUID = '{78EBC21F-0841-4D47-9DD4-E324F122205F}';
  IID_IChilkatEmailBundle: TGUID = '{A325D50D-6A7D-423F-9087-4242DC382181}';
  CLASS_ChilkatEmailBundle: TGUID = '{DE9FC63E-73D2-4952-BB8B-9C37A7ADE1E6}';
  IID_ICkFileAccess: TGUID = '{CDA20F7F-7E23-471E-82E6-7609EE84CD54}';
  CLASS_CkFileAccess: TGUID = '{A3F78ADD-62C2-475F-9040-80ACBFD412FA}';
  IID_IChilkatFtp2: TGUID = '{3A2BC588-F8E2-4BE3-A154-A3A99CF51E9F}';
  CLASS_ChilkatFtp2: TGUID = '{32BD32D3-66EA-4EE6-A684-20CE86F757C1}';
  IID_IChilkatGlobal: TGUID = '{4995C839-42F3-4D4F-8A08-1BA24B5F5E8F}';
  CLASS_ChilkatGlobal: TGUID = '{B2429147-23BE-4A55-8EAE-2AFF2635815B}';
  IID_IChilkatGzip: TGUID = '{409F23C5-B973-4611-93DD-8FE839BC5860}';
  CLASS_ChilkatGzip: TGUID = '{D647A429-3349-47B5-B62D-7EF758000363}';
  CLASS_ChilkatHashtable: TGUID = '{F28D37F7-F537-45B0-BD88-A5877FC649DD}';
  IID_IHtmlToText: TGUID = '{7919C172-F7FD-40BB-9A28-ACC2EA4ED66F}';
  CLASS_HtmlToText: TGUID = '{540054E6-D577-4E92-B730-86E83ADD9172}';
  IID_IHtmlToXml: TGUID = '{FE82184C-B69F-4B58-9DBC-463FB2F6A422}';
  CLASS_HtmlToXml: TGUID = '{907F3EC0-A455-4B36-8FDC-F3A2B22F1BD2}';
  CLASS_ChilkatHttp: TGUID = '{A74C26D2-2429-4099-8672-2250B15E327F}';
  CLASS_ChilkatHttpRequest: TGUID = '{D66A2F08-A267-4593-ACD4-3EF65255E005}';
  CLASS_ChilkatHttpResponse: TGUID = '{65EA825E-648E-4BF0-8AA3-4E7724F75B07}';
  IID_IChilkatImap: TGUID = '{2E0EB5F9-CD80-407B-B5F3-60AE67679967}';
  CLASS_ChilkatImap: TGUID = '{CEDB6B70-ED7D-4F9E-A0BC-66AFB42F7735}';
  IID_IMessageSet: TGUID = '{0F01CF8C-CE79-4812-8D55-3BD7CC34A318}';
  IID_IMailboxes: TGUID = '{2DB04566-D0BC-4FCF-926A-3E11B37E0B01}';
  CLASS_ChilkatJavaKeyStore: TGUID = '{0B7700DB-79D8-40FB-95B9-03FCC9646439}';
  CLASS_ChilkatJsonArray: TGUID = '{F8CB82D2-BECB-41EA-8356-B1F1A89E9DF1}';
  CLASS_ChilkatJsonObject: TGUID = '{82DF90A6-29B8-4BFC-9433-76A7BC3E0E82}';
  IID_IChilkatJwe: TGUID = '{C7309141-CCF2-45D0-A672-FFB26648B94F}';
  CLASS_ChilkatJwe: TGUID = '{FF4DF009-0001-41ED-BABB-5B4967515601}';
  IID_IChilkatJws: TGUID = '{623BCB7F-A659-48E0-8310-630137759D2B}';
  CLASS_ChilkatJws: TGUID = '{F9B4FBE1-4059-4C53-8342-585BC9D68947}';
  IID_IChilkatJwt: TGUID = '{09718276-04D7-4A84-B699-42FA9A49A645}';
  CLASS_ChilkatJwt: TGUID = '{9FC3155D-8F03-459F-9D96-65ADE17D3615}';
  IID_IKeyContainer: TGUID = '{C374E6D6-2B8E-4030-89EC-3DE7FC67257F}';
  CLASS_KeyContainer: TGUID = '{5B9D28CC-9FE1-4601-89E3-681DD583B290}';
  IID_IChilkatLog: TGUID = '{53162CD7-EADA-4DA9-BEB2-E899CAFF3A63}';
  CLASS_ChilkatLog: TGUID = '{38F12EC7-0910-485F-8938-6BF2CA2B5C02}';
  IID_IChilkatMailMan: TGUID = '{7998B064-06E7-4960-ACEF-AAFF0A262487}';
  CLASS_ChilkatMailMan: TGUID = '{10F9AFBB-94CF-4556-A066-DD457D3254CF}';
  CLASS_Mailboxes: TGUID = '{2F332CE0-6FCA-41B7-80BB-07D9D2AC86C7}';
  CLASS_messageSet: TGUID = '{2B5DD740-5E3F-420C-9526-976596516B4C}';
  IID_IChilkatMht: TGUID = '{F1089DE8-926E-4BB9-ADAF-9E312F1BBD78}';
  CLASS_ChilkatMht: TGUID = '{188354F0-DC78-49C2-8390-5FCA2D6B3876}';
  IID_IChilkatMime: TGUID = '{45484EC9-E196-492F-8C1F-6D311F89036E}';
  CLASS_ChilkatMime: TGUID = '{13D60A54-46AE-4B1A-86F3-652A79EA88C6}';
  IID_IChilkatNtlm: TGUID = '{B7C0253A-251F-4BC7-98D1-31A045DCE65D}';
  CLASS_ChilkatNtlm: TGUID = '{47A6DFB7-4A42-434A-B794-59F6FB26563B}';
  IID_IChilkatOAuth1: TGUID = '{47C1D4CA-692B-46D4-A127-5691075D0F6A}';
  CLASS_ChilkatOAuth1: TGUID = '{E59035A9-E94D-47E8-92BF-59A4EB1AAC83}';
  IID_IChilkatOAuth2: TGUID = '{DD2EABF5-8988-4A8E-908C-AD7FFA38AE59}';
  CLASS_ChilkatOAuth2: TGUID = '{CC3B92E4-C58C-40FE-A271-E407A7775848}';
  IID_IChilkatPdf: TGUID = '{451414D2-10F9-47D9-8078-0D10C55B4D26}';
  CLASS_ChilkatPdf: TGUID = '{D8706DCB-91E3-409C-AAEF-082CE6F9B905}';
  CLASS_ChilkatPem: TGUID = '{0D35E491-3CD9-470D-9373-D1B8BFC7A298}';
  CLASS_ChilkatPfx: TGUID = '{4A512F1D-8554-4EE4-A0C1-68AC4C2C517E}';
  IID_IChilkatPkcs11: TGUID = '{9AA01786-63E0-45E4-8676-24B49937318E}';
  CLASS_ChilkatPkcs11: TGUID = '{F27B0378-FAE6-4A75-A018-697CFB5B9864}';
  CLASS_privateKey: TGUID = '{DFFB3371-78AA-45C5-B8A2-32BB1DD5C846}';
  CLASS_ChilkatPrng: TGUID = '{78953289-3055-4D28-880A-AA9B61BAD3BD}';
  CLASS_publicKey: TGUID = '{3EDACCBC-87DE-45C5-8885-94B6820BE11A}';
  IID_IChilkatRest: TGUID = '{D985C806-44A2-4BBD-9FC4-EDD1CD82F03E}';
  CLASS_ChilkatRest: TGUID = '{5BE34693-974D-41B8-931C-73506CDEE2BE}';
  IID_IChilkatUrl: TGUID = '{26823E1F-8672-4404-955F-87A5A6E3D80E}';
  IID_IChilkatRsa: TGUID = '{C931B7DB-71FB-45CE-BA70-36BEF6CEAF1E}';
  CLASS_ChilkatRsa: TGUID = '{28309D42-1299-4797-AED4-64FD33B47923}';
  IID_IChilkatRss: TGUID = '{270A27B7-1D62-490D-82E4-A35269722E23}';
  CLASS_ChilkatRss: TGUID = '{CC55FCB9-0500-45C2-8FED-CCB7D1A54A24}';
  IID_IChilkatSCard: TGUID = '{8AB7C0CF-D2E0-4136-AD0D-8BEFA9E29F4D}';
  CLASS_ChilkatSCard: TGUID = '{498AFA88-75B4-4860-AFCC-9FE560444B88}';
  IID_IChilkatSFtp: TGUID = '{2701FB1F-7865-4CD0-8E1B-2BB97F701946}';
  CLASS_ChilkatSFtp: TGUID = '{345A5644-4F8E-4BCC-8E65-389B3C9D52B6}';
  IID_IChilkatSFtpDir: TGUID = '{38C0D3A8-6FB8-42B1-BDC0-077177D72323}';
  IID_IChilkatSFtpFile: TGUID = '{62E25622-219C-4569-97FA-89594674076A}';
  CLASS_ChilkatSFtpDir: TGUID = '{E385A6A7-3557-47F5-9763-252278262C41}';
  CLASS_ChilkatSFtpFile: TGUID = '{7D106007-79F8-4D80-9CB7-B6CC4000F0B1}';
  IID_IChilkatScMinidriver: TGUID = '{472C650D-C892-415C-AA6F-B0B82DEEBCFF}';
  CLASS_ChilkatScMinidriver: TGUID = '{DF989EA3-0F71-4201-87BE-4EAC008F4340}';
  IID_IChilkatScp: TGUID = '{416E33A0-BD55-4CD8-936B-7EEAF8850D0F}';
  CLASS_ChilkatScp: TGUID = '{73E12250-549F-4799-9D6A-0F23C279BD6E}';
  CLASS_ChilkatSecureString: TGUID = '{5930D6DE-C26E-4543-B971-ED01FD1C7472}';
  IID_IChilkatServerSentEvent: TGUID = '{E1DCA282-3782-4320-AEBE-B739755E6746}';
  CLASS_ChilkatServerSentEvent: TGUID = '{439AD464-8F0D-46EC-8D98-A32DE09D8C5B}';
  CLASS_ChilkatSocket: TGUID = '{C3FC6EA1-3982-45AA-8CB8-B3BFC9DFDDC7}';
  IID_IChilkatSpider: TGUID = '{CB3E07ED-EBD4-4CEA-949F-53EDE8806F8F}';
  CLASS_ChilkatSpider: TGUID = '{58BD963E-12A4-427E-9500-3A4FCEB545B2}';
  CLASS_ChilkatSsh: TGUID = '{D67AF44C-0AA8-424A-AF73-2070B4C11781}';
  CLASS_ChilkatSshKey: TGUID = '{06B36116-235B-4AB9-987D-3B4C7E689247}';
  IID_IChilkatSshTunnel: TGUID = '{B777D3CD-07A8-4E22-9AB2-EC62B7160ABF}';
  CLASS_ChilkatSshTunnel: TGUID = '{D01DB5A3-B9B7-4837-9874-FBA5BA171976}';
  CLASS_ChilkatStream: TGUID = '{FCC90B64-42F9-47A7-84D3-0DD681A6CA07}';
  CLASS_CkStringArray: TGUID = '{60646F46-D0EA-4BDA-945A-57BD988F1C37}';
  CLASS_ChilkatStringBuilder: TGUID = '{92B5CBD6-68B3-4C17-A717-696CC27D893E}';
  CLASS_ChilkatStringTable: TGUID = '{4E17ECD2-EA48-4BB4-8F30-94D74C577034}';
  IID_IChilkatTar: TGUID = '{6D9CB79B-EDFF-4B36-8A2B-E24A0D94838C}';
  CLASS_ChilkatTar: TGUID = '{E54CDB98-DD19-4155-841C-6DBA6618D5D8}';
  CLASS_ChilkatTask: TGUID = '{EFA96FEC-9371-4C3B-AB6D-DA9CDEF3CC41}';
  IID_IChilkatTaskChain: TGUID = '{CCAD6703-0549-4DDE-8127-97D073A8CCF9}';
  CLASS_ChilkatTaskChain: TGUID = '{39FFE2A9-BBF3-48ED-AB97-11F202615954}';
  CLASS_ChilkatTrustedRoots: TGUID = '{64A034EA-ACEB-4D48-8A00-2E7662A41154}';
  IID_IUnixCompress: TGUID = '{68CB048E-A120-4A99-B9DC-650775764421}';
  CLASS_UnixCompress: TGUID = '{F8295E9E-9E5B-486E-AA93-33E5726C4EE6}';
  IID_IChilkatUpload: TGUID = '{D72E7F04-7817-4BA7-8FC2-6C890E94BC86}';
  CLASS_ChilkatUpload: TGUID = '{AC217674-DB08-4F7E-AB20-9F5F1026C464}';
  CLASS_ChilkatUrl: TGUID = '{C604DBFD-657D-438D-8399-4B990CB1819C}';
  IID_IChilkatWebSocket: TGUID = '{01A80A1C-F3CB-4837-B577-2C67E275D441}';
  CLASS_ChilkatWebSocket: TGUID = '{5968F990-ECED-40C1-B461-C0C8540BF607}';
  IID_IChilkatXml: TGUID = '{2077C1B5-FBD0-40DF-B7AA-E07CBA589CB0}';
  CLASS_ChilkatXml: TGUID = '{501B9600-382D-454D-AA0A-3BC22A87C485}';
  CLASS_ChilkatXmlCertVault: TGUID = '{DA61F111-C1C4-432F-819D-6EDA9DEFEA67}';
  IID_IChilkatXmlDSig: TGUID = '{A488AA74-6A93-440C-B18D-26751B20625C}';
  CLASS_ChilkatXmlDSig: TGUID = '{3A0FA677-D32D-4A7D-A809-9E39F6CB7E88}';
  IID_IChilkatXmlDSigGen: TGUID = '{07530635-48E4-4E43-B3C5-7BF9FF08C2C5}';
  CLASS_ChilkatXmlDSigGen: TGUID = '{88958592-6B2D-4CF1-9652-B9803F41990A}';
  IID_IChilkatXmp: TGUID = '{17F00BC0-F47D-4AC2-9C20-16D73BA9D42D}';
  CLASS_ChilkatXmp: TGUID = '{96B3C4B8-9F07-469D-ADAA-E1D14BF50341}';
  IID_IChilkatZip: TGUID = '{EFE9ADE4-0851-49E2-BC0B-AB26E0353B1B}';
  CLASS_ChilkatZip: TGUID = '{C95EAE19-C7B8-4297-A6C6-B4B973A8B867}';
  IID_IChilkatZipEntry: TGUID = '{C68497C9-2779-48A4-9062-6DAD6EA5E1C6}';
  IID_IChilkatZipCrc: TGUID = '{8C819F76-4B5C-4E9C-A49A-D6BF2190C09C}';
  CLASS_ChilkatZipCrc: TGUID = '{78AB3AA4-28A5-449B-959E-FFCC2602854D}';
  CLASS_ChilkatZipEntry: TGUID = '{69E3A666-7F49-4B53-A77F-A8D14217E442}';
type

// *********************************************************************//
// Forward declaration of types defined in TypeLibrary                    
// *********************************************************************//
  _IChilkatEvents = dispinterface;
  IChilkatTask = interface;
  IChilkatTaskDisp = dispinterface;
  _IChilkatZipEvents = dispinterface;
  _IChilkatTarEvents = dispinterface;
  _IChilkatSFtpEvents = dispinterface;
  _IChilkatMailManEvents = dispinterface;
  _IChilkatHttpEvents = dispinterface;
  _IChilkatFtp2Events = dispinterface;
  IChilkatAsn = interface;
  IChilkatAsnDisp = dispinterface;
  IChilkatBinData = interface;
  IChilkatBinDataDisp = dispinterface;
  IChilkatStringBuilder = interface;
  IChilkatStringBuilderDisp = dispinterface;
  IChilkatAtom = interface;
  IChilkatAtomDisp = dispinterface;
  ICkDateTime = interface;
  ICkDateTimeDisp = dispinterface;
  IDtObj = interface;
  IDtObjDisp = dispinterface;
  IChilkatAuthAws = interface;
  IChilkatAuthAwsDisp = dispinterface;
  IChilkatAuthAzureAD = interface;
  IChilkatAuthAzureADDisp = dispinterface;
  IChilkatSocket = interface;
  IChilkatSocketDisp = dispinterface;
  IChilkatCert = interface;
  IChilkatCertDisp = dispinterface;
  IPrivateKey = interface;
  IPrivateKeyDisp = dispinterface;
  IPublicKey = interface;
  IPublicKeyDisp = dispinterface;
  IChilkatXmlCertVault = interface;
  IChilkatXmlCertVaultDisp = dispinterface;
  IChilkatPfx = interface;
  IChilkatPfxDisp = dispinterface;
  IChilkatCertChain = interface;
  IChilkatCertChainDisp = dispinterface;
  IChilkatTrustedRoots = interface;
  IChilkatTrustedRootsDisp = dispinterface;
  IChilkatJavaKeyStore = interface;
  IChilkatJavaKeyStoreDisp = dispinterface;
  IChilkatPem = interface;
  IChilkatPemDisp = dispinterface;
  IChilkatJsonObject = interface;
  IChilkatJsonObjectDisp = dispinterface;
  IChilkatJsonArray = interface;
  IChilkatJsonArrayDisp = dispinterface;
  IChilkatHashtable = interface;
  IChilkatHashtableDisp = dispinterface;
  IChilkatStringTable = interface;
  IChilkatStringTableDisp = dispinterface;
  IChilkatSshKey = interface;
  IChilkatSshKeyDisp = dispinterface;
  IChilkatSsh = interface;
  IChilkatSshDisp = dispinterface;
  ICkStringArray = interface;
  ICkStringArrayDisp = dispinterface;
  IChilkatSecureString = interface;
  IChilkatSecureStringDisp = dispinterface;
  IChilkatAuthAzureSAS = interface;
  IChilkatAuthAzureSASDisp = dispinterface;
  IChilkatAuthAzureStorage = interface;
  IChilkatAuthAzureStorageDisp = dispinterface;
  IChilkatAuthGoogle = interface;
  IChilkatAuthGoogleDisp = dispinterface;
  IChilkatAuthUtil = interface;
  IChilkatAuthUtilDisp = dispinterface;
  IChilkatBounce = interface;
  IChilkatBounceDisp = dispinterface;
  IChilkatEmail = interface;
  IChilkatEmailDisp = dispinterface;
  IChilkatCsp = interface;
  IChilkatCspDisp = dispinterface;
  IChilkatBz2 = interface;
  IChilkatBz2Disp = dispinterface;
  IChilkatCache = interface;
  IChilkatCacheDisp = dispinterface;
  IChilkatCertStore = interface;
  IChilkatCertStoreDisp = dispinterface;
  IChilkatCgi = interface;
  IChilkatCgiDisp = dispinterface;
  IChilkatCharset = interface;
  IChilkatCharsetDisp = dispinterface;
  ICkString = interface;
  ICkStringDisp = dispinterface;
  IChilkatCompression = interface;
  IChilkatCompressionDisp = dispinterface;
  IChilkatStream = interface;
  IChilkatStreamDisp = dispinterface;
  IChilkatCreateCS = interface;
  IChilkatCreateCSDisp = dispinterface;
  IChilkatCrypt2 = interface;
  IChilkatCrypt2Disp = dispinterface;
  IChilkatHttp = interface;
  IChilkatHttpDisp = dispinterface;
  IChilkatHttpResponse = interface;
  IChilkatHttpResponseDisp = dispinterface;
  IChilkatHttpRequest = interface;
  IChilkatHttpRequestDisp = dispinterface;
  IChilkatCsr = interface;
  IChilkatCsrDisp = dispinterface;
  IChilkatCsv = interface;
  IChilkatCsvDisp = dispinterface;
  IChilkatDh = interface;
  IChilkatDhDisp = dispinterface;
  ICkDirTree = interface;
  ICkDirTreeDisp = dispinterface;
  IChilkatDkim = interface;
  IChilkatDkimDisp = dispinterface;
  IChilkatDsa = interface;
  IChilkatDsaDisp = dispinterface;
  IChilkatEcc = interface;
  IChilkatEccDisp = dispinterface;
  IChilkatPrng = interface;
  IChilkatPrngDisp = dispinterface;
  IChilkatEdDSA = interface;
  IChilkatEdDSADisp = dispinterface;
  IChilkatEmailBundle = interface;
  IChilkatEmailBundleDisp = dispinterface;
  ICkFileAccess = interface;
  ICkFileAccessDisp = dispinterface;
  IChilkatFtp2 = interface;
  IChilkatFtp2Disp = dispinterface;
  IChilkatGlobal = interface;
  IChilkatGlobalDisp = dispinterface;
  IChilkatGzip = interface;
  IChilkatGzipDisp = dispinterface;
  IHtmlToText = interface;
  IHtmlToTextDisp = dispinterface;
  IHtmlToXml = interface;
  IHtmlToXmlDisp = dispinterface;
  IChilkatImap = interface;
  IChilkatImapDisp = dispinterface;
  IMessageSet = interface;
  IMessageSetDisp = dispinterface;
  IMailboxes = interface;
  IMailboxesDisp = dispinterface;
  IChilkatJwe = interface;
  IChilkatJweDisp = dispinterface;
  IChilkatJws = interface;
  IChilkatJwsDisp = dispinterface;
  IChilkatJwt = interface;
  IChilkatJwtDisp = dispinterface;
  IKeyContainer = interface;
  IKeyContainerDisp = dispinterface;
  IChilkatLog = interface;
  IChilkatLogDisp = dispinterface;
  IChilkatMailMan = interface;
  IChilkatMailManDisp = dispinterface;
  IChilkatMht = interface;
  IChilkatMhtDisp = dispinterface;
  IChilkatMime = interface;
  IChilkatMimeDisp = dispinterface;
  IChilkatNtlm = interface;
  IChilkatNtlmDisp = dispinterface;
  IChilkatOAuth1 = interface;
  IChilkatOAuth1Disp = dispinterface;
  IChilkatOAuth2 = interface;
  IChilkatOAuth2Disp = dispinterface;
  IChilkatPdf = interface;
  IChilkatPdfDisp = dispinterface;
  IChilkatPkcs11 = interface;
  IChilkatPkcs11Disp = dispinterface;
  IChilkatRest = interface;
  IChilkatRestDisp = dispinterface;
  IChilkatUrl = interface;
  IChilkatUrlDisp = dispinterface;
  IChilkatRsa = interface;
  IChilkatRsaDisp = dispinterface;
  IChilkatRss = interface;
  IChilkatRssDisp = dispinterface;
  IChilkatSCard = interface;
  IChilkatSCardDisp = dispinterface;
  IChilkatSFtp = interface;
  IChilkatSFtpDisp = dispinterface;
  IChilkatSFtpDir = interface;
  IChilkatSFtpDirDisp = dispinterface;
  IChilkatSFtpFile = interface;
  IChilkatSFtpFileDisp = dispinterface;
  IChilkatScMinidriver = interface;
  IChilkatScMinidriverDisp = dispinterface;
  IChilkatScp = interface;
  IChilkatScpDisp = dispinterface;
  IChilkatServerSentEvent = interface;
  IChilkatServerSentEventDisp = dispinterface;
  IChilkatSpider = interface;
  IChilkatSpiderDisp = dispinterface;
  IChilkatSshTunnel = interface;
  IChilkatSshTunnelDisp = dispinterface;
  IChilkatTar = interface;
  IChilkatTarDisp = dispinterface;
  IChilkatTaskChain = interface;
  IChilkatTaskChainDisp = dispinterface;
  IUnixCompress = interface;
  IUnixCompressDisp = dispinterface;
  IChilkatUpload = interface;
  IChilkatUploadDisp = dispinterface;
  IChilkatWebSocket = interface;
  IChilkatWebSocketDisp = dispinterface;
  IChilkatXml = interface;
  IChilkatXmlDisp = dispinterface;
  IChilkatXmlDSig = interface;
  IChilkatXmlDSigDisp = dispinterface;
  IChilkatXmlDSigGen = interface;
  IChilkatXmlDSigGenDisp = dispinterface;
  IChilkatXmp = interface;
  IChilkatXmpDisp = dispinterface;
  IChilkatZip = interface;
  IChilkatZipDisp = dispinterface;
  IChilkatZipEntry = interface;
  IChilkatZipEntryDisp = dispinterface;
  IChilkatZipCrc = interface;
  IChilkatZipCrcDisp = dispinterface;

// *********************************************************************//
// Declaration of CoClasses defined in Type Library                       
// (NOTE: Here we map each CoClass to its Default Interface)              
// *********************************************************************//
  ChilkatAsn = IChilkatAsn;
  ChilkatAtom = IChilkatAtom;
  ChilkatAuthAws = IChilkatAuthAws;
  ChilkatAuthAzureAD = IChilkatAuthAzureAD;
  ChilkatAuthAzureSAS = IChilkatAuthAzureSAS;
  ChilkatAuthAzureStorage = IChilkatAuthAzureStorage;
  ChilkatAuthGoogle = IChilkatAuthGoogle;
  ChilkatAuthUtil = IChilkatAuthUtil;
  ChilkatBinData = IChilkatBinData;
  ChilkatBounce = IChilkatBounce;
  ChilkatBz2 = IChilkatBz2;
  ChilkatCache = IChilkatCache;
  ChilkatCert = IChilkatCert;
  ChilkatCertChain = IChilkatCertChain;
  ChilkatCertStore = IChilkatCertStore;
  ChilkatCgi = IChilkatCgi;
  ChilkatCharset = IChilkatCharset;
  CkDateTime = ICkDateTime;
  CkString = ICkString;
  ChilkatCompression = IChilkatCompression;
  ChilkatCreateCS = IChilkatCreateCS;
  ChilkatCrypt2 = IChilkatCrypt2;
  ChilkatCsp = IChilkatCsp;
  ChilkatCsr = IChilkatCsr;
  ChilkatCsv = IChilkatCsv;
  ChilkatDh = IChilkatDh;
  CkDirTree = ICkDirTree;
  ChilkatDkim = IChilkatDkim;
  ChilkatDsa = IChilkatDsa;
  DtObj = IDtObj;
  ChilkatEcc = IChilkatEcc;
  ChilkatEdDSA = IChilkatEdDSA;
  ChilkatEmail = IChilkatEmail;
  ChilkatEmailBundle = IChilkatEmailBundle;
  CkFileAccess = ICkFileAccess;
  ChilkatFtp2 = IChilkatFtp2;
  ChilkatGlobal = IChilkatGlobal;
  ChilkatGzip = IChilkatGzip;
  ChilkatHashtable = IChilkatHashtable;
  HtmlToText = IHtmlToText;
  HtmlToXml = IHtmlToXml;
  ChilkatHttp = IChilkatHttp;
  ChilkatHttpRequest = IChilkatHttpRequest;
  ChilkatHttpResponse = IChilkatHttpResponse;
  ChilkatImap = IChilkatImap;
  ChilkatJavaKeyStore = IChilkatJavaKeyStore;
  ChilkatJsonArray = IChilkatJsonArray;
  ChilkatJsonObject = IChilkatJsonObject;
  ChilkatJwe = IChilkatJwe;
  ChilkatJws = IChilkatJws;
  ChilkatJwt = IChilkatJwt;
  KeyContainer = IKeyContainer;
  ChilkatLog = IChilkatLog;
  ChilkatMailMan = IChilkatMailMan;
  Mailboxes = IMailboxes;
  messageSet = IMessageSet;
  ChilkatMht = IChilkatMht;
  ChilkatMime = IChilkatMime;
  ChilkatNtlm = IChilkatNtlm;
  ChilkatOAuth1 = IChilkatOAuth1;
  ChilkatOAuth2 = IChilkatOAuth2;
  ChilkatPdf = IChilkatPdf;
  ChilkatPem = IChilkatPem;
  ChilkatPfx = IChilkatPfx;
  ChilkatPkcs11 = IChilkatPkcs11;
  privateKey = IPrivateKey;
  ChilkatPrng = IChilkatPrng;
  publicKey = IPublicKey;
  ChilkatRest = IChilkatRest;
  ChilkatRsa = IChilkatRsa;
  ChilkatRss = IChilkatRss;
  ChilkatSCard = IChilkatSCard;
  ChilkatSFtp = IChilkatSFtp;
  ChilkatSFtpDir = IChilkatSFtpDir;
  ChilkatSFtpFile = IChilkatSFtpFile;
  ChilkatScMinidriver = IChilkatScMinidriver;
  ChilkatScp = IChilkatScp;
  ChilkatSecureString = IChilkatSecureString;
  ChilkatServerSentEvent = IChilkatServerSentEvent;
  ChilkatSocket = IChilkatSocket;
  ChilkatSpider = IChilkatSpider;
  ChilkatSsh = IChilkatSsh;
  ChilkatSshKey = IChilkatSshKey;
  ChilkatSshTunnel = IChilkatSshTunnel;
  ChilkatStream = IChilkatStream;
  CkStringArray = ICkStringArray;
  ChilkatStringBuilder = IChilkatStringBuilder;
  ChilkatStringTable = IChilkatStringTable;
  ChilkatTar = IChilkatTar;
  ChilkatTask = IChilkatTask;
  ChilkatTaskChain = IChilkatTaskChain;
  ChilkatTrustedRoots = IChilkatTrustedRoots;
  UnixCompress = IUnixCompress;
  ChilkatUpload = IChilkatUpload;
  ChilkatUrl = IChilkatUrl;
  ChilkatWebSocket = IChilkatWebSocket;
  ChilkatXml = IChilkatXml;
  ChilkatXmlCertVault = IChilkatXmlCertVault;
  ChilkatXmlDSig = IChilkatXmlDSig;
  ChilkatXmlDSigGen = IChilkatXmlDSigGen;
  ChilkatXmp = IChilkatXmp;
  ChilkatZip = IChilkatZip;
  ChilkatZipCrc = IChilkatZipCrc;
  ChilkatZipEntry = IChilkatZipEntry;


// *********************************************************************//
// DispIntf:  _IChilkatEvents
// Flags:     (4096) Dispatchable
// GUID:      {91D24DB1-0F9E-4E77-B629-70BEE2F61D36}
// *********************************************************************//
  _IChilkatEvents = dispinterface
    ['{91D24DB1-0F9E-4E77-B629-70BEE2F61D36}']
    function AbortCheck(out abort: Integer): HResult; dispid 1;
    function PercentDone(percent: Integer; out abort: Integer): HResult; dispid 2;
    function ProgressInfo(const name: WideString; const value: WideString): HResult; dispid 3;
    function TaskCompleted(const task: IChilkatTask): HResult; dispid 20;
    function TextData(const data: WideString): HResult; dispid 21;
    function BinaryData(data: OleVariant): HResult; dispid 22;
  end;

// *********************************************************************//
// Interface: IChilkatTask
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F312552A-2E77-4866-95CA-A3699D7D6ED2}
// *********************************************************************//
  IChilkatTask = interface(IDispatch)
    ['{F312552A-2E77-4866-95CA-A3699D7D6ED2}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_LastMethodSuccess: Integer; safecall;
    procedure Set_LastMethodSuccess(pVal: Integer); safecall;
    function Get_LastStringResult: WideString; safecall;
    function Get_LastBinaryResult: OleVariant; safecall;
    function Get_LastStringResultLen: Integer; safecall;
    function Run: Integer; safecall;
    function RunSynchronously: Integer; safecall;
    function Get_ResultType: WideString; safecall;
    function Get_ResultErrorText: WideString; safecall;
    function Get_Status: WideString; safecall;
    function GetResultString: WideString; safecall;
    function GetResultInt: Integer; safecall;
    function GetResultBool: Integer; safecall;
    function GetResultBytes: OleVariant; safecall;
    function CopyResultBytes: OleVariant; safecall;
    function Wait(maxWaitMs: Integer): Integer; safecall;
    function Get_PercentDone: Integer; safecall;
    function Get_Inert: Integer; safecall;
    function Get_Live: Integer; safecall;
    function Get_Finished: Integer; safecall;
    function Cancel: Integer; safecall;
    procedure SleepMs(numMs: Integer); safecall;
    function Get_ProgressLogSize: Integer; safecall;
    function Get_KeepProgressLog: Integer; safecall;
    procedure Set_KeepProgressLog(pVal: Integer); safecall;
    procedure ClearProgressLog; safecall;
    function ProgressInfoName(index: Integer): WideString; safecall;
    function ProgressInfoValue(index: Integer): WideString; safecall;
    procedure RemoveProgressInfo(index: Integer); safecall;
    function Get_StatusInt: Integer; safecall;
    function Get_TaskSuccess: Integer; safecall;
    function Get_HeartbeatMs: Integer; safecall;
    procedure Set_HeartbeatMs(pVal: Integer); safecall;
    function Get_TaskId: Integer; safecall;
    function Get_UserData: WideString; safecall;
    procedure Set_UserData(const pVal: WideString); safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property LastMethodSuccess: Integer read Get_LastMethodSuccess write Set_LastMethodSuccess;
    property LastStringResult: WideString read Get_LastStringResult;
    property LastBinaryResult: OleVariant read Get_LastBinaryResult;
    property LastStringResultLen: Integer read Get_LastStringResultLen;
    property ResultType: WideString read Get_ResultType;
    property ResultErrorText: WideString read Get_ResultErrorText;
    property Status: WideString read Get_Status;
    property PercentDone: Integer read Get_PercentDone;
    property Inert: Integer read Get_Inert;
    property Live: Integer read Get_Live;
    property Finished: Integer read Get_Finished;
    property ProgressLogSize: Integer read Get_ProgressLogSize;
    property KeepProgressLog: Integer read Get_KeepProgressLog write Set_KeepProgressLog;
    property StatusInt: Integer read Get_StatusInt;
    property TaskSuccess: Integer read Get_TaskSuccess;
    property HeartbeatMs: Integer read Get_HeartbeatMs write Set_HeartbeatMs;
    property TaskId: Integer read Get_TaskId;
    property UserData: WideString read Get_UserData write Set_UserData;
  end;

// *********************************************************************//
// DispIntf:  IChilkatTaskDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F312552A-2E77-4866-95CA-A3699D7D6ED2}
// *********************************************************************//
  IChilkatTaskDisp = dispinterface
    ['{F312552A-2E77-4866-95CA-A3699D7D6ED2}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property LastMethodSuccess: Integer dispid 9;
    property LastStringResult: WideString readonly dispid 10;
    property LastBinaryResult: OleVariant readonly dispid 11;
    property LastStringResultLen: Integer readonly dispid 12;
    function Run: Integer; dispid 100;
    function RunSynchronously: Integer; dispid 101;
    property ResultType: WideString readonly dispid 102;
    property ResultErrorText: WideString readonly dispid 103;
    property Status: WideString readonly dispid 104;
    function GetResultString: WideString; dispid 105;
    function GetResultInt: Integer; dispid 106;
    function GetResultBool: Integer; dispid 107;
    function GetResultBytes: OleVariant; dispid 108;
    function CopyResultBytes: OleVariant; dispid 109;
    function Wait(maxWaitMs: Integer): Integer; dispid 110;
    property PercentDone: Integer readonly dispid 111;
    property Inert: Integer readonly dispid 112;
    property Live: Integer readonly dispid 113;
    property Finished: Integer readonly dispid 114;
    function Cancel: Integer; dispid 115;
    procedure SleepMs(numMs: Integer); dispid 116;
    property ProgressLogSize: Integer readonly dispid 117;
    property KeepProgressLog: Integer dispid 118;
    procedure ClearProgressLog; dispid 119;
    function ProgressInfoName(index: Integer): WideString; dispid 120;
    function ProgressInfoValue(index: Integer): WideString; dispid 121;
    procedure RemoveProgressInfo(index: Integer); dispid 122;
    property StatusInt: Integer readonly dispid 123;
    property TaskSuccess: Integer readonly dispid 124;
    property HeartbeatMs: Integer dispid 125;
    property TaskId: Integer readonly dispid 126;
    property UserData: WideString dispid 127;
  end;

// *********************************************************************//
// DispIntf:  _IChilkatZipEvents
// Flags:     (4096) Dispatchable
// GUID:      {F0C2D9C1-0B80-432D-A60C-0957A5A03AAE}
// *********************************************************************//
  _IChilkatZipEvents = dispinterface
    ['{F0C2D9C1-0B80-432D-A60C-0957A5A03AAE}']
    function AbortCheck(out abort: Integer): HResult; dispid 1;
    function PercentDone(percent: Integer; out abort: Integer): HResult; dispid 2;
    function ProgressInfo(const name: WideString; const value: WideString): HResult; dispid 3;
    function FileUnzipped(const filename: WideString; compressedSize: Integer; 
                          uncompressedSize: Integer; out abort: Integer): HResult; dispid 4;
    function ToBeAdded(const filename: WideString; fileSize: Integer; out exclude: Integer): HResult; dispid 5;
    function FileAdded(const filename: WideString; fileSize: Integer; out abort: Integer): HResult; dispid 6;
    function UnzipBegin: HResult; dispid 7;
    function UnzipEnd: HResult; dispid 8;
    function WriteZipBegin: HResult; dispid 9;
    function WriteZipEnd: HResult; dispid 10;
    function ToBeZipped(const filename: WideString; fileSize: Integer; out exclude: Integer): HResult; dispid 11;
    function FileZipped(const filename: WideString; fileSize: Integer; compressedSize: Integer; 
                        out abort: Integer): HResult; dispid 12;
    function ToBeUnzipped(const filename: WideString; compressedSize: Integer; 
                          uncompressedSize: Integer; out exclude: Integer): HResult; dispid 13;
    function AddFilesBegin: HResult; dispid 14;
    function SkippedForUnzip(const filename: WideString; compressedSize: Integer; 
                             uncompressedSize: Integer): HResult; dispid 15;
    function AddFilesEnd: HResult; dispid 16;
    function DirToBeAdded(const filename: WideString; out exclude: Integer): HResult; dispid 17;
    function TaskCompleted(const task: IChilkatTask): HResult; dispid 20;
    function TextData(const data: WideString): HResult; dispid 21;
    function BinaryData(data: OleVariant): HResult; dispid 22;
  end;

// *********************************************************************//
// DispIntf:  _IChilkatTarEvents
// Flags:     (4096) Dispatchable
// GUID:      {1BCCF756-2714-431F-A92A-30B7DFFF3A56}
// *********************************************************************//
  _IChilkatTarEvents = dispinterface
    ['{1BCCF756-2714-431F-A92A-30B7DFFF3A56}']
    function AbortCheck(out abort: Integer): HResult; dispid 1;
    function PercentDone(percent: Integer; out abort: Integer): HResult; dispid 2;
    function ProgressInfo(const name: WideString; const value: WideString): HResult; dispid 3;
    function NextTarFile(const path: WideString; fileSize: Integer; isDirectory: Integer; 
                         out skip: Integer): HResult; dispid 4;
    function TaskCompleted(const task: IChilkatTask): HResult; dispid 20;
    function TextData(const data: WideString): HResult; dispid 21;
    function BinaryData(data: OleVariant): HResult; dispid 22;
  end;

// *********************************************************************//
// DispIntf:  _IChilkatSFtpEvents
// Flags:     (4096) Dispatchable
// GUID:      {97DAB705-84AB-4228-8EB7-2A3E657462F7}
// *********************************************************************//
  _IChilkatSFtpEvents = dispinterface
    ['{97DAB705-84AB-4228-8EB7-2A3E657462F7}']
    function AbortCheck(out abort: Integer): HResult; dispid 1;
    function PercentDone(percent: Integer; out abort: Integer): HResult; dispid 2;
    function ProgressInfo(const name: WideString; const value: WideString): HResult; dispid 3;
    function UploadRate(byteCount: Integer; bytesPerSec: Integer): HResult; dispid 4;
    function DownloadRate(byteCount: Integer; bytesPerSec: Integer): HResult; dispid 5;
    function TaskCompleted(const task: IChilkatTask): HResult; dispid 20;
    function TextData(const data: WideString): HResult; dispid 21;
    function BinaryData(data: OleVariant): HResult; dispid 22;
  end;

// *********************************************************************//
// DispIntf:  _IChilkatMailManEvents
// Flags:     (4096) Dispatchable
// GUID:      {3AB70566-E8D9-474F-A244-5DA0260892C1}
// *********************************************************************//
  _IChilkatMailManEvents = dispinterface
    ['{3AB70566-E8D9-474F-A244-5DA0260892C1}']
    function AbortCheck(out abort: Integer): HResult; dispid 1;
    function PercentDone(percent: Integer; out abort: Integer): HResult; dispid 2;
    function ProgressInfo(const name: WideString; const value: WideString): HResult; dispid 3;
    function EmailReceived(const subject: WideString; const fromAddr: WideString; 
                           const fromName: WideString; const returnPath: WideString; 
                           const dateStr: WideString; const uidl: WideString; sizeInBytes: Integer): HResult; dispid 4;
    function TaskCompleted(const task: IChilkatTask): HResult; dispid 20;
    function TextData(const data: WideString): HResult; dispid 21;
    function BinaryData(data: OleVariant): HResult; dispid 22;
  end;

// *********************************************************************//
// DispIntf:  _IChilkatHttpEvents
// Flags:     (4096) Dispatchable
// GUID:      {A02D931E-49CC-4D6F-85F5-2D74AB061990}
// *********************************************************************//
  _IChilkatHttpEvents = dispinterface
    ['{A02D931E-49CC-4D6F-85F5-2D74AB061990}']
    function AbortCheck(out abort: Integer): HResult; dispid 1;
    function PercentDone(percent: Integer; out abort: Integer): HResult; dispid 2;
    function ProgressInfo(const name: WideString; const value: WideString): HResult; dispid 3;
    function BeginReceive: HResult; dispid 4;
    function EndSend(success: Integer): HResult; dispid 5;
    function EndReceive(success: Integer): HResult; dispid 6;
    function HttpChunked: HResult; dispid 7;
    function HttpRedirect(const originalUrl: WideString; const newUrl: WideString; 
                          out abort: Integer): HResult; dispid 8;
    function BeginSend: HResult; dispid 9;
    function ReceiveRate(byteCount: Integer; bytesPerSec: Integer): HResult; dispid 10;
    function SendRate(byteCount: Integer; bytesPerSec: Integer): HResult; dispid 11;
    function TaskCompleted(const task: IChilkatTask): HResult; dispid 20;
    function TextData(const data: WideString): HResult; dispid 21;
    function BinaryData(data: OleVariant): HResult; dispid 22;
  end;

// *********************************************************************//
// DispIntf:  _IChilkatFtp2Events
// Flags:     (4096) Dispatchable
// GUID:      {D57DD27C-0065-41FA-ACB5-EBD8AB552A1E}
// *********************************************************************//
  _IChilkatFtp2Events = dispinterface
    ['{D57DD27C-0065-41FA-ACB5-EBD8AB552A1E}']
    function AbortCheck(out abort: Integer): HResult; dispid 1;
    function PercentDone(percent: Integer; out abort: Integer): HResult; dispid 2;
    function ProgressInfo(const name: WideString; const value: WideString): HResult; dispid 3;
    function BeginDownloadFile(const path: WideString; out skip: Integer): HResult; dispid 4;
    function EndDownloadFile(const path: WideString; numBytes: Integer): HResult; dispid 5;
    function VerifyDownloadDir(const path: WideString; out skip: Integer): HResult; dispid 6;
    function BeginUploadFile(const path: WideString; out skip: Integer): HResult; dispid 7;
    function EndUploadFile(const path: WideString; numBytes: Integer): HResult; dispid 8;
    function VerifyUploadDir(const path: WideString; out skip: Integer): HResult; dispid 9;
    function VerifyDeleteDir(const path: WideString; out skip: Integer): HResult; dispid 10;
    function VerifyDeleteFile(const path: WideString; out skip: Integer): HResult; dispid 11;
    function UploadRate(byteCount: Integer; bytesPerSec: Integer): HResult; dispid 12;
    function DownloadRate(byteCount: Integer; bytesPerSec: Integer): HResult; dispid 13;
    function TaskCompleted(const task: IChilkatTask): HResult; dispid 20;
    function TextData(const data: WideString): HResult; dispid 21;
    function BinaryData(data: OleVariant): HResult; dispid 22;
  end;

// *********************************************************************//
// Interface: IChilkatAsn
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {4A129764-F661-4DD9-B357-8F523B17FF94}
// *********************************************************************//
  IChilkatAsn = interface(IDispatch)
    ['{4A129764-F661-4DD9-B357-8F523B17FF94}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_LastMethodSuccess: Integer; safecall;
    procedure Set_LastMethodSuccess(pVal: Integer); safecall;
    function Get_LastStringResult: WideString; safecall;
    function Get_LastBinaryResult: OleVariant; safecall;
    function Get_LastStringResultLen: Integer; safecall;
    function AsnToXml: WideString; safecall;
    function LoadEncoded(const asnContent: WideString; const encoding: WideString): Integer; safecall;
    function LoadAsnXml(const xmlStr: WideString): Integer; safecall;
    function GetEncodedDer(const encoding: WideString): WideString; safecall;
    function GetBinaryDer: OleVariant; safecall;
    function LoadBinary(derBytes: OleVariant): Integer; safecall;
    function LoadBinaryFile(const path: WideString): Integer; safecall;
    function WriteBinaryDer(const path: WideString): Integer; safecall;
    function Get_NumSubItems: Integer; safecall;
    function Get_Tag: WideString; safecall;
    function Get_TagValue: Integer; safecall;
    function Get_Constructed: Integer; safecall;
    function Get_ContentStr: WideString; safecall;
    procedure Set_ContentStr(const pVal: WideString); safecall;
    function Get_BoolValue: Integer; safecall;
    procedure Set_BoolValue(pVal: Integer); safecall;
    function Get_IntValue: Integer; safecall;
    procedure Set_IntValue(pVal: Integer); safecall;
    function AppendNull: Integer; safecall;
    function AppendBool(value: Integer): Integer; safecall;
    function AppendInt(value: Integer): Integer; safecall;
    function AppendBigInt(const encodedBytes: WideString; const encoding: WideString): Integer; safecall;
    function AppendTime(const timeFormat: WideString; const dateTimeStr: WideString): Integer; safecall;
    function AppendString(const strType: WideString; const value: WideString): Integer; safecall;
    function AppendBits(const encodedBytes: WideString; const encoding: WideString): Integer; safecall;
    function AppendOctets(const encodedBytes: WideString; const encoding: WideString): Integer; safecall;
    function AppendOid(const oid: WideString): Integer; safecall;
    function AppendSequence: Integer; safecall;
    function AppendSet: Integer; safecall;
    function GetEncodedContent(const encoding: WideString): WideString; safecall;
    function SetEncodedContent(const encodedBytes: WideString; const encoding: WideString): Integer; safecall;
    function GetSubItem(index: Integer): IChilkatAsn; safecall;
    function GetLastSubItem: IChilkatAsn; safecall;
    function DeleteSubItem(index: Integer): Integer; safecall;
    function AppendContextConstructed(Tag: Integer): Integer; safecall;
    function AppendContextPrimitive(Tag: Integer; const encodedBytes: WideString; 
                                    const encoding: WideString): Integer; safecall;
    function AppendSequence2: Integer; safecall;
    function AppendSet2: Integer; safecall;
    function AppendSequenceR: IChilkatAsn; safecall;
    function AppendSetR: IChilkatAsn; safecall;
    function LoadBd(const bd: IChilkatBinData): Integer; safecall;
    function WriteBd(const bd: IChilkatBinData): Integer; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property LastMethodSuccess: Integer read Get_LastMethodSuccess write Set_LastMethodSuccess;
    property LastStringResult: WideString read Get_LastStringResult;
    property LastBinaryResult: OleVariant read Get_LastBinaryResult;
    property LastStringResultLen: Integer read Get_LastStringResultLen;
    property NumSubItems: Integer read Get_NumSubItems;
    property Tag: WideString read Get_Tag;
    property TagValue: Integer read Get_TagValue;
    property Constructed: Integer read Get_Constructed;
    property ContentStr: WideString read Get_ContentStr write Set_ContentStr;
    property BoolValue: Integer read Get_BoolValue write Set_BoolValue;
    property IntValue: Integer read Get_IntValue write Set_IntValue;
  end;

// *********************************************************************//
// DispIntf:  IChilkatAsnDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {4A129764-F661-4DD9-B357-8F523B17FF94}
// *********************************************************************//
  IChilkatAsnDisp = dispinterface
    ['{4A129764-F661-4DD9-B357-8F523B17FF94}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property LastMethodSuccess: Integer dispid 9;
    property LastStringResult: WideString readonly dispid 10;
    property LastBinaryResult: OleVariant readonly dispid 11;
    property LastStringResultLen: Integer readonly dispid 12;
    function AsnToXml: WideString; dispid 100;
    function LoadEncoded(const asnContent: WideString; const encoding: WideString): Integer; dispid 101;
    function LoadAsnXml(const xmlStr: WideString): Integer; dispid 102;
    function GetEncodedDer(const encoding: WideString): WideString; dispid 103;
    function GetBinaryDer: OleVariant; dispid 104;
    function LoadBinary(derBytes: OleVariant): Integer; dispid 105;
    function LoadBinaryFile(const path: WideString): Integer; dispid 107;
    function WriteBinaryDer(const path: WideString): Integer; dispid 108;
    property NumSubItems: Integer readonly dispid 109;
    property Tag: WideString readonly dispid 110;
    property TagValue: Integer readonly dispid 111;
    property Constructed: Integer readonly dispid 112;
    property ContentStr: WideString dispid 113;
    property BoolValue: Integer dispid 114;
    property IntValue: Integer dispid 115;
    function AppendNull: Integer; dispid 116;
    function AppendBool(value: Integer): Integer; dispid 117;
    function AppendInt(value: Integer): Integer; dispid 118;
    function AppendBigInt(const encodedBytes: WideString; const encoding: WideString): Integer; dispid 119;
    function AppendTime(const timeFormat: WideString; const dateTimeStr: WideString): Integer; dispid 120;
    function AppendString(const strType: WideString; const value: WideString): Integer; dispid 121;
    function AppendBits(const encodedBytes: WideString; const encoding: WideString): Integer; dispid 122;
    function AppendOctets(const encodedBytes: WideString; const encoding: WideString): Integer; dispid 123;
    function AppendOid(const oid: WideString): Integer; dispid 124;
    function AppendSequence: Integer; dispid 125;
    function AppendSet: Integer; dispid 126;
    function GetEncodedContent(const encoding: WideString): WideString; dispid 127;
    function SetEncodedContent(const encodedBytes: WideString; const encoding: WideString): Integer; dispid 128;
    function GetSubItem(index: Integer): IChilkatAsn; dispid 129;
    function GetLastSubItem: IChilkatAsn; dispid 130;
    function DeleteSubItem(index: Integer): Integer; dispid 131;
    function AppendContextConstructed(Tag: Integer): Integer; dispid 132;
    function AppendContextPrimitive(Tag: Integer; const encodedBytes: WideString; 
                                    const encoding: WideString): Integer; dispid 133;
    function AppendSequence2: Integer; dispid 134;
    function AppendSet2: Integer; dispid 135;
    function AppendSequenceR: IChilkatAsn; dispid 136;
    function AppendSetR: IChilkatAsn; dispid 137;
    function LoadBd(const bd: IChilkatBinData): Integer; dispid 138;
    function WriteBd(const bd: IChilkatBinData): Integer; dispid 139;
  end;

// *********************************************************************//
// Interface: IChilkatBinData
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {DDD8463D-2F40-43F8-8C05-F9090816D65D}
// *********************************************************************//
  IChilkatBinData = interface(IDispatch)
    ['{DDD8463D-2F40-43F8-8C05-F9090816D65D}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastMethodSuccess: Integer; safecall;
    procedure Set_LastMethodSuccess(pVal: Integer); safecall;
    function Get_LastStringResult: WideString; safecall;
    function Get_LastBinaryResult: OleVariant; safecall;
    function Get_LastStringResultLen: Integer; safecall;
    function LoadBinary(data: OleVariant): Integer; safecall;
    function LoadEncoded(const encData: WideString; const encoding: WideString): Integer; safecall;
    function GetBinary: OleVariant; safecall;
    function GetEncoded(const encoding: WideString): WideString; safecall;
    function AppendBinary(data: OleVariant): Integer; safecall;
    function AppendEncoded(const encData: WideString; const encoding: WideString): Integer; safecall;
    function Clear: Integer; safecall;
    function Get_numBytes: Integer; safecall;
    function LoadFile(const path: WideString): Integer; safecall;
    function GetBinaryChunk(offset: Integer; numBytes: Integer): OleVariant; safecall;
    function GetEncodedChunk(offset: Integer; numBytes: Integer; const encoding: WideString): WideString; safecall;
    function RemoveChunk(offset: Integer; numBytes: Integer): Integer; safecall;
    function WriteFile(const path: WideString): Integer; safecall;
    function GetEncodedSb(const encoding: WideString; const sb: IChilkatStringBuilder): Integer; safecall;
    function AppendBd(const binData: IChilkatBinData): Integer; safecall;
    function AppendString(const str: WideString; const charset: WideString): Integer; safecall;
    function AppendSb(const sb: IChilkatStringBuilder; const charset: WideString): Integer; safecall;
    function AppendBom(const charset: WideString): Integer; safecall;
    function AppendEncodedSb(const sb: IChilkatStringBuilder; const encoding: WideString): Integer; safecall;
    function ContentsEqual(const binData: IChilkatBinData): Integer; safecall;
    function SecureClear: Integer; safecall;
    function GetString(const charset: WideString): WideString; safecall;
    function AppendByte(byteValue: Integer): Integer; safecall;
    function AppendInt4(value: Integer; littleEndian: Integer): Integer; safecall;
    function AppendInt2(value: Integer; littleEndian: Integer): Integer; safecall;
    function AppendPadded(const str: WideString; const charset: WideString; padWithSpace: Integer; 
                          fieldLen: Integer): Integer; safecall;
    function FindString(const str: WideString; startIdx: Integer; const charset: WideString): Integer; safecall;
    function GetTextChunk(startIdx: Integer; numBytes: Integer; const charset: WideString): WideString; safecall;
    property LastMethodSuccess: Integer read Get_LastMethodSuccess write Set_LastMethodSuccess;
    property LastStringResult: WideString read Get_LastStringResult;
    property LastBinaryResult: OleVariant read Get_LastBinaryResult;
    property LastStringResultLen: Integer read Get_LastStringResultLen;
    property numBytes: Integer read Get_numBytes;
  end;

// *********************************************************************//
// DispIntf:  IChilkatBinDataDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {DDD8463D-2F40-43F8-8C05-F9090816D65D}
// *********************************************************************//
  IChilkatBinDataDisp = dispinterface
    ['{DDD8463D-2F40-43F8-8C05-F9090816D65D}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastMethodSuccess: Integer dispid 9;
    property LastStringResult: WideString readonly dispid 10;
    property LastBinaryResult: OleVariant readonly dispid 11;
    property LastStringResultLen: Integer readonly dispid 12;
    function LoadBinary(data: OleVariant): Integer; dispid 100;
    function LoadEncoded(const encData: WideString; const encoding: WideString): Integer; dispid 101;
    function GetBinary: OleVariant; dispid 102;
    function GetEncoded(const encoding: WideString): WideString; dispid 103;
    function AppendBinary(data: OleVariant): Integer; dispid 104;
    function AppendEncoded(const encData: WideString; const encoding: WideString): Integer; dispid 105;
    function Clear: Integer; dispid 106;
    property numBytes: Integer readonly dispid 107;
    function LoadFile(const path: WideString): Integer; dispid 108;
    function GetBinaryChunk(offset: Integer; numBytes: Integer): OleVariant; dispid 109;
    function GetEncodedChunk(offset: Integer; numBytes: Integer; const encoding: WideString): WideString; dispid 110;
    function RemoveChunk(offset: Integer; numBytes: Integer): Integer; dispid 111;
    function WriteFile(const path: WideString): Integer; dispid 112;
    function GetEncodedSb(const encoding: WideString; const sb: IChilkatStringBuilder): Integer; dispid 113;
    function AppendBd(const binData: IChilkatBinData): Integer; dispid 114;
    function AppendString(const str: WideString; const charset: WideString): Integer; dispid 115;
    function AppendSb(const sb: IChilkatStringBuilder; const charset: WideString): Integer; dispid 116;
    function AppendBom(const charset: WideString): Integer; dispid 117;
    function AppendEncodedSb(const sb: IChilkatStringBuilder; const encoding: WideString): Integer; dispid 119;
    function ContentsEqual(const binData: IChilkatBinData): Integer; dispid 120;
    function SecureClear: Integer; dispid 121;
    function GetString(const charset: WideString): WideString; dispid 122;
    function AppendByte(byteValue: Integer): Integer; dispid 123;
    function AppendInt4(value: Integer; littleEndian: Integer): Integer; dispid 124;
    function AppendInt2(value: Integer; littleEndian: Integer): Integer; dispid 125;
    function AppendPadded(const str: WideString; const charset: WideString; padWithSpace: Integer; 
                          fieldLen: Integer): Integer; dispid 127;
    function FindString(const str: WideString; startIdx: Integer; const charset: WideString): Integer; dispid 130;
    function GetTextChunk(startIdx: Integer; numBytes: Integer; const charset: WideString): WideString; dispid 131;
  end;

// *********************************************************************//
// Interface: IChilkatStringBuilder
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {78C0A2E3-8712-4C8E-9FD0-24FB3E003A72}
// *********************************************************************//
  IChilkatStringBuilder = interface(IDispatch)
    ['{78C0A2E3-8712-4C8E-9FD0-24FB3E003A72}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastMethodSuccess: Integer; safecall;
    procedure Set_LastMethodSuccess(pVal: Integer); safecall;
    function Get_LastStringResult: WideString; safecall;
    function Get_LastBinaryResult: OleVariant; safecall;
    function Get_LastStringResultLen: Integer; safecall;
    function Append(const value: WideString): Integer; safecall;
    function AppendInt(value: Integer): Integer; safecall;
    function AppendEncoded(BinaryData: OleVariant; const encoding: WideString): Integer; safecall;
    procedure Clear; safecall;
    function Replace(const value: WideString; const replacement: WideString): Integer; safecall;
    function Get_Length: Integer; safecall;
    function GetAsString: WideString; safecall;
    function ContentsEqual(const str: WideString; caseSensitive: Integer): Integer; safecall;
    function Contains(const str: WideString; caseSensitive: Integer): Integer; safecall;
    function Prepend(const value: WideString): Integer; safecall;
    function SetString(const value: WideString): Integer; safecall;
    function Encode(const encoding: WideString; const charset: WideString): Integer; safecall;
    function GetEncoded(const encoding: WideString; const charset: WideString): WideString; safecall;
    function GetDecoded(const encoding: WideString): OleVariant; safecall;
    function Decode(const encoding: WideString; const charset: WideString): Integer; safecall;
    function Trim: Integer; safecall;
    function TrimInsideSpaces: Integer; safecall;
    function StartsWith(const substr: WideString; caseSensitive: Integer): Integer; safecall;
    function EndsWith(const substr: WideString; caseSensitive: Integer): Integer; safecall;
    function ToLowercase: Integer; safecall;
    function ToUppercase: Integer; safecall;
    function ToCRLF: Integer; safecall;
    function ToLF: Integer; safecall;
    function EntityDecode: Integer; safecall;
    function ReplaceWord(const value: WideString; const replacement: WideString): Integer; safecall;
    function ReplaceBetween(const beginMark: WideString; const endMark: WideString; 
                            const value: WideString; const replacement: WideString): Integer; safecall;
    function GetBetween(const beginMark: WideString; const endMark: WideString): WideString; safecall;
    function GetAfterBetween(const searchAfter: WideString; const beginMark: WideString; 
                             const endMark: WideString): WideString; safecall;
    function GetNth(index: Integer; const delimiterChar: WideString; exceptDoubleQuoted: Integer; 
                    exceptEscaped: Integer): WideString; safecall;
    function SetNth(index: Integer; const value: WideString; const delimiterChar: WideString; 
                    exceptDoubleQuoted: Integer; exceptEscaped: Integer): Integer; safecall;
    function Get_IntValue: Integer; safecall;
    procedure Set_IntValue(pVal: Integer); safecall;
    function LoadFile(const path: WideString; const charset: WideString): Integer; safecall;
    function WriteFile(const path: WideString; const charset: WideString; emitBom: Integer): Integer; safecall;
    function AppendSb(const sb: IChilkatStringBuilder): Integer; safecall;
    function ContentsEqualSb(const sb: IChilkatStringBuilder; caseSensitive: Integer): Integer; safecall;
    function LastNLines(numLines: Integer; bCrlf: Integer): WideString; safecall;
    function AppendBd(const binData: IChilkatBinData; const charset: WideString; offset: Integer; 
                      numBytes: Integer): Integer; safecall;
    function ReplaceAllBetween(const beginMark: WideString; const endMark: WideString; 
                               const replacement: WideString; replaceMarks: Integer): Integer; safecall;
    function AppendLine(const value: WideString; crlf: Integer): Integer; safecall;
    procedure SecureClear; safecall;
    function ReplaceI(const value: WideString; replacement: Integer): Integer; safecall;
    function ContainsWord(const word: WideString; caseSensitive: Integer): Integer; safecall;
    function PunyEncode: Integer; safecall;
    function PunyDecode: Integer; safecall;
    function ReplaceAfterFinal(const marker: WideString; const replacement: WideString): Integer; safecall;
    function WriteFileIfModified(const path: WideString; const charset: WideString; emitBom: Integer): Integer; safecall;
    function Get_IsBase64: Integer; safecall;
    function GetBefore(const marker: WideString; removeFlag: Integer): WideString; safecall;
    function RemoveBefore(const marker: WideString): Integer; safecall;
    function ReplaceFirst(const value: WideString; const replacement: WideString): Integer; safecall;
    function GetAfterFinal(const marker: WideString; removeFlag: Integer): WideString; safecall;
    function RemoveAfterFinal(const marker: WideString): Integer; safecall;
    procedure Obfuscate; safecall;
    procedure Unobfuscate; safecall;
    function ReplaceNoCase(const value: WideString; const replacement: WideString): Integer; safecall;
    function DecodeAndAppend(const value: WideString; const encoding: WideString; 
                             const charset: WideString): Integer; safecall;
    function Shorten(numChars: Integer): Integer; safecall;
    function RemoveCharsAt(startIndex: Integer; numChars: Integer): Integer; safecall;
    function GetRange(startIndex: Integer; numChars: Integer; removeFlag: Integer): WideString; safecall;
    property LastMethodSuccess: Integer read Get_LastMethodSuccess write Set_LastMethodSuccess;
    property LastStringResult: WideString read Get_LastStringResult;
    property LastBinaryResult: OleVariant read Get_LastBinaryResult;
    property LastStringResultLen: Integer read Get_LastStringResultLen;
    property Length: Integer read Get_Length;
    property IntValue: Integer read Get_IntValue write Set_IntValue;
    property IsBase64: Integer read Get_IsBase64;
  end;

// *********************************************************************//
// DispIntf:  IChilkatStringBuilderDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {78C0A2E3-8712-4C8E-9FD0-24FB3E003A72}
// *********************************************************************//
  IChilkatStringBuilderDisp = dispinterface
    ['{78C0A2E3-8712-4C8E-9FD0-24FB3E003A72}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastMethodSuccess: Integer dispid 9;
    property LastStringResult: WideString readonly dispid 10;
    property LastBinaryResult: OleVariant readonly dispid 11;
    property LastStringResultLen: Integer readonly dispid 12;
    function Append(const value: WideString): Integer; dispid 100;
    function AppendInt(value: Integer): Integer; dispid 101;
    function AppendEncoded(BinaryData: OleVariant; const encoding: WideString): Integer; dispid 103;
    procedure Clear; dispid 104;
    function Replace(const value: WideString; const replacement: WideString): Integer; dispid 105;
    property Length: Integer readonly dispid 107;
    function GetAsString: WideString; dispid 108;
    function ContentsEqual(const str: WideString; caseSensitive: Integer): Integer; dispid 109;
    function Contains(const str: WideString; caseSensitive: Integer): Integer; dispid 110;
    function Prepend(const value: WideString): Integer; dispid 111;
    function SetString(const value: WideString): Integer; dispid 112;
    function Encode(const encoding: WideString; const charset: WideString): Integer; dispid 113;
    function GetEncoded(const encoding: WideString; const charset: WideString): WideString; dispid 114;
    function GetDecoded(const encoding: WideString): OleVariant; dispid 115;
    function Decode(const encoding: WideString; const charset: WideString): Integer; dispid 116;
    function Trim: Integer; dispid 117;
    function TrimInsideSpaces: Integer; dispid 118;
    function StartsWith(const substr: WideString; caseSensitive: Integer): Integer; dispid 119;
    function EndsWith(const substr: WideString; caseSensitive: Integer): Integer; dispid 120;
    function ToLowercase: Integer; dispid 121;
    function ToUppercase: Integer; dispid 122;
    function ToCRLF: Integer; dispid 123;
    function ToLF: Integer; dispid 124;
    function EntityDecode: Integer; dispid 125;
    function ReplaceWord(const value: WideString; const replacement: WideString): Integer; dispid 126;
    function ReplaceBetween(const beginMark: WideString; const endMark: WideString; 
                            const value: WideString; const replacement: WideString): Integer; dispid 127;
    function GetBetween(const beginMark: WideString; const endMark: WideString): WideString; dispid 128;
    function GetAfterBetween(const searchAfter: WideString; const beginMark: WideString; 
                             const endMark: WideString): WideString; dispid 129;
    function GetNth(index: Integer; const delimiterChar: WideString; exceptDoubleQuoted: Integer; 
                    exceptEscaped: Integer): WideString; dispid 130;
    function SetNth(index: Integer; const value: WideString; const delimiterChar: WideString; 
                    exceptDoubleQuoted: Integer; exceptEscaped: Integer): Integer; dispid 131;
    property IntValue: Integer dispid 133;
    function LoadFile(const path: WideString; const charset: WideString): Integer; dispid 134;
    function WriteFile(const path: WideString; const charset: WideString; emitBom: Integer): Integer; dispid 135;
    function AppendSb(const sb: IChilkatStringBuilder): Integer; dispid 136;
    function ContentsEqualSb(const sb: IChilkatStringBuilder; caseSensitive: Integer): Integer; dispid 137;
    function LastNLines(numLines: Integer; bCrlf: Integer): WideString; dispid 138;
    function AppendBd(const binData: IChilkatBinData; const charset: WideString; offset: Integer; 
                      numBytes: Integer): Integer; dispid 139;
    function ReplaceAllBetween(const beginMark: WideString; const endMark: WideString; 
                               const replacement: WideString; replaceMarks: Integer): Integer; dispid 140;
    function AppendLine(const value: WideString; crlf: Integer): Integer; dispid 141;
    procedure SecureClear; dispid 142;
    function ReplaceI(const value: WideString; replacement: Integer): Integer; dispid 143;
    function ContainsWord(const word: WideString; caseSensitive: Integer): Integer; dispid 144;
    function PunyEncode: Integer; dispid 145;
    function PunyDecode: Integer; dispid 146;
    function ReplaceAfterFinal(const marker: WideString; const replacement: WideString): Integer; dispid 147;
    function WriteFileIfModified(const path: WideString; const charset: WideString; emitBom: Integer): Integer; dispid 148;
    property IsBase64: Integer readonly dispid 149;
    function GetBefore(const marker: WideString; removeFlag: Integer): WideString; dispid 150;
    function RemoveBefore(const marker: WideString): Integer; dispid 151;
    function ReplaceFirst(const value: WideString; const replacement: WideString): Integer; dispid 152;
    function GetAfterFinal(const marker: WideString; removeFlag: Integer): WideString; dispid 153;
    function RemoveAfterFinal(const marker: WideString): Integer; dispid 154;
    procedure Obfuscate; dispid 155;
    procedure Unobfuscate; dispid 156;
    function ReplaceNoCase(const value: WideString; const replacement: WideString): Integer; dispid 157;
    function DecodeAndAppend(const value: WideString; const encoding: WideString; 
                             const charset: WideString): Integer; dispid 158;
    function Shorten(numChars: Integer): Integer; dispid 159;
    function RemoveCharsAt(startIndex: Integer; numChars: Integer): Integer; dispid 160;
    function GetRange(startIndex: Integer; numChars: Integer; removeFlag: Integer): WideString; dispid 161;
  end;

// *********************************************************************//
// Interface: IChilkatAtom
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {784E1D7C-F1E5-472F-AA06-AA6F1563ED94}
// *********************************************************************//
  IChilkatAtom = interface(IDispatch)
    ['{784E1D7C-F1E5-472F-AA06-AA6F1563ED94}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_LastMethodSuccess: Integer; safecall;
    procedure Set_LastMethodSuccess(pVal: Integer); safecall;
    function Get_LastStringResult: WideString; safecall;
    function Get_LastBinaryResult: OleVariant; safecall;
    function Get_LastStringResultLen: Integer; safecall;
    function Get_NumEntries: Integer; safecall;
    function AddElement(const Tag: WideString; const value: WideString): Integer; safecall;
    function AddElementDate(const Tag: WideString; dateTime: TDateTime): Integer; safecall;
    function AddElementDateStr(const Tag: WideString; const dateTimeStr: WideString): Integer; safecall;
    function AddElementDt(const Tag: WideString; const dateTime: ICkDateTime): Integer; safecall;
    function AddElementHtml(const Tag: WideString; const htmlStr: WideString): Integer; safecall;
    function AddElementXHtml(const Tag: WideString; const xmlStr: WideString): Integer; safecall;
    function AddElementXml(const Tag: WideString; const xmlStr: WideString): Integer; safecall;
    procedure AddEntry(const xmlStr: WideString); safecall;
    procedure AddLink(const rel: WideString; const href: WideString; const title: WideString; 
                      const typ: WideString); safecall;
    procedure AddPerson(const Tag: WideString; const name: WideString; const uri: WideString; 
                        const email: WideString); safecall;
    procedure DeleteElement(const Tag: WideString; index: Integer); safecall;
    procedure DeleteElementAttr(const Tag: WideString; index: Integer; const attrName: WideString); safecall;
    procedure DeletePerson(const Tag: WideString; index: Integer); safecall;
    function DownloadAtom(const url: WideString): Integer; safecall;
    function DownloadAtomAsync(const url: WideString): IChilkatTask; safecall;
    function GetElement(const Tag: WideString; index: Integer): WideString; safecall;
    function GetElementAttr(const Tag: WideString; index: Integer; const attrName: WideString): WideString; safecall;
    function GetElementCount(const Tag: WideString): Integer; safecall;
    function GetElementDate(const Tag: WideString; index: Integer): TDateTime; safecall;
    function GetElementDateStr(const Tag: WideString; index: Integer): WideString; safecall;
    function GetElementDt(const Tag: WideString; index: Integer): ICkDateTime; safecall;
    function GetEntry(index: Integer): IChilkatAtom; safecall;
    function GetLinkHref(const relName: WideString): WideString; safecall;
    function GetPersonInfo(const Tag: WideString; index: Integer; const tag2: WideString): WideString; safecall;
    function GetTopAttr(const attrName: WideString): WideString; safecall;
    function HasElement(const Tag: WideString): Integer; safecall;
    function LoadXml(const xmlStr: WideString): Integer; safecall;
    procedure NewEntry; safecall;
    procedure NewFeed; safecall;
    procedure SetElementAttr(const Tag: WideString; index: Integer; const attrName: WideString; 
                             const attrValue: WideString); safecall;
    procedure SetTopAttr(const attrName: WideString; const value: WideString); safecall;
    function ToXmlString: WideString; safecall;
    procedure UpdateElement(const Tag: WideString; index: Integer; const value: WideString); safecall;
    procedure UpdateElementDate(const Tag: WideString; index: Integer; dateTime: TDateTime); safecall;
    procedure UpdateElementDateStr(const Tag: WideString; index: Integer; 
                                   const dateTimeStr: WideString); safecall;
    procedure UpdateElementDt(const Tag: WideString; index: Integer; const dateTime: ICkDateTime); safecall;
    procedure UpdateElementHtml(const Tag: WideString; index: Integer; const htmlStr: WideString); safecall;
    procedure UpdateElementXHtml(const Tag: WideString; index: Integer; const xmlStr: WideString); safecall;
    procedure UpdateElementXml(const Tag: WideString; index: Integer; const xmlStr: WideString); safecall;
    procedure UpdatePerson(const Tag: WideString; index: Integer; const name: WideString; 
                           const uri: WideString; const email: WideString); safecall;
    function Get_AbortCurrent: Integer; safecall;
    function LoadTaskCaller(const task: IChilkatTask): Integer; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property LastMethodSuccess: Integer read Get_LastMethodSuccess write Set_LastMethodSuccess;
    property LastStringResult: WideString read Get_LastStringResult;
    property LastBinaryResult: OleVariant read Get_LastBinaryResult;
    property LastStringResultLen: Integer read Get_LastStringResultLen;
    property NumEntries: Integer read Get_NumEntries;
    property AbortCurrent: Integer read Get_AbortCurrent;
  end;

// *********************************************************************//
// DispIntf:  IChilkatAtomDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {784E1D7C-F1E5-472F-AA06-AA6F1563ED94}
// *********************************************************************//
  IChilkatAtomDisp = dispinterface
    ['{784E1D7C-F1E5-472F-AA06-AA6F1563ED94}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property LastMethodSuccess: Integer dispid 9;
    property LastStringResult: WideString readonly dispid 10;
    property LastBinaryResult: OleVariant readonly dispid 11;
    property LastStringResultLen: Integer readonly dispid 12;
    property NumEntries: Integer readonly dispid 100;
    function AddElement(const Tag: WideString; const value: WideString): Integer; dispid 101;
    function AddElementDate(const Tag: WideString; dateTime: TDateTime): Integer; dispid 102;
    function AddElementDateStr(const Tag: WideString; const dateTimeStr: WideString): Integer; dispid 103;
    function AddElementDt(const Tag: WideString; const dateTime: ICkDateTime): Integer; dispid 104;
    function AddElementHtml(const Tag: WideString; const htmlStr: WideString): Integer; dispid 105;
    function AddElementXHtml(const Tag: WideString; const xmlStr: WideString): Integer; dispid 106;
    function AddElementXml(const Tag: WideString; const xmlStr: WideString): Integer; dispid 107;
    procedure AddEntry(const xmlStr: WideString); dispid 108;
    procedure AddLink(const rel: WideString; const href: WideString; const title: WideString; 
                      const typ: WideString); dispid 109;
    procedure AddPerson(const Tag: WideString; const name: WideString; const uri: WideString; 
                        const email: WideString); dispid 110;
    procedure DeleteElement(const Tag: WideString; index: Integer); dispid 111;
    procedure DeleteElementAttr(const Tag: WideString; index: Integer; const attrName: WideString); dispid 112;
    procedure DeletePerson(const Tag: WideString; index: Integer); dispid 113;
    function DownloadAtom(const url: WideString): Integer; dispid 114;
    function DownloadAtomAsync(const url: WideString): IChilkatTask; dispid 614;
    function GetElement(const Tag: WideString; index: Integer): WideString; dispid 115;
    function GetElementAttr(const Tag: WideString; index: Integer; const attrName: WideString): WideString; dispid 116;
    function GetElementCount(const Tag: WideString): Integer; dispid 117;
    function GetElementDate(const Tag: WideString; index: Integer): TDateTime; dispid 118;
    function GetElementDateStr(const Tag: WideString; index: Integer): WideString; dispid 119;
    function GetElementDt(const Tag: WideString; index: Integer): ICkDateTime; dispid 120;
    function GetEntry(index: Integer): IChilkatAtom; dispid 121;
    function GetLinkHref(const relName: WideString): WideString; dispid 122;
    function GetPersonInfo(const Tag: WideString; index: Integer; const tag2: WideString): WideString; dispid 123;
    function GetTopAttr(const attrName: WideString): WideString; dispid 124;
    function HasElement(const Tag: WideString): Integer; dispid 125;
    function LoadXml(const xmlStr: WideString): Integer; dispid 126;
    procedure NewEntry; dispid 127;
    procedure NewFeed; dispid 128;
    procedure SetElementAttr(const Tag: WideString; index: Integer; const attrName: WideString; 
                             const attrValue: WideString); dispid 129;
    procedure SetTopAttr(const attrName: WideString; const value: WideString); dispid 130;
    function ToXmlString: WideString; dispid 131;
    procedure UpdateElement(const Tag: WideString; index: Integer; const value: WideString); dispid 132;
    procedure UpdateElementDate(const Tag: WideString; index: Integer; dateTime: TDateTime); dispid 133;
    procedure UpdateElementDateStr(const Tag: WideString; index: Integer; 
                                   const dateTimeStr: WideString); dispid 134;
    procedure UpdateElementDt(const Tag: WideString; index: Integer; const dateTime: ICkDateTime); dispid 135;
    procedure UpdateElementHtml(const Tag: WideString; index: Integer; const htmlStr: WideString); dispid 136;
    procedure UpdateElementXHtml(const Tag: WideString; index: Integer; const xmlStr: WideString); dispid 137;
    procedure UpdateElementXml(const Tag: WideString; index: Integer; const xmlStr: WideString); dispid 138;
    procedure UpdatePerson(const Tag: WideString; index: Integer; const name: WideString; 
                           const uri: WideString; const email: WideString); dispid 139;
    property AbortCurrent: Integer readonly dispid 140;
    function LoadTaskCaller(const task: IChilkatTask): Integer; dispid 141;
  end;

// *********************************************************************//
// Interface: ICkDateTime
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F063D06F-1395-4CB0-AB8A-3C86C80F077E}
// *********************************************************************//
  ICkDateTime = interface(IDispatch)
    ['{F063D06F-1395-4CB0-AB8A-3C86C80F077E}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_LastMethodSuccess: Integer; safecall;
    procedure Set_LastMethodSuccess(pVal: Integer); safecall;
    function Get_LastStringResult: WideString; safecall;
    function Get_LastBinaryResult: OleVariant; safecall;
    function Get_LastStringResultLen: Integer; safecall;
    function Get_UtcOffset: Integer; safecall;
    function Get_IsDst: Integer; safecall;
    function AddDays(numDays: Integer): Integer; safecall;
    procedure DeSerialize(const serializedDateTime: WideString); safecall;
    function GetAsDosDate(bLocal: Integer): Integer; safecall;
    function GetAsOleDate(bLocal: Integer): Double; safecall;
    function GetAsRfc822(bLocal: Integer): WideString; safecall;
    function GetAsUnixTime(bLocal: Integer): Integer; safecall;
    function Serialize: WideString; safecall;
    function SetFromCurrentSystemTime: Integer; safecall;
    function SetFromDosDate(bLocal: Integer; t: Integer): Integer; safecall;
    function SetFromOleDate(bLocal: Integer; dt: Double): Integer; safecall;
    function SetFromRfc822(const rfc822Str: WideString): Integer; safecall;
    function SetFromUnixTime(bLocal: Integer; t: Integer): Integer; safecall;
    function SetFromDtObj(const dt: IDtObj): Integer; safecall;
    function GetDtObj(bLocal: Integer): IDtObj; safecall;
    function SetFromNtpTime(ntpSeconds: Integer): Integer; safecall;
    function LoadTaskResult(const task: IChilkatTask): Integer; safecall;
    function SetFromTimestamp(const timestamp: WideString): Integer; safecall;
    function GetAsTimestamp(bLocal: Integer): WideString; safecall;
    function GetAsDateTime(bLocal: Integer): TDateTime; safecall;
    function DiffSeconds(const dateTimeArg: ICkDateTime): Integer; safecall;
    function AddSeconds(numSeconds: Integer): Integer; safecall;
    function GetAsUnixTimeStr(bLocal: Integer): WideString; safecall;
    function GetAsIso8601(const formatStr: WideString; bLocal: Integer): WideString; safecall;
    function ExpiresWithin(n: Integer; const units: WideString): Integer; safecall;
    function OlderThan(n: Integer; const units: WideString): Integer; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property LastMethodSuccess: Integer read Get_LastMethodSuccess write Set_LastMethodSuccess;
    property LastStringResult: WideString read Get_LastStringResult;
    property LastBinaryResult: OleVariant read Get_LastBinaryResult;
    property LastStringResultLen: Integer read Get_LastStringResultLen;
    property UtcOffset: Integer read Get_UtcOffset;
    property IsDst: Integer read Get_IsDst;
  end;

// *********************************************************************//
// DispIntf:  ICkDateTimeDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F063D06F-1395-4CB0-AB8A-3C86C80F077E}
// *********************************************************************//
  ICkDateTimeDisp = dispinterface
    ['{F063D06F-1395-4CB0-AB8A-3C86C80F077E}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property LastMethodSuccess: Integer dispid 9;
    property LastStringResult: WideString readonly dispid 10;
    property LastBinaryResult: OleVariant readonly dispid 11;
    property LastStringResultLen: Integer readonly dispid 12;
    property UtcOffset: Integer readonly dispid 100;
    property IsDst: Integer readonly dispid 101;
    function AddDays(numDays: Integer): Integer; dispid 102;
    procedure DeSerialize(const serializedDateTime: WideString); dispid 103;
    function GetAsDosDate(bLocal: Integer): Integer; dispid 104;
    function GetAsOleDate(bLocal: Integer): Double; dispid 105;
    function GetAsRfc822(bLocal: Integer): WideString; dispid 106;
    function GetAsUnixTime(bLocal: Integer): Integer; dispid 107;
    function Serialize: WideString; dispid 108;
    function SetFromCurrentSystemTime: Integer; dispid 109;
    function SetFromDosDate(bLocal: Integer; t: Integer): Integer; dispid 110;
    function SetFromOleDate(bLocal: Integer; dt: Double): Integer; dispid 111;
    function SetFromRfc822(const rfc822Str: WideString): Integer; dispid 112;
    function SetFromUnixTime(bLocal: Integer; t: Integer): Integer; dispid 113;
    function SetFromDtObj(const dt: IDtObj): Integer; dispid 114;
    function GetDtObj(bLocal: Integer): IDtObj; dispid 115;
    function SetFromNtpTime(ntpSeconds: Integer): Integer; dispid 116;
    function LoadTaskResult(const task: IChilkatTask): Integer; dispid 117;
    function SetFromTimestamp(const timestamp: WideString): Integer; dispid 118;
    function GetAsTimestamp(bLocal: Integer): WideString; dispid 119;
    function GetAsDateTime(bLocal: Integer): TDateTime; dispid 120;
    function DiffSeconds(const dateTimeArg: ICkDateTime): Integer; dispid 121;
    function AddSeconds(numSeconds: Integer): Integer; dispid 122;
    function GetAsUnixTimeStr(bLocal: Integer): WideString; dispid 123;
    function GetAsIso8601(const formatStr: WideString; bLocal: Integer): WideString; dispid 125;
    function ExpiresWithin(n: Integer; const units: WideString): Integer; dispid 126;
    function OlderThan(n: Integer; const units: WideString): Integer; dispid 127;
  end;

// *********************************************************************//
// Interface: IDtObj
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {1ACAAAB7-E818-41AE-AF3F-8F6911A91467}
// *********************************************************************//
  IDtObj = interface(IDispatch)
    ['{1ACAAAB7-E818-41AE-AF3F-8F6911A91467}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_LastMethodSuccess: Integer; safecall;
    procedure Set_LastMethodSuccess(pVal: Integer); safecall;
    function Get_LastStringResult: WideString; safecall;
    function Get_LastBinaryResult: OleVariant; safecall;
    function Get_LastStringResultLen: Integer; safecall;
    function Get_Day: Integer; safecall;
    procedure Set_Day(pVal: Integer); safecall;
    function Get_Hour: Integer; safecall;
    procedure Set_Hour(pVal: Integer); safecall;
    function Get_Minute: Integer; safecall;
    procedure Set_Minute(pVal: Integer); safecall;
    function Get_Month: Integer; safecall;
    procedure Set_Month(pVal: Integer); safecall;
    function Get_Second: Integer; safecall;
    procedure Set_Second(pVal: Integer); safecall;
    function Get_StructTmMonth: Integer; safecall;
    procedure Set_StructTmMonth(pVal: Integer); safecall;
    function Get_StructTmYear: Integer; safecall;
    procedure Set_StructTmYear(pVal: Integer); safecall;
    function Get_Utc: Integer; safecall;
    procedure Set_Utc(pVal: Integer); safecall;
    function Get_Year: Integer; safecall;
    procedure Set_Year(pVal: Integer); safecall;
    function Serialize: WideString; safecall;
    procedure DeSerialize(const serializedDtObj: WideString); safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property LastMethodSuccess: Integer read Get_LastMethodSuccess write Set_LastMethodSuccess;
    property LastStringResult: WideString read Get_LastStringResult;
    property LastBinaryResult: OleVariant read Get_LastBinaryResult;
    property LastStringResultLen: Integer read Get_LastStringResultLen;
    property Day: Integer read Get_Day write Set_Day;
    property Hour: Integer read Get_Hour write Set_Hour;
    property Minute: Integer read Get_Minute write Set_Minute;
    property Month: Integer read Get_Month write Set_Month;
    property Second: Integer read Get_Second write Set_Second;
    property StructTmMonth: Integer read Get_StructTmMonth write Set_StructTmMonth;
    property StructTmYear: Integer read Get_StructTmYear write Set_StructTmYear;
    property Utc: Integer read Get_Utc write Set_Utc;
    property Year: Integer read Get_Year write Set_Year;
  end;

// *********************************************************************//
// DispIntf:  IDtObjDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {1ACAAAB7-E818-41AE-AF3F-8F6911A91467}
// *********************************************************************//
  IDtObjDisp = dispinterface
    ['{1ACAAAB7-E818-41AE-AF3F-8F6911A91467}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property LastMethodSuccess: Integer dispid 9;
    property LastStringResult: WideString readonly dispid 10;
    property LastBinaryResult: OleVariant readonly dispid 11;
    property LastStringResultLen: Integer readonly dispid 12;
    property Day: Integer dispid 100;
    property Hour: Integer dispid 101;
    property Minute: Integer dispid 102;
    property Month: Integer dispid 103;
    property Second: Integer dispid 104;
    property StructTmMonth: Integer dispid 105;
    property StructTmYear: Integer dispid 106;
    property Utc: Integer dispid 107;
    property Year: Integer dispid 108;
    function Serialize: WideString; dispid 109;
    procedure DeSerialize(const serializedDtObj: WideString); dispid 110;
  end;

// *********************************************************************//
// Interface: IChilkatAuthAws
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {4E737594-4147-4E1D-A1A9-8A55E3FE603E}
// *********************************************************************//
  IChilkatAuthAws = interface(IDispatch)
    ['{4E737594-4147-4E1D-A1A9-8A55E3FE603E}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_LastMethodSuccess: Integer; safecall;
    procedure Set_LastMethodSuccess(pVal: Integer); safecall;
    function Get_LastStringResult: WideString; safecall;
    function Get_LastBinaryResult: OleVariant; safecall;
    function Get_LastStringResultLen: Integer; safecall;
    function Get_AccessKey: WideString; safecall;
    procedure Set_AccessKey(const pVal: WideString); safecall;
    function Get_SecretKey: WideString; safecall;
    procedure Set_SecretKey(const pVal: WideString); safecall;
    function Get_Region: WideString; safecall;
    procedure Set_Region(const pVal: WideString); safecall;
    function Get_ServiceName: WideString; safecall;
    procedure Set_ServiceName(const pVal: WideString); safecall;
    function Get_PrecomputedSha256: WideString; safecall;
    procedure Set_PrecomputedSha256(const pVal: WideString); safecall;
    function Get_CanonicalizedResourceV2: WideString; safecall;
    procedure Set_CanonicalizedResourceV2(const pVal: WideString); safecall;
    function Get_PrecomputedMd5: WideString; safecall;
    procedure Set_PrecomputedMd5(const pVal: WideString); safecall;
    function Get_SignatureVersion: Integer; safecall;
    procedure Set_SignatureVersion(pVal: Integer); safecall;
    function GenPresignedUrl(const httpVerb: WideString; useHttps: Integer; 
                             const domain: WideString; const path: WideString; 
                             numSecondsValid: Integer; const awsService: WideString): WideString; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property LastMethodSuccess: Integer read Get_LastMethodSuccess write Set_LastMethodSuccess;
    property LastStringResult: WideString read Get_LastStringResult;
    property LastBinaryResult: OleVariant read Get_LastBinaryResult;
    property LastStringResultLen: Integer read Get_LastStringResultLen;
    property AccessKey: WideString read Get_AccessKey write Set_AccessKey;
    property SecretKey: WideString read Get_SecretKey write Set_SecretKey;
    property Region: WideString read Get_Region write Set_Region;
    property ServiceName: WideString read Get_ServiceName write Set_ServiceName;
    property PrecomputedSha256: WideString read Get_PrecomputedSha256 write Set_PrecomputedSha256;
    property CanonicalizedResourceV2: WideString read Get_CanonicalizedResourceV2 write Set_CanonicalizedResourceV2;
    property PrecomputedMd5: WideString read Get_PrecomputedMd5 write Set_PrecomputedMd5;
    property SignatureVersion: Integer read Get_SignatureVersion write Set_SignatureVersion;
  end;

// *********************************************************************//
// DispIntf:  IChilkatAuthAwsDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {4E737594-4147-4E1D-A1A9-8A55E3FE603E}
// *********************************************************************//
  IChilkatAuthAwsDisp = dispinterface
    ['{4E737594-4147-4E1D-A1A9-8A55E3FE603E}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property LastMethodSuccess: Integer dispid 9;
    property LastStringResult: WideString readonly dispid 10;
    property LastBinaryResult: OleVariant readonly dispid 11;
    property LastStringResultLen: Integer readonly dispid 12;
    property AccessKey: WideString dispid 100;
    property SecretKey: WideString dispid 101;
    property Region: WideString dispid 103;
    property ServiceName: WideString dispid 104;
    property PrecomputedSha256: WideString dispid 105;
    property CanonicalizedResourceV2: WideString dispid 106;
    property PrecomputedMd5: WideString dispid 107;
    property SignatureVersion: Integer dispid 108;
    function GenPresignedUrl(const httpVerb: WideString; useHttps: Integer; 
                             const domain: WideString; const path: WideString; 
                             numSecondsValid: Integer; const awsService: WideString): WideString; dispid 109;
  end;

// *********************************************************************//
// Interface: IChilkatAuthAzureAD
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {B2AA3D60-500A-4725-8430-3A5F16D97D58}
// *********************************************************************//
  IChilkatAuthAzureAD = interface(IDispatch)
    ['{B2AA3D60-500A-4725-8430-3A5F16D97D58}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_LastMethodSuccess: Integer; safecall;
    procedure Set_LastMethodSuccess(pVal: Integer); safecall;
    function Get_LastStringResult: WideString; safecall;
    function Get_LastBinaryResult: OleVariant; safecall;
    function Get_LastStringResultLen: Integer; safecall;
    function Get_TenantId: WideString; safecall;
    procedure Set_TenantId(const pVal: WideString); safecall;
    function Get_ClientId: WideString; safecall;
    procedure Set_ClientId(const pVal: WideString); safecall;
    function Get_ClientSecret: WideString; safecall;
    procedure Set_ClientSecret(const pVal: WideString); safecall;
    function Get_Resource: WideString; safecall;
    procedure Set_Resource(const pVal: WideString); safecall;
    function Get_AccessToken: WideString; safecall;
    procedure Set_AccessToken(const pVal: WideString); safecall;
    function Get_NumSecondsRemaining: Integer; safecall;
    function ObtainAccessToken(const connection: IChilkatSocket): Integer; safecall;
    function ObtainAccessTokenAsync(const connection: IChilkatSocket): IChilkatTask; safecall;
    function Get_Valid: Integer; safecall;
    function LoadTaskCaller(const task: IChilkatTask): Integer; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property LastMethodSuccess: Integer read Get_LastMethodSuccess write Set_LastMethodSuccess;
    property LastStringResult: WideString read Get_LastStringResult;
    property LastBinaryResult: OleVariant read Get_LastBinaryResult;
    property LastStringResultLen: Integer read Get_LastStringResultLen;
    property TenantId: WideString read Get_TenantId write Set_TenantId;
    property ClientId: WideString read Get_ClientId write Set_ClientId;
    property ClientSecret: WideString read Get_ClientSecret write Set_ClientSecret;
    property Resource: WideString read Get_Resource write Set_Resource;
    property AccessToken: WideString read Get_AccessToken write Set_AccessToken;
    property NumSecondsRemaining: Integer read Get_NumSecondsRemaining;
    property Valid: Integer read Get_Valid;
  end;

// *********************************************************************//
// DispIntf:  IChilkatAuthAzureADDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {B2AA3D60-500A-4725-8430-3A5F16D97D58}
// *********************************************************************//
  IChilkatAuthAzureADDisp = dispinterface
    ['{B2AA3D60-500A-4725-8430-3A5F16D97D58}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property LastMethodSuccess: Integer dispid 9;
    property LastStringResult: WideString readonly dispid 10;
    property LastBinaryResult: OleVariant readonly dispid 11;
    property LastStringResultLen: Integer readonly dispid 12;
    property TenantId: WideString dispid 100;
    property ClientId: WideString dispid 101;
    property ClientSecret: WideString dispid 102;
    property Resource: WideString dispid 103;
    property AccessToken: WideString dispid 104;
    property NumSecondsRemaining: Integer readonly dispid 105;
    function ObtainAccessToken(const connection: IChilkatSocket): Integer; dispid 107;
    function ObtainAccessTokenAsync(const connection: IChilkatSocket): IChilkatTask; dispid 607;
    property Valid: Integer readonly dispid 108;
    function LoadTaskCaller(const task: IChilkatTask): Integer; dispid 109;
  end;

// *********************************************************************//
// Interface: IChilkatSocket
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {93FCA31B-08C3-4E72-836B-B31123F7C2CC}
// *********************************************************************//
  IChilkatSocket = interface(IDispatch)
    ['{93FCA31B-08C3-4E72-836B-B31123F7C2CC}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_LastMethodSuccess: Integer; safecall;
    procedure Set_LastMethodSuccess(pVal: Integer); safecall;
    function Get_LastStringResult: WideString; safecall;
    function Get_LastBinaryResult: OleVariant; safecall;
    function Get_LastStringResultLen: Integer; safecall;
    function Get_AsyncAcceptFinished: Integer; safecall;
    function Get_AsyncAcceptLog: WideString; safecall;
    function Get_AsyncAcceptSuccess: Integer; safecall;
    function Get_AsyncConnectFinished: Integer; safecall;
    function Get_AsyncConnectLog: WideString; safecall;
    function Get_AsyncConnectSuccess: Integer; safecall;
    function Get_AsyncDnsFinished: Integer; safecall;
    function Get_AsyncDnsLog: WideString; safecall;
    function Get_AsyncDnsResult: WideString; safecall;
    function Get_AsyncDnsSuccess: Integer; safecall;
    function Get_AsyncReceiveFinished: Integer; safecall;
    function Get_AsyncReceiveLog: WideString; safecall;
    function Get_AsyncReceiveSuccess: Integer; safecall;
    function Get_AsyncReceivedBytes: OleVariant; safecall;
    function Get_AsyncReceivedString: WideString; safecall;
    function Get_AsyncSendFinished: Integer; safecall;
    function Get_AsyncSendLog: WideString; safecall;
    function Get_AsyncSendSuccess: Integer; safecall;
    function Get_BigEndian: Integer; safecall;
    procedure Set_BigEndian(pVal: Integer); safecall;
    function Get_ClientIpAddress: WideString; safecall;
    procedure Set_ClientIpAddress(const pVal: WideString); safecall;
    function Get_ClientPort: Integer; safecall;
    procedure Set_ClientPort(pVal: Integer); safecall;
    function Get_ConnectFailReason: Integer; safecall;
    function Get_DebugConnectDelayMs: Integer; safecall;
    procedure Set_DebugConnectDelayMs(pVal: Integer); safecall;
    function Get_DebugDnsDelayMs: Integer; safecall;
    procedure Set_DebugDnsDelayMs(pVal: Integer); safecall;
    function Get_ElapsedSeconds: Integer; safecall;
    function Get_HeartbeatMs: Integer; safecall;
    procedure Set_HeartbeatMs(pVal: Integer); safecall;
    function Get_HttpProxyAuthMethod: WideString; safecall;
    procedure Set_HttpProxyAuthMethod(const pVal: WideString); safecall;
    function Get_HttpProxyDomain: WideString; safecall;
    procedure Set_HttpProxyDomain(const pVal: WideString); safecall;
    function Get_HttpProxyHostname: WideString; safecall;
    procedure Set_HttpProxyHostname(const pVal: WideString); safecall;
    function Get_HttpProxyPassword: WideString; safecall;
    procedure Set_HttpProxyPassword(const pVal: WideString); safecall;
    function Get_HttpProxyPort: Integer; safecall;
    procedure Set_HttpProxyPort(pVal: Integer); safecall;
    function Get_HttpProxyUsername: WideString; safecall;
    procedure Set_HttpProxyUsername(const pVal: WideString); safecall;
    function Get_IsConnected: Integer; safecall;
    function Get_KeepSessionLog: Integer; safecall;
    procedure Set_KeepSessionLog(pVal: Integer); safecall;
    function Get_LastMethodFailed: Integer; safecall;
    function Get_ListenIpv6: Integer; safecall;
    procedure Set_ListenIpv6(pVal: Integer); safecall;
    function Get_LocalIpAddress: WideString; safecall;
    function Get_LocalPort: Integer; safecall;
    function Get_MaxReadIdleMs: Integer; safecall;
    procedure Set_MaxReadIdleMs(pVal: Integer); safecall;
    function Get_MaxSendIdleMs: Integer; safecall;
    procedure Set_MaxSendIdleMs(pVal: Integer); safecall;
    function Get_MyIpAddress: WideString; safecall;
    function Get_NumReceivedClientCerts: Integer; safecall;
    function Get_NumSocketsInSet: Integer; safecall;
    function Get_NumSslAcceptableClientCAs: Integer; safecall;
    function Get_ObjectId: Integer; safecall;
    function Get_ReceivePacketSize: Integer; safecall;
    procedure Set_ReceivePacketSize(pVal: Integer); safecall;
    function Get_ReceivedCount: Integer; safecall;
    procedure Set_ReceivedCount(pVal: Integer); safecall;
    function Get_RemoteIpAddress: WideString; safecall;
    function Get_RemotePort: Integer; safecall;
    function Get_SelectorIndex: Integer; safecall;
    procedure Set_SelectorIndex(pVal: Integer); safecall;
    function Get_SelectorReadIndex: Integer; safecall;
    procedure Set_SelectorReadIndex(pVal: Integer); safecall;
    function Get_SelectorWriteIndex: Integer; safecall;
    procedure Set_SelectorWriteIndex(pVal: Integer); safecall;
    function Get_SendPacketSize: Integer; safecall;
    procedure Set_SendPacketSize(pVal: Integer); safecall;
    function Get_SessionLog: WideString; safecall;
    function Get_SessionLogEncoding: WideString; safecall;
    procedure Set_SessionLogEncoding(const pVal: WideString); safecall;
    function Get_SoRcvBuf: Integer; safecall;
    procedure Set_SoRcvBuf(pVal: Integer); safecall;
    function Get_SoReuseAddr: Integer; safecall;
    procedure Set_SoReuseAddr(pVal: Integer); safecall;
    function Get_SoSndBuf: Integer; safecall;
    procedure Set_SoSndBuf(pVal: Integer); safecall;
    function Get_SocksHostname: WideString; safecall;
    procedure Set_SocksHostname(const pVal: WideString); safecall;
    function Get_SocksPassword: WideString; safecall;
    procedure Set_SocksPassword(const pVal: WideString); safecall;
    function Get_SocksPort: Integer; safecall;
    procedure Set_SocksPort(pVal: Integer); safecall;
    function Get_SocksUsername: WideString; safecall;
    procedure Set_SocksUsername(const pVal: WideString); safecall;
    function Get_SocksVersion: Integer; safecall;
    procedure Set_SocksVersion(pVal: Integer); safecall;
    function Get_Ssl: Integer; safecall;
    procedure Set_Ssl(pVal: Integer); safecall;
    function Get_SslProtocol: WideString; safecall;
    procedure Set_SslProtocol(const pVal: WideString); safecall;
    function Get_StringCharset: WideString; safecall;
    procedure Set_StringCharset(const pVal: WideString); safecall;
    function Get_TcpNoDelay: Integer; safecall;
    procedure Set_TcpNoDelay(pVal: Integer); safecall;
    function Get_UserData: WideString; safecall;
    procedure Set_UserData(const pVal: WideString); safecall;
    function AcceptNextConnection(maxWaitMs: Integer): IChilkatSocket; safecall;
    function AcceptNextConnectionAsync(maxWaitMs: Integer): IChilkatTask; safecall;
    function AddSslAcceptableClientCaDn(const certAuthDN: WideString): Integer; safecall;
    procedure AsyncAcceptAbort; safecall;
    function AsyncAcceptSocket: IChilkatSocket; safecall;
    function AsyncAcceptStart(maxWaitMs: Integer): Integer; safecall;
    procedure AsyncConnectAbort; safecall;
    function AsyncConnectStart(const hostname: WideString; port: Integer; Ssl: Integer; 
                               maxWaitMs: Integer): Integer; safecall;
    procedure AsyncDnsAbort; safecall;
    function AsyncDnsStart(const hostname: WideString; maxWaitMs: Integer): Integer; safecall;
    procedure AsyncReceiveAbort; safecall;
    function AsyncReceiveBytes: Integer; safecall;
    function AsyncReceiveBytesN(numBytes: Integer): Integer; safecall;
    function AsyncReceiveString: Integer; safecall;
    function AsyncReceiveToCRLF: Integer; safecall;
    function AsyncReceiveUntilMatch(const matchStr: WideString): Integer; safecall;
    procedure AsyncSendAbort; safecall;
    function AsyncSendByteData(data: OleVariant): Integer; safecall;
    function AsyncSendBytes(byteData: OleVariant): Integer; safecall;
    function AsyncSendString(const stringToSend: WideString): Integer; safecall;
    function BindAndListen(port: Integer; backLog: Integer): Integer; safecall;
    function BindAndListenAsync(port: Integer; backLog: Integer): IChilkatTask; safecall;
    function CheckWriteable(maxWaitMs: Integer): Integer; safecall;
    function CheckWriteableAsync(maxWaitMs: Integer): IChilkatTask; safecall;
    procedure ClearSessionLog; safecall;
    function Close(maxWaitMs: Integer): Integer; safecall;
    function CloseAsync(maxWaitMs: Integer): IChilkatTask; safecall;
    function Connect(const hostname: WideString; port: Integer; Ssl: Integer; maxWaitMs: Integer): Integer; safecall;
    function ConnectAsync(const hostname: WideString; port: Integer; Ssl: Integer; 
                          maxWaitMs: Integer): IChilkatTask; safecall;
    function ConvertFromSsl: Integer; safecall;
    function ConvertFromSslAsync: IChilkatTask; safecall;
    function ConvertToSsl: Integer; safecall;
    function ConvertToSslAsync: IChilkatTask; safecall;
    function DnsLookup(const hostname: WideString; maxWaitMs: Integer): WideString; safecall;
    function DnsLookupAsync(const hostname: WideString; maxWaitMs: Integer): IChilkatTask; safecall;
    function GetMyCert: IChilkatCert; safecall;
    function GetReceivedClientCert(index: Integer): IChilkatCert; safecall;
    function GetSslAcceptableClientCaDn(index: Integer): WideString; safecall;
    function GetSslServerCert: IChilkatCert; safecall;
    function InitSslServer(const cert: IChilkatCert): Integer; safecall;
    function IsUnlocked: Integer; safecall;
    function PollDataAvailable: Integer; safecall;
    function PollDataAvailableAsync: IChilkatTask; safecall;
    function ReceiveBytes: OleVariant; safecall;
    function ReceiveBytesAsync: IChilkatTask; safecall;
    function ReceiveBytesENC(const encodingAlg: WideString): WideString; safecall;
    function ReceiveBytesENCAsync(const encodingAlg: WideString): IChilkatTask; safecall;
    function ReceiveBytesN(numBytes: Integer): OleVariant; safecall;
    function ReceiveBytesNAsync(numBytes: Integer): IChilkatTask; safecall;
    function ReceiveBytesToFile(const appendFilename: WideString): Integer; safecall;
    function ReceiveBytesToFileAsync(const appendFilename: WideString): IChilkatTask; safecall;
    function ReceiveCount: Integer; safecall;
    function ReceiveCountAsync: IChilkatTask; safecall;
    function ReceiveNBytesENC(numBytes: Integer; const encodingAlg: WideString): WideString; safecall;
    function ReceiveNBytesENCAsync(numBytes: Integer; const encodingAlg: WideString): IChilkatTask; safecall;
    function ReceiveString: WideString; safecall;
    function ReceiveStringAsync: IChilkatTask; safecall;
    function ReceiveStringMaxN(maxByteCount: Integer): WideString; safecall;
    function ReceiveStringMaxNAsync(maxByteCount: Integer): IChilkatTask; safecall;
    function ReceiveStringUntilByte(lookForByte: Integer): WideString; safecall;
    function ReceiveStringUntilByteAsync(lookForByte: Integer): IChilkatTask; safecall;
    function ReceiveToCRLF: WideString; safecall;
    function ReceiveToCRLFAsync: IChilkatTask; safecall;
    function ReceiveUntilByte(lookForByte: Integer): OleVariant; safecall;
    function ReceiveUntilByteAsync(lookForByte: Integer): IChilkatTask; safecall;
    function ReceiveUntilMatch(const matchStr: WideString): WideString; safecall;
    function ReceiveUntilMatchAsync(const matchStr: WideString): IChilkatTask; safecall;
    function SelectForReading(timeoutMs: Integer): Integer; safecall;
    function SelectForReadingAsync(timeoutMs: Integer): IChilkatTask; safecall;
    function SelectForWriting(timeoutMs: Integer): Integer; safecall;
    function SelectForWritingAsync(timeoutMs: Integer): IChilkatTask; safecall;
    function SendBytes(data: OleVariant): Integer; safecall;
    function SendBytesAsync(data: OleVariant): IChilkatTask; safecall;
    function SendBytesENC(const encodedBytes: WideString; const encodingAlg: WideString): Integer; safecall;
    function SendBytesENCAsync(const encodedBytes: WideString; const encodingAlg: WideString): IChilkatTask; safecall;
    function SendCount(byteCount: Integer): Integer; safecall;
    function SendCountAsync(byteCount: Integer): IChilkatTask; safecall;
    function SendString(const stringToSend: WideString): Integer; safecall;
    function SendStringAsync(const stringToSend: WideString): IChilkatTask; safecall;
    function SetSslClientCert(const cert: IChilkatCert): Integer; safecall;
    function SetSslClientCertPem(const pemDataOrFilename: WideString; const pemPassword: WideString): Integer; safecall;
    function SetSslClientCertPfx(const pfxFilename: WideString; const pfxPassword: WideString): Integer; safecall;
    procedure SleepMs(millisec: Integer); safecall;
    procedure StartTiming; safecall;
    function TakeSocket(const sock: IChilkatSocket): Integer; safecall;
    function UnlockComponent(const unlockCode: WideString): Integer; safecall;
    procedure Dispose; safecall;
    function Get_RequireSslCertVerify: Integer; safecall;
    procedure Set_RequireSslCertVerify(pVal: Integer); safecall;
    function BuildHttpGetRequest(const url: WideString): WideString; safecall;
    procedure DnsCacheClear; safecall;
    function Get_PreferIpv6: Integer; safecall;
    procedure Set_PreferIpv6(pVal: Integer); safecall;
    function CloneSocket: IChilkatSocket; safecall;
    function Get_SslAllowedCiphers: WideString; safecall;
    procedure Set_SslAllowedCiphers(const pVal: WideString); safecall;
    function Get_KeepAlive: Integer; safecall;
    procedure Set_KeepAlive(pVal: Integer); safecall;
    function Get_ReceiveFailReason: Integer; safecall;
    function Get_SendFailReason: Integer; safecall;
    function Get_PercentDoneScale: Integer; safecall;
    procedure Set_PercentDoneScale(pVal: Integer); safecall;
    function Get_BandwidthThrottleUp: Integer; safecall;
    procedure Set_BandwidthThrottleUp(pVal: Integer); safecall;
    function Get_BandwidthThrottleDown: Integer; safecall;
    procedure Set_BandwidthThrottleDown(pVal: Integer); safecall;
    function Get_TlsVersion: WideString; safecall;
    function Get_TlsCipherSuite: WideString; safecall;
    function SshOpenTunnel(const sshHostname: WideString; sshPort: Integer): Integer; safecall;
    function SshOpenTunnelAsync(const sshHostname: WideString; sshPort: Integer): IChilkatTask; safecall;
    function SshCloseTunnel: Integer; safecall;
    function SshCloseTunnelAsync: IChilkatTask; safecall;
    function SshAuthenticatePw(const sshLogin: WideString; const sshPassword: WideString): Integer; safecall;
    function SshAuthenticatePwAsync(const sshLogin: WideString; const sshPassword: WideString): IChilkatTask; safecall;
    function SshAuthenticatePk(const sshLogin: WideString; const privateKey: IChilkatSshKey): Integer; safecall;
    function SshAuthenticatePkAsync(const sshLogin: WideString; const privateKey: IChilkatSshKey): IChilkatTask; safecall;
    function Get_ReceivedInt: Integer; safecall;
    procedure Set_ReceivedInt(pVal: Integer); safecall;
    function ReceiveByte(bUnsigned: Integer): Integer; safecall;
    function ReceiveByteAsync(bUnsigned: Integer): IChilkatTask; safecall;
    function ReceiveInt16(BigEndian: Integer; bUnsigned: Integer): Integer; safecall;
    function ReceiveInt16Async(BigEndian: Integer; bUnsigned: Integer): IChilkatTask; safecall;
    function ReceiveInt32(BigEndian: Integer): Integer; safecall;
    function ReceiveInt32Async(BigEndian: Integer): IChilkatTask; safecall;
    function SendInt32(value: Integer; BigEndian: Integer): Integer; safecall;
    function SendInt32Async(value: Integer; BigEndian: Integer): IChilkatTask; safecall;
    function SendInt16(value: Integer; BigEndian: Integer): Integer; safecall;
    function SendInt16Async(value: Integer; BigEndian: Integer): IChilkatTask; safecall;
    function SendByte(value: Integer): Integer; safecall;
    function SendByteAsync(value: Integer): IChilkatTask; safecall;
    function SshOpenChannel(const hostname: WideString; port: Integer; Ssl: Integer; 
                            maxWaitMs: Integer): IChilkatSocket; safecall;
    function SshOpenChannelAsync(const hostname: WideString; port: Integer; Ssl: Integer; 
                                 maxWaitMs: Integer): IChilkatTask; safecall;
    function Get_AcceptFailReason: Integer; safecall;
    function LoadTaskResult(const task: IChilkatTask): Integer; safecall;
    function UseSsh(const ssh: IChilkatSsh): Integer; safecall;
    function TlsRenegotiate: Integer; safecall;
    function TlsRenegotiateAsync: IChilkatTask; safecall;
    function Get_TlsPinSet: WideString; safecall;
    procedure Set_TlsPinSet(const pVal: WideString); safecall;
    function Get_AbortCurrent: Integer; safecall;
    procedure Set_AbortCurrent(pVal: Integer); safecall;
    function Get_ListenPort: Integer; safecall;
    function ReceiveBd(const binData: IChilkatBinData): Integer; safecall;
    function ReceiveBdAsync(const binData: IChilkatBinData): IChilkatTask; safecall;
    function ReceiveSb(const sb: IChilkatStringBuilder): Integer; safecall;
    function ReceiveSbAsync(const sb: IChilkatStringBuilder): IChilkatTask; safecall;
    function SendBd(const binData: IChilkatBinData; offset: Integer; numBytes: Integer): Integer; safecall;
    function SendBdAsync(const binData: IChilkatBinData; offset: Integer; numBytes: Integer): IChilkatTask; safecall;
    function SendSb(const sb: IChilkatStringBuilder): Integer; safecall;
    function SendSbAsync(const sb: IChilkatStringBuilder): IChilkatTask; safecall;
    function ReceiveBdN(numBytes: Integer; const binData: IChilkatBinData): Integer; safecall;
    function ReceiveBdNAsync(numBytes: Integer; const binData: IChilkatBinData): IChilkatTask; safecall;
    function SendWakeOnLan(const macAddress: WideString; port: Integer; 
                           const ipBroadcastAddr: WideString): Integer; safecall;
    function BindAndListenPortRange(beginPort: Integer; endPort: Integer; backLog: Integer): Integer; safecall;
    function BindAndListenPortRangeAsync(beginPort: Integer; endPort: Integer; backLog: Integer): IChilkatTask; safecall;
    function Get_HttpProxyForHttp: Integer; safecall;
    procedure Set_HttpProxyForHttp(pVal: Integer); safecall;
    function ReceiveUntilByteBd(lookForByte: Integer; const bd: IChilkatBinData): Integer; safecall;
    function ReceiveUntilByteBdAsync(lookForByte: Integer; const bd: IChilkatBinData): IChilkatTask; safecall;
    function SendWakeOnLan2(const macAddress: WideString; port: Integer; 
                            const ipBroadcastAddr: WideString; const password: WideString): Integer; safecall;
    function TakeConnection(const sock: IChilkatSocket): Integer; safecall;
    function Get_RcvBytesPerSec: Integer; safecall;
    function Get_SendBytesPerSec: Integer; safecall;
    procedure ResetPerf(rcvPerf: Integer); safecall;
    function LastJsonData: IChilkatJsonObject; safecall;
    function Get_UncommonOptions: WideString; safecall;
    procedure Set_UncommonOptions(const pVal: WideString); safecall;
    function LoadTaskCaller(const task: IChilkatTask): Integer; safecall;
    function Get_AlpnProtocol: WideString; safecall;
    procedure Set_AlpnProtocol(const pVal: WideString); safecall;
    function Get_SniHostname: WideString; safecall;
    procedure Set_SniHostname(const pVal: WideString); safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property LastMethodSuccess: Integer read Get_LastMethodSuccess write Set_LastMethodSuccess;
    property LastStringResult: WideString read Get_LastStringResult;
    property LastBinaryResult: OleVariant read Get_LastBinaryResult;
    property LastStringResultLen: Integer read Get_LastStringResultLen;
    property AsyncAcceptFinished: Integer read Get_AsyncAcceptFinished;
    property AsyncAcceptLog: WideString read Get_AsyncAcceptLog;
    property AsyncAcceptSuccess: Integer read Get_AsyncAcceptSuccess;
    property AsyncConnectFinished: Integer read Get_AsyncConnectFinished;
    property AsyncConnectLog: WideString read Get_AsyncConnectLog;
    property AsyncConnectSuccess: Integer read Get_AsyncConnectSuccess;
    property AsyncDnsFinished: Integer read Get_AsyncDnsFinished;
    property AsyncDnsLog: WideString read Get_AsyncDnsLog;
    property AsyncDnsResult: WideString read Get_AsyncDnsResult;
    property AsyncDnsSuccess: Integer read Get_AsyncDnsSuccess;
    property AsyncReceiveFinished: Integer read Get_AsyncReceiveFinished;
    property AsyncReceiveLog: WideString read Get_AsyncReceiveLog;
    property AsyncReceiveSuccess: Integer read Get_AsyncReceiveSuccess;
    property AsyncReceivedBytes: OleVariant read Get_AsyncReceivedBytes;
    property AsyncReceivedString: WideString read Get_AsyncReceivedString;
    property AsyncSendFinished: Integer read Get_AsyncSendFinished;
    property AsyncSendLog: WideString read Get_AsyncSendLog;
    property AsyncSendSuccess: Integer read Get_AsyncSendSuccess;
    property BigEndian: Integer read Get_BigEndian write Set_BigEndian;
    property ClientIpAddress: WideString read Get_ClientIpAddress write Set_ClientIpAddress;
    property ClientPort: Integer read Get_ClientPort write Set_ClientPort;
    property ConnectFailReason: Integer read Get_ConnectFailReason;
    property DebugConnectDelayMs: Integer read Get_DebugConnectDelayMs write Set_DebugConnectDelayMs;
    property DebugDnsDelayMs: Integer read Get_DebugDnsDelayMs write Set_DebugDnsDelayMs;
    property ElapsedSeconds: Integer read Get_ElapsedSeconds;
    property HeartbeatMs: Integer read Get_HeartbeatMs write Set_HeartbeatMs;
    property HttpProxyAuthMethod: WideString read Get_HttpProxyAuthMethod write Set_HttpProxyAuthMethod;
    property HttpProxyDomain: WideString read Get_HttpProxyDomain write Set_HttpProxyDomain;
    property HttpProxyHostname: WideString read Get_HttpProxyHostname write Set_HttpProxyHostname;
    property HttpProxyPassword: WideString read Get_HttpProxyPassword write Set_HttpProxyPassword;
    property HttpProxyPort: Integer read Get_HttpProxyPort write Set_HttpProxyPort;
    property HttpProxyUsername: WideString read Get_HttpProxyUsername write Set_HttpProxyUsername;
    property IsConnected: Integer read Get_IsConnected;
    property KeepSessionLog: Integer read Get_KeepSessionLog write Set_KeepSessionLog;
    property LastMethodFailed: Integer read Get_LastMethodFailed;
    property ListenIpv6: Integer read Get_ListenIpv6 write Set_ListenIpv6;
    property LocalIpAddress: WideString read Get_LocalIpAddress;
    property LocalPort: Integer read Get_LocalPort;
    property MaxReadIdleMs: Integer read Get_MaxReadIdleMs write Set_MaxReadIdleMs;
    property MaxSendIdleMs: Integer read Get_MaxSendIdleMs write Set_MaxSendIdleMs;
    property MyIpAddress: WideString read Get_MyIpAddress;
    property NumReceivedClientCerts: Integer read Get_NumReceivedClientCerts;
    property NumSocketsInSet: Integer read Get_NumSocketsInSet;
    property NumSslAcceptableClientCAs: Integer read Get_NumSslAcceptableClientCAs;
    property ObjectId: Integer read Get_ObjectId;
    property ReceivePacketSize: Integer read Get_ReceivePacketSize write Set_ReceivePacketSize;
    property ReceivedCount: Integer read Get_ReceivedCount write Set_ReceivedCount;
    property RemoteIpAddress: WideString read Get_RemoteIpAddress;
    property RemotePort: Integer read Get_RemotePort;
    property SelectorIndex: Integer read Get_SelectorIndex write Set_SelectorIndex;
    property SelectorReadIndex: Integer read Get_SelectorReadIndex write Set_SelectorReadIndex;
    property SelectorWriteIndex: Integer read Get_SelectorWriteIndex write Set_SelectorWriteIndex;
    property SendPacketSize: Integer read Get_SendPacketSize write Set_SendPacketSize;
    property SessionLog: WideString read Get_SessionLog;
    property SessionLogEncoding: WideString read Get_SessionLogEncoding write Set_SessionLogEncoding;
    property SoRcvBuf: Integer read Get_SoRcvBuf write Set_SoRcvBuf;
    property SoReuseAddr: Integer read Get_SoReuseAddr write Set_SoReuseAddr;
    property SoSndBuf: Integer read Get_SoSndBuf write Set_SoSndBuf;
    property SocksHostname: WideString read Get_SocksHostname write Set_SocksHostname;
    property SocksPassword: WideString read Get_SocksPassword write Set_SocksPassword;
    property SocksPort: Integer read Get_SocksPort write Set_SocksPort;
    property SocksUsername: WideString read Get_SocksUsername write Set_SocksUsername;
    property SocksVersion: Integer read Get_SocksVersion write Set_SocksVersion;
    property Ssl: Integer read Get_Ssl write Set_Ssl;
    property SslProtocol: WideString read Get_SslProtocol write Set_SslProtocol;
    property StringCharset: WideString read Get_StringCharset write Set_StringCharset;
    property TcpNoDelay: Integer read Get_TcpNoDelay write Set_TcpNoDelay;
    property UserData: WideString read Get_UserData write Set_UserData;
    property RequireSslCertVerify: Integer read Get_RequireSslCertVerify write Set_RequireSslCertVerify;
    property PreferIpv6: Integer read Get_PreferIpv6 write Set_PreferIpv6;
    property SslAllowedCiphers: WideString read Get_SslAllowedCiphers write Set_SslAllowedCiphers;
    property KeepAlive: Integer read Get_KeepAlive write Set_KeepAlive;
    property ReceiveFailReason: Integer read Get_ReceiveFailReason;
    property SendFailReason: Integer read Get_SendFailReason;
    property PercentDoneScale: Integer read Get_PercentDoneScale write Set_PercentDoneScale;
    property BandwidthThrottleUp: Integer read Get_BandwidthThrottleUp write Set_BandwidthThrottleUp;
    property BandwidthThrottleDown: Integer read Get_BandwidthThrottleDown write Set_BandwidthThrottleDown;
    property TlsVersion: WideString read Get_TlsVersion;
    property TlsCipherSuite: WideString read Get_TlsCipherSuite;
    property ReceivedInt: Integer read Get_ReceivedInt write Set_ReceivedInt;
    property AcceptFailReason: Integer read Get_AcceptFailReason;
    property TlsPinSet: WideString read Get_TlsPinSet write Set_TlsPinSet;
    property AbortCurrent: Integer read Get_AbortCurrent write Set_AbortCurrent;
    property ListenPort: Integer read Get_ListenPort;
    property HttpProxyForHttp: Integer read Get_HttpProxyForHttp write Set_HttpProxyForHttp;
    property RcvBytesPerSec: Integer read Get_RcvBytesPerSec;
    property SendBytesPerSec: Integer read Get_SendBytesPerSec;
    property UncommonOptions: WideString read Get_UncommonOptions write Set_UncommonOptions;
    property AlpnProtocol: WideString read Get_AlpnProtocol write Set_AlpnProtocol;
    property SniHostname: WideString read Get_SniHostname write Set_SniHostname;
  end;

// *********************************************************************//
// DispIntf:  IChilkatSocketDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {93FCA31B-08C3-4E72-836B-B31123F7C2CC}
// *********************************************************************//
  IChilkatSocketDisp = dispinterface
    ['{93FCA31B-08C3-4E72-836B-B31123F7C2CC}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property LastMethodSuccess: Integer dispid 9;
    property LastStringResult: WideString readonly dispid 10;
    property LastBinaryResult: OleVariant readonly dispid 11;
    property LastStringResultLen: Integer readonly dispid 12;
    property AsyncAcceptFinished: Integer readonly dispid 100;
    property AsyncAcceptLog: WideString readonly dispid 101;
    property AsyncAcceptSuccess: Integer readonly dispid 102;
    property AsyncConnectFinished: Integer readonly dispid 103;
    property AsyncConnectLog: WideString readonly dispid 104;
    property AsyncConnectSuccess: Integer readonly dispid 105;
    property AsyncDnsFinished: Integer readonly dispid 106;
    property AsyncDnsLog: WideString readonly dispid 107;
    property AsyncDnsResult: WideString readonly dispid 108;
    property AsyncDnsSuccess: Integer readonly dispid 109;
    property AsyncReceiveFinished: Integer readonly dispid 110;
    property AsyncReceiveLog: WideString readonly dispid 111;
    property AsyncReceiveSuccess: Integer readonly dispid 112;
    property AsyncReceivedBytes: OleVariant readonly dispid 113;
    property AsyncReceivedString: WideString readonly dispid 114;
    property AsyncSendFinished: Integer readonly dispid 115;
    property AsyncSendLog: WideString readonly dispid 116;
    property AsyncSendSuccess: Integer readonly dispid 117;
    property BigEndian: Integer dispid 118;
    property ClientIpAddress: WideString dispid 119;
    property ClientPort: Integer dispid 120;
    property ConnectFailReason: Integer readonly dispid 121;
    property DebugConnectDelayMs: Integer dispid 122;
    property DebugDnsDelayMs: Integer dispid 123;
    property ElapsedSeconds: Integer readonly dispid 124;
    property HeartbeatMs: Integer dispid 125;
    property HttpProxyAuthMethod: WideString dispid 126;
    property HttpProxyDomain: WideString dispid 127;
    property HttpProxyHostname: WideString dispid 128;
    property HttpProxyPassword: WideString dispid 129;
    property HttpProxyPort: Integer dispid 130;
    property HttpProxyUsername: WideString dispid 131;
    property IsConnected: Integer readonly dispid 132;
    property KeepSessionLog: Integer dispid 133;
    property LastMethodFailed: Integer readonly dispid 134;
    property ListenIpv6: Integer dispid 135;
    property LocalIpAddress: WideString readonly dispid 136;
    property LocalPort: Integer readonly dispid 137;
    property MaxReadIdleMs: Integer dispid 138;
    property MaxSendIdleMs: Integer dispid 139;
    property MyIpAddress: WideString readonly dispid 140;
    property NumReceivedClientCerts: Integer readonly dispid 141;
    property NumSocketsInSet: Integer readonly dispid 142;
    property NumSslAcceptableClientCAs: Integer readonly dispid 143;
    property ObjectId: Integer readonly dispid 144;
    property ReceivePacketSize: Integer dispid 145;
    property ReceivedCount: Integer dispid 146;
    property RemoteIpAddress: WideString readonly dispid 147;
    property RemotePort: Integer readonly dispid 148;
    property SelectorIndex: Integer dispid 149;
    property SelectorReadIndex: Integer dispid 150;
    property SelectorWriteIndex: Integer dispid 151;
    property SendPacketSize: Integer dispid 152;
    property SessionLog: WideString readonly dispid 153;
    property SessionLogEncoding: WideString dispid 154;
    property SoRcvBuf: Integer dispid 155;
    property SoReuseAddr: Integer dispid 156;
    property SoSndBuf: Integer dispid 157;
    property SocksHostname: WideString dispid 158;
    property SocksPassword: WideString dispid 159;
    property SocksPort: Integer dispid 160;
    property SocksUsername: WideString dispid 161;
    property SocksVersion: Integer dispid 162;
    property Ssl: Integer dispid 163;
    property SslProtocol: WideString dispid 164;
    property StringCharset: WideString dispid 165;
    property TcpNoDelay: Integer dispid 166;
    property UserData: WideString dispid 167;
    function AcceptNextConnection(maxWaitMs: Integer): IChilkatSocket; dispid 168;
    function AcceptNextConnectionAsync(maxWaitMs: Integer): IChilkatTask; dispid 668;
    function AddSslAcceptableClientCaDn(const certAuthDN: WideString): Integer; dispid 169;
    procedure AsyncAcceptAbort; dispid 170;
    function AsyncAcceptSocket: IChilkatSocket; dispid 171;
    function AsyncAcceptStart(maxWaitMs: Integer): Integer; dispid 172;
    procedure AsyncConnectAbort; dispid 173;
    function AsyncConnectStart(const hostname: WideString; port: Integer; Ssl: Integer; 
                               maxWaitMs: Integer): Integer; dispid 174;
    procedure AsyncDnsAbort; dispid 175;
    function AsyncDnsStart(const hostname: WideString; maxWaitMs: Integer): Integer; dispid 176;
    procedure AsyncReceiveAbort; dispid 177;
    function AsyncReceiveBytes: Integer; dispid 178;
    function AsyncReceiveBytesN(numBytes: Integer): Integer; dispid 179;
    function AsyncReceiveString: Integer; dispid 180;
    function AsyncReceiveToCRLF: Integer; dispid 181;
    function AsyncReceiveUntilMatch(const matchStr: WideString): Integer; dispid 182;
    procedure AsyncSendAbort; dispid 183;
    function AsyncSendByteData(data: OleVariant): Integer; dispid 184;
    function AsyncSendBytes(byteData: OleVariant): Integer; dispid 185;
    function AsyncSendString(const stringToSend: WideString): Integer; dispid 186;
    function BindAndListen(port: Integer; backLog: Integer): Integer; dispid 187;
    function BindAndListenAsync(port: Integer; backLog: Integer): IChilkatTask; dispid 687;
    function CheckWriteable(maxWaitMs: Integer): Integer; dispid 189;
    function CheckWriteableAsync(maxWaitMs: Integer): IChilkatTask; dispid 689;
    procedure ClearSessionLog; dispid 190;
    function Close(maxWaitMs: Integer): Integer; dispid 191;
    function CloseAsync(maxWaitMs: Integer): IChilkatTask; dispid 691;
    function Connect(const hostname: WideString; port: Integer; Ssl: Integer; maxWaitMs: Integer): Integer; dispid 192;
    function ConnectAsync(const hostname: WideString; port: Integer; Ssl: Integer; 
                          maxWaitMs: Integer): IChilkatTask; dispid 692;
    function ConvertFromSsl: Integer; dispid 193;
    function ConvertFromSslAsync: IChilkatTask; dispid 693;
    function ConvertToSsl: Integer; dispid 194;
    function ConvertToSslAsync: IChilkatTask; dispid 694;
    function DnsLookup(const hostname: WideString; maxWaitMs: Integer): WideString; dispid 195;
    function DnsLookupAsync(const hostname: WideString; maxWaitMs: Integer): IChilkatTask; dispid 695;
    function GetMyCert: IChilkatCert; dispid 196;
    function GetReceivedClientCert(index: Integer): IChilkatCert; dispid 197;
    function GetSslAcceptableClientCaDn(index: Integer): WideString; dispid 198;
    function GetSslServerCert: IChilkatCert; dispid 199;
    function InitSslServer(const cert: IChilkatCert): Integer; dispid 200;
    function IsUnlocked: Integer; dispid 201;
    function PollDataAvailable: Integer; dispid 202;
    function PollDataAvailableAsync: IChilkatTask; dispid 702;
    function ReceiveBytes: OleVariant; dispid 203;
    function ReceiveBytesAsync: IChilkatTask; dispid 703;
    function ReceiveBytesENC(const encodingAlg: WideString): WideString; dispid 204;
    function ReceiveBytesENCAsync(const encodingAlg: WideString): IChilkatTask; dispid 704;
    function ReceiveBytesN(numBytes: Integer): OleVariant; dispid 205;
    function ReceiveBytesNAsync(numBytes: Integer): IChilkatTask; dispid 705;
    function ReceiveBytesToFile(const appendFilename: WideString): Integer; dispid 206;
    function ReceiveBytesToFileAsync(const appendFilename: WideString): IChilkatTask; dispid 706;
    function ReceiveCount: Integer; dispid 207;
    function ReceiveCountAsync: IChilkatTask; dispid 707;
    function ReceiveNBytesENC(numBytes: Integer; const encodingAlg: WideString): WideString; dispid 208;
    function ReceiveNBytesENCAsync(numBytes: Integer; const encodingAlg: WideString): IChilkatTask; dispid 708;
    function ReceiveString: WideString; dispid 209;
    function ReceiveStringAsync: IChilkatTask; dispid 709;
    function ReceiveStringMaxN(maxByteCount: Integer): WideString; dispid 210;
    function ReceiveStringMaxNAsync(maxByteCount: Integer): IChilkatTask; dispid 710;
    function ReceiveStringUntilByte(lookForByte: Integer): WideString; dispid 211;
    function ReceiveStringUntilByteAsync(lookForByte: Integer): IChilkatTask; dispid 711;
    function ReceiveToCRLF: WideString; dispid 212;
    function ReceiveToCRLFAsync: IChilkatTask; dispid 712;
    function ReceiveUntilByte(lookForByte: Integer): OleVariant; dispid 213;
    function ReceiveUntilByteAsync(lookForByte: Integer): IChilkatTask; dispid 713;
    function ReceiveUntilMatch(const matchStr: WideString): WideString; dispid 214;
    function ReceiveUntilMatchAsync(const matchStr: WideString): IChilkatTask; dispid 714;
    function SelectForReading(timeoutMs: Integer): Integer; dispid 215;
    function SelectForReadingAsync(timeoutMs: Integer): IChilkatTask; dispid 715;
    function SelectForWriting(timeoutMs: Integer): Integer; dispid 216;
    function SelectForWritingAsync(timeoutMs: Integer): IChilkatTask; dispid 716;
    function SendBytes(data: OleVariant): Integer; dispid 217;
    function SendBytesAsync(data: OleVariant): IChilkatTask; dispid 717;
    function SendBytesENC(const encodedBytes: WideString; const encodingAlg: WideString): Integer; dispid 218;
    function SendBytesENCAsync(const encodedBytes: WideString; const encodingAlg: WideString): IChilkatTask; dispid 718;
    function SendCount(byteCount: Integer): Integer; dispid 219;
    function SendCountAsync(byteCount: Integer): IChilkatTask; dispid 719;
    function SendString(const stringToSend: WideString): Integer; dispid 220;
    function SendStringAsync(const stringToSend: WideString): IChilkatTask; dispid 720;
    function SetSslClientCert(const cert: IChilkatCert): Integer; dispid 221;
    function SetSslClientCertPem(const pemDataOrFilename: WideString; const pemPassword: WideString): Integer; dispid 222;
    function SetSslClientCertPfx(const pfxFilename: WideString; const pfxPassword: WideString): Integer; dispid 223;
    procedure SleepMs(millisec: Integer); dispid 224;
    procedure StartTiming; dispid 225;
    function TakeSocket(const sock: IChilkatSocket): Integer; dispid 226;
    function UnlockComponent(const unlockCode: WideString): Integer; dispid 227;
    procedure Dispose; dispid 228;
    property RequireSslCertVerify: Integer dispid 229;
    function BuildHttpGetRequest(const url: WideString): WideString; dispid 230;
    procedure DnsCacheClear; dispid 231;
    property PreferIpv6: Integer dispid 232;
    function CloneSocket: IChilkatSocket; dispid 233;
    property SslAllowedCiphers: WideString dispid 234;
    property KeepAlive: Integer dispid 235;
    property ReceiveFailReason: Integer readonly dispid 236;
    property SendFailReason: Integer readonly dispid 237;
    property PercentDoneScale: Integer dispid 238;
    property BandwidthThrottleUp: Integer dispid 239;
    property BandwidthThrottleDown: Integer dispid 240;
    property TlsVersion: WideString readonly dispid 241;
    property TlsCipherSuite: WideString readonly dispid 242;
    function SshOpenTunnel(const sshHostname: WideString; sshPort: Integer): Integer; dispid 243;
    function SshOpenTunnelAsync(const sshHostname: WideString; sshPort: Integer): IChilkatTask; dispid 743;
    function SshCloseTunnel: Integer; dispid 244;
    function SshCloseTunnelAsync: IChilkatTask; dispid 744;
    function SshAuthenticatePw(const sshLogin: WideString; const sshPassword: WideString): Integer; dispid 245;
    function SshAuthenticatePwAsync(const sshLogin: WideString; const sshPassword: WideString): IChilkatTask; dispid 745;
    function SshAuthenticatePk(const sshLogin: WideString; const privateKey: IChilkatSshKey): Integer; dispid 246;
    function SshAuthenticatePkAsync(const sshLogin: WideString; const privateKey: IChilkatSshKey): IChilkatTask; dispid 746;
    property ReceivedInt: Integer dispid 247;
    function ReceiveByte(bUnsigned: Integer): Integer; dispid 248;
    function ReceiveByteAsync(bUnsigned: Integer): IChilkatTask; dispid 748;
    function ReceiveInt16(BigEndian: Integer; bUnsigned: Integer): Integer; dispid 249;
    function ReceiveInt16Async(BigEndian: Integer; bUnsigned: Integer): IChilkatTask; dispid 749;
    function ReceiveInt32(BigEndian: Integer): Integer; dispid 250;
    function ReceiveInt32Async(BigEndian: Integer): IChilkatTask; dispid 750;
    function SendInt32(value: Integer; BigEndian: Integer): Integer; dispid 251;
    function SendInt32Async(value: Integer; BigEndian: Integer): IChilkatTask; dispid 751;
    function SendInt16(value: Integer; BigEndian: Integer): Integer; dispid 252;
    function SendInt16Async(value: Integer; BigEndian: Integer): IChilkatTask; dispid 752;
    function SendByte(value: Integer): Integer; dispid 253;
    function SendByteAsync(value: Integer): IChilkatTask; dispid 753;
    function SshOpenChannel(const hostname: WideString; port: Integer; Ssl: Integer; 
                            maxWaitMs: Integer): IChilkatSocket; dispid 254;
    function SshOpenChannelAsync(const hostname: WideString; port: Integer; Ssl: Integer; 
                                 maxWaitMs: Integer): IChilkatTask; dispid 754;
    property AcceptFailReason: Integer readonly dispid 255;
    function LoadTaskResult(const task: IChilkatTask): Integer; dispid 256;
    function UseSsh(const ssh: IChilkatSsh): Integer; dispid 257;
    function TlsRenegotiate: Integer; dispid 258;
    function TlsRenegotiateAsync: IChilkatTask; dispid 758;
    property TlsPinSet: WideString dispid 259;
    property AbortCurrent: Integer dispid 260;
    property ListenPort: Integer readonly dispid 261;
    function ReceiveBd(const binData: IChilkatBinData): Integer; dispid 262;
    function ReceiveBdAsync(const binData: IChilkatBinData): IChilkatTask; dispid 762;
    function ReceiveSb(const sb: IChilkatStringBuilder): Integer; dispid 263;
    function ReceiveSbAsync(const sb: IChilkatStringBuilder): IChilkatTask; dispid 763;
    function SendBd(const binData: IChilkatBinData; offset: Integer; numBytes: Integer): Integer; dispid 264;
    function SendBdAsync(const binData: IChilkatBinData; offset: Integer; numBytes: Integer): IChilkatTask; dispid 764;
    function SendSb(const sb: IChilkatStringBuilder): Integer; dispid 265;
    function SendSbAsync(const sb: IChilkatStringBuilder): IChilkatTask; dispid 765;
    function ReceiveBdN(numBytes: Integer; const binData: IChilkatBinData): Integer; dispid 266;
    function ReceiveBdNAsync(numBytes: Integer; const binData: IChilkatBinData): IChilkatTask; dispid 766;
    function SendWakeOnLan(const macAddress: WideString; port: Integer; 
                           const ipBroadcastAddr: WideString): Integer; dispid 267;
    function BindAndListenPortRange(beginPort: Integer; endPort: Integer; backLog: Integer): Integer; dispid 268;
    function BindAndListenPortRangeAsync(beginPort: Integer; endPort: Integer; backLog: Integer): IChilkatTask; dispid 768;
    property HttpProxyForHttp: Integer dispid 269;
    function ReceiveUntilByteBd(lookForByte: Integer; const bd: IChilkatBinData): Integer; dispid 271;
    function ReceiveUntilByteBdAsync(lookForByte: Integer; const bd: IChilkatBinData): IChilkatTask; dispid 771;
    function SendWakeOnLan2(const macAddress: WideString; port: Integer; 
                            const ipBroadcastAddr: WideString; const password: WideString): Integer; dispid 272;
    function TakeConnection(const sock: IChilkatSocket): Integer; dispid 273;
    property RcvBytesPerSec: Integer readonly dispid 276;
    property SendBytesPerSec: Integer readonly dispid 277;
    procedure ResetPerf(rcvPerf: Integer); dispid 278;
    function LastJsonData: IChilkatJsonObject; dispid 279;
    property UncommonOptions: WideString dispid 280;
    function LoadTaskCaller(const task: IChilkatTask): Integer; dispid 281;
    property AlpnProtocol: WideString dispid 283;
    property SniHostname: WideString dispid 284;
  end;

// *********************************************************************//
// Interface: IChilkatCert
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2CABA7DB-F1DD-4E6D-943B-330CF27F6A5D}
// *********************************************************************//
  IChilkatCert = interface(IDispatch)
    ['{2CABA7DB-F1DD-4E6D-943B-330CF27F6A5D}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_LastMethodSuccess: Integer; safecall;
    procedure Set_LastMethodSuccess(pVal: Integer); safecall;
    function Get_LastStringResult: WideString; safecall;
    function Get_LastBinaryResult: OleVariant; safecall;
    function Get_LastStringResultLen: Integer; safecall;
    function Get_AvoidWindowsPkAccess: Integer; safecall;
    procedure Set_AvoidWindowsPkAccess(pVal: Integer); safecall;
    function Get_CertVersion: Integer; safecall;
    function Get_CspName: WideString; safecall;
    function Get_Expired: Integer; safecall;
    function Get_ForClientAuthentication: Integer; safecall;
    function Get_ForCodeSigning: Integer; safecall;
    function Get_ForSecureEmail: Integer; safecall;
    function Get_ForServerAuthentication: Integer; safecall;
    function Get_ForTimeStamping: Integer; safecall;
    function Get_HasKeyContainer: Integer; safecall;
    function Get_IntendedKeyUsage: Integer; safecall;
    function Get_IsRoot: Integer; safecall;
    function Get_IssuerC: WideString; safecall;
    function Get_IssuerCN: WideString; safecall;
    function Get_IssuerDN: WideString; safecall;
    function Get_IssuerE: WideString; safecall;
    function Get_IssuerL: WideString; safecall;
    function Get_IssuerO: WideString; safecall;
    function Get_IssuerOU: WideString; safecall;
    function Get_IssuerS: WideString; safecall;
    function Get_KeyContainerName: WideString; safecall;
    function Get_MachineKeyset: Integer; safecall;
    function Get_OcspUrl: WideString; safecall;
    function Get_PrivateKeyExportable: Integer; safecall;
    function Get_Revoked: Integer; safecall;
    function Get_Rfc822Name: WideString; safecall;
    function Get_SelfSigned: Integer; safecall;
    function Get_SerialNumber: WideString; safecall;
    function Get_Sha1Thumbprint: WideString; safecall;
    function Get_SignatureVerified: Integer; safecall;
    function Get_Silent: Integer; safecall;
    function Get_SubjectC: WideString; safecall;
    function Get_SubjectCN: WideString; safecall;
    function Get_SubjectDN: WideString; safecall;
    function Get_SubjectE: WideString; safecall;
    function Get_SubjectL: WideString; safecall;
    function Get_SubjectO: WideString; safecall;
    function Get_SubjectOU: WideString; safecall;
    function Get_SubjectS: WideString; safecall;
    function Get_TrustedRoot: Integer; safecall;
    function Get_ValidFrom: TDateTime; safecall;
    function Get_ValidFromStr: WideString; safecall;
    function Get_ValidTo: TDateTime; safecall;
    function Get_ValidToStr: WideString; safecall;
    function CheckRevoked: Integer; safecall;
    function ExportCertDer: OleVariant; safecall;
    function ExportCertDerFile(const path: WideString): Integer; safecall;
    function ExportCertPem: WideString; safecall;
    function ExportCertPemFile(const path: WideString): Integer; safecall;
    function ExportCertXml: WideString; safecall;
    function ExportPrivateKey: IPrivateKey; safecall;
    function ExportPublicKey: IPublicKey; safecall;
    function ExportToPfxFile(const pfxFilename: WideString; const pfxPassword: WideString; 
                             bIncludeCertChain: Integer): Integer; safecall;
    function FindIssuer: IChilkatCert; safecall;
    function GetEncoded: WideString; safecall;
    function GetPrivateKeyPem: WideString; safecall;
    function GetValidFromDt: ICkDateTime; safecall;
    function GetValidToDt: ICkDateTime; safecall;
    function HasPrivateKey: Integer; safecall;
    function LinkPrivateKey(const KeyContainerName: WideString; bMachineKeyset: Integer; 
                            bForSigning: Integer): Integer; safecall;
    function LoadByCommonName(const cn: WideString): Integer; safecall;
    function LoadByEmailAddress(const emailAddress: WideString): Integer; safecall;
    function LoadByIssuerAndSerialNumber(const IssuerCN: WideString; const SerialNumber: WideString): Integer; safecall;
    function LoadFromBase64(const encodedCert: WideString): Integer; safecall;
    function LoadFromBinary(data: OleVariant): Integer; safecall;
    function LoadFromFile(const path: WideString): Integer; safecall;
    function LoadPfxData(pfxData: OleVariant; const password: WideString): Integer; safecall;
    function LoadPfxFile(const pfxPath: WideString; const password: WideString): Integer; safecall;
    function PemFileToDerFile(const fromPath: WideString; const toPath: WideString): Integer; safecall;
    function SaveToFile(const path: WideString): Integer; safecall;
    function SetFromEncoded(const encodedCert: WideString): Integer; safecall;
    function SetPrivateKey(const privKey: IPrivateKey): Integer; safecall;
    function SetPrivateKeyPem(const privKeyPem: WideString): Integer; safecall;
    function ExportToPfxData(const password: WideString; includeCertChain: Integer): OleVariant; safecall;
    function Get_SubjectKeyId: WideString; safecall;
    function Get_AuthorityKeyId: WideString; safecall;
    function UseCertVault(const vault: IChilkatXmlCertVault): Integer; safecall;
    function GetCertChain: IChilkatCertChain; safecall;
    function VerifySignature: Integer; safecall;
    function GetExtensionAsXml(const oid: WideString): WideString; safecall;
    function LoadPem(const strPem: WideString): Integer; safecall;
    function LoadTaskResult(const task: IChilkatTask): Integer; safecall;
    function GetSpkiFingerprint(const hashAlg: WideString; const encoding: WideString): WideString; safecall;
    function ExportToPfxBd(const password: WideString; includeCertChain: Integer; 
                           const pfxData: IChilkatBinData): Integer; safecall;
    function ExportCertDerBd(const cerData: IChilkatBinData): Integer; safecall;
    function LoadPfxBd(const pfxData: IChilkatBinData; const password: WideString): Integer; safecall;
    function LoadFromBd(const certBytes: IChilkatBinData): Integer; safecall;
    function Get_SerialDecimal: WideString; safecall;
    function HashOf(const part: WideString; const hashAlg: WideString; const encoding: WideString): WideString; safecall;
    function Get_SmartCardPin: WideString; safecall;
    procedure Set_SmartCardPin(const pVal: WideString); safecall;
    function CheckSmartCardPin: Integer; safecall;
    function Get_SmartCardNoDialog: Integer; safecall;
    procedure Set_SmartCardNoDialog(pVal: Integer); safecall;
    function X509PKIPathv1: WideString; safecall;
    function LoadFromSmartcard(const csp: WideString): Integer; safecall;
    function LoadByThumbprint(const thumbprint: WideString; const encoding: WideString): Integer; safecall;
    function Get_ExtendedKeyUsage: WideString; safecall;
    function LoadBySubjectOid(const oid: WideString; const value: WideString): Integer; safecall;
    function GetSubjectPart(const partNameOrOid: WideString): WideString; safecall;
    function Get_SubjectAlternativeName: WideString; safecall;
    function Get_UncommonOptions: WideString; safecall;
    procedure Set_UncommonOptions(const pVal: WideString); safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property LastMethodSuccess: Integer read Get_LastMethodSuccess write Set_LastMethodSuccess;
    property LastStringResult: WideString read Get_LastStringResult;
    property LastBinaryResult: OleVariant read Get_LastBinaryResult;
    property LastStringResultLen: Integer read Get_LastStringResultLen;
    property AvoidWindowsPkAccess: Integer read Get_AvoidWindowsPkAccess write Set_AvoidWindowsPkAccess;
    property CertVersion: Integer read Get_CertVersion;
    property CspName: WideString read Get_CspName;
    property Expired: Integer read Get_Expired;
    property ForClientAuthentication: Integer read Get_ForClientAuthentication;
    property ForCodeSigning: Integer read Get_ForCodeSigning;
    property ForSecureEmail: Integer read Get_ForSecureEmail;
    property ForServerAuthentication: Integer read Get_ForServerAuthentication;
    property ForTimeStamping: Integer read Get_ForTimeStamping;
    property HasKeyContainer: Integer read Get_HasKeyContainer;
    property IntendedKeyUsage: Integer read Get_IntendedKeyUsage;
    property IsRoot: Integer read Get_IsRoot;
    property IssuerC: WideString read Get_IssuerC;
    property IssuerCN: WideString read Get_IssuerCN;
    property IssuerDN: WideString read Get_IssuerDN;
    property IssuerE: WideString read Get_IssuerE;
    property IssuerL: WideString read Get_IssuerL;
    property IssuerO: WideString read Get_IssuerO;
    property IssuerOU: WideString read Get_IssuerOU;
    property IssuerS: WideString read Get_IssuerS;
    property KeyContainerName: WideString read Get_KeyContainerName;
    property MachineKeyset: Integer read Get_MachineKeyset;
    property OcspUrl: WideString read Get_OcspUrl;
    property PrivateKeyExportable: Integer read Get_PrivateKeyExportable;
    property Revoked: Integer read Get_Revoked;
    property Rfc822Name: WideString read Get_Rfc822Name;
    property SelfSigned: Integer read Get_SelfSigned;
    property SerialNumber: WideString read Get_SerialNumber;
    property Sha1Thumbprint: WideString read Get_Sha1Thumbprint;
    property SignatureVerified: Integer read Get_SignatureVerified;
    property Silent: Integer read Get_Silent;
    property SubjectC: WideString read Get_SubjectC;
    property SubjectCN: WideString read Get_SubjectCN;
    property SubjectDN: WideString read Get_SubjectDN;
    property SubjectE: WideString read Get_SubjectE;
    property SubjectL: WideString read Get_SubjectL;
    property SubjectO: WideString read Get_SubjectO;
    property SubjectOU: WideString read Get_SubjectOU;
    property SubjectS: WideString read Get_SubjectS;
    property TrustedRoot: Integer read Get_TrustedRoot;
    property ValidFrom: TDateTime read Get_ValidFrom;
    property ValidFromStr: WideString read Get_ValidFromStr;
    property ValidTo: TDateTime read Get_ValidTo;
    property ValidToStr: WideString read Get_ValidToStr;
    property SubjectKeyId: WideString read Get_SubjectKeyId;
    property AuthorityKeyId: WideString read Get_AuthorityKeyId;
    property SerialDecimal: WideString read Get_SerialDecimal;
    property SmartCardPin: WideString read Get_SmartCardPin write Set_SmartCardPin;
    property SmartCardNoDialog: Integer read Get_SmartCardNoDialog write Set_SmartCardNoDialog;
    property ExtendedKeyUsage: WideString read Get_ExtendedKeyUsage;
    property SubjectAlternativeName: WideString read Get_SubjectAlternativeName;
    property UncommonOptions: WideString read Get_UncommonOptions write Set_UncommonOptions;
  end;

// *********************************************************************//
// DispIntf:  IChilkatCertDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2CABA7DB-F1DD-4E6D-943B-330CF27F6A5D}
// *********************************************************************//
  IChilkatCertDisp = dispinterface
    ['{2CABA7DB-F1DD-4E6D-943B-330CF27F6A5D}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property LastMethodSuccess: Integer dispid 9;
    property LastStringResult: WideString readonly dispid 10;
    property LastBinaryResult: OleVariant readonly dispid 11;
    property LastStringResultLen: Integer readonly dispid 12;
    property AvoidWindowsPkAccess: Integer dispid 100;
    property CertVersion: Integer readonly dispid 101;
    property CspName: WideString readonly dispid 102;
    property Expired: Integer readonly dispid 103;
    property ForClientAuthentication: Integer readonly dispid 104;
    property ForCodeSigning: Integer readonly dispid 105;
    property ForSecureEmail: Integer readonly dispid 106;
    property ForServerAuthentication: Integer readonly dispid 107;
    property ForTimeStamping: Integer readonly dispid 108;
    property HasKeyContainer: Integer readonly dispid 109;
    property IntendedKeyUsage: Integer readonly dispid 110;
    property IsRoot: Integer readonly dispid 111;
    property IssuerC: WideString readonly dispid 112;
    property IssuerCN: WideString readonly dispid 113;
    property IssuerDN: WideString readonly dispid 114;
    property IssuerE: WideString readonly dispid 115;
    property IssuerL: WideString readonly dispid 116;
    property IssuerO: WideString readonly dispid 117;
    property IssuerOU: WideString readonly dispid 118;
    property IssuerS: WideString readonly dispid 119;
    property KeyContainerName: WideString readonly dispid 120;
    property MachineKeyset: Integer readonly dispid 121;
    property OcspUrl: WideString readonly dispid 122;
    property PrivateKeyExportable: Integer readonly dispid 123;
    property Revoked: Integer readonly dispid 124;
    property Rfc822Name: WideString readonly dispid 125;
    property SelfSigned: Integer readonly dispid 126;
    property SerialNumber: WideString readonly dispid 127;
    property Sha1Thumbprint: WideString readonly dispid 128;
    property SignatureVerified: Integer readonly dispid 129;
    property Silent: Integer readonly dispid 130;
    property SubjectC: WideString readonly dispid 131;
    property SubjectCN: WideString readonly dispid 132;
    property SubjectDN: WideString readonly dispid 133;
    property SubjectE: WideString readonly dispid 134;
    property SubjectL: WideString readonly dispid 135;
    property SubjectO: WideString readonly dispid 136;
    property SubjectOU: WideString readonly dispid 137;
    property SubjectS: WideString readonly dispid 138;
    property TrustedRoot: Integer readonly dispid 139;
    property ValidFrom: TDateTime readonly dispid 140;
    property ValidFromStr: WideString readonly dispid 141;
    property ValidTo: TDateTime readonly dispid 142;
    property ValidToStr: WideString readonly dispid 143;
    function CheckRevoked: Integer; dispid 144;
    function ExportCertDer: OleVariant; dispid 145;
    function ExportCertDerFile(const path: WideString): Integer; dispid 146;
    function ExportCertPem: WideString; dispid 147;
    function ExportCertPemFile(const path: WideString): Integer; dispid 148;
    function ExportCertXml: WideString; dispid 149;
    function ExportPrivateKey: IPrivateKey; dispid 150;
    function ExportPublicKey: IPublicKey; dispid 151;
    function ExportToPfxFile(const pfxFilename: WideString; const pfxPassword: WideString; 
                             bIncludeCertChain: Integer): Integer; dispid 152;
    function FindIssuer: IChilkatCert; dispid 153;
    function GetEncoded: WideString; dispid 154;
    function GetPrivateKeyPem: WideString; dispid 155;
    function GetValidFromDt: ICkDateTime; dispid 156;
    function GetValidToDt: ICkDateTime; dispid 157;
    function HasPrivateKey: Integer; dispid 158;
    function LinkPrivateKey(const KeyContainerName: WideString; bMachineKeyset: Integer; 
                            bForSigning: Integer): Integer; dispid 159;
    function LoadByCommonName(const cn: WideString): Integer; dispid 160;
    function LoadByEmailAddress(const emailAddress: WideString): Integer; dispid 161;
    function LoadByIssuerAndSerialNumber(const IssuerCN: WideString; const SerialNumber: WideString): Integer; dispid 162;
    function LoadFromBase64(const encodedCert: WideString): Integer; dispid 163;
    function LoadFromBinary(data: OleVariant): Integer; dispid 164;
    function LoadFromFile(const path: WideString): Integer; dispid 165;
    function LoadPfxData(pfxData: OleVariant; const password: WideString): Integer; dispid 166;
    function LoadPfxFile(const pfxPath: WideString; const password: WideString): Integer; dispid 167;
    function PemFileToDerFile(const fromPath: WideString; const toPath: WideString): Integer; dispid 168;
    function SaveToFile(const path: WideString): Integer; dispid 169;
    function SetFromEncoded(const encodedCert: WideString): Integer; dispid 170;
    function SetPrivateKey(const privKey: IPrivateKey): Integer; dispid 171;
    function SetPrivateKeyPem(const privKeyPem: WideString): Integer; dispid 172;
    function ExportToPfxData(const password: WideString; includeCertChain: Integer): OleVariant; dispid 174;
    property SubjectKeyId: WideString readonly dispid 175;
    property AuthorityKeyId: WideString readonly dispid 176;
    function UseCertVault(const vault: IChilkatXmlCertVault): Integer; dispid 177;
    function GetCertChain: IChilkatCertChain; dispid 178;
    function VerifySignature: Integer; dispid 179;
    function GetExtensionAsXml(const oid: WideString): WideString; dispid 180;
    function LoadPem(const strPem: WideString): Integer; dispid 181;
    function LoadTaskResult(const task: IChilkatTask): Integer; dispid 182;
    function GetSpkiFingerprint(const hashAlg: WideString; const encoding: WideString): WideString; dispid 183;
    function ExportToPfxBd(const password: WideString; includeCertChain: Integer; 
                           const pfxData: IChilkatBinData): Integer; dispid 184;
    function ExportCertDerBd(const cerData: IChilkatBinData): Integer; dispid 185;
    function LoadPfxBd(const pfxData: IChilkatBinData; const password: WideString): Integer; dispid 186;
    function LoadFromBd(const certBytes: IChilkatBinData): Integer; dispid 187;
    property SerialDecimal: WideString readonly dispid 188;
    function HashOf(const part: WideString; const hashAlg: WideString; const encoding: WideString): WideString; dispid 189;
    property SmartCardPin: WideString dispid 190;
    function CheckSmartCardPin: Integer; dispid 191;
    property SmartCardNoDialog: Integer dispid 192;
    function X509PKIPathv1: WideString; dispid 193;
    function LoadFromSmartcard(const csp: WideString): Integer; dispid 194;
    function LoadByThumbprint(const thumbprint: WideString; const encoding: WideString): Integer; dispid 197;
    property ExtendedKeyUsage: WideString readonly dispid 198;
    function LoadBySubjectOid(const oid: WideString; const value: WideString): Integer; dispid 199;
    function GetSubjectPart(const partNameOrOid: WideString): WideString; dispid 200;
    property SubjectAlternativeName: WideString readonly dispid 201;
    property UncommonOptions: WideString dispid 202;
  end;

// *********************************************************************//
// Interface: IPrivateKey
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {C791AB84-B72F-4DEF-82ED-156F4B027876}
// *********************************************************************//
  IPrivateKey = interface(IDispatch)
    ['{C791AB84-B72F-4DEF-82ED-156F4B027876}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_LastMethodSuccess: Integer; safecall;
    procedure Set_LastMethodSuccess(pVal: Integer); safecall;
    function Get_LastStringResult: WideString; safecall;
    function Get_LastBinaryResult: OleVariant; safecall;
    function Get_LastStringResultLen: Integer; safecall;
    function GetPkcs8: OleVariant; safecall;
    function GetPkcs8Encrypted(const password: WideString): OleVariant; safecall;
    function GetPkcs8EncryptedPem(const password: WideString): WideString; safecall;
    function GetPkcs8Pem: WideString; safecall;
    function GetRsaDer: OleVariant; safecall;
    function GetRsaPem: WideString; safecall;
    function GetXml: WideString; safecall;
    function LoadEncryptedPem(const pemStr: WideString; const password: WideString): Integer; safecall;
    function LoadEncryptedPemFile(const path: WideString; const password: WideString): Integer; safecall;
    function LoadPem(const str: WideString): Integer; safecall;
    function LoadPemFile(const path: WideString): Integer; safecall;
    function LoadPkcs8(data: OleVariant): Integer; safecall;
    function LoadPkcs8Encrypted(data: OleVariant; const password: WideString): Integer; safecall;
    function LoadPkcs8EncryptedFile(const path: WideString; const password: WideString): Integer; safecall;
    function LoadPkcs8File(const path: WideString): Integer; safecall;
    function LoadPvk(data: OleVariant; const password: WideString): Integer; safecall;
    function LoadPvkFile(const path: WideString; const password: WideString): Integer; safecall;
    function LoadRsaDer(data: OleVariant): Integer; safecall;
    function LoadRsaDerFile(const path: WideString): Integer; safecall;
    function LoadXml(const xml: WideString): Integer; safecall;
    function LoadXmlFile(const path: WideString): Integer; safecall;
    function SavePkcs8EncryptedFile(const password: WideString; const path: WideString): Integer; safecall;
    function SavePkcs8EncryptedPemFile(const password: WideString; const path: WideString): Integer; safecall;
    function SavePkcs8File(const path: WideString): Integer; safecall;
    function SavePkcs8PemFile(const path: WideString): Integer; safecall;
    function SaveRsaDerFile(const path: WideString): Integer; safecall;
    function SaveRsaPemFile(const path: WideString): Integer; safecall;
    function SaveXmlFile(const path: WideString): Integer; safecall;
    function Get_BitLength: Integer; safecall;
    function Get_Pkcs8EncryptAlg: WideString; safecall;
    procedure Set_Pkcs8EncryptAlg(const pVal: WideString); safecall;
    function Get_KeyType: WideString; safecall;
    function GetPublicKey: IPublicKey; safecall;
    function GetPkcs8ENC(const encoding: WideString): WideString; safecall;
    function GetPkcs1ENC(const encoding: WideString): WideString; safecall;
    function GetPkcs8EncryptedENC(const encoding: WideString; const password: WideString): WideString; safecall;
    function GetPkcs1: OleVariant; safecall;
    function GetPkcs1Pem: WideString; safecall;
    function LoadPkcs1(data: OleVariant): Integer; safecall;
    function LoadPkcs1File(const path: WideString): Integer; safecall;
    function SavePkcs1File(const path: WideString): Integer; safecall;
    function SavePemFile(const path: WideString): Integer; safecall;
    function GetJwk: WideString; safecall;
    function LoadJwk(const jsonStr: WideString): Integer; safecall;
    function GetJwkThumbprint(const hashAlg: WideString): WideString; safecall;
    function LoadAnyFormat(const privKeyData: IChilkatBinData; const password: WideString): Integer; safecall;
    function LoadEd25519(const privKey: WideString; const pubKey: WideString): Integer; safecall;
    function LoadAnyFormatFile(const path: WideString; const password: WideString): Integer; safecall;
    function GetRawHex(const pubKey: IChilkatStringBuilder): WideString; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property LastMethodSuccess: Integer read Get_LastMethodSuccess write Set_LastMethodSuccess;
    property LastStringResult: WideString read Get_LastStringResult;
    property LastBinaryResult: OleVariant read Get_LastBinaryResult;
    property LastStringResultLen: Integer read Get_LastStringResultLen;
    property BitLength: Integer read Get_BitLength;
    property Pkcs8EncryptAlg: WideString read Get_Pkcs8EncryptAlg write Set_Pkcs8EncryptAlg;
    property KeyType: WideString read Get_KeyType;
  end;

// *********************************************************************//
// DispIntf:  IPrivateKeyDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {C791AB84-B72F-4DEF-82ED-156F4B027876}
// *********************************************************************//
  IPrivateKeyDisp = dispinterface
    ['{C791AB84-B72F-4DEF-82ED-156F4B027876}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property LastMethodSuccess: Integer dispid 9;
    property LastStringResult: WideString readonly dispid 10;
    property LastBinaryResult: OleVariant readonly dispid 11;
    property LastStringResultLen: Integer readonly dispid 12;
    function GetPkcs8: OleVariant; dispid 100;
    function GetPkcs8Encrypted(const password: WideString): OleVariant; dispid 101;
    function GetPkcs8EncryptedPem(const password: WideString): WideString; dispid 102;
    function GetPkcs8Pem: WideString; dispid 103;
    function GetRsaDer: OleVariant; dispid 104;
    function GetRsaPem: WideString; dispid 105;
    function GetXml: WideString; dispid 106;
    function LoadEncryptedPem(const pemStr: WideString; const password: WideString): Integer; dispid 107;
    function LoadEncryptedPemFile(const path: WideString; const password: WideString): Integer; dispid 108;
    function LoadPem(const str: WideString): Integer; dispid 109;
    function LoadPemFile(const path: WideString): Integer; dispid 110;
    function LoadPkcs8(data: OleVariant): Integer; dispid 111;
    function LoadPkcs8Encrypted(data: OleVariant; const password: WideString): Integer; dispid 112;
    function LoadPkcs8EncryptedFile(const path: WideString; const password: WideString): Integer; dispid 113;
    function LoadPkcs8File(const path: WideString): Integer; dispid 114;
    function LoadPvk(data: OleVariant; const password: WideString): Integer; dispid 115;
    function LoadPvkFile(const path: WideString; const password: WideString): Integer; dispid 116;
    function LoadRsaDer(data: OleVariant): Integer; dispid 117;
    function LoadRsaDerFile(const path: WideString): Integer; dispid 118;
    function LoadXml(const xml: WideString): Integer; dispid 119;
    function LoadXmlFile(const path: WideString): Integer; dispid 120;
    function SavePkcs8EncryptedFile(const password: WideString; const path: WideString): Integer; dispid 121;
    function SavePkcs8EncryptedPemFile(const password: WideString; const path: WideString): Integer; dispid 122;
    function SavePkcs8File(const path: WideString): Integer; dispid 123;
    function SavePkcs8PemFile(const path: WideString): Integer; dispid 124;
    function SaveRsaDerFile(const path: WideString): Integer; dispid 125;
    function SaveRsaPemFile(const path: WideString): Integer; dispid 126;
    function SaveXmlFile(const path: WideString): Integer; dispid 127;
    property BitLength: Integer readonly dispid 128;
    property Pkcs8EncryptAlg: WideString dispid 129;
    property KeyType: WideString readonly dispid 130;
    function GetPublicKey: IPublicKey; dispid 131;
    function GetPkcs8ENC(const encoding: WideString): WideString; dispid 132;
    function GetPkcs1ENC(const encoding: WideString): WideString; dispid 133;
    function GetPkcs8EncryptedENC(const encoding: WideString; const password: WideString): WideString; dispid 134;
    function GetPkcs1: OleVariant; dispid 135;
    function GetPkcs1Pem: WideString; dispid 136;
    function LoadPkcs1(data: OleVariant): Integer; dispid 137;
    function LoadPkcs1File(const path: WideString): Integer; dispid 138;
    function SavePkcs1File(const path: WideString): Integer; dispid 139;
    function SavePemFile(const path: WideString): Integer; dispid 140;
    function GetJwk: WideString; dispid 141;
    function LoadJwk(const jsonStr: WideString): Integer; dispid 142;
    function GetJwkThumbprint(const hashAlg: WideString): WideString; dispid 143;
    function LoadAnyFormat(const privKeyData: IChilkatBinData; const password: WideString): Integer; dispid 144;
    function LoadEd25519(const privKey: WideString; const pubKey: WideString): Integer; dispid 145;
    function LoadAnyFormatFile(const path: WideString; const password: WideString): Integer; dispid 146;
    function GetRawHex(const pubKey: IChilkatStringBuilder): WideString; dispid 147;
  end;

// *********************************************************************//
// Interface: IPublicKey
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {D1EC207F-F466-4114-A304-DF34751223A1}
// *********************************************************************//
  IPublicKey = interface(IDispatch)
    ['{D1EC207F-F466-4114-A304-DF34751223A1}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_LastMethodSuccess: Integer; safecall;
    procedure Set_LastMethodSuccess(pVal: Integer); safecall;
    function Get_LastStringResult: WideString; safecall;
    function Get_LastBinaryResult: OleVariant; safecall;
    function Get_LastStringResultLen: Integer; safecall;
    function GetOpenSslDer: OleVariant; safecall;
    function GetOpenSslPem: WideString; safecall;
    function GetRsaDer: OleVariant; safecall;
    function GetXml: WideString; safecall;
    function LoadOpenSslDer(data: OleVariant): Integer; safecall;
    function LoadOpenSslDerFile(const path: WideString): Integer; safecall;
    function LoadOpenSslPem(const str: WideString): Integer; safecall;
    function LoadOpenSslPemFile(const path: WideString): Integer; safecall;
    function LoadPkcs1Pem(const str: WideString): Integer; safecall;
    function LoadRsaDer(data: OleVariant): Integer; safecall;
    function LoadRsaDerFile(const path: WideString): Integer; safecall;
    function LoadXml(const xml: WideString): Integer; safecall;
    function LoadXmlFile(const path: WideString): Integer; safecall;
    function SaveOpenSslDerFile(const path: WideString): Integer; safecall;
    function SaveOpenSslPemFile(const path: WideString): Integer; safecall;
    function SaveRsaDerFile(const path: WideString): Integer; safecall;
    function SaveXmlFile(const path: WideString): Integer; safecall;
    function LoadBase64(const keyStr: WideString): Integer; safecall;
    function Get_KeyType: WideString; safecall;
    function GetPkcs8ENC(const encoding: WideString): WideString; safecall;
    function GetPkcs1ENC(const encoding: WideString): WideString; safecall;
    function LoadFromBinary(keyBytes: OleVariant): Integer; safecall;
    function LoadFromString(const keyString: WideString): Integer; safecall;
    function LoadFromFile(const path: WideString): Integer; safecall;
    function GetDer(preferPkcs1: Integer): OleVariant; safecall;
    function GetPem(preferPkcs1: Integer): WideString; safecall;
    function GetEncoded(preferPkcs1: Integer; const encoding: WideString): WideString; safecall;
    function SaveDerFile(preferPkcs1: Integer; const path: WideString): Integer; safecall;
    function SavePemFile(preferPkcs1: Integer; const path: WideString): Integer; safecall;
    function GetJwk: WideString; safecall;
    function GetJwkThumbprint(const hashAlg: WideString): WideString; safecall;
    function Get_KeySize: Integer; safecall;
    function LoadEd25519(const pubKey: WideString): Integer; safecall;
    function LoadBd(const bd: IChilkatBinData): Integer; safecall;
    function LoadEcdsa(const curveName: WideString; const Qx: WideString; const Qy: WideString): Integer; safecall;
    function Get_Empty: Integer; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property LastMethodSuccess: Integer read Get_LastMethodSuccess write Set_LastMethodSuccess;
    property LastStringResult: WideString read Get_LastStringResult;
    property LastBinaryResult: OleVariant read Get_LastBinaryResult;
    property LastStringResultLen: Integer read Get_LastStringResultLen;
    property KeyType: WideString read Get_KeyType;
    property KeySize: Integer read Get_KeySize;
    property Empty: Integer read Get_Empty;
  end;

// *********************************************************************//
// DispIntf:  IPublicKeyDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {D1EC207F-F466-4114-A304-DF34751223A1}
// *********************************************************************//
  IPublicKeyDisp = dispinterface
    ['{D1EC207F-F466-4114-A304-DF34751223A1}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property LastMethodSuccess: Integer dispid 9;
    property LastStringResult: WideString readonly dispid 10;
    property LastBinaryResult: OleVariant readonly dispid 11;
    property LastStringResultLen: Integer readonly dispid 12;
    function GetOpenSslDer: OleVariant; dispid 100;
    function GetOpenSslPem: WideString; dispid 101;
    function GetRsaDer: OleVariant; dispid 102;
    function GetXml: WideString; dispid 103;
    function LoadOpenSslDer(data: OleVariant): Integer; dispid 104;
    function LoadOpenSslDerFile(const path: WideString): Integer; dispid 105;
    function LoadOpenSslPem(const str: WideString): Integer; dispid 106;
    function LoadOpenSslPemFile(const path: WideString): Integer; dispid 107;
    function LoadPkcs1Pem(const str: WideString): Integer; dispid 108;
    function LoadRsaDer(data: OleVariant): Integer; dispid 109;
    function LoadRsaDerFile(const path: WideString): Integer; dispid 110;
    function LoadXml(const xml: WideString): Integer; dispid 111;
    function LoadXmlFile(const path: WideString): Integer; dispid 112;
    function SaveOpenSslDerFile(const path: WideString): Integer; dispid 113;
    function SaveOpenSslPemFile(const path: WideString): Integer; dispid 114;
    function SaveRsaDerFile(const path: WideString): Integer; dispid 115;
    function SaveXmlFile(const path: WideString): Integer; dispid 116;
    function LoadBase64(const keyStr: WideString): Integer; dispid 117;
    property KeyType: WideString readonly dispid 118;
    function GetPkcs8ENC(const encoding: WideString): WideString; dispid 119;
    function GetPkcs1ENC(const encoding: WideString): WideString; dispid 120;
    function LoadFromBinary(keyBytes: OleVariant): Integer; dispid 121;
    function LoadFromString(const keyString: WideString): Integer; dispid 122;
    function LoadFromFile(const path: WideString): Integer; dispid 123;
    function GetDer(preferPkcs1: Integer): OleVariant; dispid 124;
    function GetPem(preferPkcs1: Integer): WideString; dispid 125;
    function GetEncoded(preferPkcs1: Integer; const encoding: WideString): WideString; dispid 126;
    function SaveDerFile(preferPkcs1: Integer; const path: WideString): Integer; dispid 127;
    function SavePemFile(preferPkcs1: Integer; const path: WideString): Integer; dispid 128;
    function GetJwk: WideString; dispid 129;
    function GetJwkThumbprint(const hashAlg: WideString): WideString; dispid 130;
    property KeySize: Integer readonly dispid 131;
    function LoadEd25519(const pubKey: WideString): Integer; dispid 132;
    function LoadBd(const bd: IChilkatBinData): Integer; dispid 133;
    function LoadEcdsa(const curveName: WideString; const Qx: WideString; const Qy: WideString): Integer; dispid 134;
    property Empty: Integer readonly dispid 135;
  end;

// *********************************************************************//
// Interface: IChilkatXmlCertVault
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {4C963716-FB14-4D7F-A176-1AC6E30BDEDA}
// *********************************************************************//
  IChilkatXmlCertVault = interface(IDispatch)
    ['{4C963716-FB14-4D7F-A176-1AC6E30BDEDA}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_LastMethodSuccess: Integer; safecall;
    procedure Set_LastMethodSuccess(pVal: Integer); safecall;
    function Get_LastStringResult: WideString; safecall;
    function Get_LastBinaryResult: OleVariant; safecall;
    function Get_LastStringResultLen: Integer; safecall;
    function Get_MasterPassword: WideString; safecall;
    procedure Set_MasterPassword(const pVal: WideString); safecall;
    function AddPfxFile(const path: WideString; const password: WideString): Integer; safecall;
    function AddCertFile(const path: WideString): Integer; safecall;
    function AddPemFile(const path: WideString; const password: WideString): Integer; safecall;
    function SaveXml(const path: WideString): Integer; safecall;
    function LoadXml(const xml: WideString): Integer; safecall;
    function LoadXmlFile(const path: WideString): Integer; safecall;
    function GetXml: WideString; safecall;
    function AddCertBinary(certBytes: OleVariant): Integer; safecall;
    function AddPfxBinary(pfxBytes: OleVariant; const password: WideString): Integer; safecall;
    function AddCertString(const certData: WideString): Integer; safecall;
    function AddPfxEncoded(const encodedBytes: WideString; const encoding: WideString; 
                           const password: WideString): Integer; safecall;
    function AddCertEncoded(const encodedBytes: WideString; const encoding: WideString): Integer; safecall;
    function AddCert(const cert: IChilkatCert): Integer; safecall;
    function AddPfx(const pfx: IChilkatPfx): Integer; safecall;
    function AddCertChain(const certChain: IChilkatCertChain): Integer; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property LastMethodSuccess: Integer read Get_LastMethodSuccess write Set_LastMethodSuccess;
    property LastStringResult: WideString read Get_LastStringResult;
    property LastBinaryResult: OleVariant read Get_LastBinaryResult;
    property LastStringResultLen: Integer read Get_LastStringResultLen;
    property MasterPassword: WideString read Get_MasterPassword write Set_MasterPassword;
  end;

// *********************************************************************//
// DispIntf:  IChilkatXmlCertVaultDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {4C963716-FB14-4D7F-A176-1AC6E30BDEDA}
// *********************************************************************//
  IChilkatXmlCertVaultDisp = dispinterface
    ['{4C963716-FB14-4D7F-A176-1AC6E30BDEDA}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property LastMethodSuccess: Integer dispid 9;
    property LastStringResult: WideString readonly dispid 10;
    property LastBinaryResult: OleVariant readonly dispid 11;
    property LastStringResultLen: Integer readonly dispid 12;
    property MasterPassword: WideString dispid 100;
    function AddPfxFile(const path: WideString; const password: WideString): Integer; dispid 101;
    function AddCertFile(const path: WideString): Integer; dispid 102;
    function AddPemFile(const path: WideString; const password: WideString): Integer; dispid 103;
    function SaveXml(const path: WideString): Integer; dispid 104;
    function LoadXml(const xml: WideString): Integer; dispid 105;
    function LoadXmlFile(const path: WideString): Integer; dispid 106;
    function GetXml: WideString; dispid 107;
    function AddCertBinary(certBytes: OleVariant): Integer; dispid 108;
    function AddPfxBinary(pfxBytes: OleVariant; const password: WideString): Integer; dispid 109;
    function AddCertString(const certData: WideString): Integer; dispid 110;
    function AddPfxEncoded(const encodedBytes: WideString; const encoding: WideString; 
                           const password: WideString): Integer; dispid 111;
    function AddCertEncoded(const encodedBytes: WideString; const encoding: WideString): Integer; dispid 112;
    function AddCert(const cert: IChilkatCert): Integer; dispid 113;
    function AddPfx(const pfx: IChilkatPfx): Integer; dispid 114;
    function AddCertChain(const certChain: IChilkatCertChain): Integer; dispid 115;
  end;

// *********************************************************************//
// Interface: IChilkatPfx
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {1B708D67-5ED0-4A1E-8894-144C531FB095}
// *********************************************************************//
  IChilkatPfx = interface(IDispatch)
    ['{1B708D67-5ED0-4A1E-8894-144C531FB095}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_LastMethodSuccess: Integer; safecall;
    procedure Set_LastMethodSuccess(pVal: Integer); safecall;
    function Get_LastStringResult: WideString; safecall;
    function Get_LastBinaryResult: OleVariant; safecall;
    function Get_LastStringResultLen: Integer; safecall;
    function Get_NumCerts: Integer; safecall;
    function Get_NumPrivateKeys: Integer; safecall;
    function GetCert(index: Integer): IChilkatCert; safecall;
    function GetPrivateKey(index: Integer): IPrivateKey; safecall;
    function LoadPfxBytes(pfxData: OleVariant; const password: WideString): Integer; safecall;
    function LoadPfxEncoded(const encodedData: WideString; const encoding: WideString; 
                            const password: WideString): Integer; safecall;
    function LoadPfxFile(const path: WideString; const password: WideString): Integer; safecall;
    function AddPrivateKey(const privKey: IPrivateKey; const certChain: IChilkatCertChain): Integer; safecall;
    function AddCert(const cert: IChilkatCert; includeChain: Integer): Integer; safecall;
    function UseCertVault(const vault: IChilkatXmlCertVault): Integer; safecall;
    function ToFile(const password: WideString; const path: WideString): Integer; safecall;
    function ToBinary(const password: WideString): OleVariant; safecall;
    function ToEncodedString(const password: WideString; const encoding: WideString): WideString; safecall;
    function ToJavaKeyStore(const alias: WideString; const password: WideString): IChilkatJavaKeyStore; safecall;
    function ToPem: WideString; safecall;
    function LoadPem(const pemStr: WideString; const password: WideString): Integer; safecall;
    function ToPemEx(extendedAttrs: Integer; noKeys: Integer; noCerts: Integer; noCaCerts: Integer; 
                     const encryptAlg: WideString; const password: WideString): WideString; safecall;
    function Get_AlgorithmId: WideString; safecall;
    procedure Set_AlgorithmId(const pVal: WideString); safecall;
    function Get_Pbes2CryptAlg: WideString; safecall;
    procedure Set_Pbes2CryptAlg(const pVal: WideString); safecall;
    function Get_Pbes2HmacAlg: WideString; safecall;
    procedure Set_Pbes2HmacAlg(const pVal: WideString); safecall;
    function Get_UncommonOptions: WideString; safecall;
    procedure Set_UncommonOptions(const pVal: WideString); safecall;
    function LastJsonData: IChilkatJsonObject; safecall;
    function SetSafeBagAttr(forPrivateKey: Integer; index: Integer; const name: WideString; 
                            const value: WideString; const encoding: WideString): Integer; safecall;
    function ImportToWindows(exportable: Integer; userProtected: Integer; MachineKeyset: Integer; 
                             allowOverwriteKey: Integer; allowExport: Integer; 
                             const leafStore: WideString; const intermediateStore: WideString; 
                             const rootStore: WideString; const extraOptions: WideString): Integer; safecall;
    function GetSafeBagAttr(forPrivateKey: Integer; index: Integer; const attrName: WideString): WideString; safecall;
    function FindCertByLocalKeyId(const localKeyId: WideString; const encoding: WideString): IChilkatCert; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property LastMethodSuccess: Integer read Get_LastMethodSuccess write Set_LastMethodSuccess;
    property LastStringResult: WideString read Get_LastStringResult;
    property LastBinaryResult: OleVariant read Get_LastBinaryResult;
    property LastStringResultLen: Integer read Get_LastStringResultLen;
    property NumCerts: Integer read Get_NumCerts;
    property NumPrivateKeys: Integer read Get_NumPrivateKeys;
    property AlgorithmId: WideString read Get_AlgorithmId write Set_AlgorithmId;
    property Pbes2CryptAlg: WideString read Get_Pbes2CryptAlg write Set_Pbes2CryptAlg;
    property Pbes2HmacAlg: WideString read Get_Pbes2HmacAlg write Set_Pbes2HmacAlg;
    property UncommonOptions: WideString read Get_UncommonOptions write Set_UncommonOptions;
  end;

// *********************************************************************//
// DispIntf:  IChilkatPfxDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {1B708D67-5ED0-4A1E-8894-144C531FB095}
// *********************************************************************//
  IChilkatPfxDisp = dispinterface
    ['{1B708D67-5ED0-4A1E-8894-144C531FB095}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property LastMethodSuccess: Integer dispid 9;
    property LastStringResult: WideString readonly dispid 10;
    property LastBinaryResult: OleVariant readonly dispid 11;
    property LastStringResultLen: Integer readonly dispid 12;
    property NumCerts: Integer readonly dispid 100;
    property NumPrivateKeys: Integer readonly dispid 101;
    function GetCert(index: Integer): IChilkatCert; dispid 102;
    function GetPrivateKey(index: Integer): IPrivateKey; dispid 103;
    function LoadPfxBytes(pfxData: OleVariant; const password: WideString): Integer; dispid 104;
    function LoadPfxEncoded(const encodedData: WideString; const encoding: WideString; 
                            const password: WideString): Integer; dispid 105;
    function LoadPfxFile(const path: WideString; const password: WideString): Integer; dispid 106;
    function AddPrivateKey(const privKey: IPrivateKey; const certChain: IChilkatCertChain): Integer; dispid 107;
    function AddCert(const cert: IChilkatCert; includeChain: Integer): Integer; dispid 108;
    function UseCertVault(const vault: IChilkatXmlCertVault): Integer; dispid 109;
    function ToFile(const password: WideString; const path: WideString): Integer; dispid 110;
    function ToBinary(const password: WideString): OleVariant; dispid 111;
    function ToEncodedString(const password: WideString; const encoding: WideString): WideString; dispid 112;
    function ToJavaKeyStore(const alias: WideString; const password: WideString): IChilkatJavaKeyStore; dispid 113;
    function ToPem: WideString; dispid 114;
    function LoadPem(const pemStr: WideString; const password: WideString): Integer; dispid 115;
    function ToPemEx(extendedAttrs: Integer; noKeys: Integer; noCerts: Integer; noCaCerts: Integer; 
                     const encryptAlg: WideString; const password: WideString): WideString; dispid 116;
    property AlgorithmId: WideString dispid 117;
    property Pbes2CryptAlg: WideString dispid 118;
    property Pbes2HmacAlg: WideString dispid 119;
    property UncommonOptions: WideString dispid 120;
    function LastJsonData: IChilkatJsonObject; dispid 121;
    function SetSafeBagAttr(forPrivateKey: Integer; index: Integer; const name: WideString; 
                            const value: WideString; const encoding: WideString): Integer; dispid 122;
    function ImportToWindows(exportable: Integer; userProtected: Integer; MachineKeyset: Integer; 
                             allowOverwriteKey: Integer; allowExport: Integer; 
                             const leafStore: WideString; const intermediateStore: WideString; 
                             const rootStore: WideString; const extraOptions: WideString): Integer; dispid 123;
    function GetSafeBagAttr(forPrivateKey: Integer; index: Integer; const attrName: WideString): WideString; dispid 124;
    function FindCertByLocalKeyId(const localKeyId: WideString; const encoding: WideString): IChilkatCert; dispid 125;
  end;

// *********************************************************************//
// Interface: IChilkatCertChain
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {E05C10E0-F9E3-4E4E-8784-E4DA4285A085}
// *********************************************************************//
  IChilkatCertChain = interface(IDispatch)
    ['{E05C10E0-F9E3-4E4E-8784-E4DA4285A085}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_LastMethodSuccess: Integer; safecall;
    procedure Set_LastMethodSuccess(pVal: Integer); safecall;
    function Get_LastStringResult: WideString; safecall;
    function Get_LastBinaryResult: OleVariant; safecall;
    function Get_LastStringResultLen: Integer; safecall;
    function Get_NumCerts: Integer; safecall;
    function Get_NumExpiredCerts: Integer; safecall;
    function GetCert(index: Integer): IChilkatCert; safecall;
    function VerifyCertSignatures: Integer; safecall;
    function IsRootTrusted(const trustedRoots: IChilkatTrustedRoots): Integer; safecall;
    function Get_ReachesRoot: Integer; safecall;
    function LoadX5C(const jwk: IChilkatJsonObject): Integer; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property LastMethodSuccess: Integer read Get_LastMethodSuccess write Set_LastMethodSuccess;
    property LastStringResult: WideString read Get_LastStringResult;
    property LastBinaryResult: OleVariant read Get_LastBinaryResult;
    property LastStringResultLen: Integer read Get_LastStringResultLen;
    property NumCerts: Integer read Get_NumCerts;
    property NumExpiredCerts: Integer read Get_NumExpiredCerts;
    property ReachesRoot: Integer read Get_ReachesRoot;
  end;

// *********************************************************************//
// DispIntf:  IChilkatCertChainDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {E05C10E0-F9E3-4E4E-8784-E4DA4285A085}
// *********************************************************************//
  IChilkatCertChainDisp = dispinterface
    ['{E05C10E0-F9E3-4E4E-8784-E4DA4285A085}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property LastMethodSuccess: Integer dispid 9;
    property LastStringResult: WideString readonly dispid 10;
    property LastBinaryResult: OleVariant readonly dispid 11;
    property LastStringResultLen: Integer readonly dispid 12;
    property NumCerts: Integer readonly dispid 100;
    property NumExpiredCerts: Integer readonly dispid 101;
    function GetCert(index: Integer): IChilkatCert; dispid 102;
    function VerifyCertSignatures: Integer; dispid 103;
    function IsRootTrusted(const trustedRoots: IChilkatTrustedRoots): Integer; dispid 104;
    property ReachesRoot: Integer readonly dispid 105;
    function LoadX5C(const jwk: IChilkatJsonObject): Integer; dispid 106;
  end;

// *********************************************************************//
// Interface: IChilkatTrustedRoots
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {8B32E2E7-6846-4B3F-B686-A2E62F6A85C4}
// *********************************************************************//
  IChilkatTrustedRoots = interface(IDispatch)
    ['{8B32E2E7-6846-4B3F-B686-A2E62F6A85C4}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_LastMethodSuccess: Integer; safecall;
    procedure Set_LastMethodSuccess(pVal: Integer); safecall;
    function Get_LastStringResult: WideString; safecall;
    function Get_LastBinaryResult: OleVariant; safecall;
    function Get_LastStringResultLen: Integer; safecall;
    function Get_NumCerts: Integer; safecall;
    function LoadCaCertsPem(const path: WideString): Integer; safecall;
    function LoadCaCertsPemAsync(const path: WideString): IChilkatTask; safecall;
    function GetCert(index: Integer): IChilkatCert; safecall;
    function Activate: Integer; safecall;
    function Deactivate: Integer; safecall;
    function Get_TrustSystemCaRoots: Integer; safecall;
    procedure Set_TrustSystemCaRoots(pVal: Integer); safecall;
    function AddCert(const cert: IChilkatCert): Integer; safecall;
    function AddJavaKeyStore(const keystore: IChilkatJavaKeyStore): Integer; safecall;
    function AddJavaKeyStoreAsync(const keystore: IChilkatJavaKeyStore): IChilkatTask; safecall;
    function Get_RejectSelfSignedCerts: Integer; safecall;
    procedure Set_RejectSelfSignedCerts(pVal: Integer); safecall;
    function LoadTaskCaller(const task: IChilkatTask): Integer; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property LastMethodSuccess: Integer read Get_LastMethodSuccess write Set_LastMethodSuccess;
    property LastStringResult: WideString read Get_LastStringResult;
    property LastBinaryResult: OleVariant read Get_LastBinaryResult;
    property LastStringResultLen: Integer read Get_LastStringResultLen;
    property NumCerts: Integer read Get_NumCerts;
    property TrustSystemCaRoots: Integer read Get_TrustSystemCaRoots write Set_TrustSystemCaRoots;
    property RejectSelfSignedCerts: Integer read Get_RejectSelfSignedCerts write Set_RejectSelfSignedCerts;
  end;

// *********************************************************************//
// DispIntf:  IChilkatTrustedRootsDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {8B32E2E7-6846-4B3F-B686-A2E62F6A85C4}
// *********************************************************************//
  IChilkatTrustedRootsDisp = dispinterface
    ['{8B32E2E7-6846-4B3F-B686-A2E62F6A85C4}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property LastMethodSuccess: Integer dispid 9;
    property LastStringResult: WideString readonly dispid 10;
    property LastBinaryResult: OleVariant readonly dispid 11;
    property LastStringResultLen: Integer readonly dispid 12;
    property NumCerts: Integer readonly dispid 100;
    function LoadCaCertsPem(const path: WideString): Integer; dispid 101;
    function LoadCaCertsPemAsync(const path: WideString): IChilkatTask; dispid 601;
    function GetCert(index: Integer): IChilkatCert; dispid 102;
    function Activate: Integer; dispid 103;
    function Deactivate: Integer; dispid 104;
    property TrustSystemCaRoots: Integer dispid 105;
    function AddCert(const cert: IChilkatCert): Integer; dispid 106;
    function AddJavaKeyStore(const keystore: IChilkatJavaKeyStore): Integer; dispid 107;
    function AddJavaKeyStoreAsync(const keystore: IChilkatJavaKeyStore): IChilkatTask; dispid 607;
    property RejectSelfSignedCerts: Integer dispid 108;
    function LoadTaskCaller(const task: IChilkatTask): Integer; dispid 109;
  end;

// *********************************************************************//
// Interface: IChilkatJavaKeyStore
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {ACB125C6-B8C9-46E1-8B9F-2DB44DB1B5EE}
// *********************************************************************//
  IChilkatJavaKeyStore = interface(IDispatch)
    ['{ACB125C6-B8C9-46E1-8B9F-2DB44DB1B5EE}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_LastMethodSuccess: Integer; safecall;
    procedure Set_LastMethodSuccess(pVal: Integer); safecall;
    function Get_LastStringResult: WideString; safecall;
    function Get_LastBinaryResult: OleVariant; safecall;
    function Get_LastStringResultLen: Integer; safecall;
    function LoadFile(const password: WideString; const path: WideString): Integer; safecall;
    function LoadBinary(const password: WideString; jksData: OleVariant): Integer; safecall;
    function LoadEncoded(const password: WideString; const jksEncData: WideString; 
                         const encoding: WideString): Integer; safecall;
    function ToFile(const password: WideString; const path: WideString): Integer; safecall;
    function ToBinary(const password: WideString): OleVariant; safecall;
    function ToEncodedString(const password: WideString; const encoding: WideString): WideString; safecall;
    function Get_VerifyKeyedDigest: Integer; safecall;
    procedure Set_VerifyKeyedDigest(pVal: Integer); safecall;
    function Get_NumTrustedCerts: Integer; safecall;
    function Get_NumPrivateKeys: Integer; safecall;
    function GetTrustedCert(index: Integer): IChilkatCert; safecall;
    function GetTrustedCertAlias(index: Integer): WideString; safecall;
    function GetPrivateKeyAlias(index: Integer): WideString; safecall;
    function GetPrivateKey(const password: WideString; index: Integer): IPrivateKey; safecall;
    function GetCertChain(index: Integer): IChilkatCertChain; safecall;
    function AddTrustedCert(const cert: IChilkatCert; const alias: WideString): Integer; safecall;
    function AddPfx(const pfx: IChilkatPfx; const alias: WideString; const password: WideString): Integer; safecall;
    function Get_RequireCompleteChain: Integer; safecall;
    procedure Set_RequireCompleteChain(pVal: Integer); safecall;
    function UseCertVault(const vault: IChilkatXmlCertVault): Integer; safecall;
    function AddPrivateKey(const cert: IChilkatCert; const alias: WideString; 
                           const password: WideString): Integer; safecall;
    function FindTrustedCert(const alias: WideString; caseSensitive: Integer): IChilkatCert; safecall;
    function FindPrivateKey(const password: WideString; const alias: WideString; 
                            caseSensitive: Integer): IPrivateKey; safecall;
    function FindCertChain(const alias: WideString; caseSensitive: Integer): IChilkatCertChain; safecall;
    function SetAlias(entryType: Integer; index: Integer; const alias: WideString): Integer; safecall;
    function ChangePassword(index: Integer; const oldPassword: WideString; 
                            const newPassword: WideString): Integer; safecall;
    function RemoveEntry(entryType: Integer; index: Integer): Integer; safecall;
    function UnlockComponent(const unlockCode: WideString): Integer; safecall;
    function ToPem(const password: WideString): IChilkatPem; safecall;
    function ToPfx(const password: WideString): IChilkatPfx; safecall;
    function ToJwkSet(const password: WideString; const sbJwkSet: IChilkatStringBuilder): Integer; safecall;
    function Get_NumSecretKeys: Integer; safecall;
    function GetSecretKeyAlias(index: Integer): WideString; safecall;
    function GetSecretKey(const password: WideString; index: Integer; const encoding: WideString): WideString; safecall;
    function AddSecretKey(const encodedKeyBytes: WideString; const encoding: WideString; 
                          const algorithm: WideString; const alias: WideString; 
                          const password: WideString): Integer; safecall;
    function LoadJwkSet(const password: WideString; const jwkSet: IChilkatJsonObject): Integer; safecall;
    function LoadBd(const password: WideString; const bd: IChilkatBinData): Integer; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property LastMethodSuccess: Integer read Get_LastMethodSuccess write Set_LastMethodSuccess;
    property LastStringResult: WideString read Get_LastStringResult;
    property LastBinaryResult: OleVariant read Get_LastBinaryResult;
    property LastStringResultLen: Integer read Get_LastStringResultLen;
    property VerifyKeyedDigest: Integer read Get_VerifyKeyedDigest write Set_VerifyKeyedDigest;
    property NumTrustedCerts: Integer read Get_NumTrustedCerts;
    property NumPrivateKeys: Integer read Get_NumPrivateKeys;
    property RequireCompleteChain: Integer read Get_RequireCompleteChain write Set_RequireCompleteChain;
    property NumSecretKeys: Integer read Get_NumSecretKeys;
  end;

// *********************************************************************//
// DispIntf:  IChilkatJavaKeyStoreDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {ACB125C6-B8C9-46E1-8B9F-2DB44DB1B5EE}
// *********************************************************************//
  IChilkatJavaKeyStoreDisp = dispinterface
    ['{ACB125C6-B8C9-46E1-8B9F-2DB44DB1B5EE}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property LastMethodSuccess: Integer dispid 9;
    property LastStringResult: WideString readonly dispid 10;
    property LastBinaryResult: OleVariant readonly dispid 11;
    property LastStringResultLen: Integer readonly dispid 12;
    function LoadFile(const password: WideString; const path: WideString): Integer; dispid 100;
    function LoadBinary(const password: WideString; jksData: OleVariant): Integer; dispid 101;
    function LoadEncoded(const password: WideString; const jksEncData: WideString; 
                         const encoding: WideString): Integer; dispid 102;
    function ToFile(const password: WideString; const path: WideString): Integer; dispid 103;
    function ToBinary(const password: WideString): OleVariant; dispid 104;
    function ToEncodedString(const password: WideString; const encoding: WideString): WideString; dispid 105;
    property VerifyKeyedDigest: Integer dispid 106;
    property NumTrustedCerts: Integer readonly dispid 107;
    property NumPrivateKeys: Integer readonly dispid 108;
    function GetTrustedCert(index: Integer): IChilkatCert; dispid 109;
    function GetTrustedCertAlias(index: Integer): WideString; dispid 110;
    function GetPrivateKeyAlias(index: Integer): WideString; dispid 111;
    function GetPrivateKey(const password: WideString; index: Integer): IPrivateKey; dispid 112;
    function GetCertChain(index: Integer): IChilkatCertChain; dispid 113;
    function AddTrustedCert(const cert: IChilkatCert; const alias: WideString): Integer; dispid 114;
    function AddPfx(const pfx: IChilkatPfx; const alias: WideString; const password: WideString): Integer; dispid 115;
    property RequireCompleteChain: Integer dispid 116;
    function UseCertVault(const vault: IChilkatXmlCertVault): Integer; dispid 117;
    function AddPrivateKey(const cert: IChilkatCert; const alias: WideString; 
                           const password: WideString): Integer; dispid 118;
    function FindTrustedCert(const alias: WideString; caseSensitive: Integer): IChilkatCert; dispid 119;
    function FindPrivateKey(const password: WideString; const alias: WideString; 
                            caseSensitive: Integer): IPrivateKey; dispid 120;
    function FindCertChain(const alias: WideString; caseSensitive: Integer): IChilkatCertChain; dispid 121;
    function SetAlias(entryType: Integer; index: Integer; const alias: WideString): Integer; dispid 122;
    function ChangePassword(index: Integer; const oldPassword: WideString; 
                            const newPassword: WideString): Integer; dispid 123;
    function RemoveEntry(entryType: Integer; index: Integer): Integer; dispid 124;
    function UnlockComponent(const unlockCode: WideString): Integer; dispid 125;
    function ToPem(const password: WideString): IChilkatPem; dispid 126;
    function ToPfx(const password: WideString): IChilkatPfx; dispid 127;
    function ToJwkSet(const password: WideString; const sbJwkSet: IChilkatStringBuilder): Integer; dispid 128;
    property NumSecretKeys: Integer readonly dispid 129;
    function GetSecretKeyAlias(index: Integer): WideString; dispid 130;
    function GetSecretKey(const password: WideString; index: Integer; const encoding: WideString): WideString; dispid 131;
    function AddSecretKey(const encodedKeyBytes: WideString; const encoding: WideString; 
                          const algorithm: WideString; const alias: WideString; 
                          const password: WideString): Integer; dispid 132;
    function LoadJwkSet(const password: WideString; const jwkSet: IChilkatJsonObject): Integer; dispid 133;
    function LoadBd(const password: WideString; const bd: IChilkatBinData): Integer; dispid 134;
  end;

// *********************************************************************//
// Interface: IChilkatPem
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {011A33C5-ABFF-431E-A08C-D6038DDA1CAA}
// *********************************************************************//
  IChilkatPem = interface(IDispatch)
    ['{011A33C5-ABFF-431E-A08C-D6038DDA1CAA}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_LastMethodSuccess: Integer; safecall;
    procedure Set_LastMethodSuccess(pVal: Integer); safecall;
    function Get_LastStringResult: WideString; safecall;
    function Get_LastBinaryResult: OleVariant; safecall;
    function Get_LastStringResultLen: Integer; safecall;
    function Get_NumCerts: Integer; safecall;
    function Get_NumPrivateKeys: Integer; safecall;
    function LoadPem(const pemContent: WideString; const password: WideString): Integer; safecall;
    function LoadPemAsync(const pemContent: WideString; const password: WideString): IChilkatTask; safecall;
    function GetCert(index: Integer): IChilkatCert; safecall;
    function GetPrivateKey(index: Integer): IPrivateKey; safecall;
    function LoadP7bFile(const path: WideString): Integer; safecall;
    function LoadP7bFileAsync(const path: WideString): IChilkatTask; safecall;
    function ToPem: WideString; safecall;
    function LoadPemFile(const path: WideString; const password: WideString): Integer; safecall;
    function LoadPemFileAsync(const path: WideString; const password: WideString): IChilkatTask; safecall;
    function LoadP7b(p7bData: OleVariant): Integer; safecall;
    function LoadP7bAsync(p7bData: OleVariant): IChilkatTask; safecall;
    function Get_HeartbeatMs: Integer; safecall;
    procedure Set_HeartbeatMs(pVal: Integer); safecall;
    function ToPfx: IChilkatPfx; safecall;
    function ToJks(const alias: WideString; const password: WideString): IChilkatJavaKeyStore; safecall;
    function ToPemEx(extendedAttrs: Integer; noKeys: Integer; noCerts: Integer; noCaCerts: Integer; 
                     const encryptAlg: WideString; const password: WideString): WideString; safecall;
    function AddPrivateKey2(const privKey: IPrivateKey; const certChain: IChilkatCertChain): Integer; safecall;
    function AddPrivateKey(const privateKey: IPrivateKey): Integer; safecall;
    function AddCert(const cert: IChilkatCert; includeChain: Integer): Integer; safecall;
    function RemoveCert(index: Integer): Integer; safecall;
    function RemovePrivateKey(index: Integer): Integer; safecall;
    function Get_NumPublicKeys: Integer; safecall;
    function GetPublicKey(index: Integer): IPublicKey; safecall;
    function Get_PublicKeyFormat: WideString; safecall;
    procedure Set_PublicKeyFormat(const pVal: WideString); safecall;
    function Get_PrivateKeyFormat: WideString; safecall;
    procedure Set_PrivateKeyFormat(const pVal: WideString); safecall;
    function Get_AppendMode: Integer; safecall;
    procedure Set_AppendMode(pVal: Integer); safecall;
    function AddPublicKey(const pubKey: IPublicKey): Integer; safecall;
    function Clear: Integer; safecall;
    function Get_NumCsrs: Integer; safecall;
    function GetEncodedItem(const itemType: WideString; const itemSubType: WideString; 
                            const encoding: WideString; index: Integer): WideString; safecall;
    function AddItem(const itemType: WideString; const encoding: WideString; 
                     const itemData: WideString): Integer; safecall;
    function Get_NumCrls: Integer; safecall;
    function LoadTaskCaller(const task: IChilkatTask): Integer; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property LastMethodSuccess: Integer read Get_LastMethodSuccess write Set_LastMethodSuccess;
    property LastStringResult: WideString read Get_LastStringResult;
    property LastBinaryResult: OleVariant read Get_LastBinaryResult;
    property LastStringResultLen: Integer read Get_LastStringResultLen;
    property NumCerts: Integer read Get_NumCerts;
    property NumPrivateKeys: Integer read Get_NumPrivateKeys;
    property HeartbeatMs: Integer read Get_HeartbeatMs write Set_HeartbeatMs;
    property NumPublicKeys: Integer read Get_NumPublicKeys;
    property PublicKeyFormat: WideString read Get_PublicKeyFormat write Set_PublicKeyFormat;
    property PrivateKeyFormat: WideString read Get_PrivateKeyFormat write Set_PrivateKeyFormat;
    property AppendMode: Integer read Get_AppendMode write Set_AppendMode;
    property NumCsrs: Integer read Get_NumCsrs;
    property NumCrls: Integer read Get_NumCrls;
  end;

// *********************************************************************//
// DispIntf:  IChilkatPemDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {011A33C5-ABFF-431E-A08C-D6038DDA1CAA}
// *********************************************************************//
  IChilkatPemDisp = dispinterface
    ['{011A33C5-ABFF-431E-A08C-D6038DDA1CAA}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property LastMethodSuccess: Integer dispid 9;
    property LastStringResult: WideString readonly dispid 10;
    property LastBinaryResult: OleVariant readonly dispid 11;
    property LastStringResultLen: Integer readonly dispid 12;
    property NumCerts: Integer readonly dispid 100;
    property NumPrivateKeys: Integer readonly dispid 101;
    function LoadPem(const pemContent: WideString; const password: WideString): Integer; dispid 103;
    function LoadPemAsync(const pemContent: WideString; const password: WideString): IChilkatTask; dispid 603;
    function GetCert(index: Integer): IChilkatCert; dispid 104;
    function GetPrivateKey(index: Integer): IPrivateKey; dispid 105;
    function LoadP7bFile(const path: WideString): Integer; dispid 106;
    function LoadP7bFileAsync(const path: WideString): IChilkatTask; dispid 606;
    function ToPem: WideString; dispid 108;
    function LoadPemFile(const path: WideString; const password: WideString): Integer; dispid 112;
    function LoadPemFileAsync(const path: WideString; const password: WideString): IChilkatTask; dispid 612;
    function LoadP7b(p7bData: OleVariant): Integer; dispid 113;
    function LoadP7bAsync(p7bData: OleVariant): IChilkatTask; dispid 613;
    property HeartbeatMs: Integer dispid 114;
    function ToPfx: IChilkatPfx; dispid 115;
    function ToJks(const alias: WideString; const password: WideString): IChilkatJavaKeyStore; dispid 116;
    function ToPemEx(extendedAttrs: Integer; noKeys: Integer; noCerts: Integer; noCaCerts: Integer; 
                     const encryptAlg: WideString; const password: WideString): WideString; dispid 117;
    function AddPrivateKey2(const privKey: IPrivateKey; const certChain: IChilkatCertChain): Integer; dispid 118;
    function AddPrivateKey(const privateKey: IPrivateKey): Integer; dispid 119;
    function AddCert(const cert: IChilkatCert; includeChain: Integer): Integer; dispid 120;
    function RemoveCert(index: Integer): Integer; dispid 121;
    function RemovePrivateKey(index: Integer): Integer; dispid 122;
    property NumPublicKeys: Integer readonly dispid 123;
    function GetPublicKey(index: Integer): IPublicKey; dispid 124;
    property PublicKeyFormat: WideString dispid 125;
    property PrivateKeyFormat: WideString dispid 126;
    property AppendMode: Integer dispid 127;
    function AddPublicKey(const pubKey: IPublicKey): Integer; dispid 128;
    function Clear: Integer; dispid 129;
    property NumCsrs: Integer readonly dispid 130;
    function GetEncodedItem(const itemType: WideString; const itemSubType: WideString; 
                            const encoding: WideString; index: Integer): WideString; dispid 131;
    function AddItem(const itemType: WideString; const encoding: WideString; 
                     const itemData: WideString): Integer; dispid 132;
    property NumCrls: Integer readonly dispid 133;
    function LoadTaskCaller(const task: IChilkatTask): Integer; dispid 134;
  end;

// *********************************************************************//
// Interface: IChilkatJsonObject
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {BDAB5180-01A8-4D6C-AD56-CFD444EA4C07}
// *********************************************************************//
  IChilkatJsonObject = interface(IDispatch)
    ['{BDAB5180-01A8-4D6C-AD56-CFD444EA4C07}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_LastMethodSuccess: Integer; safecall;
    procedure Set_LastMethodSuccess(pVal: Integer); safecall;
    function Get_LastStringResult: WideString; safecall;
    function Get_LastBinaryResult: OleVariant; safecall;
    function Get_LastStringResultLen: Integer; safecall;
    function Load(const json: WideString): Integer; safecall;
    function Get_Size: Integer; safecall;
    function StringAt(index: Integer): WideString; safecall;
    function NameAt(index: Integer): WideString; safecall;
    function IntAt(index: Integer): Integer; safecall;
    function BoolAt(index: Integer): Integer; safecall;
    function ObjectAt(index: Integer): IChilkatJsonObject; safecall;
    function ArrayAt(index: Integer): IChilkatJsonArray; safecall;
    function IsNullAt(index: Integer): Integer; safecall;
    function StringOf(const jsonPath: WideString): WideString; safecall;
    function IntOf(const jsonPath: WideString): Integer; safecall;
    function BoolOf(const jsonPath: WideString): Integer; safecall;
    function ObjectOf(const jsonPath: WideString): IChilkatJsonObject; safecall;
    function ArrayOf(const jsonPath: WideString): IChilkatJsonArray; safecall;
    function IsNullOf(const jsonPath: WideString): Integer; safecall;
    function Get_EmitCompact: Integer; safecall;
    procedure Set_EmitCompact(pVal: Integer); safecall;
    function Get_EmitCrlf: Integer; safecall;
    procedure Set_EmitCrlf(pVal: Integer); safecall;
    function Emit: WideString; safecall;
    function GetDocRoot: IChilkatJsonObject; safecall;
    function IndexOf(const name: WideString): Integer; safecall;
    function SetBoolAt(index: Integer; value: Integer): Integer; safecall;
    function SetIntAt(index: Integer; value: Integer): Integer; safecall;
    function SetStringAt(index: Integer; const value: WideString): Integer; safecall;
    function SetNullAt(index: Integer): Integer; safecall;
    function SetBoolOf(const jsonPath: WideString; value: Integer): Integer; safecall;
    function SetIntOf(const jsonPath: WideString; value: Integer): Integer; safecall;
    function SetStringOf(const jsonPath: WideString; const value: WideString): Integer; safecall;
    function SetNullOf(const jsonPath: WideString): Integer; safecall;
    function Rename(const oldName: WideString; const newName: WideString): Integer; safecall;
    function AddBoolAt(index: Integer; const name: WideString; value: Integer): Integer; safecall;
    function AddIntAt(index: Integer; const name: WideString; value: Integer): Integer; safecall;
    function AddStringAt(index: Integer; const name: WideString; const value: WideString): Integer; safecall;
    function AddNullAt(index: Integer; const name: WideString): Integer; safecall;
    function DeleteAt(index: Integer): Integer; safecall;
    function Delete(const name: WideString): Integer; safecall;
    function AddObjectAt(index: Integer; const name: WideString): Integer; safecall;
    function AddArrayAt(index: Integer; const name: WideString): Integer; safecall;
    function AddNumberAt(index: Integer; const name: WideString; const numericStr: WideString): Integer; safecall;
    function SetNumberAt(index: Integer; const value: WideString): Integer; safecall;
    function SetNumberOf(const jsonPath: WideString; const value: WideString): Integer; safecall;
    function RenameAt(index: Integer; const name: WideString): Integer; safecall;
    function LoadFile(const path: WideString): Integer; safecall;
    function Get_I: Integer; safecall;
    procedure Set_I(pVal: Integer); safecall;
    function Get_J: Integer; safecall;
    procedure Set_J(pVal: Integer); safecall;
    function Get_K: Integer; safecall;
    procedure Set_K(pVal: Integer); safecall;
    function SizeOfArray(const jsonPath: WideString): Integer; safecall;
    function AppendString(const name: WideString; const value: WideString): Integer; safecall;
    function HasMember(const jsonPath: WideString): Integer; safecall;
    function Get_delimiterChar: WideString; safecall;
    procedure Set_delimiterChar(const pVal: WideString); safecall;
    function AppendInt(const name: WideString; value: Integer): Integer; safecall;
    function AppendBool(const name: WideString; value: Integer): Integer; safecall;
    function AppendObject(const name: WideString): IChilkatJsonObject; safecall;
    function AppendArray(const name: WideString): IChilkatJsonArray; safecall;
    function FirebasePut(const jsonPath: WideString; const value: WideString): Integer; safecall;
    function FirebasePatch(const jsonPath: WideString; const jsonData: WideString): Integer; safecall;
    function FirebaseApplyEvent(const name: WideString; const data: WideString): Integer; safecall;
    function TypeAt(index: Integer): Integer; safecall;
    function LoadSb(const sb: IChilkatStringBuilder): Integer; safecall;
    function EmitSb(const sb: IChilkatStringBuilder): Integer; safecall;
    function UpdateString(const jsonPath: WideString; const value: WideString): Integer; safecall;
    function UpdateInt(const jsonPath: WideString; value: Integer): Integer; safecall;
    function UpdateBool(const jsonPath: WideString; value: Integer): Integer; safecall;
    function FindRecord(const arrayPath: WideString; const relPath: WideString; 
                        const value: WideString; caseSensitive: Integer): IChilkatJsonObject; safecall;
    function FindRecordString(const arrayPath: WideString; const relPath: WideString; 
                              const value: WideString; caseSensitive: Integer; 
                              const retRelPath: WideString): WideString; safecall;
    function UpdateNumber(const jsonPath: WideString; const numericStr: WideString): Integer; safecall;
    function UpdateNull(const jsonPath: WideString): Integer; safecall;
    function Clone: IChilkatJsonObject; safecall;
    function EmitWithSubs(const subs: IChilkatHashtable; omitEmpty: Integer): WideString; safecall;
    function Predefine(const name: WideString): Integer; safecall;
    function LoadPredefined(const name: WideString): Integer; safecall;
    function AppendStringArray(const name: WideString; const values: IChilkatStringTable): Integer; safecall;
    function FindObjectWithMember(const name: WideString): IChilkatJsonObject; safecall;
    function JsonTypeOf(const jsonPath: WideString): Integer; safecall;
    function StringOfSb(const jsonPath: WideString; const sb: IChilkatStringBuilder): Integer; safecall;
    function BytesOf(const jsonPath: WideString; const encoding: WideString; 
                     const bd: IChilkatBinData): Integer; safecall;
    function UpdateSb(const jsonPath: WideString; const sb: IChilkatStringBuilder): Integer; safecall;
    function UpdateBd(const jsonPath: WideString; const encoding: WideString; 
                      const bd: IChilkatBinData): Integer; safecall;
    function DateOf(const jsonPath: WideString; const dateTime: ICkDateTime): Integer; safecall;
    function DtOf(const jsonPath: WideString; bLocal: Integer; const dt: IDtObj): Integer; safecall;
    function UpdateNewArray(const jsonPath: WideString): Integer; safecall;
    function UpdateNewObject(const jsonPath: WideString): Integer; safecall;
    procedure Clear; safecall;
    function Swap(index1: Integer; index2: Integer): Integer; safecall;
    function WriteFile(const path: WideString): Integer; safecall;
    function Get_PathPrefix: WideString; safecall;
    procedure Set_PathPrefix(const pVal: WideString); safecall;
    function LoadBd(const bd: IChilkatBinData): Integer; safecall;
    function EmitBd(const bd: IChilkatBinData): Integer; safecall;
    function MoveMember(fromIndex: Integer; toIndex: Integer): Integer; safecall;
    function AddArrayCopyAt(index: Integer; const name: WideString; const jarr: IChilkatJsonArray): Integer; safecall;
    function AddObjectCopyAt(index: Integer; const name: WideString; 
                             const jsonObj: IChilkatJsonObject): Integer; safecall;
    function AppendArrayCopy(const name: WideString; const jarr: IChilkatJsonArray): Integer; safecall;
    function AppendObjectCopy(const name: WideString; const jsonObj: IChilkatJsonObject): Integer; safecall;
    function Get_LowerCaseNames: Integer; safecall;
    procedure Set_LowerCaseNames(pVal: Integer); safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property LastMethodSuccess: Integer read Get_LastMethodSuccess write Set_LastMethodSuccess;
    property LastStringResult: WideString read Get_LastStringResult;
    property LastBinaryResult: OleVariant read Get_LastBinaryResult;
    property LastStringResultLen: Integer read Get_LastStringResultLen;
    property Size: Integer read Get_Size;
    property EmitCompact: Integer read Get_EmitCompact write Set_EmitCompact;
    property EmitCrlf: Integer read Get_EmitCrlf write Set_EmitCrlf;
    property I: Integer read Get_I write Set_I;
    property J: Integer read Get_J write Set_J;
    property K: Integer read Get_K write Set_K;
    property delimiterChar: WideString read Get_delimiterChar write Set_delimiterChar;
    property PathPrefix: WideString read Get_PathPrefix write Set_PathPrefix;
    property LowerCaseNames: Integer read Get_LowerCaseNames write Set_LowerCaseNames;
  end;

// *********************************************************************//
// DispIntf:  IChilkatJsonObjectDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {BDAB5180-01A8-4D6C-AD56-CFD444EA4C07}
// *********************************************************************//
  IChilkatJsonObjectDisp = dispinterface
    ['{BDAB5180-01A8-4D6C-AD56-CFD444EA4C07}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property LastMethodSuccess: Integer dispid 9;
    property LastStringResult: WideString readonly dispid 10;
    property LastBinaryResult: OleVariant readonly dispid 11;
    property LastStringResultLen: Integer readonly dispid 12;
    function Load(const json: WideString): Integer; dispid 100;
    property Size: Integer readonly dispid 101;
    function StringAt(index: Integer): WideString; dispid 102;
    function NameAt(index: Integer): WideString; dispid 103;
    function IntAt(index: Integer): Integer; dispid 104;
    function BoolAt(index: Integer): Integer; dispid 105;
    function ObjectAt(index: Integer): IChilkatJsonObject; dispid 106;
    function ArrayAt(index: Integer): IChilkatJsonArray; dispid 107;
    function IsNullAt(index: Integer): Integer; dispid 108;
    function StringOf(const jsonPath: WideString): WideString; dispid 109;
    function IntOf(const jsonPath: WideString): Integer; dispid 110;
    function BoolOf(const jsonPath: WideString): Integer; dispid 111;
    function ObjectOf(const jsonPath: WideString): IChilkatJsonObject; dispid 112;
    function ArrayOf(const jsonPath: WideString): IChilkatJsonArray; dispid 113;
    function IsNullOf(const jsonPath: WideString): Integer; dispid 114;
    property EmitCompact: Integer dispid 115;
    property EmitCrlf: Integer dispid 116;
    function Emit: WideString; dispid 117;
    function GetDocRoot: IChilkatJsonObject; dispid 118;
    function IndexOf(const name: WideString): Integer; dispid 119;
    function SetBoolAt(index: Integer; value: Integer): Integer; dispid 120;
    function SetIntAt(index: Integer; value: Integer): Integer; dispid 121;
    function SetStringAt(index: Integer; const value: WideString): Integer; dispid 122;
    function SetNullAt(index: Integer): Integer; dispid 123;
    function SetBoolOf(const jsonPath: WideString; value: Integer): Integer; dispid 126;
    function SetIntOf(const jsonPath: WideString; value: Integer): Integer; dispid 127;
    function SetStringOf(const jsonPath: WideString; const value: WideString): Integer; dispid 128;
    function SetNullOf(const jsonPath: WideString): Integer; dispid 129;
    function Rename(const oldName: WideString; const newName: WideString): Integer; dispid 132;
    function AddBoolAt(index: Integer; const name: WideString; value: Integer): Integer; dispid 133;
    function AddIntAt(index: Integer; const name: WideString; value: Integer): Integer; dispid 134;
    function AddStringAt(index: Integer; const name: WideString; const value: WideString): Integer; dispid 135;
    function AddNullAt(index: Integer; const name: WideString): Integer; dispid 136;
    function DeleteAt(index: Integer): Integer; dispid 139;
    function Delete(const name: WideString): Integer; dispid 140;
    function AddObjectAt(index: Integer; const name: WideString): Integer; dispid 143;
    function AddArrayAt(index: Integer; const name: WideString): Integer; dispid 144;
    function AddNumberAt(index: Integer; const name: WideString; const numericStr: WideString): Integer; dispid 145;
    function SetNumberAt(index: Integer; const value: WideString): Integer; dispid 146;
    function SetNumberOf(const jsonPath: WideString; const value: WideString): Integer; dispid 147;
    function RenameAt(index: Integer; const name: WideString): Integer; dispid 148;
    function LoadFile(const path: WideString): Integer; dispid 149;
    property I: Integer dispid 150;
    property J: Integer dispid 151;
    property K: Integer dispid 152;
    function SizeOfArray(const jsonPath: WideString): Integer; dispid 153;
    function AppendString(const name: WideString; const value: WideString): Integer; dispid 154;
    function HasMember(const jsonPath: WideString): Integer; dispid 155;
    property delimiterChar: WideString dispid 156;
    function AppendInt(const name: WideString; value: Integer): Integer; dispid 157;
    function AppendBool(const name: WideString; value: Integer): Integer; dispid 158;
    function AppendObject(const name: WideString): IChilkatJsonObject; dispid 159;
    function AppendArray(const name: WideString): IChilkatJsonArray; dispid 160;
    function FirebasePut(const jsonPath: WideString; const value: WideString): Integer; dispid 161;
    function FirebasePatch(const jsonPath: WideString; const jsonData: WideString): Integer; dispid 162;
    function FirebaseApplyEvent(const name: WideString; const data: WideString): Integer; dispid 163;
    function TypeAt(index: Integer): Integer; dispid 164;
    function LoadSb(const sb: IChilkatStringBuilder): Integer; dispid 165;
    function EmitSb(const sb: IChilkatStringBuilder): Integer; dispid 166;
    function UpdateString(const jsonPath: WideString; const value: WideString): Integer; dispid 167;
    function UpdateInt(const jsonPath: WideString; value: Integer): Integer; dispid 168;
    function UpdateBool(const jsonPath: WideString; value: Integer): Integer; dispid 169;
    function FindRecord(const arrayPath: WideString; const relPath: WideString; 
                        const value: WideString; caseSensitive: Integer): IChilkatJsonObject; dispid 170;
    function FindRecordString(const arrayPath: WideString; const relPath: WideString; 
                              const value: WideString; caseSensitive: Integer; 
                              const retRelPath: WideString): WideString; dispid 171;
    function UpdateNumber(const jsonPath: WideString; const numericStr: WideString): Integer; dispid 172;
    function UpdateNull(const jsonPath: WideString): Integer; dispid 173;
    function Clone: IChilkatJsonObject; dispid 174;
    function EmitWithSubs(const subs: IChilkatHashtable; omitEmpty: Integer): WideString; dispid 175;
    function Predefine(const name: WideString): Integer; dispid 176;
    function LoadPredefined(const name: WideString): Integer; dispid 177;
    function AppendStringArray(const name: WideString; const values: IChilkatStringTable): Integer; dispid 178;
    function FindObjectWithMember(const name: WideString): IChilkatJsonObject; dispid 180;
    function JsonTypeOf(const jsonPath: WideString): Integer; dispid 181;
    function StringOfSb(const jsonPath: WideString; const sb: IChilkatStringBuilder): Integer; dispid 182;
    function BytesOf(const jsonPath: WideString; const encoding: WideString; 
                     const bd: IChilkatBinData): Integer; dispid 183;
    function UpdateSb(const jsonPath: WideString; const sb: IChilkatStringBuilder): Integer; dispid 184;
    function UpdateBd(const jsonPath: WideString; const encoding: WideString; 
                      const bd: IChilkatBinData): Integer; dispid 185;
    function DateOf(const jsonPath: WideString; const dateTime: ICkDateTime): Integer; dispid 189;
    function DtOf(const jsonPath: WideString; bLocal: Integer; const dt: IDtObj): Integer; dispid 190;
    function UpdateNewArray(const jsonPath: WideString): Integer; dispid 191;
    function UpdateNewObject(const jsonPath: WideString): Integer; dispid 192;
    procedure Clear; dispid 193;
    function Swap(index1: Integer; index2: Integer): Integer; dispid 194;
    function WriteFile(const path: WideString): Integer; dispid 195;
    property PathPrefix: WideString dispid 196;
    function LoadBd(const bd: IChilkatBinData): Integer; dispid 197;
    function EmitBd(const bd: IChilkatBinData): Integer; dispid 198;
    function MoveMember(fromIndex: Integer; toIndex: Integer): Integer; dispid 199;
    function AddArrayCopyAt(index: Integer; const name: WideString; const jarr: IChilkatJsonArray): Integer; dispid 200;
    function AddObjectCopyAt(index: Integer; const name: WideString; 
                             const jsonObj: IChilkatJsonObject): Integer; dispid 201;
    function AppendArrayCopy(const name: WideString; const jarr: IChilkatJsonArray): Integer; dispid 202;
    function AppendObjectCopy(const name: WideString; const jsonObj: IChilkatJsonObject): Integer; dispid 203;
    property LowerCaseNames: Integer dispid 204;
  end;

// *********************************************************************//
// Interface: IChilkatJsonArray
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {06F8688C-465F-45DB-A2F5-E1E4EF222D39}
// *********************************************************************//
  IChilkatJsonArray = interface(IDispatch)
    ['{06F8688C-465F-45DB-A2F5-E1E4EF222D39}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_LastMethodSuccess: Integer; safecall;
    procedure Set_LastMethodSuccess(pVal: Integer); safecall;
    function Get_LastStringResult: WideString; safecall;
    function Get_LastBinaryResult: OleVariant; safecall;
    function Get_LastStringResultLen: Integer; safecall;
    function Get_Size: Integer; safecall;
    function ArrayAt(index: Integer): IChilkatJsonArray; safecall;
    function BoolAt(index: Integer): Integer; safecall;
    function IntAt(index: Integer): Integer; safecall;
    function IsNullAt(index: Integer): Integer; safecall;
    function ObjectAt(index: Integer): IChilkatJsonObject; safecall;
    function StringAt(index: Integer): WideString; safecall;
    function SetStringAt(index: Integer; const value: WideString): Integer; safecall;
    function SetNumberAt(index: Integer; const value: WideString): Integer; safecall;
    function SetIntAt(index: Integer; value: Integer): Integer; safecall;
    function SetBoolAt(index: Integer; value: Integer): Integer; safecall;
    function SetNullAt(index: Integer): Integer; safecall;
    function AddStringAt(index: Integer; const value: WideString): Integer; safecall;
    function AddObjectAt(index: Integer): Integer; safecall;
    function AddArrayAt(index: Integer): Integer; safecall;
    function AddNumberAt(index: Integer; const numericStr: WideString): Integer; safecall;
    function AddBoolAt(index: Integer; value: Integer): Integer; safecall;
    function AddIntAt(index: Integer; value: Integer): Integer; safecall;
    function AddNullAt(index: Integer): Integer; safecall;
    function DeleteAt(index: Integer): Integer; safecall;
    function Emit: WideString; safecall;
    function TypeAt(index: Integer): Integer; safecall;
    function LoadSb(const sb: IChilkatStringBuilder): Integer; safecall;
    function Load(const jsonArray: WideString): Integer; safecall;
    function Get_EmitCrlf: Integer; safecall;
    procedure Set_EmitCrlf(pVal: Integer); safecall;
    function Get_EmitCompact: Integer; safecall;
    procedure Set_EmitCompact(pVal: Integer); safecall;
    function EmitSb(const sb: IChilkatStringBuilder): Integer; safecall;
    function DateAt(index: Integer; const dateTime: ICkDateTime): Integer; safecall;
    function DtAt(index: Integer; bLocal: Integer; const dt: IDtObj): Integer; safecall;
    function FindString(const value: WideString; caseSensitive: Integer): Integer; safecall;
    function FindObject(const name: WideString; const value: WideString; caseSensitive: Integer): Integer; safecall;
    function Swap(index1: Integer; index2: Integer): Integer; safecall;
    procedure Clear; safecall;
    function AppendArrayItems(const jarr: IChilkatJsonArray): Integer; safecall;
    function AddObjectCopyAt(index: Integer; const jsonObj: IChilkatJsonObject): Integer; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property LastMethodSuccess: Integer read Get_LastMethodSuccess write Set_LastMethodSuccess;
    property LastStringResult: WideString read Get_LastStringResult;
    property LastBinaryResult: OleVariant read Get_LastBinaryResult;
    property LastStringResultLen: Integer read Get_LastStringResultLen;
    property Size: Integer read Get_Size;
    property EmitCrlf: Integer read Get_EmitCrlf write Set_EmitCrlf;
    property EmitCompact: Integer read Get_EmitCompact write Set_EmitCompact;
  end;

// *********************************************************************//
// DispIntf:  IChilkatJsonArrayDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {06F8688C-465F-45DB-A2F5-E1E4EF222D39}
// *********************************************************************//
  IChilkatJsonArrayDisp = dispinterface
    ['{06F8688C-465F-45DB-A2F5-E1E4EF222D39}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property LastMethodSuccess: Integer dispid 9;
    property LastStringResult: WideString readonly dispid 10;
    property LastBinaryResult: OleVariant readonly dispid 11;
    property LastStringResultLen: Integer readonly dispid 12;
    property Size: Integer readonly dispid 100;
    function ArrayAt(index: Integer): IChilkatJsonArray; dispid 101;
    function BoolAt(index: Integer): Integer; dispid 102;
    function IntAt(index: Integer): Integer; dispid 103;
    function IsNullAt(index: Integer): Integer; dispid 104;
    function ObjectAt(index: Integer): IChilkatJsonObject; dispid 105;
    function StringAt(index: Integer): WideString; dispid 106;
    function SetStringAt(index: Integer; const value: WideString): Integer; dispid 107;
    function SetNumberAt(index: Integer; const value: WideString): Integer; dispid 108;
    function SetIntAt(index: Integer; value: Integer): Integer; dispid 109;
    function SetBoolAt(index: Integer; value: Integer): Integer; dispid 110;
    function SetNullAt(index: Integer): Integer; dispid 111;
    function AddStringAt(index: Integer; const value: WideString): Integer; dispid 112;
    function AddObjectAt(index: Integer): Integer; dispid 113;
    function AddArrayAt(index: Integer): Integer; dispid 114;
    function AddNumberAt(index: Integer; const numericStr: WideString): Integer; dispid 115;
    function AddBoolAt(index: Integer; value: Integer): Integer; dispid 116;
    function AddIntAt(index: Integer; value: Integer): Integer; dispid 117;
    function AddNullAt(index: Integer): Integer; dispid 118;
    function DeleteAt(index: Integer): Integer; dispid 119;
    function Emit: WideString; dispid 120;
    function TypeAt(index: Integer): Integer; dispid 121;
    function LoadSb(const sb: IChilkatStringBuilder): Integer; dispid 122;
    function Load(const jsonArray: WideString): Integer; dispid 123;
    property EmitCrlf: Integer dispid 124;
    property EmitCompact: Integer dispid 125;
    function EmitSb(const sb: IChilkatStringBuilder): Integer; dispid 126;
    function DateAt(index: Integer; const dateTime: ICkDateTime): Integer; dispid 127;
    function DtAt(index: Integer; bLocal: Integer; const dt: IDtObj): Integer; dispid 128;
    function FindString(const value: WideString; caseSensitive: Integer): Integer; dispid 129;
    function FindObject(const name: WideString; const value: WideString; caseSensitive: Integer): Integer; dispid 131;
    function Swap(index1: Integer; index2: Integer): Integer; dispid 132;
    procedure Clear; dispid 133;
    function AppendArrayItems(const jarr: IChilkatJsonArray): Integer; dispid 134;
    function AddObjectCopyAt(index: Integer; const jsonObj: IChilkatJsonObject): Integer; dispid 135;
  end;

// *********************************************************************//
// Interface: IChilkatHashtable
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {D9F89B84-C49F-432A-82BF-F44C1BF16871}
// *********************************************************************//
  IChilkatHashtable = interface(IDispatch)
    ['{D9F89B84-C49F-432A-82BF-F44C1BF16871}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastMethodSuccess: Integer; safecall;
    procedure Set_LastMethodSuccess(pVal: Integer); safecall;
    function Get_LastStringResult: WideString; safecall;
    function Get_LastBinaryResult: OleVariant; safecall;
    function Get_LastStringResultLen: Integer; safecall;
    function AddStr(const key: WideString; const value: WideString): Integer; safecall;
    function AddInt(const key: WideString; value: Integer): Integer; safecall;
    procedure Clear; safecall;
    function Contains(const key: WideString): Integer; safecall;
    function Remove(const key: WideString): Integer; safecall;
    function LookupStr(const key: WideString): WideString; safecall;
    function LookupInt(const key: WideString): Integer; safecall;
    function ClearWithNewCapacity(capacity: Integer): Integer; safecall;
    function GetKeys(const strTable: IChilkatStringTable): Integer; safecall;
    function AddQueryParams(const queryParams: WideString): Integer; safecall;
    function ToXmlSb(const sbXml: IChilkatStringBuilder): Integer; safecall;
    function AddFromXmlSb(const sbXml: IChilkatStringBuilder): Integer; safecall;
    function ContainsIntKey(key: Integer): Integer; safecall;
    property LastMethodSuccess: Integer read Get_LastMethodSuccess write Set_LastMethodSuccess;
    property LastStringResult: WideString read Get_LastStringResult;
    property LastBinaryResult: OleVariant read Get_LastBinaryResult;
    property LastStringResultLen: Integer read Get_LastStringResultLen;
  end;

// *********************************************************************//
// DispIntf:  IChilkatHashtableDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {D9F89B84-C49F-432A-82BF-F44C1BF16871}
// *********************************************************************//
  IChilkatHashtableDisp = dispinterface
    ['{D9F89B84-C49F-432A-82BF-F44C1BF16871}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastMethodSuccess: Integer dispid 9;
    property LastStringResult: WideString readonly dispid 10;
    property LastBinaryResult: OleVariant readonly dispid 11;
    property LastStringResultLen: Integer readonly dispid 12;
    function AddStr(const key: WideString; const value: WideString): Integer; dispid 100;
    function AddInt(const key: WideString; value: Integer): Integer; dispid 101;
    procedure Clear; dispid 102;
    function Contains(const key: WideString): Integer; dispid 103;
    function Remove(const key: WideString): Integer; dispid 104;
    function LookupStr(const key: WideString): WideString; dispid 105;
    function LookupInt(const key: WideString): Integer; dispid 106;
    function ClearWithNewCapacity(capacity: Integer): Integer; dispid 107;
    function GetKeys(const strTable: IChilkatStringTable): Integer; dispid 108;
    function AddQueryParams(const queryParams: WideString): Integer; dispid 109;
    function ToXmlSb(const sbXml: IChilkatStringBuilder): Integer; dispid 110;
    function AddFromXmlSb(const sbXml: IChilkatStringBuilder): Integer; dispid 111;
    function ContainsIntKey(key: Integer): Integer; dispid 113;
  end;

// *********************************************************************//
// Interface: IChilkatStringTable
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {589D07F4-1FED-450D-B896-87C88DC56F70}
// *********************************************************************//
  IChilkatStringTable = interface(IDispatch)
    ['{589D07F4-1FED-450D-B896-87C88DC56F70}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_LastMethodSuccess: Integer; safecall;
    procedure Set_LastMethodSuccess(pVal: Integer); safecall;
    function Get_LastStringResult: WideString; safecall;
    function Get_LastBinaryResult: OleVariant; safecall;
    function Get_LastStringResultLen: Integer; safecall;
    function Get_Count: Integer; safecall;
    function AppendFromFile(maxLineLen: Integer; const charset: WideString; const path: WideString): Integer; safecall;
    function Append(const value: WideString): Integer; safecall;
    function StringAt(index: Integer): WideString; safecall;
    function SaveToFile(const charset: WideString; bCrlf: Integer; const path: WideString): Integer; safecall;
    function SplitAndAppend(const inStr: WideString; const delimiterChar: WideString; 
                            exceptDoubleQuoted: Integer; exceptEscaped: Integer): Integer; safecall;
    function AppendFromSb(const sb: IChilkatStringBuilder): Integer; safecall;
    procedure Clear; safecall;
    function IntAt(index: Integer): Integer; safecall;
    function FindSubstring(startIndex: Integer; const substr: WideString; caseSensitive: Integer): Integer; safecall;
    function Sort(ascending: Integer; caseSensitive: Integer): Integer; safecall;
    function GetStrings(startIdx: Integer; Count: Integer; crlf: Integer): WideString; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property LastMethodSuccess: Integer read Get_LastMethodSuccess write Set_LastMethodSuccess;
    property LastStringResult: WideString read Get_LastStringResult;
    property LastBinaryResult: OleVariant read Get_LastBinaryResult;
    property LastStringResultLen: Integer read Get_LastStringResultLen;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  IChilkatStringTableDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {589D07F4-1FED-450D-B896-87C88DC56F70}
// *********************************************************************//
  IChilkatStringTableDisp = dispinterface
    ['{589D07F4-1FED-450D-B896-87C88DC56F70}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property LastMethodSuccess: Integer dispid 9;
    property LastStringResult: WideString readonly dispid 10;
    property LastBinaryResult: OleVariant readonly dispid 11;
    property LastStringResultLen: Integer readonly dispid 12;
    property Count: Integer readonly dispid 100;
    function AppendFromFile(maxLineLen: Integer; const charset: WideString; const path: WideString): Integer; dispid 102;
    function Append(const value: WideString): Integer; dispid 103;
    function StringAt(index: Integer): WideString; dispid 104;
    function SaveToFile(const charset: WideString; bCrlf: Integer; const path: WideString): Integer; dispid 105;
    function SplitAndAppend(const inStr: WideString; const delimiterChar: WideString; 
                            exceptDoubleQuoted: Integer; exceptEscaped: Integer): Integer; dispid 106;
    function AppendFromSb(const sb: IChilkatStringBuilder): Integer; dispid 107;
    procedure Clear; dispid 108;
    function IntAt(index: Integer): Integer; dispid 109;
    function FindSubstring(startIndex: Integer; const substr: WideString; caseSensitive: Integer): Integer; dispid 110;
    function Sort(ascending: Integer; caseSensitive: Integer): Integer; dispid 111;
    function GetStrings(startIdx: Integer; Count: Integer; crlf: Integer): WideString; dispid 112;
  end;

// *********************************************************************//
// Interface: IChilkatSshKey
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {C574CD73-D2A4-43C4-8A00-3A8A8FC3FA79}
// *********************************************************************//
  IChilkatSshKey = interface(IDispatch)
    ['{C574CD73-D2A4-43C4-8A00-3A8A8FC3FA79}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_LastMethodSuccess: Integer; safecall;
    procedure Set_LastMethodSuccess(pVal: Integer); safecall;
    function Get_LastStringResult: WideString; safecall;
    function Get_LastBinaryResult: OleVariant; safecall;
    function Get_LastStringResultLen: Integer; safecall;
    function Get_IsDsaKey: Integer; safecall;
    function Get_IsPrivateKey: Integer; safecall;
    function Get_IsRsaKey: Integer; safecall;
    function Get_password: WideString; safecall;
    procedure Set_password(const pVal: WideString); safecall;
    function Get_Comment: WideString; safecall;
    procedure Set_Comment(const pVal: WideString); safecall;
    function FromOpenSshPrivateKey(const keyStr: WideString): Integer; safecall;
    function FromOpenSshPublicKey(const keyStr: WideString): Integer; safecall;
    function FromPuttyPrivateKey(const keyStr: WideString): Integer; safecall;
    function FromRfc4716PublicKey(const keyStr: WideString): Integer; safecall;
    function FromXml(const xmlKey: WideString): Integer; safecall;
    function GenFingerprint: WideString; safecall;
    function GenerateDsaKey(numBits: Integer): Integer; safecall;
    function GenerateRsaKey(numBits: Integer; exponent: Integer): Integer; safecall;
    function LoadText(const filename: WideString): WideString; safecall;
    function SaveText(const strToSave: WideString; const filename: WideString): Integer; safecall;
    function ToOpenSshPrivateKey(bEncrypt: Integer): WideString; safecall;
    function ToOpenSshPublicKey: WideString; safecall;
    function ToPuttyPrivateKey(bEncrypt: Integer): WideString; safecall;
    function ToRfc4716PublicKey: WideString; safecall;
    function ToXml: WideString; safecall;
    function Get_KeyType: WideString; safecall;
    function GenerateEd25519Key: Integer; safecall;
    function GenerateEcdsaKey(const curveName: WideString): Integer; safecall;
    function Get_UncommonOptions: WideString; safecall;
    procedure Set_UncommonOptions(const pVal: WideString); safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property LastMethodSuccess: Integer read Get_LastMethodSuccess write Set_LastMethodSuccess;
    property LastStringResult: WideString read Get_LastStringResult;
    property LastBinaryResult: OleVariant read Get_LastBinaryResult;
    property LastStringResultLen: Integer read Get_LastStringResultLen;
    property IsDsaKey: Integer read Get_IsDsaKey;
    property IsPrivateKey: Integer read Get_IsPrivateKey;
    property IsRsaKey: Integer read Get_IsRsaKey;
    property password: WideString read Get_password write Set_password;
    property Comment: WideString read Get_Comment write Set_Comment;
    property KeyType: WideString read Get_KeyType;
    property UncommonOptions: WideString read Get_UncommonOptions write Set_UncommonOptions;
  end;

// *********************************************************************//
// DispIntf:  IChilkatSshKeyDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {C574CD73-D2A4-43C4-8A00-3A8A8FC3FA79}
// *********************************************************************//
  IChilkatSshKeyDisp = dispinterface
    ['{C574CD73-D2A4-43C4-8A00-3A8A8FC3FA79}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property LastMethodSuccess: Integer dispid 9;
    property LastStringResult: WideString readonly dispid 10;
    property LastBinaryResult: OleVariant readonly dispid 11;
    property LastStringResultLen: Integer readonly dispid 12;
    property IsDsaKey: Integer readonly dispid 100;
    property IsPrivateKey: Integer readonly dispid 101;
    property IsRsaKey: Integer readonly dispid 102;
    property password: WideString dispid 103;
    property Comment: WideString dispid 104;
    function FromOpenSshPrivateKey(const keyStr: WideString): Integer; dispid 105;
    function FromOpenSshPublicKey(const keyStr: WideString): Integer; dispid 106;
    function FromPuttyPrivateKey(const keyStr: WideString): Integer; dispid 107;
    function FromRfc4716PublicKey(const keyStr: WideString): Integer; dispid 108;
    function FromXml(const xmlKey: WideString): Integer; dispid 109;
    function GenFingerprint: WideString; dispid 110;
    function GenerateDsaKey(numBits: Integer): Integer; dispid 111;
    function GenerateRsaKey(numBits: Integer; exponent: Integer): Integer; dispid 112;
    function LoadText(const filename: WideString): WideString; dispid 113;
    function SaveText(const strToSave: WideString; const filename: WideString): Integer; dispid 114;
    function ToOpenSshPrivateKey(bEncrypt: Integer): WideString; dispid 115;
    function ToOpenSshPublicKey: WideString; dispid 116;
    function ToPuttyPrivateKey(bEncrypt: Integer): WideString; dispid 117;
    function ToRfc4716PublicKey: WideString; dispid 118;
    function ToXml: WideString; dispid 119;
    property KeyType: WideString readonly dispid 120;
    function GenerateEd25519Key: Integer; dispid 121;
    function GenerateEcdsaKey(const curveName: WideString): Integer; dispid 122;
    property UncommonOptions: WideString dispid 123;
  end;

// *********************************************************************//
// Interface: IChilkatSsh
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {792D2027-B40F-4894-9248-5E9A3FA09F36}
// *********************************************************************//
  IChilkatSsh = interface(IDispatch)
    ['{792D2027-B40F-4894-9248-5E9A3FA09F36}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_LastMethodSuccess: Integer; safecall;
    procedure Set_LastMethodSuccess(pVal: Integer); safecall;
    function Get_LastStringResult: WideString; safecall;
    function Get_LastBinaryResult: OleVariant; safecall;
    function Get_LastStringResultLen: Integer; safecall;
    function Get_ChannelOpenFailCode: Integer; safecall;
    function Get_ChannelOpenFailReason: WideString; safecall;
    function Get_ClientIdentifier: WideString; safecall;
    procedure Set_ClientIdentifier(const pVal: WideString); safecall;
    function Get_ClientIpAddress: WideString; safecall;
    procedure Set_ClientIpAddress(const pVal: WideString); safecall;
    function Get_ConnectTimeoutMs: Integer; safecall;
    procedure Set_ConnectTimeoutMs(pVal: Integer); safecall;
    function Get_DisconnectCode: Integer; safecall;
    function Get_DisconnectReason: WideString; safecall;
    function Get_ForceCipher: WideString; safecall;
    procedure Set_ForceCipher(const pVal: WideString); safecall;
    function Get_HeartbeatMs: Integer; safecall;
    procedure Set_HeartbeatMs(pVal: Integer); safecall;
    function Get_HostKeyAlg: WideString; safecall;
    procedure Set_HostKeyAlg(const pVal: WideString); safecall;
    function Get_HostKeyFingerprint: WideString; safecall;
    function Get_HttpProxyAuthMethod: WideString; safecall;
    procedure Set_HttpProxyAuthMethod(const pVal: WideString); safecall;
    function Get_HttpProxyDomain: WideString; safecall;
    procedure Set_HttpProxyDomain(const pVal: WideString); safecall;
    function Get_HttpProxyHostname: WideString; safecall;
    procedure Set_HttpProxyHostname(const pVal: WideString); safecall;
    function Get_HttpProxyPassword: WideString; safecall;
    procedure Set_HttpProxyPassword(const pVal: WideString); safecall;
    function Get_HttpProxyPort: Integer; safecall;
    procedure Set_HttpProxyPort(pVal: Integer); safecall;
    function Get_HttpProxyUsername: WideString; safecall;
    procedure Set_HttpProxyUsername(const pVal: WideString); safecall;
    function Get_IdleTimeoutMs: Integer; safecall;
    procedure Set_IdleTimeoutMs(pVal: Integer); safecall;
    function Get_IsConnected: Integer; safecall;
    function Get_KeepSessionLog: Integer; safecall;
    procedure Set_KeepSessionLog(pVal: Integer); safecall;
    function Get_MaxPacketSize: Integer; safecall;
    procedure Set_MaxPacketSize(pVal: Integer); safecall;
    function Get_NumOpenChannels: Integer; safecall;
    function Get_PasswordChangeRequested: Integer; safecall;
    function Get_ReadTimeoutMs: Integer; safecall;
    procedure Set_ReadTimeoutMs(pVal: Integer); safecall;
    function Get_SessionLog: WideString; safecall;
    function Get_SoRcvBuf: Integer; safecall;
    procedure Set_SoRcvBuf(pVal: Integer); safecall;
    function Get_SoSndBuf: Integer; safecall;
    procedure Set_SoSndBuf(pVal: Integer); safecall;
    function Get_SocksHostname: WideString; safecall;
    procedure Set_SocksHostname(const pVal: WideString); safecall;
    function Get_SocksPassword: WideString; safecall;
    procedure Set_SocksPassword(const pVal: WideString); safecall;
    function Get_SocksPort: Integer; safecall;
    procedure Set_SocksPort(pVal: Integer); safecall;
    function Get_SocksUsername: WideString; safecall;
    procedure Set_SocksUsername(const pVal: WideString); safecall;
    function Get_SocksVersion: Integer; safecall;
    procedure Set_SocksVersion(pVal: Integer); safecall;
    function Get_StderrToStdout: Integer; safecall;
    procedure Set_StderrToStdout(pVal: Integer); safecall;
    function Get_TcpNoDelay: Integer; safecall;
    procedure Set_TcpNoDelay(pVal: Integer); safecall;
    function AuthenticatePk(const username: WideString; const privateKey: IChilkatSshKey): Integer; safecall;
    function AuthenticatePkAsync(const username: WideString; const privateKey: IChilkatSshKey): IChilkatTask; safecall;
    function AuthenticatePw(const login: WideString; const password: WideString): Integer; safecall;
    function AuthenticatePwAsync(const login: WideString; const password: WideString): IChilkatTask; safecall;
    function AuthenticatePwPk(const username: WideString; const password: WideString; 
                              const privateKey: IChilkatSshKey): Integer; safecall;
    function AuthenticatePwPkAsync(const username: WideString; const password: WideString; 
                                   const privateKey: IChilkatSshKey): IChilkatTask; safecall;
    function ChannelIsOpen(channelNum: Integer): Integer; safecall;
    function ChannelPoll(channelNum: Integer; pollTimeoutMs: Integer): Integer; safecall;
    function ChannelPollAsync(channelNum: Integer; pollTimeoutMs: Integer): IChilkatTask; safecall;
    function ChannelRead(channelNum: Integer): Integer; safecall;
    function ChannelReadAsync(channelNum: Integer): IChilkatTask; safecall;
    function ChannelReadAndPoll(channelNum: Integer; pollTimeoutMs: Integer): Integer; safecall;
    function ChannelReadAndPollAsync(channelNum: Integer; pollTimeoutMs: Integer): IChilkatTask; safecall;
    function ChannelReadAndPoll2(channelNum: Integer; pollTimeoutMs: Integer; maxNumBytes: Integer): Integer; safecall;
    function ChannelReadAndPoll2Async(channelNum: Integer; pollTimeoutMs: Integer; 
                                      maxNumBytes: Integer): IChilkatTask; safecall;
    function ChannelReceiveToClose(channelNum: Integer): Integer; safecall;
    function ChannelReceiveToCloseAsync(channelNum: Integer): IChilkatTask; safecall;
    function ChannelReceiveUntilMatch(channelNum: Integer; const matchPattern: WideString; 
                                      const charset: WideString; caseSensitive: Integer): Integer; safecall;
    function ChannelReceiveUntilMatchAsync(channelNum: Integer; const matchPattern: WideString; 
                                           const charset: WideString; caseSensitive: Integer): IChilkatTask; safecall;
    function ChannelReceiveUntilMatchN(channelNum: Integer; const matchPatterns: ICkStringArray; 
                                       const charset: WideString; caseSensitive: Integer): Integer; safecall;
    function ChannelReceiveUntilMatchNAsync(channelNum: Integer; 
                                            const matchPatterns: ICkStringArray; 
                                            const charset: WideString; caseSensitive: Integer): IChilkatTask; safecall;
    function ChannelReceivedClose(channelNum: Integer): Integer; safecall;
    function ChannelReceivedEof(channelNum: Integer): Integer; safecall;
    function ChannelReceivedExitStatus(channelNum: Integer): Integer; safecall;
    function ChannelSendClose(channelNum: Integer): Integer; safecall;
    function ChannelSendCloseAsync(channelNum: Integer): IChilkatTask; safecall;
    function ChannelSendData(channelNum: Integer; byteData: OleVariant): Integer; safecall;
    function ChannelSendDataAsync(channelNum: Integer; byteData: OleVariant): IChilkatTask; safecall;
    function ChannelSendEof(channelNum: Integer): Integer; safecall;
    function ChannelSendEofAsync(channelNum: Integer): IChilkatTask; safecall;
    function ChannelSendString(channelNum: Integer; const TextData: WideString; 
                               const charset: WideString): Integer; safecall;
    function ChannelSendStringAsync(channelNum: Integer; const TextData: WideString; 
                                    const charset: WideString): IChilkatTask; safecall;
    procedure ClearTtyModes; safecall;
    function Connect(const domainName: WideString; port: Integer): Integer; safecall;
    function ConnectAsync(const domainName: WideString; port: Integer): IChilkatTask; safecall;
    procedure Disconnect; safecall;
    function GetChannelExitStatus(channelNum: Integer): Integer; safecall;
    function GetChannelNumber(index: Integer): Integer; safecall;
    function GetChannelType(index: Integer): WideString; safecall;
    function GetReceivedData(channelNum: Integer): OleVariant; safecall;
    function GetReceivedDataN(channelNum: Integer; maxNumBytes: Integer): OleVariant; safecall;
    function GetReceivedNumBytes(channelNum: Integer): Integer; safecall;
    function GetReceivedStderr(channelNum: Integer): OleVariant; safecall;
    function GetReceivedText(channelNum: Integer; const charset: WideString): WideString; safecall;
    function GetReceivedTextS(channelNum: Integer; const substr: WideString; 
                              const charset: WideString): WideString; safecall;
    function OpenCustomChannel(const channelType: WideString): Integer; safecall;
    function OpenCustomChannelAsync(const channelType: WideString): IChilkatTask; safecall;
    function OpenDirectTcpIpChannel(const targetHostname: WideString; targetPort: Integer): Integer; safecall;
    function OpenDirectTcpIpChannelAsync(const targetHostname: WideString; targetPort: Integer): IChilkatTask; safecall;
    function OpenSessionChannel: Integer; safecall;
    function OpenSessionChannelAsync: IChilkatTask; safecall;
    function PeekReceivedText(channelNum: Integer; const charset: WideString): WideString; safecall;
    function ReKey: Integer; safecall;
    function ReKeyAsync: IChilkatTask; safecall;
    function SendIgnore: Integer; safecall;
    function SendIgnoreAsync: IChilkatTask; safecall;
    function SendReqExec(channelNum: Integer; const commandLine: WideString): Integer; safecall;
    function SendReqExecAsync(channelNum: Integer; const commandLine: WideString): IChilkatTask; safecall;
    function SendReqPty(channelNum: Integer; const termType: WideString; widthInChars: Integer; 
                        heightInChars: Integer; widthInPixels: Integer; heightInPixels: Integer): Integer; safecall;
    function SendReqPtyAsync(channelNum: Integer; const termType: WideString; 
                             widthInChars: Integer; heightInChars: Integer; widthInPixels: Integer; 
                             heightInPixels: Integer): IChilkatTask; safecall;
    function SendReqSetEnv(channelNum: Integer; const name: WideString; const value: WideString): Integer; safecall;
    function SendReqSetEnvAsync(channelNum: Integer; const name: WideString; const value: WideString): IChilkatTask; safecall;
    function SendReqShell(channelNum: Integer): Integer; safecall;
    function SendReqShellAsync(channelNum: Integer): IChilkatTask; safecall;
    function SendReqSignal(channelNum: Integer; const signalName: WideString): Integer; safecall;
    function SendReqSignalAsync(channelNum: Integer; const signalName: WideString): IChilkatTask; safecall;
    function SendReqSubsystem(channelNum: Integer; const subsystemName: WideString): Integer; safecall;
    function SendReqSubsystemAsync(channelNum: Integer; const subsystemName: WideString): IChilkatTask; safecall;
    function SendReqWindowChange(channelNum: Integer; widthInChars: Integer; heightInRows: Integer; 
                                 pixWidth: Integer; pixHeight: Integer): Integer; safecall;
    function SendReqWindowChangeAsync(channelNum: Integer; widthInChars: Integer; 
                                      heightInRows: Integer; pixWidth: Integer; pixHeight: Integer): IChilkatTask; safecall;
    function SendReqX11Forwarding(channelNum: Integer; singleConnection: Integer; 
                                  const authProt: WideString; const authCookie: WideString; 
                                  screenNum: Integer): Integer; safecall;
    function SendReqX11ForwardingAsync(channelNum: Integer; singleConnection: Integer; 
                                       const authProt: WideString; const authCookie: WideString; 
                                       screenNum: Integer): IChilkatTask; safecall;
    function SendReqXonXoff(channelNum: Integer; clientCanDo: Integer): Integer; safecall;
    function SendReqXonXoffAsync(channelNum: Integer; clientCanDo: Integer): IChilkatTask; safecall;
    function SetTtyMode(const ttyName: WideString; ttyValue: Integer): Integer; safecall;
    function UnlockComponent(const unlockCode: WideString): Integer; safecall;
    function Get_PreferIpv6: Integer; safecall;
    procedure Set_PreferIpv6(pVal: Integer); safecall;
    procedure ChannelRelease(channelNum: Integer); safecall;
    function CheckConnection: Integer; safecall;
    function StartKeyboardAuth(const login: WideString): WideString; safecall;
    function StartKeyboardAuthAsync(const login: WideString): IChilkatTask; safecall;
    function Get_UserAuthBanner: WideString; safecall;
    procedure Set_UserAuthBanner(const pVal: WideString); safecall;
    function ContinueKeyboardAuth(const response: WideString): WideString; safecall;
    function ContinueKeyboardAuthAsync(const response: WideString): IChilkatTask; safecall;
    function Get_ReqExecCharset: WideString; safecall;
    procedure Set_ReqExecCharset(const pVal: WideString); safecall;
    function GetReceivedStderrText(channelNum: Integer; const charset: WideString): WideString; safecall;
    function WaitForChannelMessage(pollTimeoutMs: Integer): Integer; safecall;
    function WaitForChannelMessageAsync(pollTimeoutMs: Integer): IChilkatTask; safecall;
    function Get_CaretControl: Integer; safecall;
    procedure Set_CaretControl(pVal: Integer); safecall;
    function Get_AuthFailReason: Integer; safecall;
    function ConnectThroughSsh(const ssh: IChilkatSsh; const hostname: WideString; port: Integer): Integer; safecall;
    function ConnectThroughSshAsync(const ssh: IChilkatSsh; const hostname: WideString; 
                                    port: Integer): IChilkatTask; safecall;
    function Get_EnableCompression: Integer; safecall;
    procedure Set_EnableCompression(pVal: Integer); safecall;
    function Get_AbortCurrent: Integer; safecall;
    procedure Set_AbortCurrent(pVal: Integer); safecall;
    function QuickCommand(const command: WideString; const charset: WideString): WideString; safecall;
    function QuickCommandAsync(const command: WideString; const charset: WideString): IChilkatTask; safecall;
    function QuickShell: Integer; safecall;
    function QuickShellAsync: IChilkatTask; safecall;
    function QuickCmdSend(const command: WideString): Integer; safecall;
    function QuickCmdSendAsync(const command: WideString): IChilkatTask; safecall;
    function QuickCmdCheck(pollTimeoutMs: Integer): Integer; safecall;
    function QuickCmdCheckAsync(pollTimeoutMs: Integer): IChilkatTask; safecall;
    function Get_StripColorCodes: Integer; safecall;
    procedure Set_StripColorCodes(pVal: Integer); safecall;
    function Get_ServerIdentifier: WideString; safecall;
    function AuthenticateSecPw(const login: IChilkatSecureString; 
                               const password: IChilkatSecureString): Integer; safecall;
    function AuthenticateSecPwAsync(const login: IChilkatSecureString; 
                                    const password: IChilkatSecureString): IChilkatTask; safecall;
    function AuthenticateSecPwPk(const username: IChilkatSecureString; 
                                 const password: IChilkatSecureString; 
                                 const privateKey: IChilkatSshKey): Integer; safecall;
    function AuthenticateSecPwPkAsync(const username: IChilkatSecureString; 
                                      const password: IChilkatSecureString; 
                                      const privateKey: IChilkatSshKey): IChilkatTask; safecall;
    function Get_UncommonOptions: WideString; safecall;
    procedure Set_UncommonOptions(const pVal: WideString); safecall;
    function Get_ClientPort: Integer; safecall;
    procedure Set_ClientPort(pVal: Integer); safecall;
    function GetAuthMethods: WideString; safecall;
    function GetAuthMethodsAsync: IChilkatTask; safecall;
    function LastJsonData: IChilkatJsonObject; safecall;
    function LoadTaskCaller(const task: IChilkatTask): Integer; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property LastMethodSuccess: Integer read Get_LastMethodSuccess write Set_LastMethodSuccess;
    property LastStringResult: WideString read Get_LastStringResult;
    property LastBinaryResult: OleVariant read Get_LastBinaryResult;
    property LastStringResultLen: Integer read Get_LastStringResultLen;
    property ChannelOpenFailCode: Integer read Get_ChannelOpenFailCode;
    property ChannelOpenFailReason: WideString read Get_ChannelOpenFailReason;
    property ClientIdentifier: WideString read Get_ClientIdentifier write Set_ClientIdentifier;
    property ClientIpAddress: WideString read Get_ClientIpAddress write Set_ClientIpAddress;
    property ConnectTimeoutMs: Integer read Get_ConnectTimeoutMs write Set_ConnectTimeoutMs;
    property DisconnectCode: Integer read Get_DisconnectCode;
    property DisconnectReason: WideString read Get_DisconnectReason;
    property ForceCipher: WideString read Get_ForceCipher write Set_ForceCipher;
    property HeartbeatMs: Integer read Get_HeartbeatMs write Set_HeartbeatMs;
    property HostKeyAlg: WideString read Get_HostKeyAlg write Set_HostKeyAlg;
    property HostKeyFingerprint: WideString read Get_HostKeyFingerprint;
    property HttpProxyAuthMethod: WideString read Get_HttpProxyAuthMethod write Set_HttpProxyAuthMethod;
    property HttpProxyDomain: WideString read Get_HttpProxyDomain write Set_HttpProxyDomain;
    property HttpProxyHostname: WideString read Get_HttpProxyHostname write Set_HttpProxyHostname;
    property HttpProxyPassword: WideString read Get_HttpProxyPassword write Set_HttpProxyPassword;
    property HttpProxyPort: Integer read Get_HttpProxyPort write Set_HttpProxyPort;
    property HttpProxyUsername: WideString read Get_HttpProxyUsername write Set_HttpProxyUsername;
    property IdleTimeoutMs: Integer read Get_IdleTimeoutMs write Set_IdleTimeoutMs;
    property IsConnected: Integer read Get_IsConnected;
    property KeepSessionLog: Integer read Get_KeepSessionLog write Set_KeepSessionLog;
    property MaxPacketSize: Integer read Get_MaxPacketSize write Set_MaxPacketSize;
    property NumOpenChannels: Integer read Get_NumOpenChannels;
    property PasswordChangeRequested: Integer read Get_PasswordChangeRequested;
    property ReadTimeoutMs: Integer read Get_ReadTimeoutMs write Set_ReadTimeoutMs;
    property SessionLog: WideString read Get_SessionLog;
    property SoRcvBuf: Integer read Get_SoRcvBuf write Set_SoRcvBuf;
    property SoSndBuf: Integer read Get_SoSndBuf write Set_SoSndBuf;
    property SocksHostname: WideString read Get_SocksHostname write Set_SocksHostname;
    property SocksPassword: WideString read Get_SocksPassword write Set_SocksPassword;
    property SocksPort: Integer read Get_SocksPort write Set_SocksPort;
    property SocksUsername: WideString read Get_SocksUsername write Set_SocksUsername;
    property SocksVersion: Integer read Get_SocksVersion write Set_SocksVersion;
    property StderrToStdout: Integer read Get_StderrToStdout write Set_StderrToStdout;
    property TcpNoDelay: Integer read Get_TcpNoDelay write Set_TcpNoDelay;
    property PreferIpv6: Integer read Get_PreferIpv6 write Set_PreferIpv6;
    property UserAuthBanner: WideString read Get_UserAuthBanner write Set_UserAuthBanner;
    property ReqExecCharset: WideString read Get_ReqExecCharset write Set_ReqExecCharset;
    property CaretControl: Integer read Get_CaretControl write Set_CaretControl;
    property AuthFailReason: Integer read Get_AuthFailReason;
    property EnableCompression: Integer read Get_EnableCompression write Set_EnableCompression;
    property AbortCurrent: Integer read Get_AbortCurrent write Set_AbortCurrent;
    property StripColorCodes: Integer read Get_StripColorCodes write Set_StripColorCodes;
    property ServerIdentifier: WideString read Get_ServerIdentifier;
    property UncommonOptions: WideString read Get_UncommonOptions write Set_UncommonOptions;
    property ClientPort: Integer read Get_ClientPort write Set_ClientPort;
  end;

// *********************************************************************//
// DispIntf:  IChilkatSshDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {792D2027-B40F-4894-9248-5E9A3FA09F36}
// *********************************************************************//
  IChilkatSshDisp = dispinterface
    ['{792D2027-B40F-4894-9248-5E9A3FA09F36}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property LastMethodSuccess: Integer dispid 9;
    property LastStringResult: WideString readonly dispid 10;
    property LastBinaryResult: OleVariant readonly dispid 11;
    property LastStringResultLen: Integer readonly dispid 12;
    property ChannelOpenFailCode: Integer readonly dispid 100;
    property ChannelOpenFailReason: WideString readonly dispid 101;
    property ClientIdentifier: WideString dispid 102;
    property ClientIpAddress: WideString dispid 103;
    property ConnectTimeoutMs: Integer dispid 104;
    property DisconnectCode: Integer readonly dispid 105;
    property DisconnectReason: WideString readonly dispid 106;
    property ForceCipher: WideString dispid 107;
    property HeartbeatMs: Integer dispid 108;
    property HostKeyAlg: WideString dispid 109;
    property HostKeyFingerprint: WideString readonly dispid 110;
    property HttpProxyAuthMethod: WideString dispid 111;
    property HttpProxyDomain: WideString dispid 112;
    property HttpProxyHostname: WideString dispid 113;
    property HttpProxyPassword: WideString dispid 114;
    property HttpProxyPort: Integer dispid 115;
    property HttpProxyUsername: WideString dispid 116;
    property IdleTimeoutMs: Integer dispid 117;
    property IsConnected: Integer readonly dispid 118;
    property KeepSessionLog: Integer dispid 119;
    property MaxPacketSize: Integer dispid 120;
    property NumOpenChannels: Integer readonly dispid 121;
    property PasswordChangeRequested: Integer readonly dispid 122;
    property ReadTimeoutMs: Integer dispid 123;
    property SessionLog: WideString readonly dispid 124;
    property SoRcvBuf: Integer dispid 125;
    property SoSndBuf: Integer dispid 126;
    property SocksHostname: WideString dispid 127;
    property SocksPassword: WideString dispid 128;
    property SocksPort: Integer dispid 129;
    property SocksUsername: WideString dispid 130;
    property SocksVersion: Integer dispid 131;
    property StderrToStdout: Integer dispid 132;
    property TcpNoDelay: Integer dispid 133;
    function AuthenticatePk(const username: WideString; const privateKey: IChilkatSshKey): Integer; dispid 134;
    function AuthenticatePkAsync(const username: WideString; const privateKey: IChilkatSshKey): IChilkatTask; dispid 634;
    function AuthenticatePw(const login: WideString; const password: WideString): Integer; dispid 135;
    function AuthenticatePwAsync(const login: WideString; const password: WideString): IChilkatTask; dispid 635;
    function AuthenticatePwPk(const username: WideString; const password: WideString; 
                              const privateKey: IChilkatSshKey): Integer; dispid 136;
    function AuthenticatePwPkAsync(const username: WideString; const password: WideString; 
                                   const privateKey: IChilkatSshKey): IChilkatTask; dispid 636;
    function ChannelIsOpen(channelNum: Integer): Integer; dispid 137;
    function ChannelPoll(channelNum: Integer; pollTimeoutMs: Integer): Integer; dispid 138;
    function ChannelPollAsync(channelNum: Integer; pollTimeoutMs: Integer): IChilkatTask; dispid 638;
    function ChannelRead(channelNum: Integer): Integer; dispid 139;
    function ChannelReadAsync(channelNum: Integer): IChilkatTask; dispid 639;
    function ChannelReadAndPoll(channelNum: Integer; pollTimeoutMs: Integer): Integer; dispid 140;
    function ChannelReadAndPollAsync(channelNum: Integer; pollTimeoutMs: Integer): IChilkatTask; dispid 640;
    function ChannelReadAndPoll2(channelNum: Integer; pollTimeoutMs: Integer; maxNumBytes: Integer): Integer; dispid 141;
    function ChannelReadAndPoll2Async(channelNum: Integer; pollTimeoutMs: Integer; 
                                      maxNumBytes: Integer): IChilkatTask; dispid 641;
    function ChannelReceiveToClose(channelNum: Integer): Integer; dispid 142;
    function ChannelReceiveToCloseAsync(channelNum: Integer): IChilkatTask; dispid 642;
    function ChannelReceiveUntilMatch(channelNum: Integer; const matchPattern: WideString; 
                                      const charset: WideString; caseSensitive: Integer): Integer; dispid 143;
    function ChannelReceiveUntilMatchAsync(channelNum: Integer; const matchPattern: WideString; 
                                           const charset: WideString; caseSensitive: Integer): IChilkatTask; dispid 643;
    function ChannelReceiveUntilMatchN(channelNum: Integer; const matchPatterns: ICkStringArray; 
                                       const charset: WideString; caseSensitive: Integer): Integer; dispid 144;
    function ChannelReceiveUntilMatchNAsync(channelNum: Integer; 
                                            const matchPatterns: ICkStringArray; 
                                            const charset: WideString; caseSensitive: Integer): IChilkatTask; dispid 644;
    function ChannelReceivedClose(channelNum: Integer): Integer; dispid 145;
    function ChannelReceivedEof(channelNum: Integer): Integer; dispid 146;
    function ChannelReceivedExitStatus(channelNum: Integer): Integer; dispid 147;
    function ChannelSendClose(channelNum: Integer): Integer; dispid 148;
    function ChannelSendCloseAsync(channelNum: Integer): IChilkatTask; dispid 648;
    function ChannelSendData(channelNum: Integer; byteData: OleVariant): Integer; dispid 149;
    function ChannelSendDataAsync(channelNum: Integer; byteData: OleVariant): IChilkatTask; dispid 649;
    function ChannelSendEof(channelNum: Integer): Integer; dispid 150;
    function ChannelSendEofAsync(channelNum: Integer): IChilkatTask; dispid 650;
    function ChannelSendString(channelNum: Integer; const TextData: WideString; 
                               const charset: WideString): Integer; dispid 151;
    function ChannelSendStringAsync(channelNum: Integer; const TextData: WideString; 
                                    const charset: WideString): IChilkatTask; dispid 651;
    procedure ClearTtyModes; dispid 152;
    function Connect(const domainName: WideString; port: Integer): Integer; dispid 153;
    function ConnectAsync(const domainName: WideString; port: Integer): IChilkatTask; dispid 653;
    procedure Disconnect; dispid 154;
    function GetChannelExitStatus(channelNum: Integer): Integer; dispid 155;
    function GetChannelNumber(index: Integer): Integer; dispid 156;
    function GetChannelType(index: Integer): WideString; dispid 157;
    function GetReceivedData(channelNum: Integer): OleVariant; dispid 158;
    function GetReceivedDataN(channelNum: Integer; maxNumBytes: Integer): OleVariant; dispid 159;
    function GetReceivedNumBytes(channelNum: Integer): Integer; dispid 160;
    function GetReceivedStderr(channelNum: Integer): OleVariant; dispid 161;
    function GetReceivedText(channelNum: Integer; const charset: WideString): WideString; dispid 162;
    function GetReceivedTextS(channelNum: Integer; const substr: WideString; 
                              const charset: WideString): WideString; dispid 163;
    function OpenCustomChannel(const channelType: WideString): Integer; dispid 164;
    function OpenCustomChannelAsync(const channelType: WideString): IChilkatTask; dispid 664;
    function OpenDirectTcpIpChannel(const targetHostname: WideString; targetPort: Integer): Integer; dispid 165;
    function OpenDirectTcpIpChannelAsync(const targetHostname: WideString; targetPort: Integer): IChilkatTask; dispid 665;
    function OpenSessionChannel: Integer; dispid 166;
    function OpenSessionChannelAsync: IChilkatTask; dispid 666;
    function PeekReceivedText(channelNum: Integer; const charset: WideString): WideString; dispid 167;
    function ReKey: Integer; dispid 168;
    function ReKeyAsync: IChilkatTask; dispid 668;
    function SendIgnore: Integer; dispid 169;
    function SendIgnoreAsync: IChilkatTask; dispid 669;
    function SendReqExec(channelNum: Integer; const commandLine: WideString): Integer; dispid 170;
    function SendReqExecAsync(channelNum: Integer; const commandLine: WideString): IChilkatTask; dispid 670;
    function SendReqPty(channelNum: Integer; const termType: WideString; widthInChars: Integer; 
                        heightInChars: Integer; widthInPixels: Integer; heightInPixels: Integer): Integer; dispid 171;
    function SendReqPtyAsync(channelNum: Integer; const termType: WideString; 
                             widthInChars: Integer; heightInChars: Integer; widthInPixels: Integer; 
                             heightInPixels: Integer): IChilkatTask; dispid 671;
    function SendReqSetEnv(channelNum: Integer; const name: WideString; const value: WideString): Integer; dispid 172;
    function SendReqSetEnvAsync(channelNum: Integer; const name: WideString; const value: WideString): IChilkatTask; dispid 672;
    function SendReqShell(channelNum: Integer): Integer; dispid 173;
    function SendReqShellAsync(channelNum: Integer): IChilkatTask; dispid 673;
    function SendReqSignal(channelNum: Integer; const signalName: WideString): Integer; dispid 174;
    function SendReqSignalAsync(channelNum: Integer; const signalName: WideString): IChilkatTask; dispid 674;
    function SendReqSubsystem(channelNum: Integer; const subsystemName: WideString): Integer; dispid 175;
    function SendReqSubsystemAsync(channelNum: Integer; const subsystemName: WideString): IChilkatTask; dispid 675;
    function SendReqWindowChange(channelNum: Integer; widthInChars: Integer; heightInRows: Integer; 
                                 pixWidth: Integer; pixHeight: Integer): Integer; dispid 176;
    function SendReqWindowChangeAsync(channelNum: Integer; widthInChars: Integer; 
                                      heightInRows: Integer; pixWidth: Integer; pixHeight: Integer): IChilkatTask; dispid 676;
    function SendReqX11Forwarding(channelNum: Integer; singleConnection: Integer; 
                                  const authProt: WideString; const authCookie: WideString; 
                                  screenNum: Integer): Integer; dispid 177;
    function SendReqX11ForwardingAsync(channelNum: Integer; singleConnection: Integer; 
                                       const authProt: WideString; const authCookie: WideString; 
                                       screenNum: Integer): IChilkatTask; dispid 677;
    function SendReqXonXoff(channelNum: Integer; clientCanDo: Integer): Integer; dispid 178;
    function SendReqXonXoffAsync(channelNum: Integer; clientCanDo: Integer): IChilkatTask; dispid 678;
    function SetTtyMode(const ttyName: WideString; ttyValue: Integer): Integer; dispid 179;
    function UnlockComponent(const unlockCode: WideString): Integer; dispid 180;
    property PreferIpv6: Integer dispid 181;
    procedure ChannelRelease(channelNum: Integer); dispid 182;
    function CheckConnection: Integer; dispid 183;
    function StartKeyboardAuth(const login: WideString): WideString; dispid 184;
    function StartKeyboardAuthAsync(const login: WideString): IChilkatTask; dispid 684;
    property UserAuthBanner: WideString dispid 185;
    function ContinueKeyboardAuth(const response: WideString): WideString; dispid 186;
    function ContinueKeyboardAuthAsync(const response: WideString): IChilkatTask; dispid 686;
    property ReqExecCharset: WideString dispid 187;
    function GetReceivedStderrText(channelNum: Integer; const charset: WideString): WideString; dispid 189;
    function WaitForChannelMessage(pollTimeoutMs: Integer): Integer; dispid 190;
    function WaitForChannelMessageAsync(pollTimeoutMs: Integer): IChilkatTask; dispid 690;
    property CaretControl: Integer dispid 191;
    property AuthFailReason: Integer readonly dispid 192;
    function ConnectThroughSsh(const ssh: IChilkatSsh; const hostname: WideString; port: Integer): Integer; dispid 193;
    function ConnectThroughSshAsync(const ssh: IChilkatSsh; const hostname: WideString; 
                                    port: Integer): IChilkatTask; dispid 693;
    property EnableCompression: Integer dispid 194;
    property AbortCurrent: Integer dispid 195;
    function QuickCommand(const command: WideString; const charset: WideString): WideString; dispid 196;
    function QuickCommandAsync(const command: WideString; const charset: WideString): IChilkatTask; dispid 696;
    function QuickShell: Integer; dispid 197;
    function QuickShellAsync: IChilkatTask; dispid 697;
    function QuickCmdSend(const command: WideString): Integer; dispid 198;
    function QuickCmdSendAsync(const command: WideString): IChilkatTask; dispid 698;
    function QuickCmdCheck(pollTimeoutMs: Integer): Integer; dispid 199;
    function QuickCmdCheckAsync(pollTimeoutMs: Integer): IChilkatTask; dispid 699;
    property StripColorCodes: Integer dispid 200;
    property ServerIdentifier: WideString readonly dispid 201;
    function AuthenticateSecPw(const login: IChilkatSecureString; 
                               const password: IChilkatSecureString): Integer; dispid 202;
    function AuthenticateSecPwAsync(const login: IChilkatSecureString; 
                                    const password: IChilkatSecureString): IChilkatTask; dispid 702;
    function AuthenticateSecPwPk(const username: IChilkatSecureString; 
                                 const password: IChilkatSecureString; 
                                 const privateKey: IChilkatSshKey): Integer; dispid 203;
    function AuthenticateSecPwPkAsync(const username: IChilkatSecureString; 
                                      const password: IChilkatSecureString; 
                                      const privateKey: IChilkatSshKey): IChilkatTask; dispid 703;
    property UncommonOptions: WideString dispid 204;
    property ClientPort: Integer dispid 205;
    function GetAuthMethods: WideString; dispid 206;
    function GetAuthMethodsAsync: IChilkatTask; dispid 706;
    function LastJsonData: IChilkatJsonObject; dispid 207;
    function LoadTaskCaller(const task: IChilkatTask): Integer; dispid 208;
  end;

// *********************************************************************//
// Interface: ICkStringArray
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {6DF65A40-F292-4D8D-8738-4814084CCD6B}
// *********************************************************************//
  ICkStringArray = interface(IDispatch)
    ['{6DF65A40-F292-4D8D-8738-4814084CCD6B}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_LastMethodSuccess: Integer; safecall;
    procedure Set_LastMethodSuccess(pVal: Integer); safecall;
    function Get_LastStringResult: WideString; safecall;
    function Get_LastBinaryResult: OleVariant; safecall;
    function Get_LastStringResultLen: Integer; safecall;
    function Get_crlf: Integer; safecall;
    procedure Set_crlf(pVal: Integer); safecall;
    function Get_Trim: Integer; safecall;
    procedure Set_Trim(pVal: Integer); safecall;
    function Get_Unique: Integer; safecall;
    procedure Set_Unique(pVal: Integer); safecall;
    function Get_Count: Integer; safecall;
    function Append(const str: WideString): Integer; safecall;
    function AppendSerialized(const encodedStr: WideString): Integer; safecall;
    procedure Clear; safecall;
    function Contains(const str: WideString): Integer; safecall;
    function Find(const findStr: WideString; startIndex: Integer): Integer; safecall;
    function FindFirstMatch(const matchPattern: WideString; startIndex: Integer): Integer; safecall;
    function GetString(index: Integer): WideString; safecall;
    procedure InsertAt(index: Integer; const str: WideString); safecall;
    function LastString: WideString; safecall;
    function LoadFromFile(const path: WideString): Integer; safecall;
    function LoadFromFile2(const path: WideString; const charset: WideString): Integer; safecall;
    procedure LoadFromText(const str: WideString); safecall;
    function Pop: WideString; safecall;
    procedure Prepend(const str: WideString); safecall;
    procedure Remove(const str: WideString); safecall;
    function RemoveAt(index: Integer): Integer; safecall;
    function SaveNthToFile(index: Integer; const saveToPath: WideString): Integer; safecall;
    function SaveToFile(const path: WideString): Integer; safecall;
    function SaveToFile2(const saveToPath: WideString; const charset: WideString): Integer; safecall;
    function SaveToText: WideString; safecall;
    function Serialize: WideString; safecall;
    procedure Sort(ascending: Integer); safecall;
    procedure SplitAndAppend(const str: WideString; const boundary: WideString); safecall;
    procedure Subtract(const stringArrayObj: ICkStringArray); safecall;
    procedure Union(const stringArrayObj: ICkStringArray); safecall;
    function Get_Length: Integer; safecall;
    function LoadTaskResult(const task: IChilkatTask): Integer; safecall;
    procedure ReplaceAt(index: Integer; const str: WideString); safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property LastMethodSuccess: Integer read Get_LastMethodSuccess write Set_LastMethodSuccess;
    property LastStringResult: WideString read Get_LastStringResult;
    property LastBinaryResult: OleVariant read Get_LastBinaryResult;
    property LastStringResultLen: Integer read Get_LastStringResultLen;
    property crlf: Integer read Get_crlf write Set_crlf;
    property Trim: Integer read Get_Trim write Set_Trim;
    property Unique: Integer read Get_Unique write Set_Unique;
    property Count: Integer read Get_Count;
    property Length: Integer read Get_Length;
  end;

// *********************************************************************//
// DispIntf:  ICkStringArrayDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {6DF65A40-F292-4D8D-8738-4814084CCD6B}
// *********************************************************************//
  ICkStringArrayDisp = dispinterface
    ['{6DF65A40-F292-4D8D-8738-4814084CCD6B}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property LastMethodSuccess: Integer dispid 9;
    property LastStringResult: WideString readonly dispid 10;
    property LastBinaryResult: OleVariant readonly dispid 11;
    property LastStringResultLen: Integer readonly dispid 12;
    property crlf: Integer dispid 100;
    property Trim: Integer dispid 101;
    property Unique: Integer dispid 102;
    property Count: Integer readonly dispid 103;
    function Append(const str: WideString): Integer; dispid 104;
    function AppendSerialized(const encodedStr: WideString): Integer; dispid 105;
    procedure Clear; dispid 106;
    function Contains(const str: WideString): Integer; dispid 107;
    function Find(const findStr: WideString; startIndex: Integer): Integer; dispid 108;
    function FindFirstMatch(const matchPattern: WideString; startIndex: Integer): Integer; dispid 109;
    function GetString(index: Integer): WideString; dispid 110;
    procedure InsertAt(index: Integer; const str: WideString); dispid 111;
    function LastString: WideString; dispid 112;
    function LoadFromFile(const path: WideString): Integer; dispid 113;
    function LoadFromFile2(const path: WideString; const charset: WideString): Integer; dispid 114;
    procedure LoadFromText(const str: WideString); dispid 115;
    function Pop: WideString; dispid 116;
    procedure Prepend(const str: WideString); dispid 117;
    procedure Remove(const str: WideString); dispid 118;
    function RemoveAt(index: Integer): Integer; dispid 119;
    function SaveNthToFile(index: Integer; const saveToPath: WideString): Integer; dispid 120;
    function SaveToFile(const path: WideString): Integer; dispid 121;
    function SaveToFile2(const saveToPath: WideString; const charset: WideString): Integer; dispid 122;
    function SaveToText: WideString; dispid 123;
    function Serialize: WideString; dispid 124;
    procedure Sort(ascending: Integer); dispid 125;
    procedure SplitAndAppend(const str: WideString; const boundary: WideString); dispid 126;
    procedure Subtract(const stringArrayObj: ICkStringArray); dispid 127;
    procedure Union(const stringArrayObj: ICkStringArray); dispid 128;
    property Length: Integer readonly dispid 130;
    function LoadTaskResult(const task: IChilkatTask): Integer; dispid 131;
    procedure ReplaceAt(index: Integer; const str: WideString); dispid 132;
  end;

// *********************************************************************//
// Interface: IChilkatSecureString
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {0652E658-CB05-447B-95E5-0FB06EB8C23B}
// *********************************************************************//
  IChilkatSecureString = interface(IDispatch)
    ['{0652E658-CB05-447B-95E5-0FB06EB8C23B}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastMethodSuccess: Integer; safecall;
    procedure Set_LastMethodSuccess(pVal: Integer); safecall;
    function Get_LastStringResult: WideString; safecall;
    function Get_LastBinaryResult: OleVariant; safecall;
    function Get_LastStringResultLen: Integer; safecall;
    function Get_MaintainHash: WideString; safecall;
    procedure Set_MaintainHash(const pVal: WideString); safecall;
    function Access: WideString; safecall;
    function Append(const str: WideString): Integer; safecall;
    function AppendSecure(const secStr: IChilkatSecureString): Integer; safecall;
    function VerifyHash(const hashVal: WideString; const encoding: WideString): Integer; safecall;
    function SecStrEquals(const secStr: IChilkatSecureString): Integer; safecall;
    function hashVal(const encoding: WideString): WideString; safecall;
    function Get_ReadOnly: Integer; safecall;
    procedure Set_ReadOnly(pVal: Integer); safecall;
    function AppendSb(const sb: IChilkatStringBuilder): Integer; safecall;
    function LoadFile(const path: WideString; const charset: WideString): Integer; safecall;
    property LastMethodSuccess: Integer read Get_LastMethodSuccess write Set_LastMethodSuccess;
    property LastStringResult: WideString read Get_LastStringResult;
    property LastBinaryResult: OleVariant read Get_LastBinaryResult;
    property LastStringResultLen: Integer read Get_LastStringResultLen;
    property MaintainHash: WideString read Get_MaintainHash write Set_MaintainHash;
    property ReadOnly: Integer read Get_ReadOnly write Set_ReadOnly;
  end;

// *********************************************************************//
// DispIntf:  IChilkatSecureStringDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {0652E658-CB05-447B-95E5-0FB06EB8C23B}
// *********************************************************************//
  IChilkatSecureStringDisp = dispinterface
    ['{0652E658-CB05-447B-95E5-0FB06EB8C23B}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastMethodSuccess: Integer dispid 9;
    property LastStringResult: WideString readonly dispid 10;
    property LastBinaryResult: OleVariant readonly dispid 11;
    property LastStringResultLen: Integer readonly dispid 12;
    property MaintainHash: WideString dispid 100;
    function Access: WideString; dispid 101;
    function Append(const str: WideString): Integer; dispid 102;
    function AppendSecure(const secStr: IChilkatSecureString): Integer; dispid 103;
    function VerifyHash(const hashVal: WideString; const encoding: WideString): Integer; dispid 104;
    function SecStrEquals(const secStr: IChilkatSecureString): Integer; dispid 105;
    function hashVal(const encoding: WideString): WideString; dispid 106;
    property ReadOnly: Integer dispid 107;
    function AppendSb(const sb: IChilkatStringBuilder): Integer; dispid 108;
    function LoadFile(const path: WideString; const charset: WideString): Integer; dispid 109;
  end;

// *********************************************************************//
// Interface: IChilkatAuthAzureSAS
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {4558E02C-E015-41EC-89A3-0A71BC70E627}
// *********************************************************************//
  IChilkatAuthAzureSAS = interface(IDispatch)
    ['{4558E02C-E015-41EC-89A3-0A71BC70E627}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_LastMethodSuccess: Integer; safecall;
    procedure Set_LastMethodSuccess(pVal: Integer); safecall;
    function Get_LastStringResult: WideString; safecall;
    function Get_LastBinaryResult: OleVariant; safecall;
    function Get_LastStringResultLen: Integer; safecall;
    function Get_StringToSign: WideString; safecall;
    procedure Set_StringToSign(const pVal: WideString); safecall;
    function SetTokenParam(const name: WideString; const authParamName: WideString; 
                           const value: WideString): Integer; safecall;
    function SetNonTokenParam(const name: WideString; const value: WideString): Integer; safecall;
    function GenerateToken: WideString; safecall;
    function Get_AccessKey: WideString; safecall;
    procedure Set_AccessKey(const pVal: WideString); safecall;
    procedure Clear; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property LastMethodSuccess: Integer read Get_LastMethodSuccess write Set_LastMethodSuccess;
    property LastStringResult: WideString read Get_LastStringResult;
    property LastBinaryResult: OleVariant read Get_LastBinaryResult;
    property LastStringResultLen: Integer read Get_LastStringResultLen;
    property StringToSign: WideString read Get_StringToSign write Set_StringToSign;
    property AccessKey: WideString read Get_AccessKey write Set_AccessKey;
  end;

// *********************************************************************//
// DispIntf:  IChilkatAuthAzureSASDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {4558E02C-E015-41EC-89A3-0A71BC70E627}
// *********************************************************************//
  IChilkatAuthAzureSASDisp = dispinterface
    ['{4558E02C-E015-41EC-89A3-0A71BC70E627}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property LastMethodSuccess: Integer dispid 9;
    property LastStringResult: WideString readonly dispid 10;
    property LastBinaryResult: OleVariant readonly dispid 11;
    property LastStringResultLen: Integer readonly dispid 12;
    property StringToSign: WideString dispid 100;
    function SetTokenParam(const name: WideString; const authParamName: WideString; 
                           const value: WideString): Integer; dispid 101;
    function SetNonTokenParam(const name: WideString; const value: WideString): Integer; dispid 102;
    function GenerateToken: WideString; dispid 103;
    property AccessKey: WideString dispid 104;
    procedure Clear; dispid 105;
  end;

// *********************************************************************//
// Interface: IChilkatAuthAzureStorage
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {C9BEAC5F-76C4-4011-9ED3-BD92D8DC577D}
// *********************************************************************//
  IChilkatAuthAzureStorage = interface(IDispatch)
    ['{C9BEAC5F-76C4-4011-9ED3-BD92D8DC577D}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_LastMethodSuccess: Integer; safecall;
    procedure Set_LastMethodSuccess(pVal: Integer); safecall;
    function Get_LastStringResult: WideString; safecall;
    function Get_LastBinaryResult: OleVariant; safecall;
    function Get_LastStringResultLen: Integer; safecall;
    function Get_Scheme: WideString; safecall;
    procedure Set_Scheme(const pVal: WideString); safecall;
    function Get_Service: WideString; safecall;
    procedure Set_Service(const pVal: WideString); safecall;
    function Get_AccessKey: WideString; safecall;
    procedure Set_AccessKey(const pVal: WideString); safecall;
    function Get_Account: WideString; safecall;
    procedure Set_Account(const pVal: WideString); safecall;
    function Get_XMsVersion: WideString; safecall;
    procedure Set_XMsVersion(const pVal: WideString); safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property LastMethodSuccess: Integer read Get_LastMethodSuccess write Set_LastMethodSuccess;
    property LastStringResult: WideString read Get_LastStringResult;
    property LastBinaryResult: OleVariant read Get_LastBinaryResult;
    property LastStringResultLen: Integer read Get_LastStringResultLen;
    property Scheme: WideString read Get_Scheme write Set_Scheme;
    property Service: WideString read Get_Service write Set_Service;
    property AccessKey: WideString read Get_AccessKey write Set_AccessKey;
    property Account: WideString read Get_Account write Set_Account;
    property XMsVersion: WideString read Get_XMsVersion write Set_XMsVersion;
  end;

// *********************************************************************//
// DispIntf:  IChilkatAuthAzureStorageDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {C9BEAC5F-76C4-4011-9ED3-BD92D8DC577D}
// *********************************************************************//
  IChilkatAuthAzureStorageDisp = dispinterface
    ['{C9BEAC5F-76C4-4011-9ED3-BD92D8DC577D}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property LastMethodSuccess: Integer dispid 9;
    property LastStringResult: WideString readonly dispid 10;
    property LastBinaryResult: OleVariant readonly dispid 11;
    property LastStringResultLen: Integer readonly dispid 12;
    property Scheme: WideString dispid 100;
    property Service: WideString dispid 101;
    property AccessKey: WideString dispid 102;
    property Account: WideString dispid 103;
    property XMsVersion: WideString dispid 104;
  end;

// *********************************************************************//
// Interface: IChilkatAuthGoogle
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {30444DA6-9559-43D3-876F-E6C0FC709D18}
// *********************************************************************//
  IChilkatAuthGoogle = interface(IDispatch)
    ['{30444DA6-9559-43D3-876F-E6C0FC709D18}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_LastMethodSuccess: Integer; safecall;
    procedure Set_LastMethodSuccess(pVal: Integer); safecall;
    function Get_LastStringResult: WideString; safecall;
    function Get_LastBinaryResult: OleVariant; safecall;
    function Get_LastStringResultLen: Integer; safecall;
    function Get_emailAddress: WideString; safecall;
    procedure Set_emailAddress(const pVal: WideString); safecall;
    function Get_Scope: WideString; safecall;
    procedure Set_Scope(const pVal: WideString); safecall;
    function Get_ExpireNumSeconds: Integer; safecall;
    procedure Set_ExpireNumSeconds(pVal: Integer); safecall;
    function Get_SubEmailAddress: WideString; safecall;
    procedure Set_SubEmailAddress(const pVal: WideString); safecall;
    function Get_AccessToken: WideString; safecall;
    procedure Set_AccessToken(const pVal: WideString); safecall;
    function ObtainAccessToken(const connection: IChilkatSocket): Integer; safecall;
    function ObtainAccessTokenAsync(const connection: IChilkatSocket): IChilkatTask; safecall;
    function Get_Valid: Integer; safecall;
    function Get_NumSecondsRemaining: Integer; safecall;
    function Get_JsonKey: WideString; safecall;
    procedure Set_JsonKey(const pVal: WideString); safecall;
    function GetP12: IChilkatPfx; safecall;
    function SetP12(const key: IChilkatPfx): Integer; safecall;
    function Get_Iat: Integer; safecall;
    procedure Set_Iat(pVal: Integer); safecall;
    function LoadTaskCaller(const task: IChilkatTask): Integer; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property LastMethodSuccess: Integer read Get_LastMethodSuccess write Set_LastMethodSuccess;
    property LastStringResult: WideString read Get_LastStringResult;
    property LastBinaryResult: OleVariant read Get_LastBinaryResult;
    property LastStringResultLen: Integer read Get_LastStringResultLen;
    property emailAddress: WideString read Get_emailAddress write Set_emailAddress;
    property Scope: WideString read Get_Scope write Set_Scope;
    property ExpireNumSeconds: Integer read Get_ExpireNumSeconds write Set_ExpireNumSeconds;
    property SubEmailAddress: WideString read Get_SubEmailAddress write Set_SubEmailAddress;
    property AccessToken: WideString read Get_AccessToken write Set_AccessToken;
    property Valid: Integer read Get_Valid;
    property NumSecondsRemaining: Integer read Get_NumSecondsRemaining;
    property JsonKey: WideString read Get_JsonKey write Set_JsonKey;
    property Iat: Integer read Get_Iat write Set_Iat;
  end;

// *********************************************************************//
// DispIntf:  IChilkatAuthGoogleDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {30444DA6-9559-43D3-876F-E6C0FC709D18}
// *********************************************************************//
  IChilkatAuthGoogleDisp = dispinterface
    ['{30444DA6-9559-43D3-876F-E6C0FC709D18}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property LastMethodSuccess: Integer dispid 9;
    property LastStringResult: WideString readonly dispid 10;
    property LastBinaryResult: OleVariant readonly dispid 11;
    property LastStringResultLen: Integer readonly dispid 12;
    property emailAddress: WideString dispid 100;
    property Scope: WideString dispid 101;
    property ExpireNumSeconds: Integer dispid 102;
    property SubEmailAddress: WideString dispid 103;
    property AccessToken: WideString dispid 104;
    function ObtainAccessToken(const connection: IChilkatSocket): Integer; dispid 105;
    function ObtainAccessTokenAsync(const connection: IChilkatSocket): IChilkatTask; dispid 605;
    property Valid: Integer readonly dispid 106;
    property NumSecondsRemaining: Integer readonly dispid 107;
    property JsonKey: WideString dispid 108;
    function GetP12: IChilkatPfx; dispid 109;
    function SetP12(const key: IChilkatPfx): Integer; dispid 110;
    property Iat: Integer dispid 111;
    function LoadTaskCaller(const task: IChilkatTask): Integer; dispid 112;
  end;

// *********************************************************************//
// Interface: IChilkatAuthUtil
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {FE065188-0A9D-4822-9017-05A5A68CE33C}
// *********************************************************************//
  IChilkatAuthUtil = interface(IDispatch)
    ['{FE065188-0A9D-4822-9017-05A5A68CE33C}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_LastMethodSuccess: Integer; safecall;
    procedure Set_LastMethodSuccess(pVal: Integer); safecall;
    function Get_LastStringResult: WideString; safecall;
    function Get_LastBinaryResult: OleVariant; safecall;
    function Get_LastStringResultLen: Integer; safecall;
    function WalmartSignature(const requestUrl: WideString; const consumerId: WideString; 
                              const privateKey: WideString; const requestMethod: WideString): WideString; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property LastMethodSuccess: Integer read Get_LastMethodSuccess write Set_LastMethodSuccess;
    property LastStringResult: WideString read Get_LastStringResult;
    property LastBinaryResult: OleVariant read Get_LastBinaryResult;
    property LastStringResultLen: Integer read Get_LastStringResultLen;
  end;

// *********************************************************************//
// DispIntf:  IChilkatAuthUtilDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {FE065188-0A9D-4822-9017-05A5A68CE33C}
// *********************************************************************//
  IChilkatAuthUtilDisp = dispinterface
    ['{FE065188-0A9D-4822-9017-05A5A68CE33C}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property LastMethodSuccess: Integer dispid 9;
    property LastStringResult: WideString readonly dispid 10;
    property LastBinaryResult: OleVariant readonly dispid 11;
    property LastStringResultLen: Integer readonly dispid 12;
    function WalmartSignature(const requestUrl: WideString; const consumerId: WideString; 
                              const privateKey: WideString; const requestMethod: WideString): WideString; dispid 100;
  end;

// *********************************************************************//
// Interface: IChilkatBounce
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {32C35CC7-1CA6-4897-B21A-116D6DD42381}
// *********************************************************************//
  IChilkatBounce = interface(IDispatch)
    ['{32C35CC7-1CA6-4897-B21A-116D6DD42381}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_LastMethodSuccess: Integer; safecall;
    procedure Set_LastMethodSuccess(pVal: Integer); safecall;
    function Get_LastStringResult: WideString; safecall;
    function Get_LastBinaryResult: OleVariant; safecall;
    function Get_LastStringResultLen: Integer; safecall;
    function Get_BounceData: WideString; safecall;
    function Get_BounceType: Integer; safecall;
    function Get_BounceAddress: WideString; safecall;
    function ExamineEml(const emlFilename: WideString): Integer; safecall;
    function ExamineMime(const mimeText: WideString): Integer; safecall;
    function UnlockComponent(const unlockCode: WideString): Integer; safecall;
    function ExamineEmail(const email: IChilkatEmail): Integer; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property LastMethodSuccess: Integer read Get_LastMethodSuccess write Set_LastMethodSuccess;
    property LastStringResult: WideString read Get_LastStringResult;
    property LastBinaryResult: OleVariant read Get_LastBinaryResult;
    property LastStringResultLen: Integer read Get_LastStringResultLen;
    property BounceData: WideString read Get_BounceData;
    property BounceType: Integer read Get_BounceType;
    property BounceAddress: WideString read Get_BounceAddress;
  end;

// *********************************************************************//
// DispIntf:  IChilkatBounceDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {32C35CC7-1CA6-4897-B21A-116D6DD42381}
// *********************************************************************//
  IChilkatBounceDisp = dispinterface
    ['{32C35CC7-1CA6-4897-B21A-116D6DD42381}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property LastMethodSuccess: Integer dispid 9;
    property LastStringResult: WideString readonly dispid 10;
    property LastBinaryResult: OleVariant readonly dispid 11;
    property LastStringResultLen: Integer readonly dispid 12;
    property BounceData: WideString readonly dispid 100;
    property BounceType: Integer readonly dispid 101;
    property BounceAddress: WideString readonly dispid 102;
    function ExamineEml(const emlFilename: WideString): Integer; dispid 103;
    function ExamineMime(const mimeText: WideString): Integer; dispid 104;
    function UnlockComponent(const unlockCode: WideString): Integer; dispid 105;
    function ExamineEmail(const email: IChilkatEmail): Integer; dispid 107;
  end;

// *********************************************************************//
// Interface: IChilkatEmail
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3EC2BC0F-8ECB-4008-AEB7-758972455492}
// *********************************************************************//
  IChilkatEmail = interface(IDispatch)
    ['{3EC2BC0F-8ECB-4008-AEB7-758972455492}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_LastMethodSuccess: Integer; safecall;
    procedure Set_LastMethodSuccess(pVal: Integer); safecall;
    function Get_LastStringResult: WideString; safecall;
    function Get_LastBinaryResult: OleVariant; safecall;
    function Get_LastStringResultLen: Integer; safecall;
    function Get_Body: WideString; safecall;
    procedure Set_Body(const pVal: WideString); safecall;
    function Get_BounceAddress: WideString; safecall;
    procedure Set_BounceAddress(const pVal: WideString); safecall;
    function Get_charset: WideString; safecall;
    procedure Set_charset(const pVal: WideString); safecall;
    function Get_Decrypted: Integer; safecall;
    function Get_EmailDate: TDateTime; safecall;
    procedure Set_EmailDate(pVal: TDateTime); safecall;
    function Get_EmailDateStr: WideString; safecall;
    procedure Set_EmailDateStr(const pVal: WideString); safecall;
    function Get_EncryptedBy: WideString; safecall;
    function Get_FileDistList: WideString; safecall;
    procedure Set_FileDistList(const pVal: WideString); safecall;
    function Get_From: WideString; safecall;
    procedure Set_From(const pVal: WideString); safecall;
    function Get_FromAddress: WideString; safecall;
    procedure Set_FromAddress(const pVal: WideString); safecall;
    function Get_fromName: WideString; safecall;
    procedure Set_fromName(const pVal: WideString); safecall;
    function Get_Header: WideString; safecall;
    function Get_Language: WideString; safecall;
    function Get_LocalDate: TDateTime; safecall;
    procedure Set_LocalDate(pVal: TDateTime); safecall;
    function Get_LocalDateStr: WideString; safecall;
    procedure Set_LocalDateStr(const pVal: WideString); safecall;
    function Get_Mailer: WideString; safecall;
    procedure Set_Mailer(const pVal: WideString); safecall;
    function Get_NumAlternatives: Integer; safecall;
    function Get_NumAttachedMessages: Integer; safecall;
    function Get_NumAttachments: Integer; safecall;
    function Get_NumBcc: Integer; safecall;
    function Get_NumCC: Integer; safecall;
    function Get_NumDaysOld: Integer; safecall;
    function Get_NumHeaderFields: Integer; safecall;
    function Get_NumRelatedItems: Integer; safecall;
    function Get_NumReplacePatterns: Integer; safecall;
    function Get_NumReports: Integer; safecall;
    function Get_NumTo: Integer; safecall;
    function Get_OverwriteExisting: Integer; safecall;
    procedure Set_OverwriteExisting(pVal: Integer); safecall;
    function Get_Pkcs7CryptAlg: WideString; safecall;
    procedure Set_Pkcs7CryptAlg(const pVal: WideString); safecall;
    function Get_Pkcs7KeyLength: Integer; safecall;
    procedure Set_Pkcs7KeyLength(pVal: Integer); safecall;
    function Get_PreferredCharset: WideString; safecall;
    procedure Set_PreferredCharset(const pVal: WideString); safecall;
    function Get_PrependHeaders: Integer; safecall;
    procedure Set_PrependHeaders(pVal: Integer); safecall;
    function Get_ReceivedEncrypted: Integer; safecall;
    function Get_ReceivedSigned: Integer; safecall;
    function Get_ReplyTo: WideString; safecall;
    procedure Set_ReplyTo(const pVal: WideString); safecall;
    function Get_ReturnReceipt: Integer; safecall;
    procedure Set_ReturnReceipt(pVal: Integer); safecall;
    function Get_SendEncrypted: Integer; safecall;
    procedure Set_SendEncrypted(pVal: Integer); safecall;
    function Get_SendSigned: Integer; safecall;
    procedure Set_SendSigned(pVal: Integer); safecall;
    function Get_SignaturesValid: Integer; safecall;
    function Get_SignedBy: WideString; safecall;
    function Get_SigningHashAlg: WideString; safecall;
    procedure Set_SigningHashAlg(const pVal: WideString); safecall;
    function Get_Size: Integer; safecall;
    function Get_subject: WideString; safecall;
    procedure Set_subject(const pVal: WideString); safecall;
    function Get_uidl: WideString; safecall;
    function Get_UnpackUseRelPaths: Integer; safecall;
    procedure Set_UnpackUseRelPaths(pVal: Integer); safecall;
    procedure AddAttachmentHeader(index: Integer; const fieldName: WideString; 
                                  const fieldValue: WideString); safecall;
    function AddBcc(const friendlyName: WideString; const emailAddress: WideString): Integer; safecall;
    function AddCC(const friendlyName: WideString; const emailAddress: WideString): Integer; safecall;
    function AddDataAttachment(const filename: WideString; content: OleVariant): Integer; safecall;
    function AddDataAttachment2(const filename: WideString; content: OleVariant; 
                                const contentType: WideString): Integer; safecall;
    function AddEncryptCert(const cert: IChilkatCert): Integer; safecall;
    function AddFileAttachment(const path: WideString): WideString; safecall;
    function AddFileAttachment2(const path: WideString; const contentType: WideString): Integer; safecall;
    procedure AddHeaderField(const fieldName: WideString; const fieldValue: WideString); safecall;
    procedure AddHeaderField2(const fieldName: WideString; const fieldValue: WideString); safecall;
    function AddHtmlAlternativeBody(const Body: WideString): Integer; safecall;
    function AddMultipleBcc(const commaSeparatedAddresses: WideString): Integer; safecall;
    function AddMultipleCC(const commaSeparatedAddresses: WideString): Integer; safecall;
    function AddMultipleTo(const commaSeparatedAddresses: WideString): Integer; safecall;
    function AddPfxSourceData(pfxBytes: OleVariant; const pfxPassword: WideString): Integer; safecall;
    function AddPfxSourceFile(const pfxFilePath: WideString; const pfxPassword: WideString): Integer; safecall;
    function AddPlainTextAlternativeBody(const Body: WideString): Integer; safecall;
    function AddRelatedData(const filename: WideString; inData: OleVariant): WideString; safecall;
    procedure AddRelatedData2(inData: OleVariant; const fileNameInHtml: WideString); safecall;
    function AddRelatedFile(const path: WideString): WideString; safecall;
    function AddRelatedFile2(const filenameOnDisk: WideString; const fileNameInHtml: WideString): Integer; safecall;
    procedure AddRelatedHeader(index: Integer; const fieldName: WideString; 
                               const fieldValue: WideString); safecall;
    function AddRelatedString(const nameInHtml: WideString; const str: WideString; 
                              const charset: WideString): WideString; safecall;
    procedure AddRelatedString2(const fileNameInHtml: WideString; const content: WideString; 
                                const charset: WideString); safecall;
    function AddStringAttachment(const path: WideString; const content: WideString): Integer; safecall;
    function AddStringAttachment2(const path: WideString; const content: WideString; 
                                  const charset: WideString): Integer; safecall;
    function AddTo(const friendlyName: WideString; const emailAddress: WideString): Integer; safecall;
    function AddiCalendarAlternativeBody(const icalContent: WideString; const methodName: WideString): Integer; safecall;
    function AesDecrypt(const password: WideString): Integer; safecall;
    function AesEncrypt(const password: WideString): Integer; safecall;
    procedure AppendToBody(const str: WideString); safecall;
    function AspUnpack(const prefix: WideString; const saveDir: WideString; 
                       const urlPath: WideString; cleanFiles: Integer): Integer; safecall;
    function AspUnpack2(const prefix: WideString; const saveDir: WideString; 
                        const urlPath: WideString; cleanFiles: Integer): OleVariant; safecall;
    function AttachMessage(mimeBytes: OleVariant): Integer; safecall;
    function BEncodeBytes(inData: OleVariant; const charset: WideString): WideString; safecall;
    function BEncodeString(const str: WideString; const charset: WideString): WideString; safecall;
    procedure ClearBcc; safecall;
    procedure ClearCC; safecall;
    procedure ClearEncryptCerts; safecall;
    procedure ClearTo; safecall;
    function Clone: IChilkatEmail; safecall;
    function ComputeGlobalKey(const encoding: WideString; bFold: Integer): WideString; safecall;
    function CreateDsn(const humanReadableMessage: WideString; const xmlStatusFields: WideString; 
                       bHeaderOnly: Integer): IChilkatEmail; safecall;
    function CreateForward: IChilkatEmail; safecall;
    function CreateMdn(const humanReadableMessage: WideString; const xmlStatusFields: WideString; 
                       bHeaderOnly: Integer): IChilkatEmail; safecall;
    function CreateReply: IChilkatEmail; safecall;
    function CreateTempMht(const inFilename: WideString): WideString; safecall;
    procedure DropAttachments; safecall;
    procedure DropRelatedItem(index: Integer); safecall;
    procedure DropRelatedItems; safecall;
    function DropSingleAttachment(index: Integer): Integer; safecall;
    function FindIssuer(const cert: IChilkatCert): IChilkatCert; safecall;
    function GenerateFilename: WideString; safecall;
    function GetAltHeaderField(index: Integer; const fieldName: WideString): WideString; safecall;
    function GetAlternativeBody(index: Integer): WideString; safecall;
    function GetAlternativeBodyByContentType(const contentType: WideString): WideString; safecall;
    function GetAlternativeContentType(index: Integer): WideString; safecall;
    function GetAttachedMessage(index: Integer): IChilkatEmail; safecall;
    function GetAttachedMessageFilename(index: Integer): WideString; safecall;
    function GetAttachmentContentID(index: Integer): WideString; safecall;
    function GetAttachmentContentType(index: Integer): WideString; safecall;
    function GetAttachmentData(index: Integer): OleVariant; safecall;
    function GetAttachmentFilename(index: Integer): WideString; safecall;
    function GetAttachmentHeader(attachIndex: Integer; const fieldName: WideString): WideString; safecall;
    function GetAttachmentSize(index: Integer): Integer; safecall;
    function GetAttachmentString(index: Integer; const charset: WideString): WideString; safecall;
    function GetAttachmentStringCrLf(index: Integer; const charset: WideString): WideString; safecall;
    function GetBcc(index: Integer): WideString; safecall;
    function GetBccAddr(index: Integer): WideString; safecall;
    function GetBccName(index: Integer): WideString; safecall;
    function GetCC(index: Integer): WideString; safecall;
    function GetCcAddr(index: Integer): WideString; safecall;
    function GetCcName(index: Integer): WideString; safecall;
    function GetDeliveryStatusInfo(const fieldName: WideString): WideString; safecall;
    function GetDsnFinalRecipients: ICkStringArray; safecall;
    function GetDt: ICkDateTime; safecall;
    function GetEncryptCert: IChilkatCert; safecall;
    function GetEncryptedByCert: IChilkatCert; safecall;
    function GetFileContent(const path: WideString): OleVariant; safecall;
    function GetHeaderField(const fieldName: WideString): WideString; safecall;
    function GetHeaderFieldName(index: Integer): WideString; safecall;
    function GetHeaderFieldValue(index: Integer): WideString; safecall;
    function GetHtmlBody: WideString; safecall;
    function GetImapUid: Integer; safecall;
    function GetLinkedDomains: ICkStringArray; safecall;
    function GetMbHeaderField(const fieldName: WideString; const charset: WideString): OleVariant; safecall;
    function GetMbHtmlBody(const charset: WideString): OleVariant; safecall;
    function GetMbPlainTextBody(const charset: WideString): OleVariant; safecall;
    function GetMime: WideString; safecall;
    function GetMimeBinary: OleVariant; safecall;
    function GetPlainTextBody: WideString; safecall;
    function GetRelatedContentID(index: Integer): WideString; safecall;
    function GetRelatedContentLocation(index: Integer): WideString; safecall;
    function GetRelatedContentType(index: Integer): WideString; safecall;
    function GetRelatedData(index: Integer): OleVariant; safecall;
    function GetRelatedFilename(index: Integer): WideString; safecall;
    function GetRelatedString(index: Integer; const charset: WideString): WideString; safecall;
    function GetRelatedStringCrLf(index: Integer; const charset: WideString): WideString; safecall;
    function GetReplacePattern(index: Integer): WideString; safecall;
    function GetReplaceString(index: Integer): WideString; safecall;
    function GetReplaceString2(const pattern: WideString): WideString; safecall;
    function GetReport(index: Integer): WideString; safecall;
    function GetSignedByCert: IChilkatCert; safecall;
    function GetSigningCert: IChilkatCert; safecall;
    function GetTo(index: Integer): WideString; safecall;
    function GetToAddr(index: Integer): WideString; safecall;
    function GetToName(index: Integer): WideString; safecall;
    function GetXml: WideString; safecall;
    function HasHeaderMatching(const fieldName: WideString; const valuePattern: WideString; 
                               caseSensitive: Integer): Integer; safecall;
    function HasHtmlBody: Integer; safecall;
    function HasPlainTextBody: Integer; safecall;
    function IsMultipartReport: Integer; safecall;
    function LoadEml(const mimePath: WideString): Integer; safecall;
    function LoadXml(const xmlPath: WideString): Integer; safecall;
    function LoadXmlString(const xmlStr: WideString): Integer; safecall;
    function QEncodeBytes(inData: OleVariant; const charset: WideString): WideString; safecall;
    function QEncodeString(const str: WideString; const charset: WideString): WideString; safecall;
    procedure RemoveAttachedMessage(idx: Integer); safecall;
    procedure RemoveAttachedMessages; safecall;
    procedure RemoveAttachmentPaths; safecall;
    procedure RemoveHeaderField(const fieldName: WideString); safecall;
    procedure RemoveHtmlAlternative; safecall;
    procedure RemovePlainTextAlternative; safecall;
    function SaveAllAttachments(const dirPath: WideString): Integer; safecall;
    function SaveAttachedFile(index: Integer; const dirPath: WideString): Integer; safecall;
    function SaveEml(const emlFilePath: WideString): Integer; safecall;
    function SaveRelatedItem(index: Integer; const dirPath: WideString): Integer; safecall;
    function SaveXml(const path: WideString): Integer; safecall;
    function SetAttachmentCharset(index: Integer; const charset: WideString): Integer; safecall;
    function SetAttachmentDisposition(index: Integer; const disposition: WideString): Integer; safecall;
    function SetAttachmentFilename(index: Integer; const filename: WideString): Integer; safecall;
    function SetCSP(const csp: IChilkatCsp): Integer; safecall;
    function SetDt(const dt: ICkDateTime): Integer; safecall;
    function SetEncryptCert(const cert: IChilkatCert): Integer; safecall;
    function SetFromMimeBytes(mimeBytes: OleVariant): Integer; safecall;
    function SetFromMimeBytes2(mimeBytes: OleVariant; const charset: WideString): Integer; safecall;
    function SetFromMimeText(const mimeText: WideString): Integer; safecall;
    function SetFromXmlText(const xmlStr: WideString): Integer; safecall;
    procedure SetHtmlBody(const html: WideString); safecall;
    function SetMbHtmlBody(const charset: WideString; inData: OleVariant): Integer; safecall;
    function SetMbPlainTextBody(const charset: WideString; inData: OleVariant): Integer; safecall;
    function SetRelatedFilename(index: Integer; const path: WideString): Integer; safecall;
    function SetReplacePattern(const pattern: WideString; const replaceString: WideString): Integer; safecall;
    function SetSigningCert(const cert: IChilkatCert): Integer; safecall;
    function SetSigningCert2(const cert: IChilkatCert; const key: IPrivateKey): Integer; safecall;
    procedure SetTextBody(const bodyText: WideString; const contentType: WideString); safecall;
    procedure UnSpamify; safecall;
    function UnpackHtml(const unpackDir: WideString; const htmlFilename: WideString; 
                        const partsSubdir: WideString): Integer; safecall;
    function UnzipAttachments: Integer; safecall;
    function ZipAttachments(const zipFilename: WideString): Integer; safecall;
    function LoadBodyFromFile(const filePath: WideString; isHtml: Integer; const charset: WideString): Integer; safecall;
    procedure SetEdifactBody(const message: WideString; const name: WideString; 
                             const filename: WideString; const charset: WideString); safecall;
    function UseCertVault(const vault: IChilkatXmlCertVault): Integer; safecall;
    function GetSignedByCertChain: IChilkatCertChain; safecall;
    function Get_Sender: WideString; safecall;
    procedure Set_Sender(const pVal: WideString); safecall;
    function GetAttachedMessageAttr(index: Integer; const fieldName: WideString; 
                                    const attrName: WideString): WideString; safecall;
    function GetRelatedAttr(index: Integer; const fieldName: WideString; const attrName: WideString): WideString; safecall;
    function GetAttachmentAttr(index: Integer; const fieldName: WideString; 
                               const attrName: WideString): WideString; safecall;
    function GetNumPartsOfType(const contentType: WideString; inlineOnly: Integer; 
                               excludeAttachments: Integer): Integer; safecall;
    function GetNthTextPartOfType(index: Integer; const contentType: WideString; 
                                  inlineOnly: Integer; excludeAttachments: Integer): WideString; safecall;
    function SetBinaryBody(byteData: OleVariant; const contentType: WideString; 
                           const disposition: WideString; const filename: WideString): Integer; safecall;
    function GetNthBinaryPartOfType(index: Integer; const contentType: WideString; 
                                    inlineOnly: Integer; excludeAttachments: Integer): OleVariant; safecall;
    function LoadTaskResult(const task: IChilkatTask): Integer; safecall;
    function ComputeGlobalKey2(const encoding: WideString; bFold: Integer): WideString; safecall;
    function GetMimeSb(const sb: IChilkatStringBuilder): Integer; safecall;
    function GetMimeBd(const bindat: IChilkatBinData): Integer; safecall;
    function SetFromMimeSb(const sb: IChilkatStringBuilder): Integer; safecall;
    function SetFromMimeBd(const bindat: IChilkatBinData): Integer; safecall;
    function AddAttachmentBd(const filename: WideString; const binData: IChilkatBinData; 
                             const contentType: WideString): Integer; safecall;
    function AddRelatedBd(const filename: WideString; const binData: IChilkatBinData): WideString; safecall;
    function AddRelatedBd2(const binData: IChilkatBinData; const fileNameInHtml: WideString): Integer; safecall;
    function Get_NumDigests: Integer; safecall;
    function GetDigest(index: Integer): IChilkatEmail; safecall;
    function GetAttachmentBd(index: Integer; const binData: IChilkatBinData): Integer; safecall;
    function GetAlternativeBodyBd(index: Integer; const binData: IChilkatBinData): Integer; safecall;
    function Get_SigningAlg: WideString; safecall;
    procedure Set_SigningAlg(const pVal: WideString); safecall;
    function Get_OaepPadding: Integer; safecall;
    procedure Set_OaepPadding(pVal: Integer); safecall;
    function Get_OaepHash: WideString; safecall;
    procedure Set_OaepHash(const pVal: WideString); safecall;
    function SetDecryptCert(const cert: IChilkatCert): Integer; safecall;
    function SetDecryptCert2(const cert: IChilkatCert; const key: IPrivateKey): Integer; safecall;
    function Get_OaepMgfHash: WideString; safecall;
    procedure Set_OaepMgfHash(const pVal: WideString); safecall;
    function ApplyFixups(const fixups: WideString): Integer; safecall;
    procedure Clear; safecall;
    function ConvertInlineImages: Integer; safecall;
    function Get_UncommonOptions: WideString; safecall;
    procedure Set_UncommonOptions(const pVal: WideString); safecall;
    function AttachEmail(const email: IChilkatEmail): Integer; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property LastMethodSuccess: Integer read Get_LastMethodSuccess write Set_LastMethodSuccess;
    property LastStringResult: WideString read Get_LastStringResult;
    property LastBinaryResult: OleVariant read Get_LastBinaryResult;
    property LastStringResultLen: Integer read Get_LastStringResultLen;
    property Body: WideString read Get_Body write Set_Body;
    property BounceAddress: WideString read Get_BounceAddress write Set_BounceAddress;
    property charset: WideString read Get_charset write Set_charset;
    property Decrypted: Integer read Get_Decrypted;
    property EmailDate: TDateTime read Get_EmailDate write Set_EmailDate;
    property EmailDateStr: WideString read Get_EmailDateStr write Set_EmailDateStr;
    property EncryptedBy: WideString read Get_EncryptedBy;
    property FileDistList: WideString read Get_FileDistList write Set_FileDistList;
    property From: WideString read Get_From write Set_From;
    property FromAddress: WideString read Get_FromAddress write Set_FromAddress;
    property fromName: WideString read Get_fromName write Set_fromName;
    property Header: WideString read Get_Header;
    property Language: WideString read Get_Language;
    property LocalDate: TDateTime read Get_LocalDate write Set_LocalDate;
    property LocalDateStr: WideString read Get_LocalDateStr write Set_LocalDateStr;
    property Mailer: WideString read Get_Mailer write Set_Mailer;
    property NumAlternatives: Integer read Get_NumAlternatives;
    property NumAttachedMessages: Integer read Get_NumAttachedMessages;
    property NumAttachments: Integer read Get_NumAttachments;
    property NumBcc: Integer read Get_NumBcc;
    property NumCC: Integer read Get_NumCC;
    property NumDaysOld: Integer read Get_NumDaysOld;
    property NumHeaderFields: Integer read Get_NumHeaderFields;
    property NumRelatedItems: Integer read Get_NumRelatedItems;
    property NumReplacePatterns: Integer read Get_NumReplacePatterns;
    property NumReports: Integer read Get_NumReports;
    property NumTo: Integer read Get_NumTo;
    property OverwriteExisting: Integer read Get_OverwriteExisting write Set_OverwriteExisting;
    property Pkcs7CryptAlg: WideString read Get_Pkcs7CryptAlg write Set_Pkcs7CryptAlg;
    property Pkcs7KeyLength: Integer read Get_Pkcs7KeyLength write Set_Pkcs7KeyLength;
    property PreferredCharset: WideString read Get_PreferredCharset write Set_PreferredCharset;
    property PrependHeaders: Integer read Get_PrependHeaders write Set_PrependHeaders;
    property ReceivedEncrypted: Integer read Get_ReceivedEncrypted;
    property ReceivedSigned: Integer read Get_ReceivedSigned;
    property ReplyTo: WideString read Get_ReplyTo write Set_ReplyTo;
    property ReturnReceipt: Integer read Get_ReturnReceipt write Set_ReturnReceipt;
    property SendEncrypted: Integer read Get_SendEncrypted write Set_SendEncrypted;
    property SendSigned: Integer read Get_SendSigned write Set_SendSigned;
    property SignaturesValid: Integer read Get_SignaturesValid;
    property SignedBy: WideString read Get_SignedBy;
    property SigningHashAlg: WideString read Get_SigningHashAlg write Set_SigningHashAlg;
    property Size: Integer read Get_Size;
    property subject: WideString read Get_subject write Set_subject;
    property uidl: WideString read Get_uidl;
    property UnpackUseRelPaths: Integer read Get_UnpackUseRelPaths write Set_UnpackUseRelPaths;
    property Sender: WideString read Get_Sender write Set_Sender;
    property NumDigests: Integer read Get_NumDigests;
    property SigningAlg: WideString read Get_SigningAlg write Set_SigningAlg;
    property OaepPadding: Integer read Get_OaepPadding write Set_OaepPadding;
    property OaepHash: WideString read Get_OaepHash write Set_OaepHash;
    property OaepMgfHash: WideString read Get_OaepMgfHash write Set_OaepMgfHash;
    property UncommonOptions: WideString read Get_UncommonOptions write Set_UncommonOptions;
  end;

// *********************************************************************//
// DispIntf:  IChilkatEmailDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3EC2BC0F-8ECB-4008-AEB7-758972455492}
// *********************************************************************//
  IChilkatEmailDisp = dispinterface
    ['{3EC2BC0F-8ECB-4008-AEB7-758972455492}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property LastMethodSuccess: Integer dispid 9;
    property LastStringResult: WideString readonly dispid 10;
    property LastBinaryResult: OleVariant readonly dispid 11;
    property LastStringResultLen: Integer readonly dispid 12;
    property Body: WideString dispid 100;
    property BounceAddress: WideString dispid 101;
    property charset: WideString dispid 102;
    property Decrypted: Integer readonly dispid 103;
    property EmailDate: TDateTime dispid 104;
    property EmailDateStr: WideString dispid 105;
    property EncryptedBy: WideString readonly dispid 106;
    property FileDistList: WideString dispid 107;
    property From: WideString dispid 108;
    property FromAddress: WideString dispid 109;
    property fromName: WideString dispid 110;
    property Header: WideString readonly dispid 111;
    property Language: WideString readonly dispid 112;
    property LocalDate: TDateTime dispid 113;
    property LocalDateStr: WideString dispid 114;
    property Mailer: WideString dispid 115;
    property NumAlternatives: Integer readonly dispid 116;
    property NumAttachedMessages: Integer readonly dispid 117;
    property NumAttachments: Integer readonly dispid 118;
    property NumBcc: Integer readonly dispid 119;
    property NumCC: Integer readonly dispid 120;
    property NumDaysOld: Integer readonly dispid 121;
    property NumHeaderFields: Integer readonly dispid 122;
    property NumRelatedItems: Integer readonly dispid 123;
    property NumReplacePatterns: Integer readonly dispid 124;
    property NumReports: Integer readonly dispid 125;
    property NumTo: Integer readonly dispid 126;
    property OverwriteExisting: Integer dispid 127;
    property Pkcs7CryptAlg: WideString dispid 128;
    property Pkcs7KeyLength: Integer dispid 129;
    property PreferredCharset: WideString dispid 130;
    property PrependHeaders: Integer dispid 131;
    property ReceivedEncrypted: Integer readonly dispid 132;
    property ReceivedSigned: Integer readonly dispid 133;
    property ReplyTo: WideString dispid 134;
    property ReturnReceipt: Integer dispid 135;
    property SendEncrypted: Integer dispid 136;
    property SendSigned: Integer dispid 137;
    property SignaturesValid: Integer readonly dispid 138;
    property SignedBy: WideString readonly dispid 139;
    property SigningHashAlg: WideString dispid 140;
    property Size: Integer readonly dispid 141;
    property subject: WideString dispid 142;
    property uidl: WideString readonly dispid 143;
    property UnpackUseRelPaths: Integer dispid 144;
    procedure AddAttachmentHeader(index: Integer; const fieldName: WideString; 
                                  const fieldValue: WideString); dispid 145;
    function AddBcc(const friendlyName: WideString; const emailAddress: WideString): Integer; dispid 146;
    function AddCC(const friendlyName: WideString; const emailAddress: WideString): Integer; dispid 147;
    function AddDataAttachment(const filename: WideString; content: OleVariant): Integer; dispid 148;
    function AddDataAttachment2(const filename: WideString; content: OleVariant; 
                                const contentType: WideString): Integer; dispid 149;
    function AddEncryptCert(const cert: IChilkatCert): Integer; dispid 150;
    function AddFileAttachment(const path: WideString): WideString; dispid 151;
    function AddFileAttachment2(const path: WideString; const contentType: WideString): Integer; dispid 152;
    procedure AddHeaderField(const fieldName: WideString; const fieldValue: WideString); dispid 153;
    procedure AddHeaderField2(const fieldName: WideString; const fieldValue: WideString); dispid 154;
    function AddHtmlAlternativeBody(const Body: WideString): Integer; dispid 155;
    function AddMultipleBcc(const commaSeparatedAddresses: WideString): Integer; dispid 156;
    function AddMultipleCC(const commaSeparatedAddresses: WideString): Integer; dispid 157;
    function AddMultipleTo(const commaSeparatedAddresses: WideString): Integer; dispid 158;
    function AddPfxSourceData(pfxBytes: OleVariant; const pfxPassword: WideString): Integer; dispid 159;
    function AddPfxSourceFile(const pfxFilePath: WideString; const pfxPassword: WideString): Integer; dispid 160;
    function AddPlainTextAlternativeBody(const Body: WideString): Integer; dispid 161;
    function AddRelatedData(const filename: WideString; inData: OleVariant): WideString; dispid 162;
    procedure AddRelatedData2(inData: OleVariant; const fileNameInHtml: WideString); dispid 163;
    function AddRelatedFile(const path: WideString): WideString; dispid 164;
    function AddRelatedFile2(const filenameOnDisk: WideString; const fileNameInHtml: WideString): Integer; dispid 165;
    procedure AddRelatedHeader(index: Integer; const fieldName: WideString; 
                               const fieldValue: WideString); dispid 166;
    function AddRelatedString(const nameInHtml: WideString; const str: WideString; 
                              const charset: WideString): WideString; dispid 167;
    procedure AddRelatedString2(const fileNameInHtml: WideString; const content: WideString; 
                                const charset: WideString); dispid 168;
    function AddStringAttachment(const path: WideString; const content: WideString): Integer; dispid 169;
    function AddStringAttachment2(const path: WideString; const content: WideString; 
                                  const charset: WideString): Integer; dispid 170;
    function AddTo(const friendlyName: WideString; const emailAddress: WideString): Integer; dispid 171;
    function AddiCalendarAlternativeBody(const icalContent: WideString; const methodName: WideString): Integer; dispid 172;
    function AesDecrypt(const password: WideString): Integer; dispid 173;
    function AesEncrypt(const password: WideString): Integer; dispid 174;
    procedure AppendToBody(const str: WideString); dispid 175;
    function AspUnpack(const prefix: WideString; const saveDir: WideString; 
                       const urlPath: WideString; cleanFiles: Integer): Integer; dispid 176;
    function AspUnpack2(const prefix: WideString; const saveDir: WideString; 
                        const urlPath: WideString; cleanFiles: Integer): OleVariant; dispid 177;
    function AttachMessage(mimeBytes: OleVariant): Integer; dispid 178;
    function BEncodeBytes(inData: OleVariant; const charset: WideString): WideString; dispid 179;
    function BEncodeString(const str: WideString; const charset: WideString): WideString; dispid 180;
    procedure ClearBcc; dispid 181;
    procedure ClearCC; dispid 182;
    procedure ClearEncryptCerts; dispid 183;
    procedure ClearTo; dispid 184;
    function Clone: IChilkatEmail; dispid 185;
    function ComputeGlobalKey(const encoding: WideString; bFold: Integer): WideString; dispid 186;
    function CreateDsn(const humanReadableMessage: WideString; const xmlStatusFields: WideString; 
                       bHeaderOnly: Integer): IChilkatEmail; dispid 187;
    function CreateForward: IChilkatEmail; dispid 188;
    function CreateMdn(const humanReadableMessage: WideString; const xmlStatusFields: WideString; 
                       bHeaderOnly: Integer): IChilkatEmail; dispid 189;
    function CreateReply: IChilkatEmail; dispid 190;
    function CreateTempMht(const inFilename: WideString): WideString; dispid 191;
    procedure DropAttachments; dispid 192;
    procedure DropRelatedItem(index: Integer); dispid 193;
    procedure DropRelatedItems; dispid 194;
    function DropSingleAttachment(index: Integer): Integer; dispid 195;
    function FindIssuer(const cert: IChilkatCert): IChilkatCert; dispid 196;
    function GenerateFilename: WideString; dispid 197;
    function GetAltHeaderField(index: Integer; const fieldName: WideString): WideString; dispid 198;
    function GetAlternativeBody(index: Integer): WideString; dispid 199;
    function GetAlternativeBodyByContentType(const contentType: WideString): WideString; dispid 200;
    function GetAlternativeContentType(index: Integer): WideString; dispid 201;
    function GetAttachedMessage(index: Integer): IChilkatEmail; dispid 202;
    function GetAttachedMessageFilename(index: Integer): WideString; dispid 203;
    function GetAttachmentContentID(index: Integer): WideString; dispid 204;
    function GetAttachmentContentType(index: Integer): WideString; dispid 205;
    function GetAttachmentData(index: Integer): OleVariant; dispid 206;
    function GetAttachmentFilename(index: Integer): WideString; dispid 207;
    function GetAttachmentHeader(attachIndex: Integer; const fieldName: WideString): WideString; dispid 208;
    function GetAttachmentSize(index: Integer): Integer; dispid 209;
    function GetAttachmentString(index: Integer; const charset: WideString): WideString; dispid 210;
    function GetAttachmentStringCrLf(index: Integer; const charset: WideString): WideString; dispid 211;
    function GetBcc(index: Integer): WideString; dispid 212;
    function GetBccAddr(index: Integer): WideString; dispid 213;
    function GetBccName(index: Integer): WideString; dispid 214;
    function GetCC(index: Integer): WideString; dispid 215;
    function GetCcAddr(index: Integer): WideString; dispid 216;
    function GetCcName(index: Integer): WideString; dispid 217;
    function GetDeliveryStatusInfo(const fieldName: WideString): WideString; dispid 218;
    function GetDsnFinalRecipients: ICkStringArray; dispid 219;
    function GetDt: ICkDateTime; dispid 220;
    function GetEncryptCert: IChilkatCert; dispid 221;
    function GetEncryptedByCert: IChilkatCert; dispid 222;
    function GetFileContent(const path: WideString): OleVariant; dispid 223;
    function GetHeaderField(const fieldName: WideString): WideString; dispid 224;
    function GetHeaderFieldName(index: Integer): WideString; dispid 225;
    function GetHeaderFieldValue(index: Integer): WideString; dispid 226;
    function GetHtmlBody: WideString; dispid 227;
    function GetImapUid: Integer; dispid 228;
    function GetLinkedDomains: ICkStringArray; dispid 229;
    function GetMbHeaderField(const fieldName: WideString; const charset: WideString): OleVariant; dispid 230;
    function GetMbHtmlBody(const charset: WideString): OleVariant; dispid 231;
    function GetMbPlainTextBody(const charset: WideString): OleVariant; dispid 232;
    function GetMime: WideString; dispid 233;
    function GetMimeBinary: OleVariant; dispid 234;
    function GetPlainTextBody: WideString; dispid 236;
    function GetRelatedContentID(index: Integer): WideString; dispid 237;
    function GetRelatedContentLocation(index: Integer): WideString; dispid 238;
    function GetRelatedContentType(index: Integer): WideString; dispid 239;
    function GetRelatedData(index: Integer): OleVariant; dispid 240;
    function GetRelatedFilename(index: Integer): WideString; dispid 241;
    function GetRelatedString(index: Integer; const charset: WideString): WideString; dispid 242;
    function GetRelatedStringCrLf(index: Integer; const charset: WideString): WideString; dispid 243;
    function GetReplacePattern(index: Integer): WideString; dispid 244;
    function GetReplaceString(index: Integer): WideString; dispid 245;
    function GetReplaceString2(const pattern: WideString): WideString; dispid 246;
    function GetReport(index: Integer): WideString; dispid 247;
    function GetSignedByCert: IChilkatCert; dispid 248;
    function GetSigningCert: IChilkatCert; dispid 249;
    function GetTo(index: Integer): WideString; dispid 250;
    function GetToAddr(index: Integer): WideString; dispid 251;
    function GetToName(index: Integer): WideString; dispid 252;
    function GetXml: WideString; dispid 253;
    function HasHeaderMatching(const fieldName: WideString; const valuePattern: WideString; 
                               caseSensitive: Integer): Integer; dispid 254;
    function HasHtmlBody: Integer; dispid 255;
    function HasPlainTextBody: Integer; dispid 256;
    function IsMultipartReport: Integer; dispid 257;
    function LoadEml(const mimePath: WideString): Integer; dispid 258;
    function LoadXml(const xmlPath: WideString): Integer; dispid 259;
    function LoadXmlString(const xmlStr: WideString): Integer; dispid 260;
    function QEncodeBytes(inData: OleVariant; const charset: WideString): WideString; dispid 261;
    function QEncodeString(const str: WideString; const charset: WideString): WideString; dispid 262;
    procedure RemoveAttachedMessage(idx: Integer); dispid 263;
    procedure RemoveAttachedMessages; dispid 264;
    procedure RemoveAttachmentPaths; dispid 265;
    procedure RemoveHeaderField(const fieldName: WideString); dispid 266;
    procedure RemoveHtmlAlternative; dispid 267;
    procedure RemovePlainTextAlternative; dispid 268;
    function SaveAllAttachments(const dirPath: WideString): Integer; dispid 269;
    function SaveAttachedFile(index: Integer; const dirPath: WideString): Integer; dispid 270;
    function SaveEml(const emlFilePath: WideString): Integer; dispid 271;
    function SaveRelatedItem(index: Integer; const dirPath: WideString): Integer; dispid 272;
    function SaveXml(const path: WideString): Integer; dispid 273;
    function SetAttachmentCharset(index: Integer; const charset: WideString): Integer; dispid 274;
    function SetAttachmentDisposition(index: Integer; const disposition: WideString): Integer; dispid 275;
    function SetAttachmentFilename(index: Integer; const filename: WideString): Integer; dispid 276;
    function SetCSP(const csp: IChilkatCsp): Integer; dispid 277;
    function SetDt(const dt: ICkDateTime): Integer; dispid 278;
    function SetEncryptCert(const cert: IChilkatCert): Integer; dispid 279;
    function SetFromMimeBytes(mimeBytes: OleVariant): Integer; dispid 280;
    function SetFromMimeBytes2(mimeBytes: OleVariant; const charset: WideString): Integer; dispid 281;
    function SetFromMimeText(const mimeText: WideString): Integer; dispid 283;
    function SetFromXmlText(const xmlStr: WideString): Integer; dispid 284;
    procedure SetHtmlBody(const html: WideString); dispid 285;
    function SetMbHtmlBody(const charset: WideString; inData: OleVariant): Integer; dispid 286;
    function SetMbPlainTextBody(const charset: WideString; inData: OleVariant): Integer; dispid 287;
    function SetRelatedFilename(index: Integer; const path: WideString): Integer; dispid 288;
    function SetReplacePattern(const pattern: WideString; const replaceString: WideString): Integer; dispid 289;
    function SetSigningCert(const cert: IChilkatCert): Integer; dispid 290;
    function SetSigningCert2(const cert: IChilkatCert; const key: IPrivateKey): Integer; dispid 291;
    procedure SetTextBody(const bodyText: WideString; const contentType: WideString); dispid 292;
    procedure UnSpamify; dispid 293;
    function UnpackHtml(const unpackDir: WideString; const htmlFilename: WideString; 
                        const partsSubdir: WideString): Integer; dispid 294;
    function UnzipAttachments: Integer; dispid 295;
    function ZipAttachments(const zipFilename: WideString): Integer; dispid 296;
    function LoadBodyFromFile(const filePath: WideString; isHtml: Integer; const charset: WideString): Integer; dispid 297;
    procedure SetEdifactBody(const message: WideString; const name: WideString; 
                             const filename: WideString; const charset: WideString); dispid 299;
    function UseCertVault(const vault: IChilkatXmlCertVault): Integer; dispid 300;
    function GetSignedByCertChain: IChilkatCertChain; dispid 301;
    property Sender: WideString dispid 302;
    function GetAttachedMessageAttr(index: Integer; const fieldName: WideString; 
                                    const attrName: WideString): WideString; dispid 303;
    function GetRelatedAttr(index: Integer; const fieldName: WideString; const attrName: WideString): WideString; dispid 304;
    function GetAttachmentAttr(index: Integer; const fieldName: WideString; 
                               const attrName: WideString): WideString; dispid 305;
    function GetNumPartsOfType(const contentType: WideString; inlineOnly: Integer; 
                               excludeAttachments: Integer): Integer; dispid 306;
    function GetNthTextPartOfType(index: Integer; const contentType: WideString; 
                                  inlineOnly: Integer; excludeAttachments: Integer): WideString; dispid 307;
    function SetBinaryBody(byteData: OleVariant; const contentType: WideString; 
                           const disposition: WideString; const filename: WideString): Integer; dispid 308;
    function GetNthBinaryPartOfType(index: Integer; const contentType: WideString; 
                                    inlineOnly: Integer; excludeAttachments: Integer): OleVariant; dispid 309;
    function LoadTaskResult(const task: IChilkatTask): Integer; dispid 310;
    function ComputeGlobalKey2(const encoding: WideString; bFold: Integer): WideString; dispid 311;
    function GetMimeSb(const sb: IChilkatStringBuilder): Integer; dispid 312;
    function GetMimeBd(const bindat: IChilkatBinData): Integer; dispid 313;
    function SetFromMimeSb(const sb: IChilkatStringBuilder): Integer; dispid 315;
    function SetFromMimeBd(const bindat: IChilkatBinData): Integer; dispid 316;
    function AddAttachmentBd(const filename: WideString; const binData: IChilkatBinData; 
                             const contentType: WideString): Integer; dispid 317;
    function AddRelatedBd(const filename: WideString; const binData: IChilkatBinData): WideString; dispid 318;
    function AddRelatedBd2(const binData: IChilkatBinData; const fileNameInHtml: WideString): Integer; dispid 319;
    property NumDigests: Integer readonly dispid 320;
    function GetDigest(index: Integer): IChilkatEmail; dispid 321;
    function GetAttachmentBd(index: Integer; const binData: IChilkatBinData): Integer; dispid 322;
    function GetAlternativeBodyBd(index: Integer; const binData: IChilkatBinData): Integer; dispid 323;
    property SigningAlg: WideString dispid 324;
    property OaepPadding: Integer dispid 325;
    property OaepHash: WideString dispid 326;
    function SetDecryptCert(const cert: IChilkatCert): Integer; dispid 327;
    function SetDecryptCert2(const cert: IChilkatCert; const key: IPrivateKey): Integer; dispid 328;
    property OaepMgfHash: WideString dispid 329;
    function ApplyFixups(const fixups: WideString): Integer; dispid 331;
    procedure Clear; dispid 332;
    function ConvertInlineImages: Integer; dispid 333;
    property UncommonOptions: WideString dispid 334;
    function AttachEmail(const email: IChilkatEmail): Integer; dispid 335;
  end;

// *********************************************************************//
// Interface: IChilkatCsp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {26377592-38BD-42DC-9C8B-CB38900F250B}
// *********************************************************************//
  IChilkatCsp = interface(IDispatch)
    ['{26377592-38BD-42DC-9C8B-CB38900F250B}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_LastMethodSuccess: Integer; safecall;
    procedure Set_LastMethodSuccess(pVal: Integer); safecall;
    function Get_LastStringResult: WideString; safecall;
    function Get_LastBinaryResult: OleVariant; safecall;
    function Get_LastStringResultLen: Integer; safecall;
    function Get_EncryptAlgorithm: WideString; safecall;
    function Get_EncryptAlgorithmID: Integer; safecall;
    function Get_EncryptNumBits: Integer; safecall;
    function Get_HashAlgorithm: WideString; safecall;
    function Get_HashAlgorithmID: Integer; safecall;
    function Get_HashNumBits: Integer; safecall;
    function Get_KeyContainerName: WideString; safecall;
    procedure Set_KeyContainerName(const pVal: WideString); safecall;
    function Get_MachineKeyset: Integer; safecall;
    procedure Set_MachineKeyset(pVal: Integer); safecall;
    function Get_NumEncryptAlgorithms: Integer; safecall;
    function Get_NumHashAlgorithms: Integer; safecall;
    function Get_NumKeyContainers: Integer; safecall;
    function Get_NumKeyExchangeAlgorithms: Integer; safecall;
    function Get_NumSignatureAlgorithms: Integer; safecall;
    function Get_ProviderName: WideString; safecall;
    procedure Set_ProviderName(const pVal: WideString); safecall;
    function Get_ProviderType: Integer; safecall;
    function GetKeyContainerNames: ICkStringArray; safecall;
    function HasEncryptAlgorithm(const name: WideString; numBits: Integer): Integer; safecall;
    function HasHashAlgorithm(const name: WideString; numBits: Integer): Integer; safecall;
    function Initialize: Integer; safecall;
    function NthEncryptionAlgorithm(index: Integer): WideString; safecall;
    function NthEncryptionNumBits(index: Integer): Integer; safecall;
    function NthHashAlgorithmName(index: Integer): WideString; safecall;
    function NthHashNumBits(index: Integer): Integer; safecall;
    function NthKeyContainerName(index: Integer): WideString; safecall;
    function NthKeyExchangeAlgorithm(index: Integer): WideString; safecall;
    function NthKeyExchangeNumBits(index: Integer): Integer; safecall;
    function NthSignatureAlgorithm(index: Integer): WideString; safecall;
    function NthSignatureNumBits(index: Integer): Integer; safecall;
    function SetEncryptAlgorithm(const name: WideString): Integer; safecall;
    function SetHashAlgorithm(const name: WideString): Integer; safecall;
    function SetProviderMicrosoftBase: Integer; safecall;
    function SetProviderMicrosoftEnhanced: Integer; safecall;
    function SetProviderMicrosoftRsaAes: Integer; safecall;
    function SetProviderMicrosoftStrong: Integer; safecall;
    function GetProviders(const providerNames: IChilkatStringTable): Integer; safecall;
    function LoadSmartcardCert(const cert: IChilkatCert): Integer; safecall;
    function Get_UncommonOptions: WideString; safecall;
    procedure Set_UncommonOptions(const pVal: WideString); safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property LastMethodSuccess: Integer read Get_LastMethodSuccess write Set_LastMethodSuccess;
    property LastStringResult: WideString read Get_LastStringResult;
    property LastBinaryResult: OleVariant read Get_LastBinaryResult;
    property LastStringResultLen: Integer read Get_LastStringResultLen;
    property EncryptAlgorithm: WideString read Get_EncryptAlgorithm;
    property EncryptAlgorithmID: Integer read Get_EncryptAlgorithmID;
    property EncryptNumBits: Integer read Get_EncryptNumBits;
    property HashAlgorithm: WideString read Get_HashAlgorithm;
    property HashAlgorithmID: Integer read Get_HashAlgorithmID;
    property HashNumBits: Integer read Get_HashNumBits;
    property KeyContainerName: WideString read Get_KeyContainerName write Set_KeyContainerName;
    property MachineKeyset: Integer read Get_MachineKeyset write Set_MachineKeyset;
    property NumEncryptAlgorithms: Integer read Get_NumEncryptAlgorithms;
    property NumHashAlgorithms: Integer read Get_NumHashAlgorithms;
    property NumKeyContainers: Integer read Get_NumKeyContainers;
    property NumKeyExchangeAlgorithms: Integer read Get_NumKeyExchangeAlgorithms;
    property NumSignatureAlgorithms: Integer read Get_NumSignatureAlgorithms;
    property ProviderName: WideString read Get_ProviderName write Set_ProviderName;
    property ProviderType: Integer read Get_ProviderType;
    property UncommonOptions: WideString read Get_UncommonOptions write Set_UncommonOptions;
  end;

// *********************************************************************//
// DispIntf:  IChilkatCspDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {26377592-38BD-42DC-9C8B-CB38900F250B}
// *********************************************************************//
  IChilkatCspDisp = dispinterface
    ['{26377592-38BD-42DC-9C8B-CB38900F250B}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property LastMethodSuccess: Integer dispid 9;
    property LastStringResult: WideString readonly dispid 10;
    property LastBinaryResult: OleVariant readonly dispid 11;
    property LastStringResultLen: Integer readonly dispid 12;
    property EncryptAlgorithm: WideString readonly dispid 100;
    property EncryptAlgorithmID: Integer readonly dispid 101;
    property EncryptNumBits: Integer readonly dispid 102;
    property HashAlgorithm: WideString readonly dispid 103;
    property HashAlgorithmID: Integer readonly dispid 104;
    property HashNumBits: Integer readonly dispid 105;
    property KeyContainerName: WideString dispid 106;
    property MachineKeyset: Integer dispid 107;
    property NumEncryptAlgorithms: Integer readonly dispid 108;
    property NumHashAlgorithms: Integer readonly dispid 109;
    property NumKeyContainers: Integer readonly dispid 110;
    property NumKeyExchangeAlgorithms: Integer readonly dispid 111;
    property NumSignatureAlgorithms: Integer readonly dispid 112;
    property ProviderName: WideString dispid 113;
    property ProviderType: Integer readonly dispid 114;
    function GetKeyContainerNames: ICkStringArray; dispid 115;
    function HasEncryptAlgorithm(const name: WideString; numBits: Integer): Integer; dispid 116;
    function HasHashAlgorithm(const name: WideString; numBits: Integer): Integer; dispid 117;
    function Initialize: Integer; dispid 118;
    function NthEncryptionAlgorithm(index: Integer): WideString; dispid 119;
    function NthEncryptionNumBits(index: Integer): Integer; dispid 120;
    function NthHashAlgorithmName(index: Integer): WideString; dispid 121;
    function NthHashNumBits(index: Integer): Integer; dispid 122;
    function NthKeyContainerName(index: Integer): WideString; dispid 123;
    function NthKeyExchangeAlgorithm(index: Integer): WideString; dispid 124;
    function NthKeyExchangeNumBits(index: Integer): Integer; dispid 125;
    function NthSignatureAlgorithm(index: Integer): WideString; dispid 126;
    function NthSignatureNumBits(index: Integer): Integer; dispid 127;
    function SetEncryptAlgorithm(const name: WideString): Integer; dispid 128;
    function SetHashAlgorithm(const name: WideString): Integer; dispid 129;
    function SetProviderMicrosoftBase: Integer; dispid 130;
    function SetProviderMicrosoftEnhanced: Integer; dispid 131;
    function SetProviderMicrosoftRsaAes: Integer; dispid 132;
    function SetProviderMicrosoftStrong: Integer; dispid 133;
    function GetProviders(const providerNames: IChilkatStringTable): Integer; dispid 135;
    function LoadSmartcardCert(const cert: IChilkatCert): Integer; dispid 138;
    property UncommonOptions: WideString dispid 139;
  end;

// *********************************************************************//
// Interface: IChilkatBz2
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {E597F80D-BF1A-44AD-A038-D6AC9881B335}
// *********************************************************************//
  IChilkatBz2 = interface(IDispatch)
    ['{E597F80D-BF1A-44AD-A038-D6AC9881B335}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_LastMethodSuccess: Integer; safecall;
    procedure Set_LastMethodSuccess(pVal: Integer); safecall;
    function Get_LastStringResult: WideString; safecall;
    function Get_LastBinaryResult: OleVariant; safecall;
    function Get_LastStringResultLen: Integer; safecall;
    function Get_HeartbeatMs: Integer; safecall;
    procedure Set_HeartbeatMs(pVal: Integer); safecall;
    function CompressFile(const inFilename: WideString; const toPath: WideString): Integer; safecall;
    function CompressFileAsync(const inFilename: WideString; const toPath: WideString): IChilkatTask; safecall;
    function CompressFileToMem(const inFilename: WideString): OleVariant; safecall;
    function CompressFileToMemAsync(const inFilename: WideString): IChilkatTask; safecall;
    function CompressMemToFile(inData: OleVariant; const toPath: WideString): Integer; safecall;
    function CompressMemToFileAsync(inData: OleVariant; const toPath: WideString): IChilkatTask; safecall;
    function CompressMemory(inData: OleVariant): OleVariant; safecall;
    function CompressMemoryAsync(inData: OleVariant): IChilkatTask; safecall;
    function UncompressFile(const inFilename: WideString; const toPath: WideString): Integer; safecall;
    function UncompressFileAsync(const inFilename: WideString; const toPath: WideString): IChilkatTask; safecall;
    function UncompressFileToMem(const inFilename: WideString): OleVariant; safecall;
    function UncompressFileToMemAsync(const inFilename: WideString): IChilkatTask; safecall;
    function UncompressMemToFile(inData: OleVariant; const toPath: WideString): Integer; safecall;
    function UncompressMemToFileAsync(inData: OleVariant; const toPath: WideString): IChilkatTask; safecall;
    function UncompressMemory(inData: OleVariant): OleVariant; safecall;
    function UncompressMemoryAsync(inData: OleVariant): IChilkatTask; safecall;
    function UnlockComponent(const regCode: WideString): Integer; safecall;
    function Get_AbortCurrent: Integer; safecall;
    procedure Set_AbortCurrent(pVal: Integer); safecall;
    function LoadTaskCaller(const task: IChilkatTask): Integer; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property LastMethodSuccess: Integer read Get_LastMethodSuccess write Set_LastMethodSuccess;
    property LastStringResult: WideString read Get_LastStringResult;
    property LastBinaryResult: OleVariant read Get_LastBinaryResult;
    property LastStringResultLen: Integer read Get_LastStringResultLen;
    property HeartbeatMs: Integer read Get_HeartbeatMs write Set_HeartbeatMs;
    property AbortCurrent: Integer read Get_AbortCurrent write Set_AbortCurrent;
  end;

// *********************************************************************//
// DispIntf:  IChilkatBz2Disp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {E597F80D-BF1A-44AD-A038-D6AC9881B335}
// *********************************************************************//
  IChilkatBz2Disp = dispinterface
    ['{E597F80D-BF1A-44AD-A038-D6AC9881B335}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property LastMethodSuccess: Integer dispid 9;
    property LastStringResult: WideString readonly dispid 10;
    property LastBinaryResult: OleVariant readonly dispid 11;
    property LastStringResultLen: Integer readonly dispid 12;
    property HeartbeatMs: Integer dispid 100;
    function CompressFile(const inFilename: WideString; const toPath: WideString): Integer; dispid 101;
    function CompressFileAsync(const inFilename: WideString; const toPath: WideString): IChilkatTask; dispid 601;
    function CompressFileToMem(const inFilename: WideString): OleVariant; dispid 102;
    function CompressFileToMemAsync(const inFilename: WideString): IChilkatTask; dispid 602;
    function CompressMemToFile(inData: OleVariant; const toPath: WideString): Integer; dispid 103;
    function CompressMemToFileAsync(inData: OleVariant; const toPath: WideString): IChilkatTask; dispid 603;
    function CompressMemory(inData: OleVariant): OleVariant; dispid 104;
    function CompressMemoryAsync(inData: OleVariant): IChilkatTask; dispid 604;
    function UncompressFile(const inFilename: WideString; const toPath: WideString): Integer; dispid 105;
    function UncompressFileAsync(const inFilename: WideString; const toPath: WideString): IChilkatTask; dispid 605;
    function UncompressFileToMem(const inFilename: WideString): OleVariant; dispid 106;
    function UncompressFileToMemAsync(const inFilename: WideString): IChilkatTask; dispid 606;
    function UncompressMemToFile(inData: OleVariant; const toPath: WideString): Integer; dispid 107;
    function UncompressMemToFileAsync(inData: OleVariant; const toPath: WideString): IChilkatTask; dispid 607;
    function UncompressMemory(inData: OleVariant): OleVariant; dispid 108;
    function UncompressMemoryAsync(inData: OleVariant): IChilkatTask; dispid 608;
    function UnlockComponent(const regCode: WideString): Integer; dispid 109;
    property AbortCurrent: Integer dispid 110;
    function LoadTaskCaller(const task: IChilkatTask): Integer; dispid 111;
  end;

// *********************************************************************//
// Interface: IChilkatCache
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {064748FA-01E3-4ACD-8DAD-859556B263BD}
// *********************************************************************//
  IChilkatCache = interface(IDispatch)
    ['{064748FA-01E3-4ACD-8DAD-859556B263BD}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_LastMethodSuccess: Integer; safecall;
    procedure Set_LastMethodSuccess(pVal: Integer); safecall;
    function Get_LastStringResult: WideString; safecall;
    function Get_LastBinaryResult: OleVariant; safecall;
    function Get_LastStringResultLen: Integer; safecall;
    function Get_LastEtagFetched: WideString; safecall;
    function Get_LastExpirationFetched: TDateTime; safecall;
    function Get_LastExpirationFetchedStr: WideString; safecall;
    function Get_LastHitExpired: Integer; safecall;
    function Get_LastKeyFetched: WideString; safecall;
    function Get_Level: Integer; safecall;
    procedure Set_Level(pVal: Integer); safecall;
    function Get_NumRoots: Integer; safecall;
    procedure AddRoot(const path: WideString); safecall;
    function DeleteAll: Integer; safecall;
    function DeleteAllExpired: Integer; safecall;
    function DeleteFromCache(const key: WideString): Integer; safecall;
    function DeleteOlder(dateTime: TDateTime): Integer; safecall;
    function DeleteOlderDt(const dateTime: ICkDateTime): Integer; safecall;
    function DeleteOlderStr(const dateTimeStr: WideString): Integer; safecall;
    function FetchFromCache(const key: WideString): OleVariant; safecall;
    function FetchText(const key: WideString): WideString; safecall;
    function GetEtag(const key: WideString): WideString; safecall;
    function GetExpiration(const key: WideString): TDateTime; safecall;
    function GetExpirationDt(const key: WideString): ICkDateTime; safecall;
    function GetExpirationStr(const url: WideString): WideString; safecall;
    function GetFilename(const key: WideString): WideString; safecall;
    function GetRoot(index: Integer): WideString; safecall;
    function IsCached(const key: WideString): Integer; safecall;
    function SaveText(const key: WideString; expireDateTime: TDateTime; const eTag: WideString; 
                      const itemTextData: WideString): Integer; safecall;
    function SaveTextDt(const key: WideString; const expireDateTime: ICkDateTime; 
                        const eTag: WideString; const itemTextData: WideString): Integer; safecall;
    function SaveTextNoExpire(const key: WideString; const eTag: WideString; 
                              const itemTextData: WideString): Integer; safecall;
    function SaveTextStr(const key: WideString; const expireDateTime: WideString; 
                         const eTag: WideString; const itemTextData: WideString): Integer; safecall;
    function SaveToCache(const key: WideString; expireDateTime: TDateTime; const eTag: WideString; 
                         itemData: OleVariant): Integer; safecall;
    function SaveToCacheDt(const key: WideString; const expireDateTime: ICkDateTime; 
                           const eTag: WideString; itemData: OleVariant): Integer; safecall;
    function SaveToCacheNoExpire(const key: WideString; const eTag: WideString; itemData: OleVariant): Integer; safecall;
    function SaveToCacheStr(const key: WideString; const expireDateTime: WideString; 
                            const eTag: WideString; itemData: OleVariant): Integer; safecall;
    function UpdateExpiration(const key: WideString; expireDateTime: TDateTime): Integer; safecall;
    function UpdateExpirationDt(const key: WideString; const expireDateTime: ICkDateTime): Integer; safecall;
    function UpdateExpirationStr(const key: WideString; const expireDateTime: WideString): Integer; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property LastMethodSuccess: Integer read Get_LastMethodSuccess write Set_LastMethodSuccess;
    property LastStringResult: WideString read Get_LastStringResult;
    property LastBinaryResult: OleVariant read Get_LastBinaryResult;
    property LastStringResultLen: Integer read Get_LastStringResultLen;
    property LastEtagFetched: WideString read Get_LastEtagFetched;
    property LastExpirationFetched: TDateTime read Get_LastExpirationFetched;
    property LastExpirationFetchedStr: WideString read Get_LastExpirationFetchedStr;
    property LastHitExpired: Integer read Get_LastHitExpired;
    property LastKeyFetched: WideString read Get_LastKeyFetched;
    property Level: Integer read Get_Level write Set_Level;
    property NumRoots: Integer read Get_NumRoots;
  end;

// *********************************************************************//
// DispIntf:  IChilkatCacheDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {064748FA-01E3-4ACD-8DAD-859556B263BD}
// *********************************************************************//
  IChilkatCacheDisp = dispinterface
    ['{064748FA-01E3-4ACD-8DAD-859556B263BD}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property LastMethodSuccess: Integer dispid 9;
    property LastStringResult: WideString readonly dispid 10;
    property LastBinaryResult: OleVariant readonly dispid 11;
    property LastStringResultLen: Integer readonly dispid 12;
    property LastEtagFetched: WideString readonly dispid 100;
    property LastExpirationFetched: TDateTime readonly dispid 101;
    property LastExpirationFetchedStr: WideString readonly dispid 102;
    property LastHitExpired: Integer readonly dispid 103;
    property LastKeyFetched: WideString readonly dispid 104;
    property Level: Integer dispid 105;
    property NumRoots: Integer readonly dispid 106;
    procedure AddRoot(const path: WideString); dispid 107;
    function DeleteAll: Integer; dispid 108;
    function DeleteAllExpired: Integer; dispid 109;
    function DeleteFromCache(const key: WideString): Integer; dispid 110;
    function DeleteOlder(dateTime: TDateTime): Integer; dispid 111;
    function DeleteOlderDt(const dateTime: ICkDateTime): Integer; dispid 112;
    function DeleteOlderStr(const dateTimeStr: WideString): Integer; dispid 113;
    function FetchFromCache(const key: WideString): OleVariant; dispid 114;
    function FetchText(const key: WideString): WideString; dispid 115;
    function GetEtag(const key: WideString): WideString; dispid 116;
    function GetExpiration(const key: WideString): TDateTime; dispid 117;
    function GetExpirationDt(const key: WideString): ICkDateTime; dispid 118;
    function GetExpirationStr(const url: WideString): WideString; dispid 119;
    function GetFilename(const key: WideString): WideString; dispid 120;
    function GetRoot(index: Integer): WideString; dispid 121;
    function IsCached(const key: WideString): Integer; dispid 122;
    function SaveText(const key: WideString; expireDateTime: TDateTime; const eTag: WideString; 
                      const itemTextData: WideString): Integer; dispid 123;
    function SaveTextDt(const key: WideString; const expireDateTime: ICkDateTime; 
                        const eTag: WideString; const itemTextData: WideString): Integer; dispid 124;
    function SaveTextNoExpire(const key: WideString; const eTag: WideString; 
                              const itemTextData: WideString): Integer; dispid 125;
    function SaveTextStr(const key: WideString; const expireDateTime: WideString; 
                         const eTag: WideString; const itemTextData: WideString): Integer; dispid 126;
    function SaveToCache(const key: WideString; expireDateTime: TDateTime; const eTag: WideString; 
                         itemData: OleVariant): Integer; dispid 127;
    function SaveToCacheDt(const key: WideString; const expireDateTime: ICkDateTime; 
                           const eTag: WideString; itemData: OleVariant): Integer; dispid 128;
    function SaveToCacheNoExpire(const key: WideString; const eTag: WideString; itemData: OleVariant): Integer; dispid 129;
    function SaveToCacheStr(const key: WideString; const expireDateTime: WideString; 
                            const eTag: WideString; itemData: OleVariant): Integer; dispid 130;
    function UpdateExpiration(const key: WideString; expireDateTime: TDateTime): Integer; dispid 131;
    function UpdateExpirationDt(const key: WideString; const expireDateTime: ICkDateTime): Integer; dispid 132;
    function UpdateExpirationStr(const key: WideString; const expireDateTime: WideString): Integer; dispid 133;
  end;

// *********************************************************************//
// Interface: IChilkatCertStore
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {8CBE1840-52FA-4404-824C-139577309528}
// *********************************************************************//
  IChilkatCertStore = interface(IDispatch)
    ['{8CBE1840-52FA-4404-824C-139577309528}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_LastMethodSuccess: Integer; safecall;
    procedure Set_LastMethodSuccess(pVal: Integer); safecall;
    function Get_LastStringResult: WideString; safecall;
    function Get_LastBinaryResult: OleVariant; safecall;
    function Get_LastStringResultLen: Integer; safecall;
    function Get_NumCertificates: Integer; safecall;
    function Get_NumEmailCerts: Integer; safecall;
    function Get_AvoidWindowsPkAccess: Integer; safecall;
    procedure Set_AvoidWindowsPkAccess(pVal: Integer); safecall;
    function AddCertificate(const cert: IChilkatCert): Integer; safecall;
    function CreateFileStore(const filename: WideString): Integer; safecall;
    function CreateMemoryStore: Integer; safecall;
    function CreateRegistryStore(const regRoot: WideString; const regPath: WideString): Integer; safecall;
    function FindCertByRfc822Name(const name: WideString): IChilkatCert; safecall;
    function FindCertBySerial(const str: WideString): IChilkatCert; safecall;
    function FindCertBySha1Thumbprint(const str: WideString): IChilkatCert; safecall;
    function FindCertBySubject(const str: WideString): IChilkatCert; safecall;
    function FindCertBySubjectCN(const str: WideString): IChilkatCert; safecall;
    function FindCertBySubjectE(const str: WideString): IChilkatCert; safecall;
    function FindCertBySubjectO(const str: WideString): IChilkatCert; safecall;
    function FindCertForEmail(const emailAddress: WideString): IChilkatCert; safecall;
    function GetCertificate(index: Integer): IChilkatCert; safecall;
    function GetEmailCert(index: Integer): IChilkatCert; safecall;
    function LoadPemFile(const pemPath: WideString): Integer; safecall;
    function LoadPemStr(const pemString: WideString): Integer; safecall;
    function LoadPfxData(pfxData: OleVariant; const password: WideString): Integer; safecall;
    function LoadPfxFile(const pfxFilename: WideString; const password: WideString): Integer; safecall;
    function OpenCurrentUserStore(ReadOnly: Integer): Integer; safecall;
    function OpenFileStore(const filename: WideString; ReadOnly: Integer): Integer; safecall;
    function OpenLocalSystemStore(ReadOnly: Integer): Integer; safecall;
    function OpenRegistryStore(const regRoot: WideString; const regPath: WideString; 
                               ReadOnly: Integer): Integer; safecall;
    function RemoveCertificate(const cert: IChilkatCert): Integer; safecall;
    function OpenChilkatStore(ReadOnly: Integer): Integer; safecall;
    function OpenOutlookStore(ReadOnly: Integer): Integer; safecall;
    function OpenWindowsStore(const storeLocation: WideString; const storeName: WideString; 
                              ReadOnly: Integer): Integer; safecall;
    function FindCertByKeyContainer(const name: WideString): IChilkatCert; safecall;
    function OpenSmartcard(const csp: WideString): Integer; safecall;
    function Get_SmartCardPin: WideString; safecall;
    procedure Set_SmartCardPin(const pVal: WideString); safecall;
    function Get_UncommonOptions: WideString; safecall;
    procedure Set_UncommonOptions(const pVal: WideString); safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property LastMethodSuccess: Integer read Get_LastMethodSuccess write Set_LastMethodSuccess;
    property LastStringResult: WideString read Get_LastStringResult;
    property LastBinaryResult: OleVariant read Get_LastBinaryResult;
    property LastStringResultLen: Integer read Get_LastStringResultLen;
    property NumCertificates: Integer read Get_NumCertificates;
    property NumEmailCerts: Integer read Get_NumEmailCerts;
    property AvoidWindowsPkAccess: Integer read Get_AvoidWindowsPkAccess write Set_AvoidWindowsPkAccess;
    property SmartCardPin: WideString read Get_SmartCardPin write Set_SmartCardPin;
    property UncommonOptions: WideString read Get_UncommonOptions write Set_UncommonOptions;
  end;

// *********************************************************************//
// DispIntf:  IChilkatCertStoreDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {8CBE1840-52FA-4404-824C-139577309528}
// *********************************************************************//
  IChilkatCertStoreDisp = dispinterface
    ['{8CBE1840-52FA-4404-824C-139577309528}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property LastMethodSuccess: Integer dispid 9;
    property LastStringResult: WideString readonly dispid 10;
    property LastBinaryResult: OleVariant readonly dispid 11;
    property LastStringResultLen: Integer readonly dispid 12;
    property NumCertificates: Integer readonly dispid 100;
    property NumEmailCerts: Integer readonly dispid 101;
    property AvoidWindowsPkAccess: Integer dispid 103;
    function AddCertificate(const cert: IChilkatCert): Integer; dispid 104;
    function CreateFileStore(const filename: WideString): Integer; dispid 105;
    function CreateMemoryStore: Integer; dispid 106;
    function CreateRegistryStore(const regRoot: WideString; const regPath: WideString): Integer; dispid 107;
    function FindCertByRfc822Name(const name: WideString): IChilkatCert; dispid 108;
    function FindCertBySerial(const str: WideString): IChilkatCert; dispid 109;
    function FindCertBySha1Thumbprint(const str: WideString): IChilkatCert; dispid 110;
    function FindCertBySubject(const str: WideString): IChilkatCert; dispid 111;
    function FindCertBySubjectCN(const str: WideString): IChilkatCert; dispid 112;
    function FindCertBySubjectE(const str: WideString): IChilkatCert; dispid 113;
    function FindCertBySubjectO(const str: WideString): IChilkatCert; dispid 114;
    function FindCertForEmail(const emailAddress: WideString): IChilkatCert; dispid 115;
    function GetCertificate(index: Integer): IChilkatCert; dispid 116;
    function GetEmailCert(index: Integer): IChilkatCert; dispid 117;
    function LoadPemFile(const pemPath: WideString): Integer; dispid 118;
    function LoadPemStr(const pemString: WideString): Integer; dispid 119;
    function LoadPfxData(pfxData: OleVariant; const password: WideString): Integer; dispid 120;
    function LoadPfxFile(const pfxFilename: WideString; const password: WideString): Integer; dispid 121;
    function OpenCurrentUserStore(ReadOnly: Integer): Integer; dispid 122;
    function OpenFileStore(const filename: WideString; ReadOnly: Integer): Integer; dispid 123;
    function OpenLocalSystemStore(ReadOnly: Integer): Integer; dispid 124;
    function OpenRegistryStore(const regRoot: WideString; const regPath: WideString; 
                               ReadOnly: Integer): Integer; dispid 125;
    function RemoveCertificate(const cert: IChilkatCert): Integer; dispid 126;
    function OpenChilkatStore(ReadOnly: Integer): Integer; dispid 127;
    function OpenOutlookStore(ReadOnly: Integer): Integer; dispid 128;
    function OpenWindowsStore(const storeLocation: WideString; const storeName: WideString; 
                              ReadOnly: Integer): Integer; dispid 129;
    function FindCertByKeyContainer(const name: WideString): IChilkatCert; dispid 130;
    function OpenSmartcard(const csp: WideString): Integer; dispid 131;
    property SmartCardPin: WideString dispid 132;
    property UncommonOptions: WideString dispid 133;
  end;

// *********************************************************************//
// Interface: IChilkatCgi
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {C71DB905-E991-4089-9FFB-BB692A8A8D1D}
// *********************************************************************//
  IChilkatCgi = interface(IDispatch)
    ['{C71DB905-E991-4089-9FFB-BB692A8A8D1D}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_LastMethodSuccess: Integer; safecall;
    procedure Set_LastMethodSuccess(pVal: Integer); safecall;
    function Get_LastStringResult: WideString; safecall;
    function Get_LastBinaryResult: OleVariant; safecall;
    function Get_LastStringResultLen: Integer; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property LastMethodSuccess: Integer read Get_LastMethodSuccess write Set_LastMethodSuccess;
    property LastStringResult: WideString read Get_LastStringResult;
    property LastBinaryResult: OleVariant read Get_LastBinaryResult;
    property LastStringResultLen: Integer read Get_LastStringResultLen;
  end;

// *********************************************************************//
// DispIntf:  IChilkatCgiDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {C71DB905-E991-4089-9FFB-BB692A8A8D1D}
// *********************************************************************//
  IChilkatCgiDisp = dispinterface
    ['{C71DB905-E991-4089-9FFB-BB692A8A8D1D}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property LastMethodSuccess: Integer dispid 9;
    property LastStringResult: WideString readonly dispid 10;
    property LastBinaryResult: OleVariant readonly dispid 11;
    property LastStringResultLen: Integer readonly dispid 12;
  end;

// *********************************************************************//
// Interface: IChilkatCharset
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {54E9A3A9-44F6-4E38-AA16-F27FB906EE7A}
// *********************************************************************//
  IChilkatCharset = interface(IDispatch)
    ['{54E9A3A9-44F6-4E38-AA16-F27FB906EE7A}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_LastMethodSuccess: Integer; safecall;
    procedure Set_LastMethodSuccess(pVal: Integer); safecall;
    function Get_LastStringResult: WideString; safecall;
    function Get_LastBinaryResult: OleVariant; safecall;
    function Get_LastStringResultLen: Integer; safecall;
    function Get_AltToCharset: WideString; safecall;
    procedure Set_AltToCharset(const pVal: WideString); safecall;
    function Get_ErrorAction: Integer; safecall;
    procedure Set_ErrorAction(pVal: Integer); safecall;
    function Get_FromCharset: WideString; safecall;
    procedure Set_FromCharset(const pVal: WideString); safecall;
    function Get_LastInputAsHex: WideString; safecall;
    function Get_LastInputAsQP: WideString; safecall;
    function Get_LastOutputAsHex: WideString; safecall;
    function Get_LastOutputAsQP: WideString; safecall;
    function Get_SaveLast: Integer; safecall;
    procedure Set_SaveLast(pVal: Integer); safecall;
    function Get_ToCharset: WideString; safecall;
    procedure Set_ToCharset(const pVal: WideString); safecall;
    function CharsetToCodePage(const charsetName: WideString): Integer; safecall;
    function CodePageToCharset(codePage: Integer): WideString; safecall;
    function ConvertData(inData: OleVariant): OleVariant; safecall;
    function ConvertFile(const inPath: WideString; const destPath: WideString): Integer; safecall;
    function ConvertFileNoPreamble(const inPath: WideString; const destPath: WideString): Integer; safecall;
    function ConvertHtml(inData: OleVariant): OleVariant; safecall;
    function ConvertHtmlFile(const inPath: WideString; const destPath: WideString): Integer; safecall;
    function EntityEncodeDec(const str: WideString): WideString; safecall;
    function EntityEncodeHex(const str: WideString): WideString; safecall;
    function GetHtmlCharset(inData: OleVariant): WideString; safecall;
    function GetHtmlFileCharset(const htmlFilePath: WideString): WideString; safecall;
    function HtmlDecodeToStr(const inStr: WideString): WideString; safecall;
    function HtmlEntityDecode(inHtml: OleVariant): OleVariant; safecall;
    function HtmlEntityDecodeFile(const inPath: WideString; const destPath: WideString): Integer; safecall;
    function IsUnlocked: Integer; safecall;
    function LowerCase(const inStr: WideString): WideString; safecall;
    function ReadFile(const path: WideString): OleVariant; safecall;
    function ReadFileToString(const path: WideString; const charset: WideString): WideString; safecall;
    procedure SetErrorBytes(data: OleVariant); safecall;
    procedure SetErrorString(const str: WideString; const charset: WideString); safecall;
    function UnlockComponent(const unlockCode: WideString): Integer; safecall;
    function UpperCase(const inStr: WideString): WideString; safecall;
    function UrlDecodeStr(const inStr: WideString): WideString; safecall;
    function VerifyData(const charset: WideString; inData: OleVariant): Integer; safecall;
    function VerifyFile(const charset: WideString; const path: WideString): Integer; safecall;
    function WriteFile(const path: WideString; byteData: OleVariant): Integer; safecall;
    function WriteStringToFile(const TextData: WideString; const path: WideString; 
                               const charset: WideString): Integer; safecall;
    function ConvertFromUnicode(const inData: WideString): OleVariant; safecall;
    function ConvertToUnicode(inData: OleVariant): WideString; safecall;
    function ConvertFromUtf16(uniData: OleVariant): OleVariant; safecall;
    function ConvertToUtf16(mbData: OleVariant): OleVariant; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property LastMethodSuccess: Integer read Get_LastMethodSuccess write Set_LastMethodSuccess;
    property LastStringResult: WideString read Get_LastStringResult;
    property LastBinaryResult: OleVariant read Get_LastBinaryResult;
    property LastStringResultLen: Integer read Get_LastStringResultLen;
    property AltToCharset: WideString read Get_AltToCharset write Set_AltToCharset;
    property ErrorAction: Integer read Get_ErrorAction write Set_ErrorAction;
    property FromCharset: WideString read Get_FromCharset write Set_FromCharset;
    property LastInputAsHex: WideString read Get_LastInputAsHex;
    property LastInputAsQP: WideString read Get_LastInputAsQP;
    property LastOutputAsHex: WideString read Get_LastOutputAsHex;
    property LastOutputAsQP: WideString read Get_LastOutputAsQP;
    property SaveLast: Integer read Get_SaveLast write Set_SaveLast;
    property ToCharset: WideString read Get_ToCharset write Set_ToCharset;
  end;

// *********************************************************************//
// DispIntf:  IChilkatCharsetDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {54E9A3A9-44F6-4E38-AA16-F27FB906EE7A}
// *********************************************************************//
  IChilkatCharsetDisp = dispinterface
    ['{54E9A3A9-44F6-4E38-AA16-F27FB906EE7A}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property LastMethodSuccess: Integer dispid 9;
    property LastStringResult: WideString readonly dispid 10;
    property LastBinaryResult: OleVariant readonly dispid 11;
    property LastStringResultLen: Integer readonly dispid 12;
    property AltToCharset: WideString dispid 100;
    property ErrorAction: Integer dispid 101;
    property FromCharset: WideString dispid 102;
    property LastInputAsHex: WideString readonly dispid 103;
    property LastInputAsQP: WideString readonly dispid 104;
    property LastOutputAsHex: WideString readonly dispid 105;
    property LastOutputAsQP: WideString readonly dispid 106;
    property SaveLast: Integer dispid 107;
    property ToCharset: WideString dispid 108;
    function CharsetToCodePage(const charsetName: WideString): Integer; dispid 109;
    function CodePageToCharset(codePage: Integer): WideString; dispid 110;
    function ConvertData(inData: OleVariant): OleVariant; dispid 111;
    function ConvertFile(const inPath: WideString; const destPath: WideString): Integer; dispid 112;
    function ConvertFileNoPreamble(const inPath: WideString; const destPath: WideString): Integer; dispid 113;
    function ConvertHtml(inData: OleVariant): OleVariant; dispid 114;
    function ConvertHtmlFile(const inPath: WideString; const destPath: WideString): Integer; dispid 115;
    function EntityEncodeDec(const str: WideString): WideString; dispid 116;
    function EntityEncodeHex(const str: WideString): WideString; dispid 117;
    function GetHtmlCharset(inData: OleVariant): WideString; dispid 118;
    function GetHtmlFileCharset(const htmlFilePath: WideString): WideString; dispid 119;
    function HtmlDecodeToStr(const inStr: WideString): WideString; dispid 120;
    function HtmlEntityDecode(inHtml: OleVariant): OleVariant; dispid 121;
    function HtmlEntityDecodeFile(const inPath: WideString; const destPath: WideString): Integer; dispid 122;
    function IsUnlocked: Integer; dispid 123;
    function LowerCase(const inStr: WideString): WideString; dispid 124;
    function ReadFile(const path: WideString): OleVariant; dispid 125;
    function ReadFileToString(const path: WideString; const charset: WideString): WideString; dispid 126;
    procedure SetErrorBytes(data: OleVariant); dispid 127;
    procedure SetErrorString(const str: WideString; const charset: WideString); dispid 128;
    function UnlockComponent(const unlockCode: WideString): Integer; dispid 129;
    function UpperCase(const inStr: WideString): WideString; dispid 130;
    function UrlDecodeStr(const inStr: WideString): WideString; dispid 131;
    function VerifyData(const charset: WideString; inData: OleVariant): Integer; dispid 132;
    function VerifyFile(const charset: WideString; const path: WideString): Integer; dispid 133;
    function WriteFile(const path: WideString; byteData: OleVariant): Integer; dispid 134;
    function WriteStringToFile(const TextData: WideString; const path: WideString; 
                               const charset: WideString): Integer; dispid 135;
    function ConvertFromUnicode(const inData: WideString): OleVariant; dispid 136;
    function ConvertToUnicode(inData: OleVariant): WideString; dispid 137;
    function ConvertFromUtf16(uniData: OleVariant): OleVariant; dispid 139;
    function ConvertToUtf16(mbData: OleVariant): OleVariant; dispid 140;
  end;

// *********************************************************************//
// Interface: ICkString
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {47F0E40C-D2E5-4E14-8133-750275823B82}
// *********************************************************************//
  ICkString = interface(IDispatch)
    ['{47F0E40C-D2E5-4E14-8133-750275823B82}']
    function GetImplAddrStr: WideString; safecall;
    function Get_NumArabic: Integer; safecall;
    function Get_NumAscii: Integer; safecall;
    function Get_NumCentralEuro: Integer; safecall;
    function Get_numChars: Integer; safecall;
    function Get_NumChinese: Integer; safecall;
    function Get_NumCyrillic: Integer; safecall;
    function Get_NumGreek: Integer; safecall;
    function Get_NumHebrew: Integer; safecall;
    function Get_NumJapanese: Integer; safecall;
    function Get_NumKorean: Integer; safecall;
    function Get_NumLatin: Integer; safecall;
    function Get_NumThai: Integer; safecall;
    function Get_SizeAnsi: Integer; safecall;
    function Get_SizeUtf8: Integer; safecall;
    function Get_str: WideString; safecall;
    procedure Set_str(const pVal: WideString); safecall;
    function AnsiCharAt(index: Integer): Integer; safecall;
    procedure Append(const str: WideString); safecall;
    procedure AppendDateRfc3339(dt: TDateTime); safecall;
    procedure AppendDateRfc822(dateTime: TDateTime); safecall;
    procedure AppendEncoded(const str: WideString; const encoding: WideString; 
                            const charset: WideString); safecall;
    procedure AppendMultibyte(mbtext: OleVariant; const charsetEncoding: WideString); safecall;
    function AppendToFile(const path: WideString; const charsetEncoding: WideString): Integer; safecall;
    function BeginsWith(const str: WideString): Integer; safecall;
    procedure ChopAfter(const findStr: WideString); safecall;
    procedure ChopBefore(const findStr: WideString); safecall;
    procedure Clear; safecall;
    function Contains(const substr: WideString): Integer; safecall;
    function EmitMultibyte(const charsetEncoding: WideString): OleVariant; safecall;
    function EndsWith(const substr: WideString): Integer; safecall;
    function GetEncoded(const binaryEncoding: WideString; const charsetEncoding: WideString): WideString; safecall;
    procedure HtmlEntityDecode; safecall;
    procedure HtmlEntityEncode; safecall;
    function LastAnsiChar: Integer; safecall;
    function Left(numChars: Integer): WideString; safecall;
    function Length: Integer; safecall;
    function LoadFile(const path: WideString; const charsetEncoding: WideString): Integer; safecall;
    procedure LoadXmlDoc(xmlDocumentBytes: OleVariant); safecall;
    function Matches(const strPattern: WideString; caseSensitive: Integer): Integer; safecall;
    function Mid(index: Integer; numChars: Integer): WideString; safecall;
    function ParseDateRfc3339: TDateTime; safecall;
    function ParseDateRfc822: TDateTime; safecall;
    procedure Pluralize; safecall;
    procedure Prepend(const str: WideString); safecall;
    procedure RemoveAnsiChar(ch: Integer); safecall;
    procedure ReplaceAll(const findStr: WideString; const replaceStr: WideString); safecall;
    procedure ReplaceAnsiChar(findCh: Integer; replaceCh: Integer); safecall;
    procedure ReplaceFirst(const findStr: WideString; const replaceStr: WideString); safecall;
    function Right(numChars: Integer): WideString; safecall;
    function SaveToFile(const path: WideString; const charsetEncoding: WideString): Integer; safecall;
    procedure Shorten(numChars: Integer); safecall;
    function StrComp(const str: WideString; caseSensitive: Integer): Integer; safecall;
    procedure StripHtml; safecall;
    procedure ToCRLF; safecall;
    procedure ToLF; safecall;
    procedure Trim; safecall;
    procedure Trim2; safecall;
    procedure TrimInside; safecall;
    procedure Unpluralize; safecall;
    procedure PunyEncode; safecall;
    procedure PunyDecode; safecall;
    property NumArabic: Integer read Get_NumArabic;
    property NumAscii: Integer read Get_NumAscii;
    property NumCentralEuro: Integer read Get_NumCentralEuro;
    property numChars: Integer read Get_numChars;
    property NumChinese: Integer read Get_NumChinese;
    property NumCyrillic: Integer read Get_NumCyrillic;
    property NumGreek: Integer read Get_NumGreek;
    property NumHebrew: Integer read Get_NumHebrew;
    property NumJapanese: Integer read Get_NumJapanese;
    property NumKorean: Integer read Get_NumKorean;
    property NumLatin: Integer read Get_NumLatin;
    property NumThai: Integer read Get_NumThai;
    property SizeAnsi: Integer read Get_SizeAnsi;
    property SizeUtf8: Integer read Get_SizeUtf8;
    property str: WideString read Get_str write Set_str;
  end;

// *********************************************************************//
// DispIntf:  ICkStringDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {47F0E40C-D2E5-4E14-8133-750275823B82}
// *********************************************************************//
  ICkStringDisp = dispinterface
    ['{47F0E40C-D2E5-4E14-8133-750275823B82}']
    function GetImplAddrStr: WideString; dispid 99;
    property NumArabic: Integer readonly dispid 100;
    property NumAscii: Integer readonly dispid 101;
    property NumCentralEuro: Integer readonly dispid 102;
    property numChars: Integer readonly dispid 103;
    property NumChinese: Integer readonly dispid 104;
    property NumCyrillic: Integer readonly dispid 105;
    property NumGreek: Integer readonly dispid 106;
    property NumHebrew: Integer readonly dispid 107;
    property NumJapanese: Integer readonly dispid 108;
    property NumKorean: Integer readonly dispid 109;
    property NumLatin: Integer readonly dispid 110;
    property NumThai: Integer readonly dispid 111;
    property SizeAnsi: Integer readonly dispid 112;
    property SizeUtf8: Integer readonly dispid 113;
    property str: WideString dispid 114;
    function AnsiCharAt(index: Integer): Integer; dispid 115;
    procedure Append(const str: WideString); dispid 116;
    procedure AppendDateRfc3339(dt: TDateTime); dispid 117;
    procedure AppendDateRfc822(dateTime: TDateTime); dispid 118;
    procedure AppendEncoded(const str: WideString; const encoding: WideString; 
                            const charset: WideString); dispid 119;
    procedure AppendMultibyte(mbtext: OleVariant; const charsetEncoding: WideString); dispid 120;
    function AppendToFile(const path: WideString; const charsetEncoding: WideString): Integer; dispid 121;
    function BeginsWith(const str: WideString): Integer; dispid 122;
    procedure ChopAfter(const findStr: WideString); dispid 123;
    procedure ChopBefore(const findStr: WideString); dispid 124;
    procedure Clear; dispid 125;
    function Contains(const substr: WideString): Integer; dispid 126;
    function EmitMultibyte(const charsetEncoding: WideString): OleVariant; dispid 127;
    function EndsWith(const substr: WideString): Integer; dispid 128;
    function GetEncoded(const binaryEncoding: WideString; const charsetEncoding: WideString): WideString; dispid 129;
    procedure HtmlEntityDecode; dispid 130;
    procedure HtmlEntityEncode; dispid 131;
    function LastAnsiChar: Integer; dispid 132;
    function Left(numChars: Integer): WideString; dispid 133;
    function Length: Integer; dispid 134;
    function LoadFile(const path: WideString; const charsetEncoding: WideString): Integer; dispid 135;
    procedure LoadXmlDoc(xmlDocumentBytes: OleVariant); dispid 136;
    function Matches(const strPattern: WideString; caseSensitive: Integer): Integer; dispid 137;
    function Mid(index: Integer; numChars: Integer): WideString; dispid 138;
    function ParseDateRfc3339: TDateTime; dispid 139;
    function ParseDateRfc822: TDateTime; dispid 140;
    procedure Pluralize; dispid 141;
    procedure Prepend(const str: WideString); dispid 142;
    procedure RemoveAnsiChar(ch: Integer); dispid 143;
    procedure ReplaceAll(const findStr: WideString; const replaceStr: WideString); dispid 144;
    procedure ReplaceAnsiChar(findCh: Integer; replaceCh: Integer); dispid 145;
    procedure ReplaceFirst(const findStr: WideString; const replaceStr: WideString); dispid 146;
    function Right(numChars: Integer): WideString; dispid 147;
    function SaveToFile(const path: WideString; const charsetEncoding: WideString): Integer; dispid 148;
    procedure Shorten(numChars: Integer); dispid 149;
    function StrComp(const str: WideString; caseSensitive: Integer): Integer; dispid 150;
    procedure StripHtml; dispid 151;
    procedure ToCRLF; dispid 152;
    procedure ToLF; dispid 153;
    procedure Trim; dispid 154;
    procedure Trim2; dispid 155;
    procedure TrimInside; dispid 156;
    procedure Unpluralize; dispid 157;
    procedure PunyEncode; dispid 158;
    procedure PunyDecode; dispid 159;
  end;

// *********************************************************************//
// Interface: IChilkatCompression
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {73B5832B-AACE-4975-9238-09579CB89232}
// *********************************************************************//
  IChilkatCompression = interface(IDispatch)
    ['{73B5832B-AACE-4975-9238-09579CB89232}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_LastMethodSuccess: Integer; safecall;
    procedure Set_LastMethodSuccess(pVal: Integer); safecall;
    function Get_LastStringResult: WideString; safecall;
    function Get_LastBinaryResult: OleVariant; safecall;
    function Get_LastStringResultLen: Integer; safecall;
    function Get_charset: WideString; safecall;
    procedure Set_charset(const pVal: WideString); safecall;
    function Get_EncodingMode: WideString; safecall;
    procedure Set_EncodingMode(const pVal: WideString); safecall;
    function Get_HeartbeatMs: Integer; safecall;
    procedure Set_HeartbeatMs(pVal: Integer); safecall;
    function Get_algorithm: WideString; safecall;
    procedure Set_algorithm(const pVal: WideString); safecall;
    function BeginCompressBytes(data: OleVariant): OleVariant; safecall;
    function BeginCompressBytesAsync(data: OleVariant): IChilkatTask; safecall;
    function BeginCompressBytesENC(data: OleVariant): WideString; safecall;
    function BeginCompressBytesENCAsync(data: OleVariant): IChilkatTask; safecall;
    function BeginCompressString(const str: WideString): OleVariant; safecall;
    function BeginCompressStringAsync(const str: WideString): IChilkatTask; safecall;
    function BeginCompressStringENC(const str: WideString): WideString; safecall;
    function BeginCompressStringENCAsync(const str: WideString): IChilkatTask; safecall;
    function BeginDecompressBytes(data: OleVariant): OleVariant; safecall;
    function BeginDecompressBytesAsync(data: OleVariant): IChilkatTask; safecall;
    function BeginDecompressBytesENC(const str: WideString): OleVariant; safecall;
    function BeginDecompressBytesENCAsync(const str: WideString): IChilkatTask; safecall;
    function BeginDecompressString(data: OleVariant): WideString; safecall;
    function BeginDecompressStringAsync(data: OleVariant): IChilkatTask; safecall;
    function BeginDecompressStringENC(const str: WideString): WideString; safecall;
    function BeginDecompressStringENCAsync(const str: WideString): IChilkatTask; safecall;
    function CompressBytes(data: OleVariant): OleVariant; safecall;
    function CompressBytesAsync(data: OleVariant): IChilkatTask; safecall;
    function CompressBytesENC(data: OleVariant): WideString; safecall;
    function CompressBytesENCAsync(data: OleVariant): IChilkatTask; safecall;
    function CompressFile(const srcPath: WideString; const destPath: WideString): Integer; safecall;
    function CompressFileAsync(const srcPath: WideString; const destPath: WideString): IChilkatTask; safecall;
    function CompressString(const str: WideString): OleVariant; safecall;
    function CompressStringAsync(const str: WideString): IChilkatTask; safecall;
    function CompressStringENC(const str: WideString): WideString; safecall;
    function CompressStringENCAsync(const str: WideString): IChilkatTask; safecall;
    function DecompressBytes(data: OleVariant): OleVariant; safecall;
    function DecompressBytesAsync(data: OleVariant): IChilkatTask; safecall;
    function DecompressBytesENC(const encodedCompressedData: WideString): OleVariant; safecall;
    function DecompressBytesENCAsync(const encodedCompressedData: WideString): IChilkatTask; safecall;
    function DecompressFile(const srcPath: WideString; const destPath: WideString): Integer; safecall;
    function DecompressFileAsync(const srcPath: WideString; const destPath: WideString): IChilkatTask; safecall;
    function DecompressString(data: OleVariant): WideString; safecall;
    function DecompressStringAsync(data: OleVariant): IChilkatTask; safecall;
    function DecompressStringENC(const encodedCompressedData: WideString): WideString; safecall;
    function DecompressStringENCAsync(const encodedCompressedData: WideString): IChilkatTask; safecall;
    function EndCompressBytes: OleVariant; safecall;
    function EndCompressBytesAsync: IChilkatTask; safecall;
    function EndCompressBytesENC: WideString; safecall;
    function EndCompressBytesENCAsync: IChilkatTask; safecall;
    function EndCompressString: OleVariant; safecall;
    function EndCompressStringAsync: IChilkatTask; safecall;
    function EndCompressStringENC: WideString; safecall;
    function EndCompressStringENCAsync: IChilkatTask; safecall;
    function EndDecompressBytes: OleVariant; safecall;
    function EndDecompressBytesAsync: IChilkatTask; safecall;
    function EndDecompressBytesENC: OleVariant; safecall;
    function EndDecompressBytesENCAsync: IChilkatTask; safecall;
    function EndDecompressString: WideString; safecall;
    function EndDecompressStringAsync: IChilkatTask; safecall;
    function EndDecompressStringENC: WideString; safecall;
    function EndDecompressStringENCAsync: IChilkatTask; safecall;
    function MoreCompressBytes(data: OleVariant): OleVariant; safecall;
    function MoreCompressBytesAsync(data: OleVariant): IChilkatTask; safecall;
    function MoreCompressBytesENC(data: OleVariant): WideString; safecall;
    function MoreCompressBytesENCAsync(data: OleVariant): IChilkatTask; safecall;
    function MoreCompressString(const str: WideString): OleVariant; safecall;
    function MoreCompressStringAsync(const str: WideString): IChilkatTask; safecall;
    function MoreCompressStringENC(const str: WideString): WideString; safecall;
    function MoreCompressStringENCAsync(const str: WideString): IChilkatTask; safecall;
    function MoreDecompressBytes(data: OleVariant): OleVariant; safecall;
    function MoreDecompressBytesAsync(data: OleVariant): IChilkatTask; safecall;
    function MoreDecompressBytesENC(const str: WideString): OleVariant; safecall;
    function MoreDecompressBytesENCAsync(const str: WideString): IChilkatTask; safecall;
    function MoreDecompressString(data: OleVariant): WideString; safecall;
    function MoreDecompressStringAsync(data: OleVariant): IChilkatTask; safecall;
    function MoreDecompressStringENC(const str: WideString): WideString; safecall;
    function MoreDecompressStringENCAsync(const str: WideString): IChilkatTask; safecall;
    function UnlockComponent(const unlockCode: WideString): Integer; safecall;
    function CompressStream(const strm: IChilkatStream): Integer; safecall;
    function CompressStreamAsync(const strm: IChilkatStream): IChilkatTask; safecall;
    function DecompressStream(const strm: IChilkatStream): Integer; safecall;
    function DecompressStreamAsync(const strm: IChilkatStream): IChilkatTask; safecall;
    function CompressBd(const binData: IChilkatBinData): Integer; safecall;
    function CompressBdAsync(const binData: IChilkatBinData): IChilkatTask; safecall;
    function DecompressBd(const binData: IChilkatBinData): Integer; safecall;
    function DecompressBdAsync(const binData: IChilkatBinData): IChilkatTask; safecall;
    function Get_DeflateLevel: Integer; safecall;
    procedure Set_DeflateLevel(pVal: Integer); safecall;
    function CompressSb(const sb: IChilkatStringBuilder; const binData: IChilkatBinData): Integer; safecall;
    function CompressSbAsync(const sb: IChilkatStringBuilder; const binData: IChilkatBinData): IChilkatTask; safecall;
    function DecompressSb(const binData: IChilkatBinData; const sb: IChilkatStringBuilder): Integer; safecall;
    function DecompressSbAsync(const binData: IChilkatBinData; const sb: IChilkatStringBuilder): IChilkatTask; safecall;
    function LoadTaskCaller(const task: IChilkatTask): Integer; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property LastMethodSuccess: Integer read Get_LastMethodSuccess write Set_LastMethodSuccess;
    property LastStringResult: WideString read Get_LastStringResult;
    property LastBinaryResult: OleVariant read Get_LastBinaryResult;
    property LastStringResultLen: Integer read Get_LastStringResultLen;
    property charset: WideString read Get_charset write Set_charset;
    property EncodingMode: WideString read Get_EncodingMode write Set_EncodingMode;
    property HeartbeatMs: Integer read Get_HeartbeatMs write Set_HeartbeatMs;
    property algorithm: WideString read Get_algorithm write Set_algorithm;
    property DeflateLevel: Integer read Get_DeflateLevel write Set_DeflateLevel;
  end;

// *********************************************************************//
// DispIntf:  IChilkatCompressionDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {73B5832B-AACE-4975-9238-09579CB89232}
// *********************************************************************//
  IChilkatCompressionDisp = dispinterface
    ['{73B5832B-AACE-4975-9238-09579CB89232}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property LastMethodSuccess: Integer dispid 9;
    property LastStringResult: WideString readonly dispid 10;
    property LastBinaryResult: OleVariant readonly dispid 11;
    property LastStringResultLen: Integer readonly dispid 12;
    property charset: WideString dispid 100;
    property EncodingMode: WideString dispid 101;
    property HeartbeatMs: Integer dispid 102;
    property algorithm: WideString dispid 103;
    function BeginCompressBytes(data: OleVariant): OleVariant; dispid 104;
    function BeginCompressBytesAsync(data: OleVariant): IChilkatTask; dispid 604;
    function BeginCompressBytesENC(data: OleVariant): WideString; dispid 105;
    function BeginCompressBytesENCAsync(data: OleVariant): IChilkatTask; dispid 605;
    function BeginCompressString(const str: WideString): OleVariant; dispid 106;
    function BeginCompressStringAsync(const str: WideString): IChilkatTask; dispid 606;
    function BeginCompressStringENC(const str: WideString): WideString; dispid 107;
    function BeginCompressStringENCAsync(const str: WideString): IChilkatTask; dispid 607;
    function BeginDecompressBytes(data: OleVariant): OleVariant; dispid 108;
    function BeginDecompressBytesAsync(data: OleVariant): IChilkatTask; dispid 608;
    function BeginDecompressBytesENC(const str: WideString): OleVariant; dispid 109;
    function BeginDecompressBytesENCAsync(const str: WideString): IChilkatTask; dispid 609;
    function BeginDecompressString(data: OleVariant): WideString; dispid 110;
    function BeginDecompressStringAsync(data: OleVariant): IChilkatTask; dispid 610;
    function BeginDecompressStringENC(const str: WideString): WideString; dispid 111;
    function BeginDecompressStringENCAsync(const str: WideString): IChilkatTask; dispid 611;
    function CompressBytes(data: OleVariant): OleVariant; dispid 112;
    function CompressBytesAsync(data: OleVariant): IChilkatTask; dispid 612;
    function CompressBytesENC(data: OleVariant): WideString; dispid 113;
    function CompressBytesENCAsync(data: OleVariant): IChilkatTask; dispid 613;
    function CompressFile(const srcPath: WideString; const destPath: WideString): Integer; dispid 114;
    function CompressFileAsync(const srcPath: WideString; const destPath: WideString): IChilkatTask; dispid 614;
    function CompressString(const str: WideString): OleVariant; dispid 115;
    function CompressStringAsync(const str: WideString): IChilkatTask; dispid 615;
    function CompressStringENC(const str: WideString): WideString; dispid 116;
    function CompressStringENCAsync(const str: WideString): IChilkatTask; dispid 616;
    function DecompressBytes(data: OleVariant): OleVariant; dispid 117;
    function DecompressBytesAsync(data: OleVariant): IChilkatTask; dispid 617;
    function DecompressBytesENC(const encodedCompressedData: WideString): OleVariant; dispid 118;
    function DecompressBytesENCAsync(const encodedCompressedData: WideString): IChilkatTask; dispid 618;
    function DecompressFile(const srcPath: WideString; const destPath: WideString): Integer; dispid 119;
    function DecompressFileAsync(const srcPath: WideString; const destPath: WideString): IChilkatTask; dispid 619;
    function DecompressString(data: OleVariant): WideString; dispid 120;
    function DecompressStringAsync(data: OleVariant): IChilkatTask; dispid 620;
    function DecompressStringENC(const encodedCompressedData: WideString): WideString; dispid 121;
    function DecompressStringENCAsync(const encodedCompressedData: WideString): IChilkatTask; dispid 621;
    function EndCompressBytes: OleVariant; dispid 122;
    function EndCompressBytesAsync: IChilkatTask; dispid 622;
    function EndCompressBytesENC: WideString; dispid 123;
    function EndCompressBytesENCAsync: IChilkatTask; dispid 623;
    function EndCompressString: OleVariant; dispid 124;
    function EndCompressStringAsync: IChilkatTask; dispid 624;
    function EndCompressStringENC: WideString; dispid 125;
    function EndCompressStringENCAsync: IChilkatTask; dispid 625;
    function EndDecompressBytes: OleVariant; dispid 126;
    function EndDecompressBytesAsync: IChilkatTask; dispid 626;
    function EndDecompressBytesENC: OleVariant; dispid 127;
    function EndDecompressBytesENCAsync: IChilkatTask; dispid 627;
    function EndDecompressString: WideString; dispid 128;
    function EndDecompressStringAsync: IChilkatTask; dispid 628;
    function EndDecompressStringENC: WideString; dispid 129;
    function EndDecompressStringENCAsync: IChilkatTask; dispid 629;
    function MoreCompressBytes(data: OleVariant): OleVariant; dispid 130;
    function MoreCompressBytesAsync(data: OleVariant): IChilkatTask; dispid 630;
    function MoreCompressBytesENC(data: OleVariant): WideString; dispid 131;
    function MoreCompressBytesENCAsync(data: OleVariant): IChilkatTask; dispid 631;
    function MoreCompressString(const str: WideString): OleVariant; dispid 132;
    function MoreCompressStringAsync(const str: WideString): IChilkatTask; dispid 632;
    function MoreCompressStringENC(const str: WideString): WideString; dispid 133;
    function MoreCompressStringENCAsync(const str: WideString): IChilkatTask; dispid 633;
    function MoreDecompressBytes(data: OleVariant): OleVariant; dispid 134;
    function MoreDecompressBytesAsync(data: OleVariant): IChilkatTask; dispid 634;
    function MoreDecompressBytesENC(const str: WideString): OleVariant; dispid 135;
    function MoreDecompressBytesENCAsync(const str: WideString): IChilkatTask; dispid 635;
    function MoreDecompressString(data: OleVariant): WideString; dispid 136;
    function MoreDecompressStringAsync(data: OleVariant): IChilkatTask; dispid 636;
    function MoreDecompressStringENC(const str: WideString): WideString; dispid 137;
    function MoreDecompressStringENCAsync(const str: WideString): IChilkatTask; dispid 637;
    function UnlockComponent(const unlockCode: WideString): Integer; dispid 138;
    function CompressStream(const strm: IChilkatStream): Integer; dispid 139;
    function CompressStreamAsync(const strm: IChilkatStream): IChilkatTask; dispid 639;
    function DecompressStream(const strm: IChilkatStream): Integer; dispid 140;
    function DecompressStreamAsync(const strm: IChilkatStream): IChilkatTask; dispid 640;
    function CompressBd(const binData: IChilkatBinData): Integer; dispid 141;
    function CompressBdAsync(const binData: IChilkatBinData): IChilkatTask; dispid 641;
    function DecompressBd(const binData: IChilkatBinData): Integer; dispid 142;
    function DecompressBdAsync(const binData: IChilkatBinData): IChilkatTask; dispid 642;
    property DeflateLevel: Integer dispid 143;
    function CompressSb(const sb: IChilkatStringBuilder; const binData: IChilkatBinData): Integer; dispid 144;
    function CompressSbAsync(const sb: IChilkatStringBuilder; const binData: IChilkatBinData): IChilkatTask; dispid 644;
    function DecompressSb(const binData: IChilkatBinData; const sb: IChilkatStringBuilder): Integer; dispid 145;
    function DecompressSbAsync(const binData: IChilkatBinData; const sb: IChilkatStringBuilder): IChilkatTask; dispid 645;
    function LoadTaskCaller(const task: IChilkatTask): Integer; dispid 146;
  end;

// *********************************************************************//
// Interface: IChilkatStream
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9DF35ADF-B748-4435-B6A5-0EA8397114D7}
// *********************************************************************//
  IChilkatStream = interface(IDispatch)
    ['{9DF35ADF-B748-4435-B6A5-0EA8397114D7}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_LastMethodSuccess: Integer; safecall;
    procedure Set_LastMethodSuccess(pVal: Integer); safecall;
    function Get_LastStringResult: WideString; safecall;
    function Get_LastBinaryResult: OleVariant; safecall;
    function Get_LastStringResultLen: Integer; safecall;
    function Get_StringCharset: WideString; safecall;
    procedure Set_StringCharset(const pVal: WideString); safecall;
    function Get_ReadTimeoutMs: Integer; safecall;
    procedure Set_ReadTimeoutMs(pVal: Integer); safecall;
    function Get_WriteTimeoutMs: Integer; safecall;
    procedure Set_WriteTimeoutMs(pVal: Integer); safecall;
    function Get_StringBom: Integer; safecall;
    procedure Set_StringBom(pVal: Integer); safecall;
    function Get_DefaultChunkSize: Integer; safecall;
    procedure Set_DefaultChunkSize(pVal: Integer); safecall;
    function Get_SourceFile: WideString; safecall;
    procedure Set_SourceFile(const pVal: WideString); safecall;
    function Get_SinkFile: WideString; safecall;
    procedure Set_SinkFile(const pVal: WideString); safecall;
    function ReadBytes: OleVariant; safecall;
    function ReadBytesAsync: IChilkatTask; safecall;
    function Get_ReadFailReason: Integer; safecall;
    function Get_WriteFailReason: Integer; safecall;
    function Get_EndOfStream: Integer; safecall;
    function Get_IsWriteClosed: Integer; safecall;
    function SetSourceStream(const strm: IChilkatStream): Integer; safecall;
    function SetSinkStream(const strm: IChilkatStream): Integer; safecall;
    function SetSourceString(const srcStr: WideString; const charset: WideString): Integer; safecall;
    function SetSourceBytes(sourceData: OleVariant): Integer; safecall;
    function ReadBytesENC(const encoding: WideString): WideString; safecall;
    function ReadBytesENCAsync(const encoding: WideString): IChilkatTask; safecall;
    function ReadNBytes(numBytes: Integer): OleVariant; safecall;
    function ReadNBytesAsync(numBytes: Integer): IChilkatTask; safecall;
    function ReadNBytesENC(numBytes: Integer; const encoding: WideString): WideString; safecall;
    function ReadNBytesENCAsync(numBytes: Integer; const encoding: WideString): IChilkatTask; safecall;
    function ReadString: WideString; safecall;
    function ReadStringAsync: IChilkatTask; safecall;
    function ReadToCRLF: WideString; safecall;
    function ReadToCRLFAsync: IChilkatTask; safecall;
    function ReadUntilMatch(const matchStr: WideString): WideString; safecall;
    function ReadUntilMatchAsync(const matchStr: WideString): IChilkatTask; safecall;
    function WriteByte(byteVal: Integer): Integer; safecall;
    function WriteByteAsync(byteVal: Integer): IChilkatTask; safecall;
    function WriteBytes(byteData: OleVariant): Integer; safecall;
    function WriteBytesAsync(byteData: OleVariant): IChilkatTask; safecall;
    function WriteBytesENC(const byteData: WideString; const encoding: WideString): Integer; safecall;
    function WriteBytesENCAsync(const byteData: WideString; const encoding: WideString): IChilkatTask; safecall;
    function WriteString(const str: WideString): Integer; safecall;
    function WriteStringAsync(const str: WideString): IChilkatTask; safecall;
    function RunStream: Integer; safecall;
    function RunStreamAsync: IChilkatTask; safecall;
    procedure Reset; safecall;
    function Get_CanRead: Integer; safecall;
    function Get_CanWrite: Integer; safecall;
    function Get_DataAvailable: Integer; safecall;
    function Get_Length: Integer; safecall;
    procedure Set_Length(pVal: Integer); safecall;
    function Get_NumReceived: Integer; safecall;
    function Get_NumSent: Integer; safecall;
    function WriteClose: Integer; safecall;
    function ToDecimalStr(const propertyName: WideString): WideString; safecall;
    function Get_AbortCurrent: Integer; safecall;
    procedure Set_AbortCurrent(pVal: Integer); safecall;
    function Get_Length32: Integer; safecall;
    procedure Set_Length32(pVal: Integer); safecall;
    function Get_SourceFilePart: Integer; safecall;
    procedure Set_SourceFilePart(pVal: Integer); safecall;
    function Get_SourceFilePartSize: Integer; safecall;
    procedure Set_SourceFilePartSize(pVal: Integer); safecall;
    function ReadBd(const binData: IChilkatBinData): Integer; safecall;
    function ReadBdAsync(const binData: IChilkatBinData): IChilkatTask; safecall;
    function ReadSb(const sb: IChilkatStringBuilder): Integer; safecall;
    function ReadSbAsync(const sb: IChilkatStringBuilder): IChilkatTask; safecall;
    function WriteBd(const binData: IChilkatBinData): Integer; safecall;
    function WriteBdAsync(const binData: IChilkatBinData): IChilkatTask; safecall;
    function WriteSb(const sb: IChilkatStringBuilder): Integer; safecall;
    function WriteSbAsync(const sb: IChilkatStringBuilder): IChilkatTask; safecall;
    function LoadTaskCaller(const task: IChilkatTask): Integer; safecall;
    function Get_SinkFileAppend: Integer; safecall;
    procedure Set_SinkFileAppend(pVal: Integer); safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property LastMethodSuccess: Integer read Get_LastMethodSuccess write Set_LastMethodSuccess;
    property LastStringResult: WideString read Get_LastStringResult;
    property LastBinaryResult: OleVariant read Get_LastBinaryResult;
    property LastStringResultLen: Integer read Get_LastStringResultLen;
    property StringCharset: WideString read Get_StringCharset write Set_StringCharset;
    property ReadTimeoutMs: Integer read Get_ReadTimeoutMs write Set_ReadTimeoutMs;
    property WriteTimeoutMs: Integer read Get_WriteTimeoutMs write Set_WriteTimeoutMs;
    property StringBom: Integer read Get_StringBom write Set_StringBom;
    property DefaultChunkSize: Integer read Get_DefaultChunkSize write Set_DefaultChunkSize;
    property SourceFile: WideString read Get_SourceFile write Set_SourceFile;
    property SinkFile: WideString read Get_SinkFile write Set_SinkFile;
    property ReadFailReason: Integer read Get_ReadFailReason;
    property WriteFailReason: Integer read Get_WriteFailReason;
    property EndOfStream: Integer read Get_EndOfStream;
    property IsWriteClosed: Integer read Get_IsWriteClosed;
    property CanRead: Integer read Get_CanRead;
    property CanWrite: Integer read Get_CanWrite;
    property DataAvailable: Integer read Get_DataAvailable;
    property Length: Integer read Get_Length write Set_Length;
    property NumReceived: Integer read Get_NumReceived;
    property NumSent: Integer read Get_NumSent;
    property AbortCurrent: Integer read Get_AbortCurrent write Set_AbortCurrent;
    property Length32: Integer read Get_Length32 write Set_Length32;
    property SourceFilePart: Integer read Get_SourceFilePart write Set_SourceFilePart;
    property SourceFilePartSize: Integer read Get_SourceFilePartSize write Set_SourceFilePartSize;
    property SinkFileAppend: Integer read Get_SinkFileAppend write Set_SinkFileAppend;
  end;

// *********************************************************************//
// DispIntf:  IChilkatStreamDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9DF35ADF-B748-4435-B6A5-0EA8397114D7}
// *********************************************************************//
  IChilkatStreamDisp = dispinterface
    ['{9DF35ADF-B748-4435-B6A5-0EA8397114D7}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property LastMethodSuccess: Integer dispid 9;
    property LastStringResult: WideString readonly dispid 10;
    property LastBinaryResult: OleVariant readonly dispid 11;
    property LastStringResultLen: Integer readonly dispid 12;
    property StringCharset: WideString dispid 100;
    property ReadTimeoutMs: Integer dispid 101;
    property WriteTimeoutMs: Integer dispid 102;
    property StringBom: Integer dispid 103;
    property DefaultChunkSize: Integer dispid 104;
    property SourceFile: WideString dispid 105;
    property SinkFile: WideString dispid 106;
    function ReadBytes: OleVariant; dispid 107;
    function ReadBytesAsync: IChilkatTask; dispid 607;
    property ReadFailReason: Integer readonly dispid 108;
    property WriteFailReason: Integer readonly dispid 109;
    property EndOfStream: Integer readonly dispid 110;
    property IsWriteClosed: Integer readonly dispid 111;
    function SetSourceStream(const strm: IChilkatStream): Integer; dispid 112;
    function SetSinkStream(const strm: IChilkatStream): Integer; dispid 113;
    function SetSourceString(const srcStr: WideString; const charset: WideString): Integer; dispid 114;
    function SetSourceBytes(sourceData: OleVariant): Integer; dispid 115;
    function ReadBytesENC(const encoding: WideString): WideString; dispid 116;
    function ReadBytesENCAsync(const encoding: WideString): IChilkatTask; dispid 616;
    function ReadNBytes(numBytes: Integer): OleVariant; dispid 117;
    function ReadNBytesAsync(numBytes: Integer): IChilkatTask; dispid 617;
    function ReadNBytesENC(numBytes: Integer; const encoding: WideString): WideString; dispid 118;
    function ReadNBytesENCAsync(numBytes: Integer; const encoding: WideString): IChilkatTask; dispid 618;
    function ReadString: WideString; dispid 119;
    function ReadStringAsync: IChilkatTask; dispid 619;
    function ReadToCRLF: WideString; dispid 120;
    function ReadToCRLFAsync: IChilkatTask; dispid 620;
    function ReadUntilMatch(const matchStr: WideString): WideString; dispid 121;
    function ReadUntilMatchAsync(const matchStr: WideString): IChilkatTask; dispid 621;
    function WriteByte(byteVal: Integer): Integer; dispid 122;
    function WriteByteAsync(byteVal: Integer): IChilkatTask; dispid 622;
    function WriteBytes(byteData: OleVariant): Integer; dispid 123;
    function WriteBytesAsync(byteData: OleVariant): IChilkatTask; dispid 623;
    function WriteBytesENC(const byteData: WideString; const encoding: WideString): Integer; dispid 124;
    function WriteBytesENCAsync(const byteData: WideString; const encoding: WideString): IChilkatTask; dispid 624;
    function WriteString(const str: WideString): Integer; dispid 125;
    function WriteStringAsync(const str: WideString): IChilkatTask; dispid 625;
    function RunStream: Integer; dispid 126;
    function RunStreamAsync: IChilkatTask; dispid 626;
    procedure Reset; dispid 128;
    property CanRead: Integer readonly dispid 129;
    property CanWrite: Integer readonly dispid 130;
    property DataAvailable: Integer readonly dispid 131;
    property Length: Integer dispid 133;
    property NumReceived: Integer readonly dispid 134;
    property NumSent: Integer readonly dispid 135;
    function WriteClose: Integer; dispid 136;
    function ToDecimalStr(const propertyName: WideString): WideString; dispid 137;
    property AbortCurrent: Integer dispid 138;
    property Length32: Integer dispid 139;
    property SourceFilePart: Integer dispid 140;
    property SourceFilePartSize: Integer dispid 141;
    function ReadBd(const binData: IChilkatBinData): Integer; dispid 142;
    function ReadBdAsync(const binData: IChilkatBinData): IChilkatTask; dispid 642;
    function ReadSb(const sb: IChilkatStringBuilder): Integer; dispid 143;
    function ReadSbAsync(const sb: IChilkatStringBuilder): IChilkatTask; dispid 643;
    function WriteBd(const binData: IChilkatBinData): Integer; dispid 144;
    function WriteBdAsync(const binData: IChilkatBinData): IChilkatTask; dispid 644;
    function WriteSb(const sb: IChilkatStringBuilder): Integer; dispid 145;
    function WriteSbAsync(const sb: IChilkatStringBuilder): IChilkatTask; dispid 645;
    function LoadTaskCaller(const task: IChilkatTask): Integer; dispid 146;
    property SinkFileAppend: Integer dispid 148;
  end;

// *********************************************************************//
// Interface: IChilkatCreateCS
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {08114E7A-8556-40E9-8CE1-0BE2E7A041A8}
// *********************************************************************//
  IChilkatCreateCS = interface(IDispatch)
    ['{08114E7A-8556-40E9-8CE1-0BE2E7A041A8}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_LastMethodSuccess: Integer; safecall;
    procedure Set_LastMethodSuccess(pVal: Integer); safecall;
    function Get_LastStringResult: WideString; safecall;
    function Get_LastBinaryResult: OleVariant; safecall;
    function Get_LastStringResultLen: Integer; safecall;
    function Get_ReadOnly: Integer; safecall;
    procedure Set_ReadOnly(pVal: Integer); safecall;
    function CreateFileStore(const path: WideString): IChilkatCertStore; safecall;
    function CreateMemoryStore: IChilkatCertStore; safecall;
    function CreateRegistryStore(const regRoot: WideString; const regPath: WideString): IChilkatCertStore; safecall;
    function OpenChilkatStore: IChilkatCertStore; safecall;
    function OpenCurrentUserStore: IChilkatCertStore; safecall;
    function OpenFileStore(const path: WideString): IChilkatCertStore; safecall;
    function OpenLocalSystemStore: IChilkatCertStore; safecall;
    function OpenOutlookStore: IChilkatCertStore; safecall;
    function OpenRegistryStore(const regRoot: WideString; const regPath: WideString): IChilkatCertStore; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property LastMethodSuccess: Integer read Get_LastMethodSuccess write Set_LastMethodSuccess;
    property LastStringResult: WideString read Get_LastStringResult;
    property LastBinaryResult: OleVariant read Get_LastBinaryResult;
    property LastStringResultLen: Integer read Get_LastStringResultLen;
    property ReadOnly: Integer read Get_ReadOnly write Set_ReadOnly;
  end;

// *********************************************************************//
// DispIntf:  IChilkatCreateCSDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {08114E7A-8556-40E9-8CE1-0BE2E7A041A8}
// *********************************************************************//
  IChilkatCreateCSDisp = dispinterface
    ['{08114E7A-8556-40E9-8CE1-0BE2E7A041A8}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property LastMethodSuccess: Integer dispid 9;
    property LastStringResult: WideString readonly dispid 10;
    property LastBinaryResult: OleVariant readonly dispid 11;
    property LastStringResultLen: Integer readonly dispid 12;
    property ReadOnly: Integer dispid 100;
    function CreateFileStore(const path: WideString): IChilkatCertStore; dispid 101;
    function CreateMemoryStore: IChilkatCertStore; dispid 102;
    function CreateRegistryStore(const regRoot: WideString; const regPath: WideString): IChilkatCertStore; dispid 103;
    function OpenChilkatStore: IChilkatCertStore; dispid 104;
    function OpenCurrentUserStore: IChilkatCertStore; dispid 105;
    function OpenFileStore(const path: WideString): IChilkatCertStore; dispid 106;
    function OpenLocalSystemStore: IChilkatCertStore; dispid 107;
    function OpenOutlookStore: IChilkatCertStore; dispid 108;
    function OpenRegistryStore(const regRoot: WideString; const regPath: WideString): IChilkatCertStore; dispid 109;
  end;

// *********************************************************************//
// Interface: IChilkatCrypt2
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {380B144D-5AF4-4DC3-BBDF-AD8E25F16188}
// *********************************************************************//
  IChilkatCrypt2 = interface(IDispatch)
    ['{380B144D-5AF4-4DC3-BBDF-AD8E25F16188}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_LastMethodSuccess: Integer; safecall;
    procedure Set_LastMethodSuccess(pVal: Integer); safecall;
    function Get_LastStringResult: WideString; safecall;
    function Get_LastBinaryResult: OleVariant; safecall;
    function Get_LastStringResultLen: Integer; safecall;
    function Get_BlockSize: Integer; safecall;
    function Get_CadesEnabled: Integer; safecall;
    procedure Set_CadesEnabled(pVal: Integer); safecall;
    function Get_CadesSigPolicyHash: WideString; safecall;
    procedure Set_CadesSigPolicyHash(const pVal: WideString); safecall;
    function Get_CadesSigPolicyId: WideString; safecall;
    procedure Set_CadesSigPolicyId(const pVal: WideString); safecall;
    function Get_CadesSigPolicyUri: WideString; safecall;
    procedure Set_CadesSigPolicyUri(const pVal: WideString); safecall;
    function Get_charset: WideString; safecall;
    procedure Set_charset(const pVal: WideString); safecall;
    function Get_CipherMode: WideString; safecall;
    procedure Set_CipherMode(const pVal: WideString); safecall;
    function Get_CompressionAlgorithm: WideString; safecall;
    procedure Set_CompressionAlgorithm(const pVal: WideString); safecall;
    function Get_CryptAlgorithm: WideString; safecall;
    procedure Set_CryptAlgorithm(const pVal: WideString); safecall;
    function Get_EncodingMode: WideString; safecall;
    procedure Set_EncodingMode(const pVal: WideString); safecall;
    function Get_FirstChunk: Integer; safecall;
    procedure Set_FirstChunk(pVal: Integer); safecall;
    function Get_HashAlgorithm: WideString; safecall;
    procedure Set_HashAlgorithm(const pVal: WideString); safecall;
    function Get_HavalRounds: Integer; safecall;
    procedure Set_HavalRounds(pVal: Integer); safecall;
    function Get_HeartbeatMs: Integer; safecall;
    procedure Set_HeartbeatMs(pVal: Integer); safecall;
    function Get_IV: OleVariant; safecall;
    procedure Set_IV(pVal: OleVariant); safecall;
    function Get_includeCertChain: Integer; safecall;
    procedure Set_includeCertChain(pVal: Integer); safecall;
    function Get_IterationCount: Integer; safecall;
    procedure Set_IterationCount(pVal: Integer); safecall;
    function Get_KeyLength: Integer; safecall;
    procedure Set_KeyLength(pVal: Integer); safecall;
    function Get_LastChunk: Integer; safecall;
    procedure Set_LastChunk(pVal: Integer); safecall;
    function Get_NumSignerCerts: Integer; safecall;
    function Get_PaddingScheme: Integer; safecall;
    procedure Set_PaddingScheme(pVal: Integer); safecall;
    function Get_PbesAlgorithm: WideString; safecall;
    procedure Set_PbesAlgorithm(const pVal: WideString); safecall;
    function Get_PbesPassword: WideString; safecall;
    procedure Set_PbesPassword(const pVal: WideString); safecall;
    function Get_Pkcs7CryptAlg: WideString; safecall;
    procedure Set_Pkcs7CryptAlg(const pVal: WideString); safecall;
    function Get_Rc2EffectiveKeyLength: Integer; safecall;
    procedure Set_Rc2EffectiveKeyLength(pVal: Integer); safecall;
    function Get_Salt: OleVariant; safecall;
    procedure Set_Salt(pVal: OleVariant); safecall;
    function Get_SecretKey: OleVariant; safecall;
    procedure Set_SecretKey(pVal: OleVariant); safecall;
    function Get_UuFilename: WideString; safecall;
    procedure Set_UuFilename(const pVal: WideString); safecall;
    function Get_UuMode: WideString; safecall;
    procedure Set_UuMode(const pVal: WideString); safecall;
    function Get_ByteSwapOnDecrypt: Integer; safecall;
    procedure Set_ByteSwapOnDecrypt(pVal: Integer); safecall;
    procedure AddEncryptCert(const cert: IChilkatCert); safecall;
    function AddPfxSourceData(pfxBytes: OleVariant; const pfxPassword: WideString): Integer; safecall;
    function AddPfxSourceFile(const pfxFilePath: WideString; const pfxPassword: WideString): Integer; safecall;
    function ByteSwap4321(data: OleVariant): OleVariant; safecall;
    function BytesToString(inData: OleVariant; const charset: WideString): WideString; safecall;
    function CkDecryptFile(const srcFile: WideString; const destFile: WideString): Integer; safecall;
    function CkDecryptFileAsync(const srcFile: WideString; const destFile: WideString): IChilkatTask; safecall;
    function CkEncryptFile(const srcFile: WideString; const destFile: WideString): Integer; safecall;
    function CkEncryptFileAsync(const srcFile: WideString; const destFile: WideString): IChilkatTask; safecall;
    procedure ClearEncryptCerts; safecall;
    function CompressBytes(data: OleVariant): OleVariant; safecall;
    function CompressBytesENC(data: OleVariant): WideString; safecall;
    function CompressString(const str: WideString): OleVariant; safecall;
    function CompressStringENC(const str: WideString): WideString; safecall;
    function CreateDetachedSignature(const inFilePath: WideString; const sigFilePath: WideString): Integer; safecall;
    function CreateP7M(const inFilename: WideString; const p7mPath: WideString): Integer; safecall;
    function CreateP7MAsync(const inFilename: WideString; const p7mPath: WideString): IChilkatTask; safecall;
    function CreateP7S(const inFilename: WideString; const p7sPath: WideString): Integer; safecall;
    function CreateP7SAsync(const inFilename: WideString; const p7sPath: WideString): IChilkatTask; safecall;
    function Decode(const str: WideString; const encoding: WideString): OleVariant; safecall;
    function DecodeString(const inStr: WideString; const charset: WideString; 
                          const encoding: WideString): WideString; safecall;
    function DecryptBytes(data: OleVariant): OleVariant; safecall;
    function DecryptBytesENC(const str: WideString): OleVariant; safecall;
    function DecryptEncoded(const encodedEncryptedData: WideString): WideString; safecall;
    function DecryptString(data: OleVariant): WideString; safecall;
    function DecryptStringENC(const str: WideString): WideString; safecall;
    function Encode(byteData: OleVariant; const encoding: WideString): WideString; safecall;
    function EncodeString(const strToEncode: WideString; const charsetName: WideString; 
                          const toEncodingName: WideString): WideString; safecall;
    function EncryptBytes(data: OleVariant): OleVariant; safecall;
    function EncryptBytesENC(data: OleVariant): WideString; safecall;
    function EncryptEncoded(const str: WideString): WideString; safecall;
    function EncryptString(const str: WideString): OleVariant; safecall;
    function EncryptStringENC(const str: WideString): WideString; safecall;
    function GenEncodedSecretKey(const password: WideString; const encoding: WideString): WideString; safecall;
    function GenRandomBytesENC(numBytes: Integer): WideString; safecall;
    function GenerateSecretKey(const password: WideString): OleVariant; safecall;
    function GetEncodedIV(const encoding: WideString): WideString; safecall;
    function GetEncodedKey(const encoding: WideString): WideString; safecall;
    function GetEncodedSalt(const encoding: WideString): WideString; safecall;
    function GetLastCert: IChilkatCert; safecall;
    function GetSignatureSigningTime(index: Integer): TDateTime; safecall;
    function GetSignatureSigningTimeStr(index: Integer): WideString; safecall;
    function GetSignerCert(index: Integer): IChilkatCert; safecall;
    function HasSignatureSigningTime(index: Integer): Integer; safecall;
    function HashBeginBytes(data: OleVariant): Integer; safecall;
    function HashBeginString(const strData: WideString): Integer; safecall;
    function HashBytes(data: OleVariant): OleVariant; safecall;
    function HashBytesENC(data: OleVariant): WideString; safecall;
    function HashFile(const path: WideString): OleVariant; safecall;
    function HashFileAsync(const path: WideString): IChilkatTask; safecall;
    function HashFileENC(const path: WideString): WideString; safecall;
    function HashFileENCAsync(const path: WideString): IChilkatTask; safecall;
    function HashFinal: OleVariant; safecall;
    function HashFinalENC: WideString; safecall;
    function HashMoreBytes(data: OleVariant): Integer; safecall;
    function HashMoreString(const strData: WideString): Integer; safecall;
    function HashString(const str: WideString): OleVariant; safecall;
    function HashStringENC(const str: WideString): WideString; safecall;
    function HmacBytes(inBytes: OleVariant): OleVariant; safecall;
    function HmacBytesENC(inBytes: OleVariant): WideString; safecall;
    function HmacString(const inText: WideString): OleVariant; safecall;
    function HmacStringENC(const inText: WideString): WideString; safecall;
    function InflateBytes(data: OleVariant): OleVariant; safecall;
    function InflateBytesENC(const str: WideString): OleVariant; safecall;
    function InflateString(data: OleVariant): WideString; safecall;
    function InflateStringENC(const str: WideString): WideString; safecall;
    function IsUnlocked: Integer; safecall;
    function MySqlAesDecrypt(const strEncryptedHex: WideString; const strPassword: WideString): WideString; safecall;
    function MySqlAesEncrypt(const strData: WideString; const strPassword: WideString): WideString; safecall;
    function OpaqueSignBytes(data: OleVariant): OleVariant; safecall;
    function OpaqueSignBytesAsync(data: OleVariant): IChilkatTask; safecall;
    function OpaqueSignBytesENC(data: OleVariant): WideString; safecall;
    function OpaqueSignBytesENCAsync(data: OleVariant): IChilkatTask; safecall;
    function OpaqueSignString(const str: WideString): OleVariant; safecall;
    function OpaqueSignStringAsync(const str: WideString): IChilkatTask; safecall;
    function OpaqueSignStringENC(const str: WideString): WideString; safecall;
    function OpaqueSignStringENCAsync(const str: WideString): IChilkatTask; safecall;
    function OpaqueVerifyBytes(p7s: OleVariant): OleVariant; safecall;
    function OpaqueVerifyBytesENC(const p7s: WideString): OleVariant; safecall;
    function OpaqueVerifyString(p7s: OleVariant): WideString; safecall;
    function OpaqueVerifyStringENC(const p7s: WideString): WideString; safecall;
    function Pbkdf1(const password: WideString; const charset: WideString; 
                    const hashAlg: WideString; const Salt: WideString; IterationCount: Integer; 
                    outputKeyBitLen: Integer; const encoding: WideString): WideString; safecall;
    function Pbkdf2(const password: WideString; const charset: WideString; 
                    const hashAlg: WideString; const Salt: WideString; IterationCount: Integer; 
                    outputKeyBitLen: Integer; const encoding: WideString): WideString; safecall;
    procedure RandomizeIV; safecall;
    procedure RandomizeKey; safecall;
    function ReEncode(const encodedData: WideString; const fromEncoding: WideString; 
                      const toEncoding: WideString): WideString; safecall;
    function ReadFile(const filename: WideString): OleVariant; safecall;
    function SetCSP(const csp: IChilkatCsp): Integer; safecall;
    function SetDecryptCert(const cert: IChilkatCert): Integer; safecall;
    function SetDecryptCert2(const cert: IChilkatCert; const key: IPrivateKey): Integer; safecall;
    procedure SetEncodedIV(const ivStr: WideString; const encoding: WideString); safecall;
    procedure SetEncodedKey(const keyStr: WideString; const encoding: WideString); safecall;
    procedure SetEncodedSalt(const saltStr: WideString; const encoding: WideString); safecall;
    function SetEncryptCert(const cert: IChilkatCert): Integer; safecall;
    procedure SetHmacKeyBytes(keyBytes: OleVariant); safecall;
    procedure SetHmacKeyEncoded(const key: WideString; const encoding: WideString); safecall;
    procedure SetHmacKeyString(const key: WideString); safecall;
    procedure SetSecretKeyViaPassword(const password: WideString); safecall;
    function SetSigningCert(const cert: IChilkatCert): Integer; safecall;
    function SetSigningCert2(const cert: IChilkatCert; const privateKey: IPrivateKey): Integer; safecall;
    function SetVerifyCert(const cert: IChilkatCert): Integer; safecall;
    function SignBytes(data: OleVariant): OleVariant; safecall;
    function SignBytesAsync(data: OleVariant): IChilkatTask; safecall;
    function SignBytesENC(data: OleVariant): WideString; safecall;
    function SignBytesENCAsync(data: OleVariant): IChilkatTask; safecall;
    function SignString(const str: WideString): OleVariant; safecall;
    function SignStringAsync(const str: WideString): IChilkatTask; safecall;
    function SignStringENC(const str: WideString): WideString; safecall;
    function SignStringENCAsync(const str: WideString): IChilkatTask; safecall;
    function StringToBytes(const inStr: WideString; const charset: WideString): OleVariant; safecall;
    function TrimEndingWith(const inStr: WideString; const ending: WideString): WideString; safecall;
    function UnlockComponent(const unlockCode: WideString): Integer; safecall;
    function VerifyBytes(data: OleVariant; sig: OleVariant): Integer; safecall;
    function VerifyBytesENC(data: OleVariant; const encodedSig: WideString): Integer; safecall;
    function VerifyDetachedSignature(const inFilename: WideString; const p7sFilename: WideString): Integer; safecall;
    function VerifyP7M(const p7mPath: WideString; const destPath: WideString): Integer; safecall;
    function VerifyP7S(const inFilename: WideString; const p7sFilename: WideString): Integer; safecall;
    function VerifyString(const str: WideString; sig: OleVariant): Integer; safecall;
    function VerifyStringENC(const str: WideString; const encodedSig: WideString): Integer; safecall;
    function WriteFile(const filename: WideString; fileData: OleVariant): Integer; safecall;
    function Shorten(inData: OleVariant; numBytes: Integer): OleVariant; safecall;
    function CrcFile(const crcAlg: WideString; const path: WideString): Integer; safecall;
    function CrcFileAsync(const crcAlg: WideString; const path: WideString): IChilkatTask; safecall;
    function CrcBytes(const crcAlg: WideString; byteData: OleVariant): Integer; safecall;
    function UseCertVault(const vault: IChilkatXmlCertVault): Integer; safecall;
    function GetSignerCertChain(index: Integer): IChilkatCertChain; safecall;
    function GetDecryptCert: IChilkatCert; safecall;
    function Pkcs7ExtractDigest(signerIndex: Integer; const pkcs7: WideString): WideString; safecall;
    function GetEncodedAad(const encoding: WideString): WideString; safecall;
    function GetEncodedAuthTag(const encoding: WideString): WideString; safecall;
    function SetEncodedAad(const aadStr: WideString; const encoding: WideString): Integer; safecall;
    function SetEncodedAuthTag(const authTagStr: WideString; const encoding: WideString): Integer; safecall;
    function Get_InitialCount: Integer; safecall;
    procedure Set_InitialCount(pVal: Integer); safecall;
    function Get_MacAlgorithm: WideString; safecall;
    procedure Set_MacAlgorithm(const pVal: WideString); safecall;
    function MacBytes(inBytes: OleVariant): OleVariant; safecall;
    function MacBytesENC(inBytes: OleVariant): WideString; safecall;
    function MacString(const inText: WideString): OleVariant; safecall;
    function MacStringENC(const inText: WideString): WideString; safecall;
    function SetMacKeyBytes(keyBytes: OleVariant): Integer; safecall;
    function SetMacKeyEncoded(const key: WideString; const encoding: WideString): Integer; safecall;
    function SetMacKeyString(const key: WideString): Integer; safecall;
    function GenerateUuid: WideString; safecall;
    function EncryptStream(const strm: IChilkatStream): Integer; safecall;
    function EncryptStreamAsync(const strm: IChilkatStream): IChilkatTask; safecall;
    function DecryptStream(const strm: IChilkatStream): Integer; safecall;
    function DecryptStreamAsync(const strm: IChilkatStream): IChilkatTask; safecall;
    function Get_AbortCurrent: Integer; safecall;
    procedure Set_AbortCurrent(pVal: Integer); safecall;
    function Get_BCryptWorkFactor: Integer; safecall;
    procedure Set_BCryptWorkFactor(pVal: Integer); safecall;
    function BCryptHash(const password: WideString): WideString; safecall;
    function BCryptVerify(const password: WideString; const BCryptHash: WideString): Integer; safecall;
    function AesKeyWrap(const kek: WideString; const keyData: WideString; const encoding: WideString): WideString; safecall;
    function AesKeyUnwrap(const kek: WideString; const wrappedKeyData: WideString; 
                          const encoding: WideString): WideString; safecall;
    function HashBdENC(const bd: IChilkatBinData): WideString; safecall;
    function MacBdENC(const bd: IChilkatBinData): WideString; safecall;
    function Get_SigningAlg: WideString; safecall;
    procedure Set_SigningAlg(const pVal: WideString); safecall;
    function Get_OaepHash: WideString; safecall;
    procedure Set_OaepHash(const pVal: WideString); safecall;
    function Get_OaepPadding: Integer; safecall;
    procedure Set_OaepPadding(pVal: Integer); safecall;
    function EncryptBd(const bd: IChilkatBinData): Integer; safecall;
    function DecryptBd(const bd: IChilkatBinData): Integer; safecall;
    function EncryptSb(const sbIn: IChilkatStringBuilder; const bdOut: IChilkatBinData): Integer; safecall;
    function DecryptSb(const bdIn: IChilkatBinData; const sbOut: IChilkatStringBuilder): Integer; safecall;
    function SignBdENC(const dataToSign: IChilkatBinData): WideString; safecall;
    function SignBdENCAsync(const dataToSign: IChilkatBinData): IChilkatTask; safecall;
    function SignSbENC(const sb: IChilkatStringBuilder): WideString; safecall;
    function SignSbENCAsync(const sb: IChilkatStringBuilder): IChilkatTask; safecall;
    function OpaqueSignBd(const bd: IChilkatBinData): Integer; safecall;
    function OpaqueSignBdAsync(const bd: IChilkatBinData): IChilkatTask; safecall;
    function OpaqueVerifyBd(const bd: IChilkatBinData): Integer; safecall;
    function VerifyBdENC(const data: IChilkatBinData; const encodedSig: WideString): Integer; safecall;
    function VerifySbENC(const sb: IChilkatStringBuilder; const encodedSig: WideString): Integer; safecall;
    function LastJsonData: IChilkatJsonObject; safecall;
    function Get_OaepMgfHash: WideString; safecall;
    procedure Set_OaepMgfHash(const pVal: WideString); safecall;
    function EncryptSecureENC(const secureStr: IChilkatSecureString): WideString; safecall;
    function DecryptSecureENC(const cipherText: WideString; const secureStr: IChilkatSecureString): Integer; safecall;
    function Get_SigningAttributes: WideString; safecall;
    procedure Set_SigningAttributes(const pVal: WideString); safecall;
    function GetSignedAttributes(signerIndex: Integer; const pkcs7Der: IChilkatBinData; 
                                 const sbJson: IChilkatStringBuilder): Integer; safecall;
    function Hotp(const secret: WideString; const secretEnc: WideString; 
                  const counterHex: WideString; numDigits: Integer; truncOffset: Integer; 
                  const hashAlg: WideString): WideString; safecall;
    function EncodeInt(value: Integer; numBytes: Integer; littleEndian: Integer; 
                       const encoding: WideString): WideString; safecall;
    function Totp(const secret: WideString; const secretEnc: WideString; const t0: WideString; 
                  const tNow: WideString; tStep: Integer; numDigits: Integer; truncOffset: Integer; 
                  const hashAlg: WideString): WideString; safecall;
    function Get_CmsOptions: WideString; safecall;
    procedure Set_CmsOptions(const pVal: WideString); safecall;
    procedure SetTsaHttpObj(const http: IChilkatHttp); safecall;
    function LoadTaskCaller(const task: IChilkatTask): Integer; safecall;
    function Get_UncommonOptions: WideString; safecall;
    procedure Set_UncommonOptions(const pVal: WideString); safecall;
    function AddSigningCert(const cert: IChilkatCert): Integer; safecall;
    procedure ClearSigningCerts; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property LastMethodSuccess: Integer read Get_LastMethodSuccess write Set_LastMethodSuccess;
    property LastStringResult: WideString read Get_LastStringResult;
    property LastBinaryResult: OleVariant read Get_LastBinaryResult;
    property LastStringResultLen: Integer read Get_LastStringResultLen;
    property BlockSize: Integer read Get_BlockSize;
    property CadesEnabled: Integer read Get_CadesEnabled write Set_CadesEnabled;
    property CadesSigPolicyHash: WideString read Get_CadesSigPolicyHash write Set_CadesSigPolicyHash;
    property CadesSigPolicyId: WideString read Get_CadesSigPolicyId write Set_CadesSigPolicyId;
    property CadesSigPolicyUri: WideString read Get_CadesSigPolicyUri write Set_CadesSigPolicyUri;
    property charset: WideString read Get_charset write Set_charset;
    property CipherMode: WideString read Get_CipherMode write Set_CipherMode;
    property CompressionAlgorithm: WideString read Get_CompressionAlgorithm write Set_CompressionAlgorithm;
    property CryptAlgorithm: WideString read Get_CryptAlgorithm write Set_CryptAlgorithm;
    property EncodingMode: WideString read Get_EncodingMode write Set_EncodingMode;
    property FirstChunk: Integer read Get_FirstChunk write Set_FirstChunk;
    property HashAlgorithm: WideString read Get_HashAlgorithm write Set_HashAlgorithm;
    property HavalRounds: Integer read Get_HavalRounds write Set_HavalRounds;
    property HeartbeatMs: Integer read Get_HeartbeatMs write Set_HeartbeatMs;
    property IV: OleVariant read Get_IV write Set_IV;
    property includeCertChain: Integer read Get_includeCertChain write Set_includeCertChain;
    property IterationCount: Integer read Get_IterationCount write Set_IterationCount;
    property KeyLength: Integer read Get_KeyLength write Set_KeyLength;
    property LastChunk: Integer read Get_LastChunk write Set_LastChunk;
    property NumSignerCerts: Integer read Get_NumSignerCerts;
    property PaddingScheme: Integer read Get_PaddingScheme write Set_PaddingScheme;
    property PbesAlgorithm: WideString read Get_PbesAlgorithm write Set_PbesAlgorithm;
    property PbesPassword: WideString read Get_PbesPassword write Set_PbesPassword;
    property Pkcs7CryptAlg: WideString read Get_Pkcs7CryptAlg write Set_Pkcs7CryptAlg;
    property Rc2EffectiveKeyLength: Integer read Get_Rc2EffectiveKeyLength write Set_Rc2EffectiveKeyLength;
    property Salt: OleVariant read Get_Salt write Set_Salt;
    property SecretKey: OleVariant read Get_SecretKey write Set_SecretKey;
    property UuFilename: WideString read Get_UuFilename write Set_UuFilename;
    property UuMode: WideString read Get_UuMode write Set_UuMode;
    property ByteSwapOnDecrypt: Integer read Get_ByteSwapOnDecrypt write Set_ByteSwapOnDecrypt;
    property InitialCount: Integer read Get_InitialCount write Set_InitialCount;
    property MacAlgorithm: WideString read Get_MacAlgorithm write Set_MacAlgorithm;
    property AbortCurrent: Integer read Get_AbortCurrent write Set_AbortCurrent;
    property BCryptWorkFactor: Integer read Get_BCryptWorkFactor write Set_BCryptWorkFactor;
    property SigningAlg: WideString read Get_SigningAlg write Set_SigningAlg;
    property OaepHash: WideString read Get_OaepHash write Set_OaepHash;
    property OaepPadding: Integer read Get_OaepPadding write Set_OaepPadding;
    property OaepMgfHash: WideString read Get_OaepMgfHash write Set_OaepMgfHash;
    property SigningAttributes: WideString read Get_SigningAttributes write Set_SigningAttributes;
    property CmsOptions: WideString read Get_CmsOptions write Set_CmsOptions;
    property UncommonOptions: WideString read Get_UncommonOptions write Set_UncommonOptions;
  end;

// *********************************************************************//
// DispIntf:  IChilkatCrypt2Disp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {380B144D-5AF4-4DC3-BBDF-AD8E25F16188}
// *********************************************************************//
  IChilkatCrypt2Disp = dispinterface
    ['{380B144D-5AF4-4DC3-BBDF-AD8E25F16188}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property LastMethodSuccess: Integer dispid 9;
    property LastStringResult: WideString readonly dispid 10;
    property LastBinaryResult: OleVariant readonly dispid 11;
    property LastStringResultLen: Integer readonly dispid 12;
    property BlockSize: Integer readonly dispid 100;
    property CadesEnabled: Integer dispid 101;
    property CadesSigPolicyHash: WideString dispid 102;
    property CadesSigPolicyId: WideString dispid 103;
    property CadesSigPolicyUri: WideString dispid 104;
    property charset: WideString dispid 105;
    property CipherMode: WideString dispid 106;
    property CompressionAlgorithm: WideString dispid 107;
    property CryptAlgorithm: WideString dispid 108;
    property EncodingMode: WideString dispid 109;
    property FirstChunk: Integer dispid 110;
    property HashAlgorithm: WideString dispid 111;
    property HavalRounds: Integer dispid 112;
    property HeartbeatMs: Integer dispid 113;
    property IV: OleVariant dispid 114;
    property includeCertChain: Integer dispid 115;
    property IterationCount: Integer dispid 116;
    property KeyLength: Integer dispid 117;
    property LastChunk: Integer dispid 118;
    property NumSignerCerts: Integer readonly dispid 119;
    property PaddingScheme: Integer dispid 120;
    property PbesAlgorithm: WideString dispid 121;
    property PbesPassword: WideString dispid 122;
    property Pkcs7CryptAlg: WideString dispid 123;
    property Rc2EffectiveKeyLength: Integer dispid 124;
    property Salt: OleVariant dispid 125;
    property SecretKey: OleVariant dispid 126;
    property UuFilename: WideString dispid 127;
    property UuMode: WideString dispid 128;
    property ByteSwapOnDecrypt: Integer dispid 129;
    procedure AddEncryptCert(const cert: IChilkatCert); dispid 130;
    function AddPfxSourceData(pfxBytes: OleVariant; const pfxPassword: WideString): Integer; dispid 131;
    function AddPfxSourceFile(const pfxFilePath: WideString; const pfxPassword: WideString): Integer; dispid 132;
    function ByteSwap4321(data: OleVariant): OleVariant; dispid 133;
    function BytesToString(inData: OleVariant; const charset: WideString): WideString; dispid 134;
    function CkDecryptFile(const srcFile: WideString; const destFile: WideString): Integer; dispid 135;
    function CkDecryptFileAsync(const srcFile: WideString; const destFile: WideString): IChilkatTask; dispid 635;
    function CkEncryptFile(const srcFile: WideString; const destFile: WideString): Integer; dispid 136;
    function CkEncryptFileAsync(const srcFile: WideString; const destFile: WideString): IChilkatTask; dispid 636;
    procedure ClearEncryptCerts; dispid 137;
    function CompressBytes(data: OleVariant): OleVariant; dispid 138;
    function CompressBytesENC(data: OleVariant): WideString; dispid 139;
    function CompressString(const str: WideString): OleVariant; dispid 140;
    function CompressStringENC(const str: WideString): WideString; dispid 141;
    function CreateDetachedSignature(const inFilePath: WideString; const sigFilePath: WideString): Integer; dispid 142;
    function CreateP7M(const inFilename: WideString; const p7mPath: WideString): Integer; dispid 143;
    function CreateP7MAsync(const inFilename: WideString; const p7mPath: WideString): IChilkatTask; dispid 643;
    function CreateP7S(const inFilename: WideString; const p7sPath: WideString): Integer; dispid 144;
    function CreateP7SAsync(const inFilename: WideString; const p7sPath: WideString): IChilkatTask; dispid 644;
    function Decode(const str: WideString; const encoding: WideString): OleVariant; dispid 145;
    function DecodeString(const inStr: WideString; const charset: WideString; 
                          const encoding: WideString): WideString; dispid 146;
    function DecryptBytes(data: OleVariant): OleVariant; dispid 147;
    function DecryptBytesENC(const str: WideString): OleVariant; dispid 148;
    function DecryptEncoded(const encodedEncryptedData: WideString): WideString; dispid 149;
    function DecryptString(data: OleVariant): WideString; dispid 150;
    function DecryptStringENC(const str: WideString): WideString; dispid 151;
    function Encode(byteData: OleVariant; const encoding: WideString): WideString; dispid 152;
    function EncodeString(const strToEncode: WideString; const charsetName: WideString; 
                          const toEncodingName: WideString): WideString; dispid 153;
    function EncryptBytes(data: OleVariant): OleVariant; dispid 154;
    function EncryptBytesENC(data: OleVariant): WideString; dispid 155;
    function EncryptEncoded(const str: WideString): WideString; dispid 156;
    function EncryptString(const str: WideString): OleVariant; dispid 157;
    function EncryptStringENC(const str: WideString): WideString; dispid 158;
    function GenEncodedSecretKey(const password: WideString; const encoding: WideString): WideString; dispid 159;
    function GenRandomBytesENC(numBytes: Integer): WideString; dispid 160;
    function GenerateSecretKey(const password: WideString): OleVariant; dispid 161;
    function GetEncodedIV(const encoding: WideString): WideString; dispid 162;
    function GetEncodedKey(const encoding: WideString): WideString; dispid 163;
    function GetEncodedSalt(const encoding: WideString): WideString; dispid 164;
    function GetLastCert: IChilkatCert; dispid 165;
    function GetSignatureSigningTime(index: Integer): TDateTime; dispid 166;
    function GetSignatureSigningTimeStr(index: Integer): WideString; dispid 167;
    function GetSignerCert(index: Integer): IChilkatCert; dispid 168;
    function HasSignatureSigningTime(index: Integer): Integer; dispid 169;
    function HashBeginBytes(data: OleVariant): Integer; dispid 170;
    function HashBeginString(const strData: WideString): Integer; dispid 171;
    function HashBytes(data: OleVariant): OleVariant; dispid 172;
    function HashBytesENC(data: OleVariant): WideString; dispid 173;
    function HashFile(const path: WideString): OleVariant; dispid 174;
    function HashFileAsync(const path: WideString): IChilkatTask; dispid 674;
    function HashFileENC(const path: WideString): WideString; dispid 175;
    function HashFileENCAsync(const path: WideString): IChilkatTask; dispid 675;
    function HashFinal: OleVariant; dispid 176;
    function HashFinalENC: WideString; dispid 177;
    function HashMoreBytes(data: OleVariant): Integer; dispid 178;
    function HashMoreString(const strData: WideString): Integer; dispid 179;
    function HashString(const str: WideString): OleVariant; dispid 180;
    function HashStringENC(const str: WideString): WideString; dispid 181;
    function HmacBytes(inBytes: OleVariant): OleVariant; dispid 182;
    function HmacBytesENC(inBytes: OleVariant): WideString; dispid 183;
    function HmacString(const inText: WideString): OleVariant; dispid 184;
    function HmacStringENC(const inText: WideString): WideString; dispid 185;
    function InflateBytes(data: OleVariant): OleVariant; dispid 186;
    function InflateBytesENC(const str: WideString): OleVariant; dispid 187;
    function InflateString(data: OleVariant): WideString; dispid 188;
    function InflateStringENC(const str: WideString): WideString; dispid 189;
    function IsUnlocked: Integer; dispid 190;
    function MySqlAesDecrypt(const strEncryptedHex: WideString; const strPassword: WideString): WideString; dispid 191;
    function MySqlAesEncrypt(const strData: WideString; const strPassword: WideString): WideString; dispid 192;
    function OpaqueSignBytes(data: OleVariant): OleVariant; dispid 193;
    function OpaqueSignBytesAsync(data: OleVariant): IChilkatTask; dispid 693;
    function OpaqueSignBytesENC(data: OleVariant): WideString; dispid 194;
    function OpaqueSignBytesENCAsync(data: OleVariant): IChilkatTask; dispid 694;
    function OpaqueSignString(const str: WideString): OleVariant; dispid 195;
    function OpaqueSignStringAsync(const str: WideString): IChilkatTask; dispid 695;
    function OpaqueSignStringENC(const str: WideString): WideString; dispid 196;
    function OpaqueSignStringENCAsync(const str: WideString): IChilkatTask; dispid 696;
    function OpaqueVerifyBytes(p7s: OleVariant): OleVariant; dispid 197;
    function OpaqueVerifyBytesENC(const p7s: WideString): OleVariant; dispid 198;
    function OpaqueVerifyString(p7s: OleVariant): WideString; dispid 199;
    function OpaqueVerifyStringENC(const p7s: WideString): WideString; dispid 200;
    function Pbkdf1(const password: WideString; const charset: WideString; 
                    const hashAlg: WideString; const Salt: WideString; IterationCount: Integer; 
                    outputKeyBitLen: Integer; const encoding: WideString): WideString; dispid 201;
    function Pbkdf2(const password: WideString; const charset: WideString; 
                    const hashAlg: WideString; const Salt: WideString; IterationCount: Integer; 
                    outputKeyBitLen: Integer; const encoding: WideString): WideString; dispid 202;
    procedure RandomizeIV; dispid 203;
    procedure RandomizeKey; dispid 204;
    function ReEncode(const encodedData: WideString; const fromEncoding: WideString; 
                      const toEncoding: WideString): WideString; dispid 205;
    function ReadFile(const filename: WideString): OleVariant; dispid 206;
    function SetCSP(const csp: IChilkatCsp): Integer; dispid 207;
    function SetDecryptCert(const cert: IChilkatCert): Integer; dispid 208;
    function SetDecryptCert2(const cert: IChilkatCert; const key: IPrivateKey): Integer; dispid 209;
    procedure SetEncodedIV(const ivStr: WideString; const encoding: WideString); dispid 210;
    procedure SetEncodedKey(const keyStr: WideString; const encoding: WideString); dispid 211;
    procedure SetEncodedSalt(const saltStr: WideString; const encoding: WideString); dispid 212;
    function SetEncryptCert(const cert: IChilkatCert): Integer; dispid 213;
    procedure SetHmacKeyBytes(keyBytes: OleVariant); dispid 214;
    procedure SetHmacKeyEncoded(const key: WideString; const encoding: WideString); dispid 215;
    procedure SetHmacKeyString(const key: WideString); dispid 216;
    procedure SetSecretKeyViaPassword(const password: WideString); dispid 217;
    function SetSigningCert(const cert: IChilkatCert): Integer; dispid 218;
    function SetSigningCert2(const cert: IChilkatCert; const privateKey: IPrivateKey): Integer; dispid 219;
    function SetVerifyCert(const cert: IChilkatCert): Integer; dispid 220;
    function SignBytes(data: OleVariant): OleVariant; dispid 221;
    function SignBytesAsync(data: OleVariant): IChilkatTask; dispid 721;
    function SignBytesENC(data: OleVariant): WideString; dispid 222;
    function SignBytesENCAsync(data: OleVariant): IChilkatTask; dispid 722;
    function SignString(const str: WideString): OleVariant; dispid 223;
    function SignStringAsync(const str: WideString): IChilkatTask; dispid 723;
    function SignStringENC(const str: WideString): WideString; dispid 224;
    function SignStringENCAsync(const str: WideString): IChilkatTask; dispid 724;
    function StringToBytes(const inStr: WideString; const charset: WideString): OleVariant; dispid 225;
    function TrimEndingWith(const inStr: WideString; const ending: WideString): WideString; dispid 226;
    function UnlockComponent(const unlockCode: WideString): Integer; dispid 227;
    function VerifyBytes(data: OleVariant; sig: OleVariant): Integer; dispid 228;
    function VerifyBytesENC(data: OleVariant; const encodedSig: WideString): Integer; dispid 229;
    function VerifyDetachedSignature(const inFilename: WideString; const p7sFilename: WideString): Integer; dispid 230;
    function VerifyP7M(const p7mPath: WideString; const destPath: WideString): Integer; dispid 231;
    function VerifyP7S(const inFilename: WideString; const p7sFilename: WideString): Integer; dispid 232;
    function VerifyString(const str: WideString; sig: OleVariant): Integer; dispid 233;
    function VerifyStringENC(const str: WideString; const encodedSig: WideString): Integer; dispid 234;
    function WriteFile(const filename: WideString; fileData: OleVariant): Integer; dispid 235;
    function Shorten(inData: OleVariant; numBytes: Integer): OleVariant; dispid 236;
    function CrcFile(const crcAlg: WideString; const path: WideString): Integer; dispid 237;
    function CrcFileAsync(const crcAlg: WideString; const path: WideString): IChilkatTask; dispid 737;
    function CrcBytes(const crcAlg: WideString; byteData: OleVariant): Integer; dispid 238;
    function UseCertVault(const vault: IChilkatXmlCertVault): Integer; dispid 239;
    function GetSignerCertChain(index: Integer): IChilkatCertChain; dispid 240;
    function GetDecryptCert: IChilkatCert; dispid 241;
    function Pkcs7ExtractDigest(signerIndex: Integer; const pkcs7: WideString): WideString; dispid 242;
    function GetEncodedAad(const encoding: WideString): WideString; dispid 243;
    function GetEncodedAuthTag(const encoding: WideString): WideString; dispid 244;
    function SetEncodedAad(const aadStr: WideString; const encoding: WideString): Integer; dispid 245;
    function SetEncodedAuthTag(const authTagStr: WideString; const encoding: WideString): Integer; dispid 246;
    property InitialCount: Integer dispid 249;
    property MacAlgorithm: WideString dispid 250;
    function MacBytes(inBytes: OleVariant): OleVariant; dispid 251;
    function MacBytesENC(inBytes: OleVariant): WideString; dispid 252;
    function MacString(const inText: WideString): OleVariant; dispid 253;
    function MacStringENC(const inText: WideString): WideString; dispid 254;
    function SetMacKeyBytes(keyBytes: OleVariant): Integer; dispid 255;
    function SetMacKeyEncoded(const key: WideString; const encoding: WideString): Integer; dispid 256;
    function SetMacKeyString(const key: WideString): Integer; dispid 257;
    function GenerateUuid: WideString; dispid 258;
    function EncryptStream(const strm: IChilkatStream): Integer; dispid 259;
    function EncryptStreamAsync(const strm: IChilkatStream): IChilkatTask; dispid 759;
    function DecryptStream(const strm: IChilkatStream): Integer; dispid 260;
    function DecryptStreamAsync(const strm: IChilkatStream): IChilkatTask; dispid 760;
    property AbortCurrent: Integer dispid 261;
    property BCryptWorkFactor: Integer dispid 262;
    function BCryptHash(const password: WideString): WideString; dispid 263;
    function BCryptVerify(const password: WideString; const BCryptHash: WideString): Integer; dispid 264;
    function AesKeyWrap(const kek: WideString; const keyData: WideString; const encoding: WideString): WideString; dispid 265;
    function AesKeyUnwrap(const kek: WideString; const wrappedKeyData: WideString; 
                          const encoding: WideString): WideString; dispid 266;
    function HashBdENC(const bd: IChilkatBinData): WideString; dispid 267;
    function MacBdENC(const bd: IChilkatBinData): WideString; dispid 268;
    property SigningAlg: WideString dispid 269;
    property OaepHash: WideString dispid 270;
    property OaepPadding: Integer dispid 271;
    function EncryptBd(const bd: IChilkatBinData): Integer; dispid 272;
    function DecryptBd(const bd: IChilkatBinData): Integer; dispid 273;
    function EncryptSb(const sbIn: IChilkatStringBuilder; const bdOut: IChilkatBinData): Integer; dispid 274;
    function DecryptSb(const bdIn: IChilkatBinData; const sbOut: IChilkatStringBuilder): Integer; dispid 275;
    function SignBdENC(const dataToSign: IChilkatBinData): WideString; dispid 276;
    function SignBdENCAsync(const dataToSign: IChilkatBinData): IChilkatTask; dispid 776;
    function SignSbENC(const sb: IChilkatStringBuilder): WideString; dispid 277;
    function SignSbENCAsync(const sb: IChilkatStringBuilder): IChilkatTask; dispid 777;
    function OpaqueSignBd(const bd: IChilkatBinData): Integer; dispid 278;
    function OpaqueSignBdAsync(const bd: IChilkatBinData): IChilkatTask; dispid 778;
    function OpaqueVerifyBd(const bd: IChilkatBinData): Integer; dispid 279;
    function VerifyBdENC(const data: IChilkatBinData; const encodedSig: WideString): Integer; dispid 280;
    function VerifySbENC(const sb: IChilkatStringBuilder; const encodedSig: WideString): Integer; dispid 281;
    function LastJsonData: IChilkatJsonObject; dispid 282;
    property OaepMgfHash: WideString dispid 283;
    function EncryptSecureENC(const secureStr: IChilkatSecureString): WideString; dispid 284;
    function DecryptSecureENC(const cipherText: WideString; const secureStr: IChilkatSecureString): Integer; dispid 285;
    property SigningAttributes: WideString dispid 286;
    function GetSignedAttributes(signerIndex: Integer; const pkcs7Der: IChilkatBinData; 
                                 const sbJson: IChilkatStringBuilder): Integer; dispid 287;
    function Hotp(const secret: WideString; const secretEnc: WideString; 
                  const counterHex: WideString; numDigits: Integer; truncOffset: Integer; 
                  const hashAlg: WideString): WideString; dispid 288;
    function EncodeInt(value: Integer; numBytes: Integer; littleEndian: Integer; 
                       const encoding: WideString): WideString; dispid 289;
    function Totp(const secret: WideString; const secretEnc: WideString; const t0: WideString; 
                  const tNow: WideString; tStep: Integer; numDigits: Integer; truncOffset: Integer; 
                  const hashAlg: WideString): WideString; dispid 290;
    property CmsOptions: WideString dispid 291;
    procedure SetTsaHttpObj(const http: IChilkatHttp); dispid 293;
    function LoadTaskCaller(const task: IChilkatTask): Integer; dispid 294;
    property UncommonOptions: WideString dispid 306;
    function AddSigningCert(const cert: IChilkatCert): Integer; dispid 307;
    procedure ClearSigningCerts; dispid 308;
  end;

// *********************************************************************//
// Interface: IChilkatHttp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {C754C4B4-6B0A-4664-ADDD-45467F0BCB7E}
// *********************************************************************//
  IChilkatHttp = interface(IDispatch)
    ['{C754C4B4-6B0A-4664-ADDD-45467F0BCB7E}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_LastMethodSuccess: Integer; safecall;
    procedure Set_LastMethodSuccess(pVal: Integer); safecall;
    function Get_LastStringResult: WideString; safecall;
    function Get_LastBinaryResult: OleVariant; safecall;
    function Get_LastStringResultLen: Integer; safecall;
    function Get_Accept: WideString; safecall;
    procedure Set_Accept(const pVal: WideString); safecall;
    function Get_AcceptCharset: WideString; safecall;
    procedure Set_AcceptCharset(const pVal: WideString); safecall;
    function Get_AcceptLanguage: WideString; safecall;
    procedure Set_AcceptLanguage(const pVal: WideString); safecall;
    function Get_AllowGzip: Integer; safecall;
    procedure Set_AllowGzip(pVal: Integer); safecall;
    function Get_AutoAddHostHeader: Integer; safecall;
    procedure Set_AutoAddHostHeader(pVal: Integer); safecall;
    function Get_AwsAccessKey: WideString; safecall;
    procedure Set_AwsAccessKey(const pVal: WideString); safecall;
    function Get_AwsEndpoint: WideString; safecall;
    procedure Set_AwsEndpoint(const pVal: WideString); safecall;
    function Get_AwsSecretKey: WideString; safecall;
    procedure Set_AwsSecretKey(const pVal: WideString); safecall;
    function Get_AwsSubResources: WideString; safecall;
    procedure Set_AwsSubResources(const pVal: WideString); safecall;
    function Get_BgLastErrorText: WideString; safecall;
    function Get_BgPercentDone: Integer; safecall;
    function Get_BgResultData: OleVariant; safecall;
    function Get_BgResultInt: Integer; safecall;
    function Get_BgResultString: WideString; safecall;
    function Get_BgTaskFinished: Integer; safecall;
    function Get_BgTaskRunning: Integer; safecall;
    function Get_BgTaskSuccess: Integer; safecall;
    function Get_ClientIpAddress: WideString; safecall;
    procedure Set_ClientIpAddress(const pVal: WideString); safecall;
    function Get_ConnectTimeout: Integer; safecall;
    procedure Set_ConnectTimeout(pVal: Integer); safecall;
    function Get_connection: WideString; safecall;
    procedure Set_connection(const pVal: WideString); safecall;
    function Get_CookieDir: WideString; safecall;
    procedure Set_CookieDir(const pVal: WideString); safecall;
    function Get_DefaultFreshPeriod: Integer; safecall;
    procedure Set_DefaultFreshPeriod(pVal: Integer); safecall;
    function Get_DigestAuth: Integer; safecall;
    procedure Set_DigestAuth(pVal: Integer); safecall;
    function Get_EventLogCount: Integer; safecall;
    function Get_FetchFromCache: Integer; safecall;
    procedure Set_FetchFromCache(pVal: Integer); safecall;
    function Get_FinalRedirectUrl: WideString; safecall;
    function Get_FollowRedirects: Integer; safecall;
    procedure Set_FollowRedirects(pVal: Integer); safecall;
    function Get_FreshnessAlgorithm: Integer; safecall;
    procedure Set_FreshnessAlgorithm(pVal: Integer); safecall;
    function Get_HeartbeatMs: Integer; safecall;
    procedure Set_HeartbeatMs(pVal: Integer); safecall;
    function Get_IgnoreMustRevalidate: Integer; safecall;
    procedure Set_IgnoreMustRevalidate(pVal: Integer); safecall;
    function Get_IgnoreNoCache: Integer; safecall;
    procedure Set_IgnoreNoCache(pVal: Integer); safecall;
    function Get_KeepEventLog: Integer; safecall;
    procedure Set_KeepEventLog(pVal: Integer); safecall;
    function Get_LMFactor: Integer; safecall;
    procedure Set_LMFactor(pVal: Integer); safecall;
    function Get_LastContentType: WideString; safecall;
    function Get_LastHeader: WideString; safecall;
    function Get_LastModDate: WideString; safecall;
    function Get_LastResponseHeader: WideString; safecall;
    function Get_LastStatus: Integer; safecall;
    function Get_login: WideString; safecall;
    procedure Set_login(const pVal: WideString); safecall;
    function Get_LoginDomain: WideString; safecall;
    procedure Set_LoginDomain(const pVal: WideString); safecall;
    function Get_MaxConnections: Integer; safecall;
    procedure Set_MaxConnections(pVal: Integer); safecall;
    function Get_MaxFreshPeriod: Integer; safecall;
    procedure Set_MaxFreshPeriod(pVal: Integer); safecall;
    function Get_MaxResponseSize: Integer; safecall;
    procedure Set_MaxResponseSize(pVal: Integer); safecall;
    function Get_MaxUrlLen: Integer; safecall;
    procedure Set_MaxUrlLen(pVal: Integer); safecall;
    function Get_MimicFireFox: Integer; safecall;
    procedure Set_MimicFireFox(pVal: Integer); safecall;
    function Get_MimicIE: Integer; safecall;
    procedure Set_MimicIE(pVal: Integer); safecall;
    function Get_MinFreshPeriod: Integer; safecall;
    procedure Set_MinFreshPeriod(pVal: Integer); safecall;
    function Get_NegotiateAuth: Integer; safecall;
    procedure Set_NegotiateAuth(pVal: Integer); safecall;
    function Get_NtlmAuth: Integer; safecall;
    procedure Set_NtlmAuth(pVal: Integer); safecall;
    function Get_NumCacheLevels: Integer; safecall;
    procedure Set_NumCacheLevels(pVal: Integer); safecall;
    function Get_NumCacheRoots: Integer; safecall;
    function Get_OAuth1: Integer; safecall;
    procedure Set_OAuth1(pVal: Integer); safecall;
    function Get_OAuthConsumerKey: WideString; safecall;
    procedure Set_OAuthConsumerKey(const pVal: WideString); safecall;
    function Get_OAuthConsumerSecret: WideString; safecall;
    procedure Set_OAuthConsumerSecret(const pVal: WideString); safecall;
    function Get_OAuthRealm: WideString; safecall;
    procedure Set_OAuthRealm(const pVal: WideString); safecall;
    function Get_OAuthSigMethod: WideString; safecall;
    procedure Set_OAuthSigMethod(const pVal: WideString); safecall;
    function Get_OAuthToken: WideString; safecall;
    procedure Set_OAuthToken(const pVal: WideString); safecall;
    function Get_OAuthTokenSecret: WideString; safecall;
    procedure Set_OAuthTokenSecret(const pVal: WideString); safecall;
    function Get_OAuthVerifier: WideString; safecall;
    procedure Set_OAuthVerifier(const pVal: WideString); safecall;
    function Get_password: WideString; safecall;
    procedure Set_password(const pVal: WideString); safecall;
    function Get_ProxyAuthMethod: WideString; safecall;
    procedure Set_ProxyAuthMethod(const pVal: WideString); safecall;
    function Get_ProxyDomain: WideString; safecall;
    procedure Set_ProxyDomain(const pVal: WideString); safecall;
    function Get_ProxyLogin: WideString; safecall;
    procedure Set_ProxyLogin(const pVal: WideString); safecall;
    function Get_ProxyLoginDomain: WideString; safecall;
    procedure Set_ProxyLoginDomain(const pVal: WideString); safecall;
    function Get_ProxyPassword: WideString; safecall;
    procedure Set_ProxyPassword(const pVal: WideString); safecall;
    function Get_ProxyPort: Integer; safecall;
    procedure Set_ProxyPort(pVal: Integer); safecall;
    function Get_ReadTimeout: Integer; safecall;
    procedure Set_ReadTimeout(pVal: Integer); safecall;
    function Get_RedirectVerb: WideString; safecall;
    procedure Set_RedirectVerb(const pVal: WideString); safecall;
    function Get_Referer: WideString; safecall;
    procedure Set_Referer(const pVal: WideString); safecall;
    function Get_RequiredContentType: WideString; safecall;
    procedure Set_RequiredContentType(const pVal: WideString); safecall;
    function Get_S3Ssl: Integer; safecall;
    procedure Set_S3Ssl(pVal: Integer); safecall;
    function Get_SaveCookies: Integer; safecall;
    procedure Set_SaveCookies(pVal: Integer); safecall;
    function Get_SendBufferSize: Integer; safecall;
    procedure Set_SendBufferSize(pVal: Integer); safecall;
    function Get_SendCookies: Integer; safecall;
    procedure Set_SendCookies(pVal: Integer); safecall;
    function Get_SessionLogFilename: WideString; safecall;
    procedure Set_SessionLogFilename(const pVal: WideString); safecall;
    function Get_SoRcvBuf: Integer; safecall;
    procedure Set_SoRcvBuf(pVal: Integer); safecall;
    function Get_SoSndBuf: Integer; safecall;
    procedure Set_SoSndBuf(pVal: Integer); safecall;
    function Get_SocksHostname: WideString; safecall;
    procedure Set_SocksHostname(const pVal: WideString); safecall;
    function Get_SocksPassword: WideString; safecall;
    procedure Set_SocksPassword(const pVal: WideString); safecall;
    function Get_SocksPort: Integer; safecall;
    procedure Set_SocksPort(pVal: Integer); safecall;
    function Get_SocksUsername: WideString; safecall;
    procedure Set_SocksUsername(const pVal: WideString); safecall;
    function Get_SocksVersion: Integer; safecall;
    procedure Set_SocksVersion(pVal: Integer); safecall;
    function Get_SslProtocol: WideString; safecall;
    procedure Set_SslProtocol(const pVal: WideString); safecall;
    function Get_UpdateCache: Integer; safecall;
    procedure Set_UpdateCache(pVal: Integer); safecall;
    function Get_UseBgThread: Integer; safecall;
    procedure Set_UseBgThread(pVal: Integer); safecall;
    function Get_UseIEProxy: Integer; safecall;
    procedure Set_UseIEProxy(pVal: Integer); safecall;
    function Get_UserAgent: WideString; safecall;
    procedure Set_UserAgent(const pVal: WideString); safecall;
    function Get_WasRedirected: Integer; safecall;
    procedure AddCacheRoot(const dir: WideString); safecall;
    function AddQuickHeader(const headerFieldName: WideString; const headerFieldValue: WideString): Integer; safecall;
    function BgResponseObject: IChilkatHttpResponse; safecall;
    procedure BgTaskAbort; safecall;
    procedure ClearBgEventLog; safecall;
    procedure ClearInMemoryCookies; safecall;
    function CloseAllConnections: Integer; safecall;
    function CloseAllConnectionsAsync: IChilkatTask; safecall;
    function Download(const url: WideString; const localFilePath: WideString): Integer; safecall;
    function DownloadAsync(const url: WideString; const localFilePath: WideString): IChilkatTask; safecall;
    function DownloadAppend(const url: WideString; const filename: WideString): Integer; safecall;
    function DownloadAppendAsync(const url: WideString; const filename: WideString): IChilkatTask; safecall;
    function DownloadHash(const url: WideString; const HashAlgorithm: WideString; 
                          const encoding: WideString): WideString; safecall;
    function DownloadHashAsync(const url: WideString; const HashAlgorithm: WideString; 
                               const encoding: WideString): IChilkatTask; safecall;
    function EventLogName(index: Integer): WideString; safecall;
    function EventLogValue(index: Integer): WideString; safecall;
    function ExtractMetaRefreshUrl(const htmlContent: WideString): WideString; safecall;
    function GenTimeStamp: WideString; safecall;
    function GetCacheRoot(index: Integer): WideString; safecall;
    function GetCookieXml(const domain: WideString): WideString; safecall;
    function GetDomain(const url: WideString): WideString; safecall;
    function GetHead(const url: WideString): IChilkatHttpResponse; safecall;
    function GetHeadAsync(const url: WideString): IChilkatTask; safecall;
    function GetRequestHeader(const name: WideString): WideString; safecall;
    function GetServerSslCert(const domain: WideString; port: Integer): IChilkatCert; safecall;
    function GetServerSslCertAsync(const domain: WideString; port: Integer): IChilkatTask; safecall;
    function GetUrlPath(const url: WideString): WideString; safecall;
    function HasRequestHeader(const name: WideString): Integer; safecall;
    function IsUnlocked: Integer; safecall;
    function PostBinary(const url: WideString; byteData: OleVariant; const contentType: WideString; 
                        md5: Integer; gzip: Integer): WideString; safecall;
    function PostBinaryAsync(const url: WideString; byteData: OleVariant; 
                             const contentType: WideString; md5: Integer; gzip: Integer): IChilkatTask; safecall;
    function PostJson(const url: WideString; const jsonText: WideString): IChilkatHttpResponse; safecall;
    function PostJsonAsync(const url: WideString; const jsonText: WideString): IChilkatTask; safecall;
    function PostJson2(const url: WideString; const contentType: WideString; 
                       const jsonText: WideString): IChilkatHttpResponse; safecall;
    function PostJson2Async(const url: WideString; const contentType: WideString; 
                            const jsonText: WideString): IChilkatTask; safecall;
    function PostUrlEncoded(const url: WideString; const req: IChilkatHttpRequest): IChilkatHttpResponse; safecall;
    function PostUrlEncodedAsync(const url: WideString; const req: IChilkatHttpRequest): IChilkatTask; safecall;
    function PostXml(const endpointUrl: WideString; const xmlContent: WideString; 
                     const xmlCharset: WideString): IChilkatHttpResponse; safecall;
    function PostXmlAsync(const endpointUrl: WideString; const xmlContent: WideString; 
                          const xmlCharset: WideString): IChilkatTask; safecall;
    function PutBinary(const url: WideString; byteData: OleVariant; const contentType: WideString; 
                       md5: Integer; gzip: Integer): WideString; safecall;
    function PutBinaryAsync(const url: WideString; byteData: OleVariant; 
                            const contentType: WideString; md5: Integer; gzip: Integer): IChilkatTask; safecall;
    function PutText(const url: WideString; const TextData: WideString; const charset: WideString; 
                     const contentType: WideString; md5: Integer; gzip: Integer): WideString; safecall;
    function PutTextAsync(const url: WideString; const TextData: WideString; 
                          const charset: WideString; const contentType: WideString; md5: Integer; 
                          gzip: Integer): IChilkatTask; safecall;
    function QuickDeleteStr(const url: WideString): WideString; safecall;
    function QuickDeleteStrAsync(const url: WideString): IChilkatTask; safecall;
    function QuickGet(const url: WideString): OleVariant; safecall;
    function QuickGetAsync(const url: WideString): IChilkatTask; safecall;
    function QuickGetObj(const url: WideString): IChilkatHttpResponse; safecall;
    function QuickGetObjAsync(const url: WideString): IChilkatTask; safecall;
    function QuickGetStr(const url: WideString): WideString; safecall;
    function QuickGetStrAsync(const url: WideString): IChilkatTask; safecall;
    function QuickPutStr(const url: WideString): WideString; safecall;
    function QuickPutStrAsync(const url: WideString): IChilkatTask; safecall;
    function RemoveQuickHeader(const headerFieldName: WideString): Integer; safecall;
    procedure RemoveRequestHeader(const name: WideString); safecall;
    function RenderGet(const url: WideString): WideString; safecall;
    function ResumeDownload(const url: WideString; const targetFilename: WideString): Integer; safecall;
    function ResumeDownloadAsync(const url: WideString; const targetFilename: WideString): IChilkatTask; safecall;
    function S3_CreateBucket(const bucketPath: WideString): Integer; safecall;
    function S3_CreateBucketAsync(const bucketPath: WideString): IChilkatTask; safecall;
    function S3_DeleteBucket(const bucketPath: WideString): Integer; safecall;
    function S3_DeleteBucketAsync(const bucketPath: WideString): IChilkatTask; safecall;
    function S3_DeleteObject(const bucketPath: WideString; const objectName: WideString): Integer; safecall;
    function S3_DeleteObjectAsync(const bucketPath: WideString; const objectName: WideString): IChilkatTask; safecall;
    function S3_DownloadBytes(const bucketPath: WideString; const objectName: WideString): OleVariant; safecall;
    function S3_DownloadBytesAsync(const bucketPath: WideString; const objectName: WideString): IChilkatTask; safecall;
    function S3_DownloadFile(const bucketPath: WideString; const objectName: WideString; 
                             const localFilePath: WideString): Integer; safecall;
    function S3_DownloadFileAsync(const bucketPath: WideString; const objectName: WideString; 
                                  const localFilePath: WideString): IChilkatTask; safecall;
    function S3_DownloadString(const bucketPath: WideString; const objectName: WideString; 
                               const charset: WideString): WideString; safecall;
    function S3_DownloadStringAsync(const bucketPath: WideString; const objectName: WideString; 
                                    const charset: WideString): IChilkatTask; safecall;
    function S3_FileExists(const bucketPath: WideString; const objectName: WideString): Integer; safecall;
    function S3_FileExistsAsync(const bucketPath: WideString; const objectName: WideString): IChilkatTask; safecall;
    function S3_ListBucketObjects(const bucketPath: WideString): WideString; safecall;
    function S3_ListBucketObjectsAsync(const bucketPath: WideString): IChilkatTask; safecall;
    function S3_ListBuckets: WideString; safecall;
    function S3_ListBucketsAsync: IChilkatTask; safecall;
    function S3_UploadBytes(contentBytes: OleVariant; const contentType: WideString; 
                            const bucketPath: WideString; const objectName: WideString): Integer; safecall;
    function S3_UploadBytesAsync(contentBytes: OleVariant; const contentType: WideString; 
                                 const bucketPath: WideString; const objectName: WideString): IChilkatTask; safecall;
    function S3_UploadFile(const localFilePath: WideString; const contentType: WideString; 
                           const bucketPath: WideString; const objectName: WideString): Integer; safecall;
    function S3_UploadFileAsync(const localFilePath: WideString; const contentType: WideString; 
                                const bucketPath: WideString; const objectName: WideString): IChilkatTask; safecall;
    function S3_UploadString(const objectContent: WideString; const charset: WideString; 
                             const contentType: WideString; const bucketPath: WideString; 
                             const objectName: WideString): Integer; safecall;
    function S3_UploadStringAsync(const objectContent: WideString; const charset: WideString; 
                                  const contentType: WideString; const bucketPath: WideString; 
                                  const objectName: WideString): IChilkatTask; safecall;
    function SetCookieXml(const domain: WideString; const cookieXml: WideString): Integer; safecall;
    procedure SetRequestHeader(const headerFieldName: WideString; const headerFieldValue: WideString); safecall;
    function SetSslClientCert(const cert: IChilkatCert): Integer; safecall;
    function SetSslClientCertPem(const pemDataOrPath: WideString; const pemPassword: WideString): Integer; safecall;
    function SetSslClientCertPfx(const pfxPath: WideString; const pfxPassword: WideString): Integer; safecall;
    procedure SleepMs(millisec: Integer); safecall;
    function SynchronousRequest(const domain: WideString; port: Integer; Ssl: Integer; 
                                const req: IChilkatHttpRequest): IChilkatHttpResponse; safecall;
    function SynchronousRequestAsync(const domain: WideString; port: Integer; Ssl: Integer; 
                                     const req: IChilkatHttpRequest): IChilkatTask; safecall;
    function UnlockComponent(const unlockCode: WideString): Integer; safecall;
    function UrlDecode(const str: WideString): WideString; safecall;
    function UrlEncode(const str: WideString): WideString; safecall;
    function XmlRpc(const urlEndpoint: WideString; const xmlIn: WideString): WideString; safecall;
    function XmlRpcAsync(const urlEndpoint: WideString; const xmlIn: WideString): IChilkatTask; safecall;
    function XmlRpcPut(const urlEndpoint: WideString; const xmlIn: WideString): WideString; safecall;
    function XmlRpcPutAsync(const urlEndpoint: WideString; const xmlIn: WideString): IChilkatTask; safecall;
    function Get_BasicAuth: Integer; safecall;
    procedure Set_BasicAuth(pVal: Integer); safecall;
    function Get_RequireSslCertVerify: Integer; safecall;
    procedure Set_RequireSslCertVerify(pVal: Integer); safecall;
    procedure DnsCacheClear; safecall;
    function SetOAuthRsaKey(const privKey: IPrivateKey): Integer; safecall;
    function Get_PreferIpv6: Integer; safecall;
    procedure Set_PreferIpv6(pVal: Integer); safecall;
    function G_SvcOauthAccessToken(const iss: WideString; const Scope: WideString; 
                                   const subEmail: WideString; numSec: Integer; 
                                   const cert: IChilkatCert): WideString; safecall;
    function G_SvcOauthAccessTokenAsync(const iss: WideString; const Scope: WideString; 
                                        const subEmail: WideString; numSec: Integer; 
                                        const cert: IChilkatCert): IChilkatTask; safecall;
    function PBinary(const verb: WideString; const url: WideString; byteData: OleVariant; 
                     const contentType: WideString; md5: Integer; gzip: Integer): IChilkatHttpResponse; safecall;
    function PBinaryAsync(const verb: WideString; const url: WideString; byteData: OleVariant; 
                          const contentType: WideString; md5: Integer; gzip: Integer): IChilkatTask; safecall;
    function PText(const verb: WideString; const url: WideString; const TextData: WideString; 
                   const charset: WideString; const contentType: WideString; md5: Integer; 
                   gzip: Integer): IChilkatHttpResponse; safecall;
    function PTextAsync(const verb: WideString; const url: WideString; const TextData: WideString; 
                        const charset: WideString; const contentType: WideString; md5: Integer; 
                        gzip: Integer): IChilkatTask; safecall;
    function S3_GenerateUrl(const bucket: WideString; const path: WideString; 
                            const expire: ICkDateTime): WideString; safecall;
    function S3_DeleteMultipleObjects(const bucketName: WideString; 
                                      const objectNames: ICkStringArray): IChilkatHttpResponse; safecall;
    function S3_DeleteMultipleObjectsAsync(const bucketName: WideString; 
                                           const objectNames: ICkStringArray): IChilkatTask; safecall;
    function Get_SslAllowedCiphers: WideString; safecall;
    procedure Set_SslAllowedCiphers(const pVal: WideString); safecall;
    function Get_StreamResponseBodyPath: WideString; safecall;
    procedure Set_StreamResponseBodyPath(const pVal: WideString); safecall;
    function Get_PercentDoneScale: Integer; safecall;
    procedure Set_PercentDoneScale(pVal: Integer); safecall;
    function Get_BandwidthThrottleUp: Integer; safecall;
    procedure Set_BandwidthThrottleUp(pVal: Integer); safecall;
    function Get_BandwidthThrottleDown: Integer; safecall;
    procedure Set_BandwidthThrottleDown(pVal: Integer); safecall;
    function Get_TlsVersion: WideString; safecall;
    function Get_TlsCipherSuite: WideString; safecall;
    function G_SvcOauthAccessToken2(const claimParams: IChilkatHashtable; numSec: Integer; 
                                    const cert: IChilkatCert): WideString; safecall;
    function G_SvcOauthAccessToken2Async(const claimParams: IChilkatHashtable; numSec: Integer; 
                                         const cert: IChilkatCert): IChilkatTask; safecall;
    function Get_OAuthCallback: WideString; safecall;
    procedure Set_OAuthCallback(const pVal: WideString); safecall;
    function Get_LastResponseBody: WideString; safecall;
    function Get_KeepResponseBody: Integer; safecall;
    procedure Set_KeepResponseBody(pVal: Integer); safecall;
    function Get_TlsPinSet: WideString; safecall;
    procedure Set_TlsPinSet(const pVal: WideString); safecall;
    function Get_ConnectFailReason: Integer; safecall;
    function Get_AwsSignatureVersion: Integer; safecall;
    procedure Set_AwsSignatureVersion(pVal: Integer); safecall;
    function Get_AwsRegion: WideString; safecall;
    procedure Set_AwsRegion(const pVal: WideString); safecall;
    function Get_AbortCurrent: Integer; safecall;
    procedure Set_AbortCurrent(pVal: Integer); safecall;
    function DownloadBd(const url: WideString; const binData: IChilkatBinData): Integer; safecall;
    function DownloadBdAsync(const url: WideString; const binData: IChilkatBinData): IChilkatTask; safecall;
    function DownloadSb(const url: WideString; const charset: WideString; 
                        const sb: IChilkatStringBuilder): Integer; safecall;
    function DownloadSbAsync(const url: WideString; const charset: WideString; 
                             const sb: IChilkatStringBuilder): IChilkatTask; safecall;
    function Get_AllowHeaderFolding: Integer; safecall;
    procedure Set_AllowHeaderFolding(pVal: Integer); safecall;
    function QuickGetSb(const url: WideString; const sbContent: IChilkatStringBuilder): Integer; safecall;
    function QuickGetSbAsync(const url: WideString; const sbContent: IChilkatStringBuilder): IChilkatTask; safecall;
    function QuickGetBd(const url: WideString; const binData: IChilkatBinData): Integer; safecall;
    function QuickGetBdAsync(const url: WideString; const binData: IChilkatBinData): IChilkatTask; safecall;
    function S3_GenerateUrlV4(useHttps: Integer; const bucketName: WideString; 
                              const path: WideString; numSecondsValid: Integer; 
                              const awsService: WideString): WideString; safecall;
    function SetUrlVar(const name: WideString; const value: WideString): Integer; safecall;
    procedure ClearUrlVars; safecall;
    function Get_AuthToken: WideString; safecall;
    procedure Set_AuthToken(const pVal: WideString); safecall;
    function PostJson3(const url: WideString; const contentType: WideString; 
                       const json: IChilkatJsonObject): IChilkatHttpResponse; safecall;
    function PostJson3Async(const url: WideString; const contentType: WideString; 
                            const json: IChilkatJsonObject): IChilkatTask; safecall;
    function Get_LastStatusText: WideString; safecall;
    function PBinaryBd(const verb: WideString; const url: WideString; const data: IChilkatBinData; 
                       const contentType: WideString; md5: Integer; gzip: Integer): IChilkatHttpResponse; safecall;
    function PBinaryBdAsync(const verb: WideString; const url: WideString; 
                            const data: IChilkatBinData; const contentType: WideString; 
                            md5: Integer; gzip: Integer): IChilkatTask; safecall;
    function PTextSb(const verb: WideString; const url: WideString; 
                     const TextData: IChilkatStringBuilder; const charset: WideString; 
                     const contentType: WideString; md5: Integer; gzip: Integer): IChilkatHttpResponse; safecall;
    function PTextSbAsync(const verb: WideString; const url: WideString; 
                          const TextData: IChilkatStringBuilder; const charset: WideString; 
                          const contentType: WideString; md5: Integer; gzip: Integer): IChilkatTask; safecall;
    function SetPassword(const password: IChilkatSecureString): Integer; safecall;
    function SharePointOnlineAuth(const siteUrl: WideString; const username: WideString; 
                                  const password: IChilkatSecureString; 
                                  const extraInfo: IChilkatJsonObject): Integer; safecall;
    function SharePointOnlineAuthAsync(const siteUrl: WideString; const username: WideString; 
                                       const password: IChilkatSecureString; 
                                       const extraInfo: IChilkatJsonObject): IChilkatTask; safecall;
    function ResumeDownloadBd(const url: WideString; const binData: IChilkatBinData): Integer; safecall;
    function ResumeDownloadBdAsync(const url: WideString; const binData: IChilkatBinData): IChilkatTask; safecall;
    function CreateTimestampRequest(const hashAlg: WideString; const hashVal: WideString; 
                                    const reqPolicyOid: WideString; addNonce: Integer; 
                                    reqTsaCert: Integer; const timestampToken: IChilkatBinData): Integer; safecall;
    function VerifyTimestampReply(const timestampReply: IChilkatBinData; const tsaCert: IChilkatCert): Integer; safecall;
    function CreateOcspRequest(const requestDetails: IChilkatJsonObject; 
                               const ocspRequest: IChilkatBinData): Integer; safecall;
    function ParseOcspReply(const ocspReply: IChilkatBinData; const replyData: IChilkatJsonObject): Integer; safecall;
    function SetSecurePassword(const password: IChilkatSecureString): Integer; safecall;
    function S3_UploadBd(const bd: IChilkatBinData; const contentType: WideString; 
                         const bucketPath: WideString; const objectName: WideString): Integer; safecall;
    function S3_UploadBdAsync(const bd: IChilkatBinData; const contentType: WideString; 
                              const bucketPath: WideString; const objectName: WideString): IChilkatTask; safecall;
    function S3_DownloadBd(const bucketPath: WideString; const objectName: WideString; 
                           const bd: IChilkatBinData): Integer; safecall;
    function S3_DownloadBdAsync(const bucketPath: WideString; const objectName: WideString; 
                                const bd: IChilkatBinData): IChilkatTask; safecall;
    function Get_UncommonOptions: WideString; safecall;
    procedure Set_UncommonOptions(const pVal: WideString); safecall;
    function QuickRequest(const verb: WideString; const url: WideString): IChilkatHttpResponse; safecall;
    function QuickRequestAsync(const verb: WideString; const url: WideString): IChilkatTask; safecall;
    procedure ClearHeaders; safecall;
    function LastJsonData: IChilkatJsonObject; safecall;
    function LoadTaskCaller(const task: IChilkatTask): Integer; safecall;
    function Get_SniHostname: WideString; safecall;
    procedure Set_SniHostname(const pVal: WideString); safecall;
    function Get_ProxyDirectTls: Integer; safecall;
    procedure Set_ProxyDirectTls(pVal: Integer); safecall;
    function S3_GenPresignedUrl(const httpVerb: WideString; useHttps: Integer; 
                                const bucketName: WideString; const path: WideString; 
                                numSecondsValid: Integer; const awsService: WideString): WideString; safecall;
    function PFile(const verb: WideString; const url: WideString; const localFilePath: WideString; 
                   const contentType: WideString; md5: Integer; gzip: Integer): IChilkatHttpResponse; safecall;
    function PFileAsync(const verb: WideString; const url: WideString; 
                        const localFilePath: WideString; const contentType: WideString; 
                        md5: Integer; gzip: Integer): IChilkatTask; safecall;
    procedure SetSslCertRequirement(const reqName: WideString; const reqValue: WideString); safecall;
    function OcspCheck(const domain: WideString; port: Integer): Integer; safecall;
    function OcspCheckAsync(const domain: WideString; port: Integer): IChilkatTask; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property LastMethodSuccess: Integer read Get_LastMethodSuccess write Set_LastMethodSuccess;
    property LastStringResult: WideString read Get_LastStringResult;
    property LastBinaryResult: OleVariant read Get_LastBinaryResult;
    property LastStringResultLen: Integer read Get_LastStringResultLen;
    property Accept: WideString read Get_Accept write Set_Accept;
    property AcceptCharset: WideString read Get_AcceptCharset write Set_AcceptCharset;
    property AcceptLanguage: WideString read Get_AcceptLanguage write Set_AcceptLanguage;
    property AllowGzip: Integer read Get_AllowGzip write Set_AllowGzip;
    property AutoAddHostHeader: Integer read Get_AutoAddHostHeader write Set_AutoAddHostHeader;
    property AwsAccessKey: WideString read Get_AwsAccessKey write Set_AwsAccessKey;
    property AwsEndpoint: WideString read Get_AwsEndpoint write Set_AwsEndpoint;
    property AwsSecretKey: WideString read Get_AwsSecretKey write Set_AwsSecretKey;
    property AwsSubResources: WideString read Get_AwsSubResources write Set_AwsSubResources;
    property BgLastErrorText: WideString read Get_BgLastErrorText;
    property BgPercentDone: Integer read Get_BgPercentDone;
    property BgResultData: OleVariant read Get_BgResultData;
    property BgResultInt: Integer read Get_BgResultInt;
    property BgResultString: WideString read Get_BgResultString;
    property BgTaskFinished: Integer read Get_BgTaskFinished;
    property BgTaskRunning: Integer read Get_BgTaskRunning;
    property BgTaskSuccess: Integer read Get_BgTaskSuccess;
    property ClientIpAddress: WideString read Get_ClientIpAddress write Set_ClientIpAddress;
    property ConnectTimeout: Integer read Get_ConnectTimeout write Set_ConnectTimeout;
    property connection: WideString read Get_connection write Set_connection;
    property CookieDir: WideString read Get_CookieDir write Set_CookieDir;
    property DefaultFreshPeriod: Integer read Get_DefaultFreshPeriod write Set_DefaultFreshPeriod;
    property DigestAuth: Integer read Get_DigestAuth write Set_DigestAuth;
    property EventLogCount: Integer read Get_EventLogCount;
    property FetchFromCache: Integer read Get_FetchFromCache write Set_FetchFromCache;
    property FinalRedirectUrl: WideString read Get_FinalRedirectUrl;
    property FollowRedirects: Integer read Get_FollowRedirects write Set_FollowRedirects;
    property FreshnessAlgorithm: Integer read Get_FreshnessAlgorithm write Set_FreshnessAlgorithm;
    property HeartbeatMs: Integer read Get_HeartbeatMs write Set_HeartbeatMs;
    property IgnoreMustRevalidate: Integer read Get_IgnoreMustRevalidate write Set_IgnoreMustRevalidate;
    property IgnoreNoCache: Integer read Get_IgnoreNoCache write Set_IgnoreNoCache;
    property KeepEventLog: Integer read Get_KeepEventLog write Set_KeepEventLog;
    property LMFactor: Integer read Get_LMFactor write Set_LMFactor;
    property LastContentType: WideString read Get_LastContentType;
    property LastHeader: WideString read Get_LastHeader;
    property LastModDate: WideString read Get_LastModDate;
    property LastResponseHeader: WideString read Get_LastResponseHeader;
    property LastStatus: Integer read Get_LastStatus;
    property login: WideString read Get_login write Set_login;
    property LoginDomain: WideString read Get_LoginDomain write Set_LoginDomain;
    property MaxConnections: Integer read Get_MaxConnections write Set_MaxConnections;
    property MaxFreshPeriod: Integer read Get_MaxFreshPeriod write Set_MaxFreshPeriod;
    property MaxResponseSize: Integer read Get_MaxResponseSize write Set_MaxResponseSize;
    property MaxUrlLen: Integer read Get_MaxUrlLen write Set_MaxUrlLen;
    property MimicFireFox: Integer read Get_MimicFireFox write Set_MimicFireFox;
    property MimicIE: Integer read Get_MimicIE write Set_MimicIE;
    property MinFreshPeriod: Integer read Get_MinFreshPeriod write Set_MinFreshPeriod;
    property NegotiateAuth: Integer read Get_NegotiateAuth write Set_NegotiateAuth;
    property NtlmAuth: Integer read Get_NtlmAuth write Set_NtlmAuth;
    property NumCacheLevels: Integer read Get_NumCacheLevels write Set_NumCacheLevels;
    property NumCacheRoots: Integer read Get_NumCacheRoots;
    property OAuth1: Integer read Get_OAuth1 write Set_OAuth1;
    property OAuthConsumerKey: WideString read Get_OAuthConsumerKey write Set_OAuthConsumerKey;
    property OAuthConsumerSecret: WideString read Get_OAuthConsumerSecret write Set_OAuthConsumerSecret;
    property OAuthRealm: WideString read Get_OAuthRealm write Set_OAuthRealm;
    property OAuthSigMethod: WideString read Get_OAuthSigMethod write Set_OAuthSigMethod;
    property OAuthToken: WideString read Get_OAuthToken write Set_OAuthToken;
    property OAuthTokenSecret: WideString read Get_OAuthTokenSecret write Set_OAuthTokenSecret;
    property OAuthVerifier: WideString read Get_OAuthVerifier write Set_OAuthVerifier;
    property password: WideString read Get_password write Set_password;
    property ProxyAuthMethod: WideString read Get_ProxyAuthMethod write Set_ProxyAuthMethod;
    property ProxyDomain: WideString read Get_ProxyDomain write Set_ProxyDomain;
    property ProxyLogin: WideString read Get_ProxyLogin write Set_ProxyLogin;
    property ProxyLoginDomain: WideString read Get_ProxyLoginDomain write Set_ProxyLoginDomain;
    property ProxyPassword: WideString read Get_ProxyPassword write Set_ProxyPassword;
    property ProxyPort: Integer read Get_ProxyPort write Set_ProxyPort;
    property ReadTimeout: Integer read Get_ReadTimeout write Set_ReadTimeout;
    property RedirectVerb: WideString read Get_RedirectVerb write Set_RedirectVerb;
    property Referer: WideString read Get_Referer write Set_Referer;
    property RequiredContentType: WideString read Get_RequiredContentType write Set_RequiredContentType;
    property S3Ssl: Integer read Get_S3Ssl write Set_S3Ssl;
    property SaveCookies: Integer read Get_SaveCookies write Set_SaveCookies;
    property SendBufferSize: Integer read Get_SendBufferSize write Set_SendBufferSize;
    property SendCookies: Integer read Get_SendCookies write Set_SendCookies;
    property SessionLogFilename: WideString read Get_SessionLogFilename write Set_SessionLogFilename;
    property SoRcvBuf: Integer read Get_SoRcvBuf write Set_SoRcvBuf;
    property SoSndBuf: Integer read Get_SoSndBuf write Set_SoSndBuf;
    property SocksHostname: WideString read Get_SocksHostname write Set_SocksHostname;
    property SocksPassword: WideString read Get_SocksPassword write Set_SocksPassword;
    property SocksPort: Integer read Get_SocksPort write Set_SocksPort;
    property SocksUsername: WideString read Get_SocksUsername write Set_SocksUsername;
    property SocksVersion: Integer read Get_SocksVersion write Set_SocksVersion;
    property SslProtocol: WideString read Get_SslProtocol write Set_SslProtocol;
    property UpdateCache: Integer read Get_UpdateCache write Set_UpdateCache;
    property UseBgThread: Integer read Get_UseBgThread write Set_UseBgThread;
    property UseIEProxy: Integer read Get_UseIEProxy write Set_UseIEProxy;
    property UserAgent: WideString read Get_UserAgent write Set_UserAgent;
    property WasRedirected: Integer read Get_WasRedirected;
    property BasicAuth: Integer read Get_BasicAuth write Set_BasicAuth;
    property RequireSslCertVerify: Integer read Get_RequireSslCertVerify write Set_RequireSslCertVerify;
    property PreferIpv6: Integer read Get_PreferIpv6 write Set_PreferIpv6;
    property SslAllowedCiphers: WideString read Get_SslAllowedCiphers write Set_SslAllowedCiphers;
    property StreamResponseBodyPath: WideString read Get_StreamResponseBodyPath write Set_StreamResponseBodyPath;
    property PercentDoneScale: Integer read Get_PercentDoneScale write Set_PercentDoneScale;
    property BandwidthThrottleUp: Integer read Get_BandwidthThrottleUp write Set_BandwidthThrottleUp;
    property BandwidthThrottleDown: Integer read Get_BandwidthThrottleDown write Set_BandwidthThrottleDown;
    property TlsVersion: WideString read Get_TlsVersion;
    property TlsCipherSuite: WideString read Get_TlsCipherSuite;
    property OAuthCallback: WideString read Get_OAuthCallback write Set_OAuthCallback;
    property LastResponseBody: WideString read Get_LastResponseBody;
    property KeepResponseBody: Integer read Get_KeepResponseBody write Set_KeepResponseBody;
    property TlsPinSet: WideString read Get_TlsPinSet write Set_TlsPinSet;
    property ConnectFailReason: Integer read Get_ConnectFailReason;
    property AwsSignatureVersion: Integer read Get_AwsSignatureVersion write Set_AwsSignatureVersion;
    property AwsRegion: WideString read Get_AwsRegion write Set_AwsRegion;
    property AbortCurrent: Integer read Get_AbortCurrent write Set_AbortCurrent;
    property AllowHeaderFolding: Integer read Get_AllowHeaderFolding write Set_AllowHeaderFolding;
    property AuthToken: WideString read Get_AuthToken write Set_AuthToken;
    property LastStatusText: WideString read Get_LastStatusText;
    property UncommonOptions: WideString read Get_UncommonOptions write Set_UncommonOptions;
    property SniHostname: WideString read Get_SniHostname write Set_SniHostname;
    property ProxyDirectTls: Integer read Get_ProxyDirectTls write Set_ProxyDirectTls;
  end;

// *********************************************************************//
// DispIntf:  IChilkatHttpDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {C754C4B4-6B0A-4664-ADDD-45467F0BCB7E}
// *********************************************************************//
  IChilkatHttpDisp = dispinterface
    ['{C754C4B4-6B0A-4664-ADDD-45467F0BCB7E}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property LastMethodSuccess: Integer dispid 9;
    property LastStringResult: WideString readonly dispid 10;
    property LastBinaryResult: OleVariant readonly dispid 11;
    property LastStringResultLen: Integer readonly dispid 12;
    property Accept: WideString dispid 100;
    property AcceptCharset: WideString dispid 101;
    property AcceptLanguage: WideString dispid 102;
    property AllowGzip: Integer dispid 103;
    property AutoAddHostHeader: Integer dispid 104;
    property AwsAccessKey: WideString dispid 105;
    property AwsEndpoint: WideString dispid 106;
    property AwsSecretKey: WideString dispid 107;
    property AwsSubResources: WideString dispid 108;
    property BgLastErrorText: WideString readonly dispid 109;
    property BgPercentDone: Integer readonly dispid 110;
    property BgResultData: OleVariant readonly dispid 111;
    property BgResultInt: Integer readonly dispid 112;
    property BgResultString: WideString readonly dispid 113;
    property BgTaskFinished: Integer readonly dispid 114;
    property BgTaskRunning: Integer readonly dispid 115;
    property BgTaskSuccess: Integer readonly dispid 116;
    property ClientIpAddress: WideString dispid 117;
    property ConnectTimeout: Integer dispid 118;
    property connection: WideString dispid 119;
    property CookieDir: WideString dispid 120;
    property DefaultFreshPeriod: Integer dispid 121;
    property DigestAuth: Integer dispid 122;
    property EventLogCount: Integer readonly dispid 123;
    property FetchFromCache: Integer dispid 124;
    property FinalRedirectUrl: WideString readonly dispid 125;
    property FollowRedirects: Integer dispid 126;
    property FreshnessAlgorithm: Integer dispid 127;
    property HeartbeatMs: Integer dispid 128;
    property IgnoreMustRevalidate: Integer dispid 129;
    property IgnoreNoCache: Integer dispid 130;
    property KeepEventLog: Integer dispid 131;
    property LMFactor: Integer dispid 132;
    property LastContentType: WideString readonly dispid 133;
    property LastHeader: WideString readonly dispid 134;
    property LastModDate: WideString readonly dispid 135;
    property LastResponseHeader: WideString readonly dispid 136;
    property LastStatus: Integer readonly dispid 137;
    property login: WideString dispid 138;
    property LoginDomain: WideString dispid 139;
    property MaxConnections: Integer dispid 140;
    property MaxFreshPeriod: Integer dispid 141;
    property MaxResponseSize: Integer dispid 142;
    property MaxUrlLen: Integer dispid 143;
    property MimicFireFox: Integer dispid 144;
    property MimicIE: Integer dispid 145;
    property MinFreshPeriod: Integer dispid 146;
    property NegotiateAuth: Integer dispid 147;
    property NtlmAuth: Integer dispid 148;
    property NumCacheLevels: Integer dispid 149;
    property NumCacheRoots: Integer readonly dispid 150;
    property OAuth1: Integer dispid 151;
    property OAuthConsumerKey: WideString dispid 152;
    property OAuthConsumerSecret: WideString dispid 153;
    property OAuthRealm: WideString dispid 154;
    property OAuthSigMethod: WideString dispid 155;
    property OAuthToken: WideString dispid 156;
    property OAuthTokenSecret: WideString dispid 157;
    property OAuthVerifier: WideString dispid 158;
    property password: WideString dispid 159;
    property ProxyAuthMethod: WideString dispid 160;
    property ProxyDomain: WideString dispid 161;
    property ProxyLogin: WideString dispid 162;
    property ProxyLoginDomain: WideString dispid 163;
    property ProxyPassword: WideString dispid 164;
    property ProxyPort: Integer dispid 165;
    property ReadTimeout: Integer dispid 166;
    property RedirectVerb: WideString dispid 167;
    property Referer: WideString dispid 168;
    property RequiredContentType: WideString dispid 169;
    property S3Ssl: Integer dispid 170;
    property SaveCookies: Integer dispid 171;
    property SendBufferSize: Integer dispid 172;
    property SendCookies: Integer dispid 173;
    property SessionLogFilename: WideString dispid 174;
    property SoRcvBuf: Integer dispid 175;
    property SoSndBuf: Integer dispid 176;
    property SocksHostname: WideString dispid 177;
    property SocksPassword: WideString dispid 178;
    property SocksPort: Integer dispid 179;
    property SocksUsername: WideString dispid 180;
    property SocksVersion: Integer dispid 181;
    property SslProtocol: WideString dispid 182;
    property UpdateCache: Integer dispid 183;
    property UseBgThread: Integer dispid 184;
    property UseIEProxy: Integer dispid 185;
    property UserAgent: WideString dispid 186;
    property WasRedirected: Integer readonly dispid 187;
    procedure AddCacheRoot(const dir: WideString); dispid 188;
    function AddQuickHeader(const headerFieldName: WideString; const headerFieldValue: WideString): Integer; dispid 189;
    function BgResponseObject: IChilkatHttpResponse; dispid 190;
    procedure BgTaskAbort; dispid 191;
    procedure ClearBgEventLog; dispid 192;
    procedure ClearInMemoryCookies; dispid 193;
    function CloseAllConnections: Integer; dispid 194;
    function CloseAllConnectionsAsync: IChilkatTask; dispid 694;
    function Download(const url: WideString; const localFilePath: WideString): Integer; dispid 195;
    function DownloadAsync(const url: WideString; const localFilePath: WideString): IChilkatTask; dispid 695;
    function DownloadAppend(const url: WideString; const filename: WideString): Integer; dispid 196;
    function DownloadAppendAsync(const url: WideString; const filename: WideString): IChilkatTask; dispid 696;
    function DownloadHash(const url: WideString; const HashAlgorithm: WideString; 
                          const encoding: WideString): WideString; dispid 197;
    function DownloadHashAsync(const url: WideString; const HashAlgorithm: WideString; 
                               const encoding: WideString): IChilkatTask; dispid 697;
    function EventLogName(index: Integer): WideString; dispid 198;
    function EventLogValue(index: Integer): WideString; dispid 199;
    function ExtractMetaRefreshUrl(const htmlContent: WideString): WideString; dispid 200;
    function GenTimeStamp: WideString; dispid 201;
    function GetCacheRoot(index: Integer): WideString; dispid 202;
    function GetCookieXml(const domain: WideString): WideString; dispid 203;
    function GetDomain(const url: WideString): WideString; dispid 204;
    function GetHead(const url: WideString): IChilkatHttpResponse; dispid 205;
    function GetHeadAsync(const url: WideString): IChilkatTask; dispid 705;
    function GetRequestHeader(const name: WideString): WideString; dispid 206;
    function GetServerSslCert(const domain: WideString; port: Integer): IChilkatCert; dispid 207;
    function GetServerSslCertAsync(const domain: WideString; port: Integer): IChilkatTask; dispid 707;
    function GetUrlPath(const url: WideString): WideString; dispid 208;
    function HasRequestHeader(const name: WideString): Integer; dispid 209;
    function IsUnlocked: Integer; dispid 210;
    function PostBinary(const url: WideString; byteData: OleVariant; const contentType: WideString; 
                        md5: Integer; gzip: Integer): WideString; dispid 211;
    function PostBinaryAsync(const url: WideString; byteData: OleVariant; 
                             const contentType: WideString; md5: Integer; gzip: Integer): IChilkatTask; dispid 711;
    function PostJson(const url: WideString; const jsonText: WideString): IChilkatHttpResponse; dispid 212;
    function PostJsonAsync(const url: WideString; const jsonText: WideString): IChilkatTask; dispid 712;
    function PostJson2(const url: WideString; const contentType: WideString; 
                       const jsonText: WideString): IChilkatHttpResponse; dispid 213;
    function PostJson2Async(const url: WideString; const contentType: WideString; 
                            const jsonText: WideString): IChilkatTask; dispid 713;
    function PostUrlEncoded(const url: WideString; const req: IChilkatHttpRequest): IChilkatHttpResponse; dispid 215;
    function PostUrlEncodedAsync(const url: WideString; const req: IChilkatHttpRequest): IChilkatTask; dispid 715;
    function PostXml(const endpointUrl: WideString; const xmlContent: WideString; 
                     const xmlCharset: WideString): IChilkatHttpResponse; dispid 216;
    function PostXmlAsync(const endpointUrl: WideString; const xmlContent: WideString; 
                          const xmlCharset: WideString): IChilkatTask; dispid 716;
    function PutBinary(const url: WideString; byteData: OleVariant; const contentType: WideString; 
                       md5: Integer; gzip: Integer): WideString; dispid 217;
    function PutBinaryAsync(const url: WideString; byteData: OleVariant; 
                            const contentType: WideString; md5: Integer; gzip: Integer): IChilkatTask; dispid 717;
    function PutText(const url: WideString; const TextData: WideString; const charset: WideString; 
                     const contentType: WideString; md5: Integer; gzip: Integer): WideString; dispid 218;
    function PutTextAsync(const url: WideString; const TextData: WideString; 
                          const charset: WideString; const contentType: WideString; md5: Integer; 
                          gzip: Integer): IChilkatTask; dispid 718;
    function QuickDeleteStr(const url: WideString): WideString; dispid 219;
    function QuickDeleteStrAsync(const url: WideString): IChilkatTask; dispid 719;
    function QuickGet(const url: WideString): OleVariant; dispid 220;
    function QuickGetAsync(const url: WideString): IChilkatTask; dispid 720;
    function QuickGetObj(const url: WideString): IChilkatHttpResponse; dispid 221;
    function QuickGetObjAsync(const url: WideString): IChilkatTask; dispid 721;
    function QuickGetStr(const url: WideString): WideString; dispid 222;
    function QuickGetStrAsync(const url: WideString): IChilkatTask; dispid 722;
    function QuickPutStr(const url: WideString): WideString; dispid 223;
    function QuickPutStrAsync(const url: WideString): IChilkatTask; dispid 723;
    function RemoveQuickHeader(const headerFieldName: WideString): Integer; dispid 224;
    procedure RemoveRequestHeader(const name: WideString); dispid 225;
    function RenderGet(const url: WideString): WideString; dispid 226;
    function ResumeDownload(const url: WideString; const targetFilename: WideString): Integer; dispid 227;
    function ResumeDownloadAsync(const url: WideString; const targetFilename: WideString): IChilkatTask; dispid 727;
    function S3_CreateBucket(const bucketPath: WideString): Integer; dispid 228;
    function S3_CreateBucketAsync(const bucketPath: WideString): IChilkatTask; dispid 728;
    function S3_DeleteBucket(const bucketPath: WideString): Integer; dispid 229;
    function S3_DeleteBucketAsync(const bucketPath: WideString): IChilkatTask; dispid 729;
    function S3_DeleteObject(const bucketPath: WideString; const objectName: WideString): Integer; dispid 230;
    function S3_DeleteObjectAsync(const bucketPath: WideString; const objectName: WideString): IChilkatTask; dispid 730;
    function S3_DownloadBytes(const bucketPath: WideString; const objectName: WideString): OleVariant; dispid 231;
    function S3_DownloadBytesAsync(const bucketPath: WideString; const objectName: WideString): IChilkatTask; dispid 731;
    function S3_DownloadFile(const bucketPath: WideString; const objectName: WideString; 
                             const localFilePath: WideString): Integer; dispid 232;
    function S3_DownloadFileAsync(const bucketPath: WideString; const objectName: WideString; 
                                  const localFilePath: WideString): IChilkatTask; dispid 732;
    function S3_DownloadString(const bucketPath: WideString; const objectName: WideString; 
                               const charset: WideString): WideString; dispid 233;
    function S3_DownloadStringAsync(const bucketPath: WideString; const objectName: WideString; 
                                    const charset: WideString): IChilkatTask; dispid 733;
    function S3_FileExists(const bucketPath: WideString; const objectName: WideString): Integer; dispid 234;
    function S3_FileExistsAsync(const bucketPath: WideString; const objectName: WideString): IChilkatTask; dispid 734;
    function S3_ListBucketObjects(const bucketPath: WideString): WideString; dispid 235;
    function S3_ListBucketObjectsAsync(const bucketPath: WideString): IChilkatTask; dispid 735;
    function S3_ListBuckets: WideString; dispid 236;
    function S3_ListBucketsAsync: IChilkatTask; dispid 736;
    function S3_UploadBytes(contentBytes: OleVariant; const contentType: WideString; 
                            const bucketPath: WideString; const objectName: WideString): Integer; dispid 237;
    function S3_UploadBytesAsync(contentBytes: OleVariant; const contentType: WideString; 
                                 const bucketPath: WideString; const objectName: WideString): IChilkatTask; dispid 737;
    function S3_UploadFile(const localFilePath: WideString; const contentType: WideString; 
                           const bucketPath: WideString; const objectName: WideString): Integer; dispid 238;
    function S3_UploadFileAsync(const localFilePath: WideString; const contentType: WideString; 
                                const bucketPath: WideString; const objectName: WideString): IChilkatTask; dispid 738;
    function S3_UploadString(const objectContent: WideString; const charset: WideString; 
                             const contentType: WideString; const bucketPath: WideString; 
                             const objectName: WideString): Integer; dispid 239;
    function S3_UploadStringAsync(const objectContent: WideString; const charset: WideString; 
                                  const contentType: WideString; const bucketPath: WideString; 
                                  const objectName: WideString): IChilkatTask; dispid 739;
    function SetCookieXml(const domain: WideString; const cookieXml: WideString): Integer; dispid 240;
    procedure SetRequestHeader(const headerFieldName: WideString; const headerFieldValue: WideString); dispid 241;
    function SetSslClientCert(const cert: IChilkatCert): Integer; dispid 242;
    function SetSslClientCertPem(const pemDataOrPath: WideString; const pemPassword: WideString): Integer; dispid 243;
    function SetSslClientCertPfx(const pfxPath: WideString; const pfxPassword: WideString): Integer; dispid 244;
    procedure SleepMs(millisec: Integer); dispid 245;
    function SynchronousRequest(const domain: WideString; port: Integer; Ssl: Integer; 
                                const req: IChilkatHttpRequest): IChilkatHttpResponse; dispid 246;
    function SynchronousRequestAsync(const domain: WideString; port: Integer; Ssl: Integer; 
                                     const req: IChilkatHttpRequest): IChilkatTask; dispid 746;
    function UnlockComponent(const unlockCode: WideString): Integer; dispid 247;
    function UrlDecode(const str: WideString): WideString; dispid 248;
    function UrlEncode(const str: WideString): WideString; dispid 249;
    function XmlRpc(const urlEndpoint: WideString; const xmlIn: WideString): WideString; dispid 250;
    function XmlRpcAsync(const urlEndpoint: WideString; const xmlIn: WideString): IChilkatTask; dispid 750;
    function XmlRpcPut(const urlEndpoint: WideString; const xmlIn: WideString): WideString; dispid 251;
    function XmlRpcPutAsync(const urlEndpoint: WideString; const xmlIn: WideString): IChilkatTask; dispid 751;
    property BasicAuth: Integer dispid 252;
    property RequireSslCertVerify: Integer dispid 253;
    procedure DnsCacheClear; dispid 254;
    function SetOAuthRsaKey(const privKey: IPrivateKey): Integer; dispid 255;
    property PreferIpv6: Integer dispid 256;
    function G_SvcOauthAccessToken(const iss: WideString; const Scope: WideString; 
                                   const subEmail: WideString; numSec: Integer; 
                                   const cert: IChilkatCert): WideString; dispid 257;
    function G_SvcOauthAccessTokenAsync(const iss: WideString; const Scope: WideString; 
                                        const subEmail: WideString; numSec: Integer; 
                                        const cert: IChilkatCert): IChilkatTask; dispid 757;
    function PBinary(const verb: WideString; const url: WideString; byteData: OleVariant; 
                     const contentType: WideString; md5: Integer; gzip: Integer): IChilkatHttpResponse; dispid 258;
    function PBinaryAsync(const verb: WideString; const url: WideString; byteData: OleVariant; 
                          const contentType: WideString; md5: Integer; gzip: Integer): IChilkatTask; dispid 758;
    function PText(const verb: WideString; const url: WideString; const TextData: WideString; 
                   const charset: WideString; const contentType: WideString; md5: Integer; 
                   gzip: Integer): IChilkatHttpResponse; dispid 259;
    function PTextAsync(const verb: WideString; const url: WideString; const TextData: WideString; 
                        const charset: WideString; const contentType: WideString; md5: Integer; 
                        gzip: Integer): IChilkatTask; dispid 759;
    function S3_GenerateUrl(const bucket: WideString; const path: WideString; 
                            const expire: ICkDateTime): WideString; dispid 260;
    function S3_DeleteMultipleObjects(const bucketName: WideString; 
                                      const objectNames: ICkStringArray): IChilkatHttpResponse; dispid 261;
    function S3_DeleteMultipleObjectsAsync(const bucketName: WideString; 
                                           const objectNames: ICkStringArray): IChilkatTask; dispid 761;
    property SslAllowedCiphers: WideString dispid 262;
    property StreamResponseBodyPath: WideString dispid 263;
    property PercentDoneScale: Integer dispid 264;
    property BandwidthThrottleUp: Integer dispid 265;
    property BandwidthThrottleDown: Integer dispid 266;
    property TlsVersion: WideString readonly dispid 267;
    property TlsCipherSuite: WideString readonly dispid 268;
    function G_SvcOauthAccessToken2(const claimParams: IChilkatHashtable; numSec: Integer; 
                                    const cert: IChilkatCert): WideString; dispid 269;
    function G_SvcOauthAccessToken2Async(const claimParams: IChilkatHashtable; numSec: Integer; 
                                         const cert: IChilkatCert): IChilkatTask; dispid 769;
    property OAuthCallback: WideString dispid 270;
    property LastResponseBody: WideString readonly dispid 271;
    property KeepResponseBody: Integer dispid 272;
    property TlsPinSet: WideString dispid 273;
    property ConnectFailReason: Integer readonly dispid 274;
    property AwsSignatureVersion: Integer dispid 275;
    property AwsRegion: WideString dispid 276;
    property AbortCurrent: Integer dispid 277;
    function DownloadBd(const url: WideString; const binData: IChilkatBinData): Integer; dispid 278;
    function DownloadBdAsync(const url: WideString; const binData: IChilkatBinData): IChilkatTask; dispid 778;
    function DownloadSb(const url: WideString; const charset: WideString; 
                        const sb: IChilkatStringBuilder): Integer; dispid 279;
    function DownloadSbAsync(const url: WideString; const charset: WideString; 
                             const sb: IChilkatStringBuilder): IChilkatTask; dispid 779;
    property AllowHeaderFolding: Integer dispid 280;
    function QuickGetSb(const url: WideString; const sbContent: IChilkatStringBuilder): Integer; dispid 281;
    function QuickGetSbAsync(const url: WideString; const sbContent: IChilkatStringBuilder): IChilkatTask; dispid 781;
    function QuickGetBd(const url: WideString; const binData: IChilkatBinData): Integer; dispid 282;
    function QuickGetBdAsync(const url: WideString; const binData: IChilkatBinData): IChilkatTask; dispid 782;
    function S3_GenerateUrlV4(useHttps: Integer; const bucketName: WideString; 
                              const path: WideString; numSecondsValid: Integer; 
                              const awsService: WideString): WideString; dispid 283;
    function SetUrlVar(const name: WideString; const value: WideString): Integer; dispid 284;
    procedure ClearUrlVars; dispid 285;
    property AuthToken: WideString dispid 286;
    function PostJson3(const url: WideString; const contentType: WideString; 
                       const json: IChilkatJsonObject): IChilkatHttpResponse; dispid 287;
    function PostJson3Async(const url: WideString; const contentType: WideString; 
                            const json: IChilkatJsonObject): IChilkatTask; dispid 787;
    property LastStatusText: WideString readonly dispid 288;
    function PBinaryBd(const verb: WideString; const url: WideString; const data: IChilkatBinData; 
                       const contentType: WideString; md5: Integer; gzip: Integer): IChilkatHttpResponse; dispid 289;
    function PBinaryBdAsync(const verb: WideString; const url: WideString; 
                            const data: IChilkatBinData; const contentType: WideString; 
                            md5: Integer; gzip: Integer): IChilkatTask; dispid 789;
    function PTextSb(const verb: WideString; const url: WideString; 
                     const TextData: IChilkatStringBuilder; const charset: WideString; 
                     const contentType: WideString; md5: Integer; gzip: Integer): IChilkatHttpResponse; dispid 290;
    function PTextSbAsync(const verb: WideString; const url: WideString; 
                          const TextData: IChilkatStringBuilder; const charset: WideString; 
                          const contentType: WideString; md5: Integer; gzip: Integer): IChilkatTask; dispid 790;
    function SetPassword(const password: IChilkatSecureString): Integer; dispid 292;
    function SharePointOnlineAuth(const siteUrl: WideString; const username: WideString; 
                                  const password: IChilkatSecureString; 
                                  const extraInfo: IChilkatJsonObject): Integer; dispid 294;
    function SharePointOnlineAuthAsync(const siteUrl: WideString; const username: WideString; 
                                       const password: IChilkatSecureString; 
                                       const extraInfo: IChilkatJsonObject): IChilkatTask; dispid 794;
    function ResumeDownloadBd(const url: WideString; const binData: IChilkatBinData): Integer; dispid 295;
    function ResumeDownloadBdAsync(const url: WideString; const binData: IChilkatBinData): IChilkatTask; dispid 795;
    function CreateTimestampRequest(const hashAlg: WideString; const hashVal: WideString; 
                                    const reqPolicyOid: WideString; addNonce: Integer; 
                                    reqTsaCert: Integer; const timestampToken: IChilkatBinData): Integer; dispid 296;
    function VerifyTimestampReply(const timestampReply: IChilkatBinData; const tsaCert: IChilkatCert): Integer; dispid 297;
    function CreateOcspRequest(const requestDetails: IChilkatJsonObject; 
                               const ocspRequest: IChilkatBinData): Integer; dispid 298;
    function ParseOcspReply(const ocspReply: IChilkatBinData; const replyData: IChilkatJsonObject): Integer; dispid 299;
    function SetSecurePassword(const password: IChilkatSecureString): Integer; dispid 300;
    function S3_UploadBd(const bd: IChilkatBinData; const contentType: WideString; 
                         const bucketPath: WideString; const objectName: WideString): Integer; dispid 301;
    function S3_UploadBdAsync(const bd: IChilkatBinData; const contentType: WideString; 
                              const bucketPath: WideString; const objectName: WideString): IChilkatTask; dispid 801;
    function S3_DownloadBd(const bucketPath: WideString; const objectName: WideString; 
                           const bd: IChilkatBinData): Integer; dispid 302;
    function S3_DownloadBdAsync(const bucketPath: WideString; const objectName: WideString; 
                                const bd: IChilkatBinData): IChilkatTask; dispid 802;
    property UncommonOptions: WideString dispid 303;
    function QuickRequest(const verb: WideString; const url: WideString): IChilkatHttpResponse; dispid 304;
    function QuickRequestAsync(const verb: WideString; const url: WideString): IChilkatTask; dispid 804;
    procedure ClearHeaders; dispid 305;
    function LastJsonData: IChilkatJsonObject; dispid 306;
    function LoadTaskCaller(const task: IChilkatTask): Integer; dispid 307;
    property SniHostname: WideString dispid 308;
    property ProxyDirectTls: Integer dispid 311;
    function S3_GenPresignedUrl(const httpVerb: WideString; useHttps: Integer; 
                                const bucketName: WideString; const path: WideString; 
                                numSecondsValid: Integer; const awsService: WideString): WideString; dispid 312;
    function PFile(const verb: WideString; const url: WideString; const localFilePath: WideString; 
                   const contentType: WideString; md5: Integer; gzip: Integer): IChilkatHttpResponse; dispid 313;
    function PFileAsync(const verb: WideString; const url: WideString; 
                        const localFilePath: WideString; const contentType: WideString; 
                        md5: Integer; gzip: Integer): IChilkatTask; dispid 813;
    procedure SetSslCertRequirement(const reqName: WideString; const reqValue: WideString); dispid 314;
    function OcspCheck(const domain: WideString; port: Integer): Integer; dispid 315;
    function OcspCheckAsync(const domain: WideString; port: Integer): IChilkatTask; dispid 815;
  end;

// *********************************************************************//
// Interface: IChilkatHttpResponse
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {C143C715-0FED-4392-B207-1CA3CDF84C88}
// *********************************************************************//
  IChilkatHttpResponse = interface(IDispatch)
    ['{C143C715-0FED-4392-B207-1CA3CDF84C88}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_LastMethodSuccess: Integer; safecall;
    procedure Set_LastMethodSuccess(pVal: Integer); safecall;
    function Get_LastStringResult: WideString; safecall;
    function Get_LastBinaryResult: OleVariant; safecall;
    function Get_LastStringResultLen: Integer; safecall;
    function Get_Body: OleVariant; safecall;
    function Get_BodyQP: WideString; safecall;
    function Get_BodyStr: WideString; safecall;
    function Get_charset: WideString; safecall;
    function Get_ContentLength: Integer; safecall;
    function Get_Date: TDateTime; safecall;
    function Get_dateStr: WideString; safecall;
    function Get_domain: WideString; safecall;
    function Get_FullMime: WideString; safecall;
    function Get_Header: WideString; safecall;
    function Get_NumCookies: Integer; safecall;
    function Get_NumHeaderFields: Integer; safecall;
    function Get_StatusCode: Integer; safecall;
    function Get_StatusLine: WideString; safecall;
    function GetCookieDomain(index: Integer): WideString; safecall;
    function GetCookieExpires(index: Integer): TDateTime; safecall;
    function GetCookieExpiresStr(index: Integer): WideString; safecall;
    function GetCookieName(index: Integer): WideString; safecall;
    function GetCookiePath(index: Integer): WideString; safecall;
    function GetCookieValue(index: Integer): WideString; safecall;
    function GetHeaderField(const fieldName: WideString): WideString; safecall;
    function GetHeaderFieldAttr(const fieldName: WideString; const attrName: WideString): WideString; safecall;
    function GetHeaderName(index: Integer): WideString; safecall;
    function GetHeaderValue(index: Integer): WideString; safecall;
    function SaveBodyBinary(const path: WideString): Integer; safecall;
    function SaveBodyText(bCrlf: Integer; const path: WideString): Integer; safecall;
    function UrlEncParamValue(const encodedParamString: WideString; const paramName: WideString): WideString; safecall;
    function Get_StatusText: WideString; safecall;
    function Get_FinalRedirectUrl: WideString; safecall;
    function LoadTaskResult(const task: IChilkatTask): Integer; safecall;
    function GetBodySb(const sb: IChilkatStringBuilder): Integer; safecall;
    function GetBodyBd(const binData: IChilkatBinData): Integer; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property LastMethodSuccess: Integer read Get_LastMethodSuccess write Set_LastMethodSuccess;
    property LastStringResult: WideString read Get_LastStringResult;
    property LastBinaryResult: OleVariant read Get_LastBinaryResult;
    property LastStringResultLen: Integer read Get_LastStringResultLen;
    property Body: OleVariant read Get_Body;
    property BodyQP: WideString read Get_BodyQP;
    property BodyStr: WideString read Get_BodyStr;
    property charset: WideString read Get_charset;
    property ContentLength: Integer read Get_ContentLength;
    property Date: TDateTime read Get_Date;
    property dateStr: WideString read Get_dateStr;
    property domain: WideString read Get_domain;
    property FullMime: WideString read Get_FullMime;
    property Header: WideString read Get_Header;
    property NumCookies: Integer read Get_NumCookies;
    property NumHeaderFields: Integer read Get_NumHeaderFields;
    property StatusCode: Integer read Get_StatusCode;
    property StatusLine: WideString read Get_StatusLine;
    property StatusText: WideString read Get_StatusText;
    property FinalRedirectUrl: WideString read Get_FinalRedirectUrl;
  end;

// *********************************************************************//
// DispIntf:  IChilkatHttpResponseDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {C143C715-0FED-4392-B207-1CA3CDF84C88}
// *********************************************************************//
  IChilkatHttpResponseDisp = dispinterface
    ['{C143C715-0FED-4392-B207-1CA3CDF84C88}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property LastMethodSuccess: Integer dispid 9;
    property LastStringResult: WideString readonly dispid 10;
    property LastBinaryResult: OleVariant readonly dispid 11;
    property LastStringResultLen: Integer readonly dispid 12;
    property Body: OleVariant readonly dispid 100;
    property BodyQP: WideString readonly dispid 101;
    property BodyStr: WideString readonly dispid 102;
    property charset: WideString readonly dispid 103;
    property ContentLength: Integer readonly dispid 104;
    property Date: TDateTime readonly dispid 105;
    property dateStr: WideString readonly dispid 106;
    property domain: WideString readonly dispid 107;
    property FullMime: WideString readonly dispid 108;
    property Header: WideString readonly dispid 109;
    property NumCookies: Integer readonly dispid 110;
    property NumHeaderFields: Integer readonly dispid 111;
    property StatusCode: Integer readonly dispid 112;
    property StatusLine: WideString readonly dispid 113;
    function GetCookieDomain(index: Integer): WideString; dispid 114;
    function GetCookieExpires(index: Integer): TDateTime; dispid 115;
    function GetCookieExpiresStr(index: Integer): WideString; dispid 116;
    function GetCookieName(index: Integer): WideString; dispid 117;
    function GetCookiePath(index: Integer): WideString; dispid 118;
    function GetCookieValue(index: Integer): WideString; dispid 119;
    function GetHeaderField(const fieldName: WideString): WideString; dispid 120;
    function GetHeaderFieldAttr(const fieldName: WideString; const attrName: WideString): WideString; dispid 121;
    function GetHeaderName(index: Integer): WideString; dispid 122;
    function GetHeaderValue(index: Integer): WideString; dispid 123;
    function SaveBodyBinary(const path: WideString): Integer; dispid 124;
    function SaveBodyText(bCrlf: Integer; const path: WideString): Integer; dispid 125;
    function UrlEncParamValue(const encodedParamString: WideString; const paramName: WideString): WideString; dispid 126;
    property StatusText: WideString readonly dispid 129;
    property FinalRedirectUrl: WideString readonly dispid 130;
    function LoadTaskResult(const task: IChilkatTask): Integer; dispid 131;
    function GetBodySb(const sb: IChilkatStringBuilder): Integer; dispid 132;
    function GetBodyBd(const binData: IChilkatBinData): Integer; dispid 133;
  end;

// *********************************************************************//
// Interface: IChilkatHttpRequest
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {495F8CD2-9F03-4A83-A9BC-FEEAE2182D9B}
// *********************************************************************//
  IChilkatHttpRequest = interface(IDispatch)
    ['{495F8CD2-9F03-4A83-A9BC-FEEAE2182D9B}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_LastMethodSuccess: Integer; safecall;
    procedure Set_LastMethodSuccess(pVal: Integer); safecall;
    function Get_LastStringResult: WideString; safecall;
    function Get_LastBinaryResult: OleVariant; safecall;
    function Get_LastStringResultLen: Integer; safecall;
    function Get_charset: WideString; safecall;
    procedure Set_charset(const pVal: WideString); safecall;
    function Get_contentType: WideString; safecall;
    procedure Set_contentType(const pVal: WideString); safecall;
    function Get_EntireHeader: WideString; safecall;
    procedure Set_EntireHeader(const pVal: WideString); safecall;
    function Get_httpVerb: WideString; safecall;
    procedure Set_httpVerb(const pVal: WideString); safecall;
    function Get_HttpVersion: WideString; safecall;
    procedure Set_HttpVersion(const pVal: WideString); safecall;
    function Get_NumHeaderFields: Integer; safecall;
    function Get_NumParams: Integer; safecall;
    function Get_path: WideString; safecall;
    procedure Set_path(const pVal: WideString); safecall;
    function Get_SendCharset: Integer; safecall;
    procedure Set_SendCharset(pVal: Integer); safecall;
    function AddBytesForUpload(const name: WideString; const remoteFileName: WideString; 
                               byteData: OleVariant): Integer; safecall;
    function AddBytesForUpload2(const name: WideString; const remoteFileName: WideString; 
                                byteData: OleVariant; const contentType: WideString): Integer; safecall;
    function AddFileForUpload(const name: WideString; const filePath: WideString): Integer; safecall;
    function AddFileForUpload2(const name: WideString; const filePath: WideString; 
                               const contentType: WideString): Integer; safecall;
    procedure AddHeader(const name: WideString; const value: WideString); safecall;
    procedure AddParam(const name: WideString; const value: WideString); safecall;
    function AddStringForUpload(const name: WideString; const filename: WideString; 
                                const strData: WideString; const charset: WideString): Integer; safecall;
    function AddStringForUpload2(const name: WideString; const filename: WideString; 
                                 const strData: WideString; const charset: WideString; 
                                 const contentType: WideString): Integer; safecall;
    function GenerateRequestText: WideString; safecall;
    function GetHeaderField(const name: WideString): WideString; safecall;
    function GetHeaderName(index: Integer): WideString; safecall;
    function GetHeaderValue(index: Integer): WideString; safecall;
    function GetParam(const name: WideString): WideString; safecall;
    function GetParamName(index: Integer): WideString; safecall;
    function GetParamValue(index: Integer): WideString; safecall;
    function GetUrlEncodedParams: WideString; safecall;
    function LoadBodyFromBytes(byteData: OleVariant): Integer; safecall;
    function LoadBodyFromFile(const filePath: WideString): Integer; safecall;
    function LoadBodyFromString(const BodyStr: WideString; const charset: WideString): Integer; safecall;
    procedure RemoveAllParams; safecall;
    function RemoveHeader(const name: WideString): Integer; safecall;
    procedure RemoveParam(const name: WideString); safecall;
    procedure SetFromUrl(const url: WideString); safecall;
    function StreamBodyFromFile(const filePath: WideString): Integer; safecall;
    procedure UseGet; safecall;
    procedure UseHead; safecall;
    procedure UsePost; safecall;
    procedure UsePostMultipartForm; safecall;
    procedure UsePut; safecall;
    procedure UseUpload; safecall;
    procedure UseUploadPut; safecall;
    procedure UseXmlHttp(const xmlBody: WideString); safecall;
    function Get_boundary: WideString; safecall;
    procedure Set_boundary(const pVal: WideString); safecall;
    function StreamChunkFromFile(const path: WideString; const offset: WideString; 
                                 const numBytes: WideString): Integer; safecall;
    function AddSubHeader(index: Integer; const name: WideString; const value: WideString): Integer; safecall;
    function GenerateRequestFile(const path: WideString): Integer; safecall;
    function AddMwsSignature(const domain: WideString; const mwsSecretKey: WideString): Integer; safecall;
    function LoadBodyFromBd(const requestBody: IChilkatBinData): Integer; safecall;
    function LoadBodyFromSb(const requestBody: IChilkatStringBuilder; const charset: WideString): Integer; safecall;
    function AddBdForUpload(const name: WideString; const remoteFileName: WideString; 
                            const byteData: IChilkatBinData; const contentType: WideString): Integer; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property LastMethodSuccess: Integer read Get_LastMethodSuccess write Set_LastMethodSuccess;
    property LastStringResult: WideString read Get_LastStringResult;
    property LastBinaryResult: OleVariant read Get_LastBinaryResult;
    property LastStringResultLen: Integer read Get_LastStringResultLen;
    property charset: WideString read Get_charset write Set_charset;
    property contentType: WideString read Get_contentType write Set_contentType;
    property EntireHeader: WideString read Get_EntireHeader write Set_EntireHeader;
    property httpVerb: WideString read Get_httpVerb write Set_httpVerb;
    property HttpVersion: WideString read Get_HttpVersion write Set_HttpVersion;
    property NumHeaderFields: Integer read Get_NumHeaderFields;
    property NumParams: Integer read Get_NumParams;
    property path: WideString read Get_path write Set_path;
    property SendCharset: Integer read Get_SendCharset write Set_SendCharset;
    property boundary: WideString read Get_boundary write Set_boundary;
  end;

// *********************************************************************//
// DispIntf:  IChilkatHttpRequestDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {495F8CD2-9F03-4A83-A9BC-FEEAE2182D9B}
// *********************************************************************//
  IChilkatHttpRequestDisp = dispinterface
    ['{495F8CD2-9F03-4A83-A9BC-FEEAE2182D9B}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property LastMethodSuccess: Integer dispid 9;
    property LastStringResult: WideString readonly dispid 10;
    property LastBinaryResult: OleVariant readonly dispid 11;
    property LastStringResultLen: Integer readonly dispid 12;
    property charset: WideString dispid 100;
    property contentType: WideString dispid 101;
    property EntireHeader: WideString dispid 102;
    property httpVerb: WideString dispid 103;
    property HttpVersion: WideString dispid 104;
    property NumHeaderFields: Integer readonly dispid 105;
    property NumParams: Integer readonly dispid 106;
    property path: WideString dispid 107;
    property SendCharset: Integer dispid 108;
    function AddBytesForUpload(const name: WideString; const remoteFileName: WideString; 
                               byteData: OleVariant): Integer; dispid 109;
    function AddBytesForUpload2(const name: WideString; const remoteFileName: WideString; 
                                byteData: OleVariant; const contentType: WideString): Integer; dispid 110;
    function AddFileForUpload(const name: WideString; const filePath: WideString): Integer; dispid 111;
    function AddFileForUpload2(const name: WideString; const filePath: WideString; 
                               const contentType: WideString): Integer; dispid 112;
    procedure AddHeader(const name: WideString; const value: WideString); dispid 113;
    procedure AddParam(const name: WideString; const value: WideString); dispid 114;
    function AddStringForUpload(const name: WideString; const filename: WideString; 
                                const strData: WideString; const charset: WideString): Integer; dispid 115;
    function AddStringForUpload2(const name: WideString; const filename: WideString; 
                                 const strData: WideString; const charset: WideString; 
                                 const contentType: WideString): Integer; dispid 116;
    function GenerateRequestText: WideString; dispid 117;
    function GetHeaderField(const name: WideString): WideString; dispid 118;
    function GetHeaderName(index: Integer): WideString; dispid 119;
    function GetHeaderValue(index: Integer): WideString; dispid 120;
    function GetParam(const name: WideString): WideString; dispid 121;
    function GetParamName(index: Integer): WideString; dispid 122;
    function GetParamValue(index: Integer): WideString; dispid 123;
    function GetUrlEncodedParams: WideString; dispid 124;
    function LoadBodyFromBytes(byteData: OleVariant): Integer; dispid 125;
    function LoadBodyFromFile(const filePath: WideString): Integer; dispid 126;
    function LoadBodyFromString(const BodyStr: WideString; const charset: WideString): Integer; dispid 127;
    procedure RemoveAllParams; dispid 128;
    function RemoveHeader(const name: WideString): Integer; dispid 129;
    procedure RemoveParam(const name: WideString); dispid 130;
    procedure SetFromUrl(const url: WideString); dispid 131;
    function StreamBodyFromFile(const filePath: WideString): Integer; dispid 132;
    procedure UseGet; dispid 133;
    procedure UseHead; dispid 134;
    procedure UsePost; dispid 135;
    procedure UsePostMultipartForm; dispid 136;
    procedure UsePut; dispid 137;
    procedure UseUpload; dispid 138;
    procedure UseUploadPut; dispid 139;
    procedure UseXmlHttp(const xmlBody: WideString); dispid 140;
    property boundary: WideString dispid 142;
    function StreamChunkFromFile(const path: WideString; const offset: WideString; 
                                 const numBytes: WideString): Integer; dispid 143;
    function AddSubHeader(index: Integer; const name: WideString; const value: WideString): Integer; dispid 144;
    function GenerateRequestFile(const path: WideString): Integer; dispid 145;
    function AddMwsSignature(const domain: WideString; const mwsSecretKey: WideString): Integer; dispid 146;
    function LoadBodyFromBd(const requestBody: IChilkatBinData): Integer; dispid 147;
    function LoadBodyFromSb(const requestBody: IChilkatStringBuilder; const charset: WideString): Integer; dispid 148;
    function AddBdForUpload(const name: WideString; const remoteFileName: WideString; 
                            const byteData: IChilkatBinData; const contentType: WideString): Integer; dispid 149;
  end;

// *********************************************************************//
// Interface: IChilkatCsr
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {1129D7E0-450F-40E6-875F-5CA923E84CA2}
// *********************************************************************//
  IChilkatCsr = interface(IDispatch)
    ['{1129D7E0-450F-40E6-875F-5CA923E84CA2}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_LastMethodSuccess: Integer; safecall;
    procedure Set_LastMethodSuccess(pVal: Integer); safecall;
    function Get_LastStringResult: WideString; safecall;
    function Get_LastBinaryResult: OleVariant; safecall;
    function Get_LastStringResultLen: Integer; safecall;
    function Get_CommonName: WideString; safecall;
    procedure Set_CommonName(const pVal: WideString); safecall;
    function Get_Country: WideString; safecall;
    procedure Set_Country(const pVal: WideString); safecall;
    function Get_State: WideString; safecall;
    procedure Set_State(const pVal: WideString); safecall;
    function Get_Locality: WideString; safecall;
    procedure Set_Locality(const pVal: WideString); safecall;
    function Get_Company: WideString; safecall;
    procedure Set_Company(const pVal: WideString); safecall;
    function Get_CompanyDivision: WideString; safecall;
    procedure Set_CompanyDivision(const pVal: WideString); safecall;
    function Get_emailAddress: WideString; safecall;
    procedure Set_emailAddress(const pVal: WideString); safecall;
    function GenCsrPem(const privKey: IPrivateKey): WideString; safecall;
    function GenCsrBd(const privKey: IPrivateKey; const csrData: IChilkatBinData): Integer; safecall;
    function SetSubjectField(const oid: WideString; const value: WideString; 
                             const asnType: WideString): Integer; safecall;
    function LoadCsrPem(const csrPemStr: WideString): Integer; safecall;
    function GetSubjectField(const oid: WideString): WideString; safecall;
    function GetPublicKey(const pubKey: IPublicKey): Integer; safecall;
    function Get_HashAlgorithm: WideString; safecall;
    procedure Set_HashAlgorithm(const pVal: WideString); safecall;
    function VerifyCsr: Integer; safecall;
    function Get_PssPadding: Integer; safecall;
    procedure Set_PssPadding(pVal: Integer); safecall;
    function Get_MgfHashAlg: WideString; safecall;
    procedure Set_MgfHashAlg(const pVal: WideString); safecall;
    function AddSan(const sanType: WideString; const sanValue: WideString): Integer; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property LastMethodSuccess: Integer read Get_LastMethodSuccess write Set_LastMethodSuccess;
    property LastStringResult: WideString read Get_LastStringResult;
    property LastBinaryResult: OleVariant read Get_LastBinaryResult;
    property LastStringResultLen: Integer read Get_LastStringResultLen;
    property CommonName: WideString read Get_CommonName write Set_CommonName;
    property Country: WideString read Get_Country write Set_Country;
    property State: WideString read Get_State write Set_State;
    property Locality: WideString read Get_Locality write Set_Locality;
    property Company: WideString read Get_Company write Set_Company;
    property CompanyDivision: WideString read Get_CompanyDivision write Set_CompanyDivision;
    property emailAddress: WideString read Get_emailAddress write Set_emailAddress;
    property HashAlgorithm: WideString read Get_HashAlgorithm write Set_HashAlgorithm;
    property PssPadding: Integer read Get_PssPadding write Set_PssPadding;
    property MgfHashAlg: WideString read Get_MgfHashAlg write Set_MgfHashAlg;
  end;

// *********************************************************************//
// DispIntf:  IChilkatCsrDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {1129D7E0-450F-40E6-875F-5CA923E84CA2}
// *********************************************************************//
  IChilkatCsrDisp = dispinterface
    ['{1129D7E0-450F-40E6-875F-5CA923E84CA2}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property LastMethodSuccess: Integer dispid 9;
    property LastStringResult: WideString readonly dispid 10;
    property LastBinaryResult: OleVariant readonly dispid 11;
    property LastStringResultLen: Integer readonly dispid 12;
    property CommonName: WideString dispid 100;
    property Country: WideString dispid 101;
    property State: WideString dispid 102;
    property Locality: WideString dispid 103;
    property Company: WideString dispid 104;
    property CompanyDivision: WideString dispid 105;
    property emailAddress: WideString dispid 106;
    function GenCsrPem(const privKey: IPrivateKey): WideString; dispid 107;
    function GenCsrBd(const privKey: IPrivateKey; const csrData: IChilkatBinData): Integer; dispid 108;
    function SetSubjectField(const oid: WideString; const value: WideString; 
                             const asnType: WideString): Integer; dispid 109;
    function LoadCsrPem(const csrPemStr: WideString): Integer; dispid 110;
    function GetSubjectField(const oid: WideString): WideString; dispid 111;
    function GetPublicKey(const pubKey: IPublicKey): Integer; dispid 112;
    property HashAlgorithm: WideString dispid 113;
    function VerifyCsr: Integer; dispid 114;
    property PssPadding: Integer dispid 115;
    property MgfHashAlg: WideString dispid 117;
    function AddSan(const sanType: WideString; const sanValue: WideString): Integer; dispid 118;
  end;

// *********************************************************************//
// Interface: IChilkatCsv
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3B8C1209-EEFB-408B-8FA3-A59EE8034072}
// *********************************************************************//
  IChilkatCsv = interface(IDispatch)
    ['{3B8C1209-EEFB-408B-8FA3-A59EE8034072}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_LastMethodSuccess: Integer; safecall;
    procedure Set_LastMethodSuccess(pVal: Integer); safecall;
    function Get_LastStringResult: WideString; safecall;
    function Get_LastBinaryResult: OleVariant; safecall;
    function Get_LastStringResultLen: Integer; safecall;
    function Get_crlf: Integer; safecall;
    procedure Set_crlf(pVal: Integer); safecall;
    function Get_Delimiter: WideString; safecall;
    procedure Set_Delimiter(const pVal: WideString); safecall;
    function Get_HasColumnNames: Integer; safecall;
    procedure Set_HasColumnNames(pVal: Integer); safecall;
    function Get_NumColumns: Integer; safecall;
    function Get_NumRows: Integer; safecall;
    function Get_AutoTrim: Integer; safecall;
    procedure Set_AutoTrim(pVal: Integer); safecall;
    function DeleteColumn(index: Integer): Integer; safecall;
    function DeleteColumnByName(const columnName: WideString): Integer; safecall;
    function DeleteRow(index: Integer): Integer; safecall;
    function GetCell(row: Integer; col: Integer): WideString; safecall;
    function GetCellByName(rowIndex: Integer; const columnName: WideString): WideString; safecall;
    function GetColumnName(index: Integer): WideString; safecall;
    function GetIndex(const columnName: WideString): Integer; safecall;
    function GetNumCols(row: Integer): Integer; safecall;
    function LoadFile(const path: WideString): Integer; safecall;
    function LoadFile2(const filename: WideString; const charset: WideString): Integer; safecall;
    function LoadFromString(const csvData: WideString): Integer; safecall;
    function RowMatches(rowIndex: Integer; const matchPattern: WideString; caseSensitive: Integer): Integer; safecall;
    function SaveFile(const path: WideString): Integer; safecall;
    function SaveFile2(const filename: WideString; const charset: WideString): Integer; safecall;
    function SaveToString: WideString; safecall;
    function SetCell(row: Integer; col: Integer; const content: WideString): Integer; safecall;
    function SetCellByName(rowIndex: Integer; const columnName: WideString; 
                           const ContentStr: WideString): Integer; safecall;
    function SetColumnName(index: Integer; const columnName: WideString): Integer; safecall;
    function SortByColumn(const columnName: WideString; ascending: Integer; caseSensitive: Integer): Integer; safecall;
    function Get_EscapeBackslash: Integer; safecall;
    procedure Set_EscapeBackslash(pVal: Integer); safecall;
    function Get_EnableQuotes: Integer; safecall;
    procedure Set_EnableQuotes(pVal: Integer); safecall;
    function SortByColumnIndex(index: Integer; ascending: Integer; caseSensitive: Integer): Integer; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property LastMethodSuccess: Integer read Get_LastMethodSuccess write Set_LastMethodSuccess;
    property LastStringResult: WideString read Get_LastStringResult;
    property LastBinaryResult: OleVariant read Get_LastBinaryResult;
    property LastStringResultLen: Integer read Get_LastStringResultLen;
    property crlf: Integer read Get_crlf write Set_crlf;
    property Delimiter: WideString read Get_Delimiter write Set_Delimiter;
    property HasColumnNames: Integer read Get_HasColumnNames write Set_HasColumnNames;
    property NumColumns: Integer read Get_NumColumns;
    property NumRows: Integer read Get_NumRows;
    property AutoTrim: Integer read Get_AutoTrim write Set_AutoTrim;
    property EscapeBackslash: Integer read Get_EscapeBackslash write Set_EscapeBackslash;
    property EnableQuotes: Integer read Get_EnableQuotes write Set_EnableQuotes;
  end;

// *********************************************************************//
// DispIntf:  IChilkatCsvDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3B8C1209-EEFB-408B-8FA3-A59EE8034072}
// *********************************************************************//
  IChilkatCsvDisp = dispinterface
    ['{3B8C1209-EEFB-408B-8FA3-A59EE8034072}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property LastMethodSuccess: Integer dispid 9;
    property LastStringResult: WideString readonly dispid 10;
    property LastBinaryResult: OleVariant readonly dispid 11;
    property LastStringResultLen: Integer readonly dispid 12;
    property crlf: Integer dispid 100;
    property Delimiter: WideString dispid 101;
    property HasColumnNames: Integer dispid 102;
    property NumColumns: Integer readonly dispid 103;
    property NumRows: Integer readonly dispid 104;
    property AutoTrim: Integer dispid 105;
    function DeleteColumn(index: Integer): Integer; dispid 106;
    function DeleteColumnByName(const columnName: WideString): Integer; dispid 107;
    function DeleteRow(index: Integer): Integer; dispid 108;
    function GetCell(row: Integer; col: Integer): WideString; dispid 109;
    function GetCellByName(rowIndex: Integer; const columnName: WideString): WideString; dispid 110;
    function GetColumnName(index: Integer): WideString; dispid 111;
    function GetIndex(const columnName: WideString): Integer; dispid 112;
    function GetNumCols(row: Integer): Integer; dispid 113;
    function LoadFile(const path: WideString): Integer; dispid 114;
    function LoadFile2(const filename: WideString; const charset: WideString): Integer; dispid 115;
    function LoadFromString(const csvData: WideString): Integer; dispid 116;
    function RowMatches(rowIndex: Integer; const matchPattern: WideString; caseSensitive: Integer): Integer; dispid 117;
    function SaveFile(const path: WideString): Integer; dispid 118;
    function SaveFile2(const filename: WideString; const charset: WideString): Integer; dispid 119;
    function SaveToString: WideString; dispid 120;
    function SetCell(row: Integer; col: Integer; const content: WideString): Integer; dispid 121;
    function SetCellByName(rowIndex: Integer; const columnName: WideString; 
                           const ContentStr: WideString): Integer; dispid 122;
    function SetColumnName(index: Integer; const columnName: WideString): Integer; dispid 123;
    function SortByColumn(const columnName: WideString; ascending: Integer; caseSensitive: Integer): Integer; dispid 124;
    property EscapeBackslash: Integer dispid 125;
    property EnableQuotes: Integer dispid 126;
    function SortByColumnIndex(index: Integer; ascending: Integer; caseSensitive: Integer): Integer; dispid 127;
  end;

// *********************************************************************//
// Interface: IChilkatDh
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9EDDA6C9-A95E-4CE6-B4A3-6C4FE24B08C9}
// *********************************************************************//
  IChilkatDh = interface(IDispatch)
    ['{9EDDA6C9-A95E-4CE6-B4A3-6C4FE24B08C9}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_LastMethodSuccess: Integer; safecall;
    procedure Set_LastMethodSuccess(pVal: Integer); safecall;
    function Get_LastStringResult: WideString; safecall;
    function Get_LastBinaryResult: OleVariant; safecall;
    function Get_LastStringResultLen: Integer; safecall;
    function Get_P: WideString; safecall;
    function Get_G: Integer; safecall;
    function FindK(const E: WideString): WideString; safecall;
    function GenPG(numBits: Integer; G: Integer): Integer; safecall;
    function SetPG(const P: WideString; G: Integer): Integer; safecall;
    function UnlockComponent(const unlockCode: WideString): Integer; safecall;
    procedure UseKnownPrime(index: Integer); safecall;
    function CreateE(numBits: Integer): WideString; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property LastMethodSuccess: Integer read Get_LastMethodSuccess write Set_LastMethodSuccess;
    property LastStringResult: WideString read Get_LastStringResult;
    property LastBinaryResult: OleVariant read Get_LastBinaryResult;
    property LastStringResultLen: Integer read Get_LastStringResultLen;
    property P: WideString read Get_P;
    property G: Integer read Get_G;
  end;

// *********************************************************************//
// DispIntf:  IChilkatDhDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9EDDA6C9-A95E-4CE6-B4A3-6C4FE24B08C9}
// *********************************************************************//
  IChilkatDhDisp = dispinterface
    ['{9EDDA6C9-A95E-4CE6-B4A3-6C4FE24B08C9}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property LastMethodSuccess: Integer dispid 9;
    property LastStringResult: WideString readonly dispid 10;
    property LastBinaryResult: OleVariant readonly dispid 11;
    property LastStringResultLen: Integer readonly dispid 12;
    property P: WideString readonly dispid 100;
    property G: Integer readonly dispid 101;
    function FindK(const E: WideString): WideString; dispid 102;
    function GenPG(numBits: Integer; G: Integer): Integer; dispid 103;
    function SetPG(const P: WideString; G: Integer): Integer; dispid 104;
    function UnlockComponent(const unlockCode: WideString): Integer; dispid 105;
    procedure UseKnownPrime(index: Integer); dispid 106;
    function CreateE(numBits: Integer): WideString; dispid 107;
  end;

// *********************************************************************//
// Interface: ICkDirTree
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {C8B4F6DF-1E35-43B9-913C-B235F91B6D4D}
// *********************************************************************//
  ICkDirTree = interface(IDispatch)
    ['{C8B4F6DF-1E35-43B9-913C-B235F91B6D4D}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_LastMethodSuccess: Integer; safecall;
    procedure Set_LastMethodSuccess(pVal: Integer); safecall;
    function Get_LastStringResult: WideString; safecall;
    function Get_LastBinaryResult: OleVariant; safecall;
    function Get_LastStringResultLen: Integer; safecall;
    function Get_BaseDir: WideString; safecall;
    procedure Set_BaseDir(const pVal: WideString); safecall;
    function Get_DoneIterating: Integer; safecall;
    function Get_FileSize32: Integer; safecall;
    function Get_FullPath: WideString; safecall;
    function Get_FullUncPath: WideString; safecall;
    function Get_isDirectory: Integer; safecall;
    function Get_Recurse: Integer; safecall;
    procedure Set_Recurse(pVal: Integer); safecall;
    function Get_RelativePath: WideString; safecall;
    function BeginIterate: Integer; safecall;
    function AdvancePosition: Integer; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property LastMethodSuccess: Integer read Get_LastMethodSuccess write Set_LastMethodSuccess;
    property LastStringResult: WideString read Get_LastStringResult;
    property LastBinaryResult: OleVariant read Get_LastBinaryResult;
    property LastStringResultLen: Integer read Get_LastStringResultLen;
    property BaseDir: WideString read Get_BaseDir write Set_BaseDir;
    property DoneIterating: Integer read Get_DoneIterating;
    property FileSize32: Integer read Get_FileSize32;
    property FullPath: WideString read Get_FullPath;
    property FullUncPath: WideString read Get_FullUncPath;
    property isDirectory: Integer read Get_isDirectory;
    property Recurse: Integer read Get_Recurse write Set_Recurse;
    property RelativePath: WideString read Get_RelativePath;
  end;

// *********************************************************************//
// DispIntf:  ICkDirTreeDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {C8B4F6DF-1E35-43B9-913C-B235F91B6D4D}
// *********************************************************************//
  ICkDirTreeDisp = dispinterface
    ['{C8B4F6DF-1E35-43B9-913C-B235F91B6D4D}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property LastMethodSuccess: Integer dispid 9;
    property LastStringResult: WideString readonly dispid 10;
    property LastBinaryResult: OleVariant readonly dispid 11;
    property LastStringResultLen: Integer readonly dispid 12;
    property BaseDir: WideString dispid 100;
    property DoneIterating: Integer readonly dispid 101;
    property FileSize32: Integer readonly dispid 102;
    property FullPath: WideString readonly dispid 103;
    property FullUncPath: WideString readonly dispid 104;
    property isDirectory: Integer readonly dispid 105;
    property Recurse: Integer dispid 106;
    property RelativePath: WideString readonly dispid 107;
    function BeginIterate: Integer; dispid 108;
    function AdvancePosition: Integer; dispid 109;
  end;

// *********************************************************************//
// Interface: IChilkatDkim
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2D924A0F-A828-4482-A1DB-DD80E2FF35EF}
// *********************************************************************//
  IChilkatDkim = interface(IDispatch)
    ['{2D924A0F-A828-4482-A1DB-DD80E2FF35EF}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_LastMethodSuccess: Integer; safecall;
    procedure Set_LastMethodSuccess(pVal: Integer); safecall;
    function Get_LastStringResult: WideString; safecall;
    function Get_LastBinaryResult: OleVariant; safecall;
    function Get_LastStringResultLen: Integer; safecall;
    function Get_DkimAlg: WideString; safecall;
    procedure Set_DkimAlg(const pVal: WideString); safecall;
    function Get_DkimBodyLengthCount: Integer; safecall;
    procedure Set_DkimBodyLengthCount(pVal: Integer); safecall;
    function Get_DkimCanon: WideString; safecall;
    procedure Set_DkimCanon(const pVal: WideString); safecall;
    function Get_DkimDomain: WideString; safecall;
    procedure Set_DkimDomain(const pVal: WideString); safecall;
    function Get_DkimHeaders: WideString; safecall;
    procedure Set_DkimHeaders(const pVal: WideString); safecall;
    function Get_DkimSelector: WideString; safecall;
    procedure Set_DkimSelector(const pVal: WideString); safecall;
    function Get_DomainKeyAlg: WideString; safecall;
    procedure Set_DomainKeyAlg(const pVal: WideString); safecall;
    function Get_DomainKeyCanon: WideString; safecall;
    procedure Set_DomainKeyCanon(const pVal: WideString); safecall;
    function Get_DomainKeyDomain: WideString; safecall;
    procedure Set_DomainKeyDomain(const pVal: WideString); safecall;
    function Get_DomainKeyHeaders: WideString; safecall;
    procedure Set_DomainKeyHeaders(const pVal: WideString); safecall;
    function Get_DomainKeySelector: WideString; safecall;
    procedure Set_DomainKeySelector(const pVal: WideString); safecall;
    function Get_HeartbeatMs: Integer; safecall;
    procedure Set_HeartbeatMs(pVal: Integer); safecall;
    function AddDkimSignature(mimeIn: OleVariant): OleVariant; safecall;
    function AddDomainKeySignature(mimeIn: OleVariant): OleVariant; safecall;
    function LoadDkimPk(const privateKey: WideString; const optionalPassword: WideString): Integer; safecall;
    function LoadDkimPkBytes(privateKeyDer: OleVariant; const optionalPassword: WideString): Integer; safecall;
    function LoadDkimPkFile(const privateKeyFilePath: WideString; const optionalPassword: WideString): Integer; safecall;
    function LoadDomainKeyPk(const privateKey: WideString; const optionalPassword: WideString): Integer; safecall;
    function LoadDomainKeyPkBytes(privateKeyDer: OleVariant; const optionalPassword: WideString): Integer; safecall;
    function LoadDomainKeyPkFile(const privateKeyFilePath: WideString; 
                                 const optionalPassword: WideString): Integer; safecall;
    function LoadPublicKey(const selector: WideString; const domain: WideString; 
                           const publicKey: WideString): Integer; safecall;
    function LoadPublicKeyFile(const selector: WideString; const domain: WideString; 
                               const publicKeyFilepath: WideString): Integer; safecall;
    function NumDkimSignatures(mimeData: OleVariant): Integer; safecall;
    function NumDomainKeySignatures(mimeData: OleVariant): Integer; safecall;
    function PrefetchPublicKey(const selector: WideString; const domain: WideString): Integer; safecall;
    function PrefetchPublicKeyAsync(const selector: WideString; const domain: WideString): IChilkatTask; safecall;
    function UnlockComponent(const unlockCode: WideString): Integer; safecall;
    function VerifyDkimSignature(sigIndex: Integer; mimeData: OleVariant): Integer; safecall;
    function VerifyDkimSignatureAsync(sigIndex: Integer; mimeData: OleVariant): IChilkatTask; safecall;
    function VerifyDomainKeySignature(sigIndex: Integer; mimeData: OleVariant): Integer; safecall;
    function VerifyDomainKeySignatureAsync(sigIndex: Integer; mimeData: OleVariant): IChilkatTask; safecall;
    function Get_AbortCurrent: Integer; safecall;
    procedure Set_AbortCurrent(pVal: Integer); safecall;
    function DkimSign(const mimeData: IChilkatBinData): Integer; safecall;
    function SetDkimPrivateKey(const privateKey: IPrivateKey): Integer; safecall;
    function SetDomainKeyPrivateKey(const privateKey: IPrivateKey): Integer; safecall;
    function DomainKeySign(const mimeData: IChilkatBinData): Integer; safecall;
    function DkimVerify(sigIndex: Integer; const mimeData: IChilkatBinData): Integer; safecall;
    function DomainKeyVerify(sigIndex: Integer; const mimeData: IChilkatBinData): Integer; safecall;
    function NumDkimSigs(const mimeData: IChilkatBinData): Integer; safecall;
    function NumDomainKeySigs(const mimeData: IChilkatBinData): Integer; safecall;
    function Get_VerifyInfo: WideString; safecall;
    function LoadTaskCaller(const task: IChilkatTask): Integer; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property LastMethodSuccess: Integer read Get_LastMethodSuccess write Set_LastMethodSuccess;
    property LastStringResult: WideString read Get_LastStringResult;
    property LastBinaryResult: OleVariant read Get_LastBinaryResult;
    property LastStringResultLen: Integer read Get_LastStringResultLen;
    property DkimAlg: WideString read Get_DkimAlg write Set_DkimAlg;
    property DkimBodyLengthCount: Integer read Get_DkimBodyLengthCount write Set_DkimBodyLengthCount;
    property DkimCanon: WideString read Get_DkimCanon write Set_DkimCanon;
    property DkimDomain: WideString read Get_DkimDomain write Set_DkimDomain;
    property DkimHeaders: WideString read Get_DkimHeaders write Set_DkimHeaders;
    property DkimSelector: WideString read Get_DkimSelector write Set_DkimSelector;
    property DomainKeyAlg: WideString read Get_DomainKeyAlg write Set_DomainKeyAlg;
    property DomainKeyCanon: WideString read Get_DomainKeyCanon write Set_DomainKeyCanon;
    property DomainKeyDomain: WideString read Get_DomainKeyDomain write Set_DomainKeyDomain;
    property DomainKeyHeaders: WideString read Get_DomainKeyHeaders write Set_DomainKeyHeaders;
    property DomainKeySelector: WideString read Get_DomainKeySelector write Set_DomainKeySelector;
    property HeartbeatMs: Integer read Get_HeartbeatMs write Set_HeartbeatMs;
    property AbortCurrent: Integer read Get_AbortCurrent write Set_AbortCurrent;
    property VerifyInfo: WideString read Get_VerifyInfo;
  end;

// *********************************************************************//
// DispIntf:  IChilkatDkimDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2D924A0F-A828-4482-A1DB-DD80E2FF35EF}
// *********************************************************************//
  IChilkatDkimDisp = dispinterface
    ['{2D924A0F-A828-4482-A1DB-DD80E2FF35EF}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property LastMethodSuccess: Integer dispid 9;
    property LastStringResult: WideString readonly dispid 10;
    property LastBinaryResult: OleVariant readonly dispid 11;
    property LastStringResultLen: Integer readonly dispid 12;
    property DkimAlg: WideString dispid 100;
    property DkimBodyLengthCount: Integer dispid 101;
    property DkimCanon: WideString dispid 102;
    property DkimDomain: WideString dispid 103;
    property DkimHeaders: WideString dispid 104;
    property DkimSelector: WideString dispid 105;
    property DomainKeyAlg: WideString dispid 106;
    property DomainKeyCanon: WideString dispid 107;
    property DomainKeyDomain: WideString dispid 108;
    property DomainKeyHeaders: WideString dispid 109;
    property DomainKeySelector: WideString dispid 110;
    property HeartbeatMs: Integer dispid 111;
    function AddDkimSignature(mimeIn: OleVariant): OleVariant; dispid 112;
    function AddDomainKeySignature(mimeIn: OleVariant): OleVariant; dispid 113;
    function LoadDkimPk(const privateKey: WideString; const optionalPassword: WideString): Integer; dispid 114;
    function LoadDkimPkBytes(privateKeyDer: OleVariant; const optionalPassword: WideString): Integer; dispid 115;
    function LoadDkimPkFile(const privateKeyFilePath: WideString; const optionalPassword: WideString): Integer; dispid 116;
    function LoadDomainKeyPk(const privateKey: WideString; const optionalPassword: WideString): Integer; dispid 117;
    function LoadDomainKeyPkBytes(privateKeyDer: OleVariant; const optionalPassword: WideString): Integer; dispid 118;
    function LoadDomainKeyPkFile(const privateKeyFilePath: WideString; 
                                 const optionalPassword: WideString): Integer; dispid 119;
    function LoadPublicKey(const selector: WideString; const domain: WideString; 
                           const publicKey: WideString): Integer; dispid 120;
    function LoadPublicKeyFile(const selector: WideString; const domain: WideString; 
                               const publicKeyFilepath: WideString): Integer; dispid 121;
    function NumDkimSignatures(mimeData: OleVariant): Integer; dispid 122;
    function NumDomainKeySignatures(mimeData: OleVariant): Integer; dispid 123;
    function PrefetchPublicKey(const selector: WideString; const domain: WideString): Integer; dispid 124;
    function PrefetchPublicKeyAsync(const selector: WideString; const domain: WideString): IChilkatTask; dispid 624;
    function UnlockComponent(const unlockCode: WideString): Integer; dispid 125;
    function VerifyDkimSignature(sigIndex: Integer; mimeData: OleVariant): Integer; dispid 126;
    function VerifyDkimSignatureAsync(sigIndex: Integer; mimeData: OleVariant): IChilkatTask; dispid 626;
    function VerifyDomainKeySignature(sigIndex: Integer; mimeData: OleVariant): Integer; dispid 127;
    function VerifyDomainKeySignatureAsync(sigIndex: Integer; mimeData: OleVariant): IChilkatTask; dispid 627;
    property AbortCurrent: Integer dispid 128;
    function DkimSign(const mimeData: IChilkatBinData): Integer; dispid 129;
    function SetDkimPrivateKey(const privateKey: IPrivateKey): Integer; dispid 130;
    function SetDomainKeyPrivateKey(const privateKey: IPrivateKey): Integer; dispid 131;
    function DomainKeySign(const mimeData: IChilkatBinData): Integer; dispid 132;
    function DkimVerify(sigIndex: Integer; const mimeData: IChilkatBinData): Integer; dispid 133;
    function DomainKeyVerify(sigIndex: Integer; const mimeData: IChilkatBinData): Integer; dispid 134;
    function NumDkimSigs(const mimeData: IChilkatBinData): Integer; dispid 135;
    function NumDomainKeySigs(const mimeData: IChilkatBinData): Integer; dispid 136;
    property VerifyInfo: WideString readonly dispid 137;
    function LoadTaskCaller(const task: IChilkatTask): Integer; dispid 138;
  end;

// *********************************************************************//
// Interface: IChilkatDsa
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {D39623DD-417F-4651-8E8B-3BAE5A8F4D4D}
// *********************************************************************//
  IChilkatDsa = interface(IDispatch)
    ['{D39623DD-417F-4651-8E8B-3BAE5A8F4D4D}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_LastMethodSuccess: Integer; safecall;
    procedure Set_LastMethodSuccess(pVal: Integer); safecall;
    function Get_LastStringResult: WideString; safecall;
    function Get_LastBinaryResult: OleVariant; safecall;
    function Get_LastStringResultLen: Integer; safecall;
    function Get_GroupSize: Integer; safecall;
    procedure Set_GroupSize(pVal: Integer); safecall;
    function Get_Hash: OleVariant; safecall;
    procedure Set_Hash(pVal: OleVariant); safecall;
    function Get_HexG: WideString; safecall;
    function Get_HexP: WideString; safecall;
    function Get_HexQ: WideString; safecall;
    function Get_HexX: WideString; safecall;
    function Get_HexY: WideString; safecall;
    function Get_Signature: OleVariant; safecall;
    procedure Set_Signature(pVal: OleVariant); safecall;
    function FromDer(derData: OleVariant): Integer; safecall;
    function FromDerFile(const path: WideString): Integer; safecall;
    function FromEncryptedPem(const password: WideString; const pemData: WideString): Integer; safecall;
    function FromPem(const pemData: WideString): Integer; safecall;
    function FromPublicDer(derData: OleVariant): Integer; safecall;
    function FromPublicDerFile(const path: WideString): Integer; safecall;
    function FromPublicPem(const pemData: WideString): Integer; safecall;
    function FromXml(const xmlKey: WideString): Integer; safecall;
    function GenKey(numBits: Integer): Integer; safecall;
    function GenKeyFromParamsDer(derBytes: OleVariant): Integer; safecall;
    function GenKeyFromParamsDerFile(const path: WideString): Integer; safecall;
    function GenKeyFromParamsPem(const pem: WideString): Integer; safecall;
    function GenKeyFromParamsPemFile(const path: WideString): Integer; safecall;
    function GetEncodedHash(const encoding: WideString): WideString; safecall;
    function GetEncodedSignature(const encoding: WideString): WideString; safecall;
    function LoadText(const path: WideString): WideString; safecall;
    function SaveText(const strToSave: WideString; const path: WideString): Integer; safecall;
    function SetEncodedHash(const encoding: WideString; const encodedHash: WideString): Integer; safecall;
    function SetEncodedSignature(const encoding: WideString; const encodedSig: WideString): Integer; safecall;
    function SetEncodedSignatureRS(const encoding: WideString; const encodedR: WideString; 
                                   const encodedS: WideString): Integer; safecall;
    function SetKeyExplicit(groupSizeInBytes: Integer; const pHex: WideString; 
                            const qHex: WideString; const gHex: WideString; const xHex: WideString): Integer; safecall;
    function SetPubKeyExplicit(groupSizeInBytes: Integer; const pHex: WideString; 
                               const qHex: WideString; const gHex: WideString; 
                               const yHex: WideString): Integer; safecall;
    function SignHash: Integer; safecall;
    function ToDer: OleVariant; safecall;
    function ToDerFile(const path: WideString): Integer; safecall;
    function ToEncryptedPem(const password: WideString): WideString; safecall;
    function ToPem: WideString; safecall;
    function ToPublicDer: OleVariant; safecall;
    function ToPublicDerFile(const path: WideString): Integer; safecall;
    function ToPublicPem: WideString; safecall;
    function ToXml(bPublicOnly: Integer): WideString; safecall;
    function UnlockComponent(const unlockCode: WideString): Integer; safecall;
    function Verify: Integer; safecall;
    function VerifyKey: Integer; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property LastMethodSuccess: Integer read Get_LastMethodSuccess write Set_LastMethodSuccess;
    property LastStringResult: WideString read Get_LastStringResult;
    property LastBinaryResult: OleVariant read Get_LastBinaryResult;
    property LastStringResultLen: Integer read Get_LastStringResultLen;
    property GroupSize: Integer read Get_GroupSize write Set_GroupSize;
    property Hash: OleVariant read Get_Hash write Set_Hash;
    property HexG: WideString read Get_HexG;
    property HexP: WideString read Get_HexP;
    property HexQ: WideString read Get_HexQ;
    property HexX: WideString read Get_HexX;
    property HexY: WideString read Get_HexY;
    property Signature: OleVariant read Get_Signature write Set_Signature;
  end;

// *********************************************************************//
// DispIntf:  IChilkatDsaDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {D39623DD-417F-4651-8E8B-3BAE5A8F4D4D}
// *********************************************************************//
  IChilkatDsaDisp = dispinterface
    ['{D39623DD-417F-4651-8E8B-3BAE5A8F4D4D}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property LastMethodSuccess: Integer dispid 9;
    property LastStringResult: WideString readonly dispid 10;
    property LastBinaryResult: OleVariant readonly dispid 11;
    property LastStringResultLen: Integer readonly dispid 12;
    property GroupSize: Integer dispid 100;
    property Hash: OleVariant dispid 101;
    property HexG: WideString readonly dispid 102;
    property HexP: WideString readonly dispid 103;
    property HexQ: WideString readonly dispid 104;
    property HexX: WideString readonly dispid 105;
    property HexY: WideString readonly dispid 106;
    property Signature: OleVariant dispid 107;
    function FromDer(derData: OleVariant): Integer; dispid 108;
    function FromDerFile(const path: WideString): Integer; dispid 109;
    function FromEncryptedPem(const password: WideString; const pemData: WideString): Integer; dispid 110;
    function FromPem(const pemData: WideString): Integer; dispid 111;
    function FromPublicDer(derData: OleVariant): Integer; dispid 112;
    function FromPublicDerFile(const path: WideString): Integer; dispid 113;
    function FromPublicPem(const pemData: WideString): Integer; dispid 114;
    function FromXml(const xmlKey: WideString): Integer; dispid 115;
    function GenKey(numBits: Integer): Integer; dispid 116;
    function GenKeyFromParamsDer(derBytes: OleVariant): Integer; dispid 117;
    function GenKeyFromParamsDerFile(const path: WideString): Integer; dispid 118;
    function GenKeyFromParamsPem(const pem: WideString): Integer; dispid 119;
    function GenKeyFromParamsPemFile(const path: WideString): Integer; dispid 120;
    function GetEncodedHash(const encoding: WideString): WideString; dispid 121;
    function GetEncodedSignature(const encoding: WideString): WideString; dispid 122;
    function LoadText(const path: WideString): WideString; dispid 123;
    function SaveText(const strToSave: WideString; const path: WideString): Integer; dispid 124;
    function SetEncodedHash(const encoding: WideString; const encodedHash: WideString): Integer; dispid 125;
    function SetEncodedSignature(const encoding: WideString; const encodedSig: WideString): Integer; dispid 126;
    function SetEncodedSignatureRS(const encoding: WideString; const encodedR: WideString; 
                                   const encodedS: WideString): Integer; dispid 127;
    function SetKeyExplicit(groupSizeInBytes: Integer; const pHex: WideString; 
                            const qHex: WideString; const gHex: WideString; const xHex: WideString): Integer; dispid 128;
    function SetPubKeyExplicit(groupSizeInBytes: Integer; const pHex: WideString; 
                               const qHex: WideString; const gHex: WideString; 
                               const yHex: WideString): Integer; dispid 129;
    function SignHash: Integer; dispid 130;
    function ToDer: OleVariant; dispid 131;
    function ToDerFile(const path: WideString): Integer; dispid 132;
    function ToEncryptedPem(const password: WideString): WideString; dispid 133;
    function ToPem: WideString; dispid 134;
    function ToPublicDer: OleVariant; dispid 135;
    function ToPublicDerFile(const path: WideString): Integer; dispid 136;
    function ToPublicPem: WideString; dispid 137;
    function ToXml(bPublicOnly: Integer): WideString; dispid 138;
    function UnlockComponent(const unlockCode: WideString): Integer; dispid 139;
    function Verify: Integer; dispid 140;
    function VerifyKey: Integer; dispid 141;
  end;

// *********************************************************************//
// Interface: IChilkatEcc
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {A1F4B713-D40B-4B92-BAB8-016AD671ACE8}
// *********************************************************************//
  IChilkatEcc = interface(IDispatch)
    ['{A1F4B713-D40B-4B92-BAB8-016AD671ACE8}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_LastMethodSuccess: Integer; safecall;
    procedure Set_LastMethodSuccess(pVal: Integer); safecall;
    function Get_LastStringResult: WideString; safecall;
    function Get_LastBinaryResult: OleVariant; safecall;
    function Get_LastStringResultLen: Integer; safecall;
    function GenEccKey(const curveName: WideString; const prng: IChilkatPrng): IPrivateKey; safecall;
    function SharedSecretENC(const privKey: IPrivateKey; const pubKey: IPublicKey; 
                             const encoding: WideString): WideString; safecall;
    function VerifyHashENC(const encodedHash: WideString; const encodedSig: WideString; 
                           const encoding: WideString; const pubKey: IPublicKey): Integer; safecall;
    function SignHashENC(const encodedHash: WideString; const encoding: WideString; 
                         const privKey: IPrivateKey; const prng: IChilkatPrng): WideString; safecall;
    function GenEccKey2(const curveName: WideString; const encodedK: WideString; 
                        const encoding: WideString): IPrivateKey; safecall;
    function SignBd(const bdData: IChilkatBinData; const hashAlg: WideString; 
                    const encoding: WideString; const privKey: IPrivateKey; const prng: IChilkatPrng): WideString; safecall;
    function VerifyBd(const bdData: IChilkatBinData; const hashAlg: WideString; 
                      const encodedSig: WideString; const encoding: WideString; 
                      const pubKey: IPublicKey): Integer; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property LastMethodSuccess: Integer read Get_LastMethodSuccess write Set_LastMethodSuccess;
    property LastStringResult: WideString read Get_LastStringResult;
    property LastBinaryResult: OleVariant read Get_LastBinaryResult;
    property LastStringResultLen: Integer read Get_LastStringResultLen;
  end;

// *********************************************************************//
// DispIntf:  IChilkatEccDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {A1F4B713-D40B-4B92-BAB8-016AD671ACE8}
// *********************************************************************//
  IChilkatEccDisp = dispinterface
    ['{A1F4B713-D40B-4B92-BAB8-016AD671ACE8}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property LastMethodSuccess: Integer dispid 9;
    property LastStringResult: WideString readonly dispid 10;
    property LastBinaryResult: OleVariant readonly dispid 11;
    property LastStringResultLen: Integer readonly dispid 12;
    function GenEccKey(const curveName: WideString; const prng: IChilkatPrng): IPrivateKey; dispid 100;
    function SharedSecretENC(const privKey: IPrivateKey; const pubKey: IPublicKey; 
                             const encoding: WideString): WideString; dispid 101;
    function VerifyHashENC(const encodedHash: WideString; const encodedSig: WideString; 
                           const encoding: WideString; const pubKey: IPublicKey): Integer; dispid 102;
    function SignHashENC(const encodedHash: WideString; const encoding: WideString; 
                         const privKey: IPrivateKey; const prng: IChilkatPrng): WideString; dispid 103;
    function GenEccKey2(const curveName: WideString; const encodedK: WideString; 
                        const encoding: WideString): IPrivateKey; dispid 104;
    function SignBd(const bdData: IChilkatBinData; const hashAlg: WideString; 
                    const encoding: WideString; const privKey: IPrivateKey; const prng: IChilkatPrng): WideString; dispid 105;
    function VerifyBd(const bdData: IChilkatBinData; const hashAlg: WideString; 
                      const encodedSig: WideString; const encoding: WideString; 
                      const pubKey: IPublicKey): Integer; dispid 106;
  end;

// *********************************************************************//
// Interface: IChilkatPrng
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9C1C50C2-C003-4348-BD42-BF6D51852D7D}
// *********************************************************************//
  IChilkatPrng = interface(IDispatch)
    ['{9C1C50C2-C003-4348-BD42-BF6D51852D7D}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_LastMethodSuccess: Integer; safecall;
    procedure Set_LastMethodSuccess(pVal: Integer); safecall;
    function Get_LastStringResult: WideString; safecall;
    function Get_LastBinaryResult: OleVariant; safecall;
    function Get_LastStringResultLen: Integer; safecall;
    function Get_PrngName: WideString; safecall;
    procedure Set_PrngName(const pVal: WideString); safecall;
    function AddEntropy(const entropy: WideString; const encoding: WideString): Integer; safecall;
    function AddEntropyBytes(entropy: OleVariant): Integer; safecall;
    function ExportEntropy: WideString; safecall;
    function GenRandom(numBytes: Integer; const encoding: WideString): WideString; safecall;
    function GenRandomBytes(numBytes: Integer): OleVariant; safecall;
    function GetEntropy(numBytes: Integer; const encoding: WideString): WideString; safecall;
    function GetEntropyBytes(numBytes: Integer): OleVariant; safecall;
    function ImportEntropy(const entropy: WideString): Integer; safecall;
    function RandomInt(low: Integer; high: Integer): Integer; safecall;
    function RandomString(Length: Integer; bDigits: Integer; bLower: Integer; bUpper: Integer): WideString; safecall;
    function RandomPassword(Length: Integer; mustIncludeDigit: Integer; upperAndLowercase: Integer; 
                            const mustHaveOneOf: WideString; const excludeChars: WideString): WideString; safecall;
    function FirebasePushId: WideString; safecall;
    function GenRandomBd(numBytes: Integer; const bd: IChilkatBinData): Integer; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property LastMethodSuccess: Integer read Get_LastMethodSuccess write Set_LastMethodSuccess;
    property LastStringResult: WideString read Get_LastStringResult;
    property LastBinaryResult: OleVariant read Get_LastBinaryResult;
    property LastStringResultLen: Integer read Get_LastStringResultLen;
    property PrngName: WideString read Get_PrngName write Set_PrngName;
  end;

// *********************************************************************//
// DispIntf:  IChilkatPrngDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9C1C50C2-C003-4348-BD42-BF6D51852D7D}
// *********************************************************************//
  IChilkatPrngDisp = dispinterface
    ['{9C1C50C2-C003-4348-BD42-BF6D51852D7D}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property LastMethodSuccess: Integer dispid 9;
    property LastStringResult: WideString readonly dispid 10;
    property LastBinaryResult: OleVariant readonly dispid 11;
    property LastStringResultLen: Integer readonly dispid 12;
    property PrngName: WideString dispid 100;
    function AddEntropy(const entropy: WideString; const encoding: WideString): Integer; dispid 101;
    function AddEntropyBytes(entropy: OleVariant): Integer; dispid 102;
    function ExportEntropy: WideString; dispid 103;
    function GenRandom(numBytes: Integer; const encoding: WideString): WideString; dispid 104;
    function GenRandomBytes(numBytes: Integer): OleVariant; dispid 105;
    function GetEntropy(numBytes: Integer; const encoding: WideString): WideString; dispid 106;
    function GetEntropyBytes(numBytes: Integer): OleVariant; dispid 107;
    function ImportEntropy(const entropy: WideString): Integer; dispid 108;
    function RandomInt(low: Integer; high: Integer): Integer; dispid 109;
    function RandomString(Length: Integer; bDigits: Integer; bLower: Integer; bUpper: Integer): WideString; dispid 110;
    function RandomPassword(Length: Integer; mustIncludeDigit: Integer; upperAndLowercase: Integer; 
                            const mustHaveOneOf: WideString; const excludeChars: WideString): WideString; dispid 111;
    function FirebasePushId: WideString; dispid 112;
    function GenRandomBd(numBytes: Integer; const bd: IChilkatBinData): Integer; dispid 113;
  end;

// *********************************************************************//
// Interface: IChilkatEdDSA
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {AD9E69CC-E2E6-4C63-90A9-29084032D024}
// *********************************************************************//
  IChilkatEdDSA = interface(IDispatch)
    ['{AD9E69CC-E2E6-4C63-90A9-29084032D024}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_LastMethodSuccess: Integer; safecall;
    procedure Set_LastMethodSuccess(pVal: Integer); safecall;
    function Get_LastStringResult: WideString; safecall;
    function Get_LastBinaryResult: OleVariant; safecall;
    function Get_LastStringResultLen: Integer; safecall;
    function GenEd25519Key(const prng: IChilkatPrng; const privKey: IPrivateKey): Integer; safecall;
    function SignBdENC(const bd: IChilkatBinData; const encoding: WideString; 
                       const privKey: IPrivateKey): WideString; safecall;
    function VerifyBdENC(const bd: IChilkatBinData; const encodedSig: WideString; 
                         const enocding: WideString; const pubKey: IPublicKey): Integer; safecall;
    function SharedSecretENC(const privKey: IPrivateKey; const pubKey: IPublicKey; 
                             const encoding: WideString): WideString; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property LastMethodSuccess: Integer read Get_LastMethodSuccess write Set_LastMethodSuccess;
    property LastStringResult: WideString read Get_LastStringResult;
    property LastBinaryResult: OleVariant read Get_LastBinaryResult;
    property LastStringResultLen: Integer read Get_LastStringResultLen;
  end;

// *********************************************************************//
// DispIntf:  IChilkatEdDSADisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {AD9E69CC-E2E6-4C63-90A9-29084032D024}
// *********************************************************************//
  IChilkatEdDSADisp = dispinterface
    ['{AD9E69CC-E2E6-4C63-90A9-29084032D024}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property LastMethodSuccess: Integer dispid 9;
    property LastStringResult: WideString readonly dispid 10;
    property LastBinaryResult: OleVariant readonly dispid 11;
    property LastStringResultLen: Integer readonly dispid 12;
    function GenEd25519Key(const prng: IChilkatPrng; const privKey: IPrivateKey): Integer; dispid 100;
    function SignBdENC(const bd: IChilkatBinData; const encoding: WideString; 
                       const privKey: IPrivateKey): WideString; dispid 101;
    function VerifyBdENC(const bd: IChilkatBinData; const encodedSig: WideString; 
                         const enocding: WideString; const pubKey: IPublicKey): Integer; dispid 102;
    function SharedSecretENC(const privKey: IPrivateKey; const pubKey: IPublicKey; 
                             const encoding: WideString): WideString; dispid 103;
  end;

// *********************************************************************//
// Interface: IChilkatEmailBundle
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {A325D50D-6A7D-423F-9087-4242DC382181}
// *********************************************************************//
  IChilkatEmailBundle = interface(IDispatch)
    ['{A325D50D-6A7D-423F-9087-4242DC382181}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_LastMethodSuccess: Integer; safecall;
    procedure Set_LastMethodSuccess(pVal: Integer); safecall;
    function Get_LastStringResult: WideString; safecall;
    function Get_LastBinaryResult: OleVariant; safecall;
    function Get_LastStringResultLen: Integer; safecall;
    function Get_MessageCount: Integer; safecall;
    function AddEmail(const email: IChilkatEmail): Integer; safecall;
    function FindByHeader(const headerFieldName: WideString; const headerFieldValue: WideString): IChilkatEmail; safecall;
    function GetEmail(index: Integer): IChilkatEmail; safecall;
    function GetUidls: ICkStringArray; safecall;
    function GetXml: WideString; safecall;
    function LoadXml(const filename: WideString): Integer; safecall;
    function LoadXmlString(const xmlStr: WideString): Integer; safecall;
    function RemoveEmail(const email: IChilkatEmail): Integer; safecall;
    function RemoveEmailByIndex(index: Integer): Integer; safecall;
    function SaveXml(const filename: WideString): Integer; safecall;
    procedure SortByDate(ascending: Integer); safecall;
    procedure SortByRecipient(ascending: Integer); safecall;
    procedure SortBySender(ascending: Integer); safecall;
    procedure SortBySubject(ascending: Integer); safecall;
    function AddMimeBytes(mimeBytesOrText: OleVariant): Integer; safecall;
    function LoadTaskResult(const task: IChilkatTask): Integer; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property LastMethodSuccess: Integer read Get_LastMethodSuccess write Set_LastMethodSuccess;
    property LastStringResult: WideString read Get_LastStringResult;
    property LastBinaryResult: OleVariant read Get_LastBinaryResult;
    property LastStringResultLen: Integer read Get_LastStringResultLen;
    property MessageCount: Integer read Get_MessageCount;
  end;

// *********************************************************************//
// DispIntf:  IChilkatEmailBundleDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {A325D50D-6A7D-423F-9087-4242DC382181}
// *********************************************************************//
  IChilkatEmailBundleDisp = dispinterface
    ['{A325D50D-6A7D-423F-9087-4242DC382181}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property LastMethodSuccess: Integer dispid 9;
    property LastStringResult: WideString readonly dispid 10;
    property LastBinaryResult: OleVariant readonly dispid 11;
    property LastStringResultLen: Integer readonly dispid 12;
    property MessageCount: Integer readonly dispid 100;
    function AddEmail(const email: IChilkatEmail): Integer; dispid 101;
    function FindByHeader(const headerFieldName: WideString; const headerFieldValue: WideString): IChilkatEmail; dispid 102;
    function GetEmail(index: Integer): IChilkatEmail; dispid 103;
    function GetUidls: ICkStringArray; dispid 104;
    function GetXml: WideString; dispid 105;
    function LoadXml(const filename: WideString): Integer; dispid 106;
    function LoadXmlString(const xmlStr: WideString): Integer; dispid 107;
    function RemoveEmail(const email: IChilkatEmail): Integer; dispid 108;
    function RemoveEmailByIndex(index: Integer): Integer; dispid 109;
    function SaveXml(const filename: WideString): Integer; dispid 110;
    procedure SortByDate(ascending: Integer); dispid 111;
    procedure SortByRecipient(ascending: Integer); dispid 112;
    procedure SortBySender(ascending: Integer); dispid 113;
    procedure SortBySubject(ascending: Integer); dispid 114;
    function AddMimeBytes(mimeBytesOrText: OleVariant): Integer; dispid 115;
    function LoadTaskResult(const task: IChilkatTask): Integer; dispid 116;
  end;

// *********************************************************************//
// Interface: ICkFileAccess
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {CDA20F7F-7E23-471E-82E6-7609EE84CD54}
// *********************************************************************//
  ICkFileAccess = interface(IDispatch)
    ['{CDA20F7F-7E23-471E-82E6-7609EE84CD54}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_LastMethodSuccess: Integer; safecall;
    procedure Set_LastMethodSuccess(pVal: Integer); safecall;
    function Get_LastStringResult: WideString; safecall;
    function Get_LastBinaryResult: OleVariant; safecall;
    function Get_LastStringResultLen: Integer; safecall;
    function Get_EndOfFile: Integer; safecall;
    function Get_FileOpenError: Integer; safecall;
    function Get_FileOpenErrorMsg: WideString; safecall;
    function Get_CurrentDir: WideString; safecall;
    function AppendAnsi(const text: WideString): Integer; safecall;
    function AppendText(const str: WideString; const charset: WideString): Integer; safecall;
    function AppendUnicodeBOM: Integer; safecall;
    function AppendUtf8BOM: Integer; safecall;
    function DirAutoCreate(const filePath: WideString): Integer; safecall;
    function DirCreate(const dirPath: WideString): Integer; safecall;
    function DirDelete(const dirPath: WideString): Integer; safecall;
    function DirEnsureExists(const dirPath: WideString): Integer; safecall;
    procedure FileClose; safecall;
    function FileContentsEqual(const filePath1: WideString; const filePath2: WideString): Integer; safecall;
    function FileCopy(const existingFilepath: WideString; const newFilepath: WideString; 
                      failIfExists: Integer): Integer; safecall;
    function FileDelete(const filePath: WideString): Integer; safecall;
    function FileExists(const filePath: WideString): Integer; safecall;
    function FileOpen(const filePath: WideString; accessMode: Integer; shareMode: Integer; 
                      createDisposition: Integer; attributes: Integer): Integer; safecall;
    function FileRead(maxNumBytes: Integer): OleVariant; safecall;
    function FileRename(const existingFilepath: WideString; const newFilepath: WideString): Integer; safecall;
    function FileSeek(offset: Integer; origin: Integer): Integer; safecall;
    function fileSize(const filePath: WideString): Integer; safecall;
    function FileWrite(data: OleVariant): Integer; safecall;
    function GetTempFilename(const dirPath: WideString; const prefix: WideString): WideString; safecall;
    function OpenForAppend(const filePath: WideString): Integer; safecall;
    function OpenForRead(const filePath: WideString): Integer; safecall;
    function OpenForReadWrite(const filePath: WideString): Integer; safecall;
    function OpenForWrite(const filePath: WideString): Integer; safecall;
    function ReadBinaryToEncoded(const filePath: WideString; const encoding: WideString): WideString; safecall;
    function ReadEntireFile(const filePath: WideString): OleVariant; safecall;
    function ReadEntireTextFile(const filePath: WideString; const charset: WideString): WideString; safecall;
    function ReassembleFile(const partsDirPath: WideString; const partPrefix: WideString; 
                            const partExtension: WideString; const reassembledFilename: WideString): Integer; safecall;
    function ReplaceStrings(const filePath: WideString; const charset: WideString; 
                            const existingString: WideString; const replacementString: WideString): Integer; safecall;
    function SetCurrentDir(const dirPath: WideString): Integer; safecall;
    function SetFileTimes(const filePath: WideString; const createTime: ICkDateTime; 
                          const lastAccessTime: ICkDateTime; const lastModTime: ICkDateTime): Integer; safecall;
    function SetLastModified(const filePath: WideString; const lastModified: ICkDateTime): Integer; safecall;
    function SplitFile(const fileToSplit: WideString; const partPrefix: WideString; 
                       const partExtension: WideString; partSize: Integer; const destDir: WideString): Integer; safecall;
    function TreeDelete(const path: WideString): Integer; safecall;
    function WriteEntireFile(const filePath: WideString; fileData: OleVariant): Integer; safecall;
    function WriteEntireTextFile(const filePath: WideString; const TextData: WideString; 
                                 const charset: WideString; includedPreamble: Integer): Integer; safecall;
    function FileExists3(const path: WideString): Integer; safecall;
    function GenBlockId(index: Integer; Length: Integer; const encoding: WideString): WideString; safecall;
    function GetNumBlocks(BlockSize: Integer): Integer; safecall;
    function ReadBlock(blockIndex: Integer; BlockSize: Integer): OleVariant; safecall;
    function FileReadBd(maxNumBytes: Integer; const binData: IChilkatBinData): Integer; safecall;
    function FileWriteBd(const binData: IChilkatBinData; offset: Integer; numBytes: Integer): Integer; safecall;
    function GetFilename(const path: WideString): WideString; safecall;
    function GetDirectoryName(const path: WideString): WideString; safecall;
    function GetExtension(const path: WideString): WideString; safecall;
    function GetFileNameWithoutExtension(const path: WideString): WideString; safecall;
    function GetLastModified(const path: WideString): ICkDateTime; safecall;
    function GetFileTime(const path: WideString; which: Integer): ICkDateTime; safecall;
    function AppendSb(const sb: IChilkatStringBuilder; const charset: WideString): Integer; safecall;
    function AppendBd(const bd: IChilkatBinData): Integer; safecall;
    function FileType(const path: WideString): Integer; safecall;
    function SymlinkTarget(const linkPath: WideString): WideString; safecall;
    function SymlinkCreate(const targetPath: WideString; const linkPath: WideString): Integer; safecall;
    function ReadBlockBd(blockIndex: Integer; BlockSize: Integer; const bd: IChilkatBinData): Integer; safecall;
    function FileSizeStr(const filePath: WideString): WideString; safecall;
    function ReadNextFragment(startAtBeginning: Integer; const beginMarker: WideString; 
                              const endMarker: WideString; const charset: WideString; 
                              const sb: IChilkatStringBuilder): Integer; safecall;
    function Get_LockFileOnOpen: Integer; safecall;
    procedure Set_LockFileOnOpen(pVal: Integer); safecall;
    function Truncate: Integer; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property LastMethodSuccess: Integer read Get_LastMethodSuccess write Set_LastMethodSuccess;
    property LastStringResult: WideString read Get_LastStringResult;
    property LastBinaryResult: OleVariant read Get_LastBinaryResult;
    property LastStringResultLen: Integer read Get_LastStringResultLen;
    property EndOfFile: Integer read Get_EndOfFile;
    property FileOpenError: Integer read Get_FileOpenError;
    property FileOpenErrorMsg: WideString read Get_FileOpenErrorMsg;
    property CurrentDir: WideString read Get_CurrentDir;
    property LockFileOnOpen: Integer read Get_LockFileOnOpen write Set_LockFileOnOpen;
  end;

// *********************************************************************//
// DispIntf:  ICkFileAccessDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {CDA20F7F-7E23-471E-82E6-7609EE84CD54}
// *********************************************************************//
  ICkFileAccessDisp = dispinterface
    ['{CDA20F7F-7E23-471E-82E6-7609EE84CD54}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property LastMethodSuccess: Integer dispid 9;
    property LastStringResult: WideString readonly dispid 10;
    property LastBinaryResult: OleVariant readonly dispid 11;
    property LastStringResultLen: Integer readonly dispid 12;
    property EndOfFile: Integer readonly dispid 100;
    property FileOpenError: Integer readonly dispid 101;
    property FileOpenErrorMsg: WideString readonly dispid 102;
    property CurrentDir: WideString readonly dispid 103;
    function AppendAnsi(const text: WideString): Integer; dispid 104;
    function AppendText(const str: WideString; const charset: WideString): Integer; dispid 105;
    function AppendUnicodeBOM: Integer; dispid 106;
    function AppendUtf8BOM: Integer; dispid 107;
    function DirAutoCreate(const filePath: WideString): Integer; dispid 108;
    function DirCreate(const dirPath: WideString): Integer; dispid 109;
    function DirDelete(const dirPath: WideString): Integer; dispid 110;
    function DirEnsureExists(const dirPath: WideString): Integer; dispid 111;
    procedure FileClose; dispid 112;
    function FileContentsEqual(const filePath1: WideString; const filePath2: WideString): Integer; dispid 113;
    function FileCopy(const existingFilepath: WideString; const newFilepath: WideString; 
                      failIfExists: Integer): Integer; dispid 114;
    function FileDelete(const filePath: WideString): Integer; dispid 115;
    function FileExists(const filePath: WideString): Integer; dispid 116;
    function FileOpen(const filePath: WideString; accessMode: Integer; shareMode: Integer; 
                      createDisposition: Integer; attributes: Integer): Integer; dispid 117;
    function FileRead(maxNumBytes: Integer): OleVariant; dispid 118;
    function FileRename(const existingFilepath: WideString; const newFilepath: WideString): Integer; dispid 119;
    function FileSeek(offset: Integer; origin: Integer): Integer; dispid 120;
    function fileSize(const filePath: WideString): Integer; dispid 121;
    function FileWrite(data: OleVariant): Integer; dispid 122;
    function GetTempFilename(const dirPath: WideString; const prefix: WideString): WideString; dispid 123;
    function OpenForAppend(const filePath: WideString): Integer; dispid 124;
    function OpenForRead(const filePath: WideString): Integer; dispid 125;
    function OpenForReadWrite(const filePath: WideString): Integer; dispid 126;
    function OpenForWrite(const filePath: WideString): Integer; dispid 127;
    function ReadBinaryToEncoded(const filePath: WideString; const encoding: WideString): WideString; dispid 128;
    function ReadEntireFile(const filePath: WideString): OleVariant; dispid 129;
    function ReadEntireTextFile(const filePath: WideString; const charset: WideString): WideString; dispid 130;
    function ReassembleFile(const partsDirPath: WideString; const partPrefix: WideString; 
                            const partExtension: WideString; const reassembledFilename: WideString): Integer; dispid 131;
    function ReplaceStrings(const filePath: WideString; const charset: WideString; 
                            const existingString: WideString; const replacementString: WideString): Integer; dispid 132;
    function SetCurrentDir(const dirPath: WideString): Integer; dispid 133;
    function SetFileTimes(const filePath: WideString; const createTime: ICkDateTime; 
                          const lastAccessTime: ICkDateTime; const lastModTime: ICkDateTime): Integer; dispid 134;
    function SetLastModified(const filePath: WideString; const lastModified: ICkDateTime): Integer; dispid 135;
    function SplitFile(const fileToSplit: WideString; const partPrefix: WideString; 
                       const partExtension: WideString; partSize: Integer; const destDir: WideString): Integer; dispid 136;
    function TreeDelete(const path: WideString): Integer; dispid 137;
    function WriteEntireFile(const filePath: WideString; fileData: OleVariant): Integer; dispid 138;
    function WriteEntireTextFile(const filePath: WideString; const TextData: WideString; 
                                 const charset: WideString; includedPreamble: Integer): Integer; dispid 139;
    function FileExists3(const path: WideString): Integer; dispid 140;
    function GenBlockId(index: Integer; Length: Integer; const encoding: WideString): WideString; dispid 141;
    function GetNumBlocks(BlockSize: Integer): Integer; dispid 142;
    function ReadBlock(blockIndex: Integer; BlockSize: Integer): OleVariant; dispid 143;
    function FileReadBd(maxNumBytes: Integer; const binData: IChilkatBinData): Integer; dispid 144;
    function FileWriteBd(const binData: IChilkatBinData; offset: Integer; numBytes: Integer): Integer; dispid 145;
    function GetFilename(const path: WideString): WideString; dispid 146;
    function GetDirectoryName(const path: WideString): WideString; dispid 147;
    function GetExtension(const path: WideString): WideString; dispid 148;
    function GetFileNameWithoutExtension(const path: WideString): WideString; dispid 149;
    function GetLastModified(const path: WideString): ICkDateTime; dispid 150;
    function GetFileTime(const path: WideString; which: Integer): ICkDateTime; dispid 151;
    function AppendSb(const sb: IChilkatStringBuilder; const charset: WideString): Integer; dispid 152;
    function AppendBd(const bd: IChilkatBinData): Integer; dispid 153;
    function FileType(const path: WideString): Integer; dispid 154;
    function SymlinkTarget(const linkPath: WideString): WideString; dispid 155;
    function SymlinkCreate(const targetPath: WideString; const linkPath: WideString): Integer; dispid 156;
    function ReadBlockBd(blockIndex: Integer; BlockSize: Integer; const bd: IChilkatBinData): Integer; dispid 160;
    function FileSizeStr(const filePath: WideString): WideString; dispid 161;
    function ReadNextFragment(startAtBeginning: Integer; const beginMarker: WideString; 
                              const endMarker: WideString; const charset: WideString; 
                              const sb: IChilkatStringBuilder): Integer; dispid 162;
    property LockFileOnOpen: Integer dispid 163;
    function Truncate: Integer; dispid 164;
  end;

// *********************************************************************//
// Interface: IChilkatFtp2
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3A2BC588-F8E2-4BE3-A154-A3A99CF51E9F}
// *********************************************************************//
  IChilkatFtp2 = interface(IDispatch)
    ['{3A2BC588-F8E2-4BE3-A154-A3A99CF51E9F}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_LastMethodSuccess: Integer; safecall;
    procedure Set_LastMethodSuccess(pVal: Integer); safecall;
    function Get_LastStringResult: WideString; safecall;
    function Get_LastBinaryResult: OleVariant; safecall;
    function Get_LastStringResultLen: Integer; safecall;
    function Get_Account: WideString; safecall;
    procedure Set_Account(const pVal: WideString); safecall;
    function Get_ActivePortRangeEnd: Integer; safecall;
    procedure Set_ActivePortRangeEnd(pVal: Integer); safecall;
    function Get_ActivePortRangeStart: Integer; safecall;
    procedure Set_ActivePortRangeStart(pVal: Integer); safecall;
    function Get_AllocateSize: Integer; safecall;
    procedure Set_AllocateSize(pVal: Integer); safecall;
    function Get_AsyncBytesReceived: Integer; safecall;
    function Get_AsyncBytesReceivedStr: WideString; safecall;
    function Get_AsyncBytesSent: Integer; safecall;
    function Get_AsyncBytesSentStr: WideString; safecall;
    function Get_AsyncFinished: Integer; safecall;
    function Get_AsyncLog: WideString; safecall;
    function Get_AsyncSuccess: Integer; safecall;
    function Get_AuthSsl: Integer; safecall;
    procedure Set_AuthSsl(pVal: Integer); safecall;
    function Get_AuthTls: Integer; safecall;
    procedure Set_AuthTls(pVal: Integer); safecall;
    function Get_AutoFeat: Integer; safecall;
    procedure Set_AutoFeat(pVal: Integer); safecall;
    function Get_AutoFix: Integer; safecall;
    procedure Set_AutoFix(pVal: Integer); safecall;
    function Get_AutoGetSizeForProgress: Integer; safecall;
    procedure Set_AutoGetSizeForProgress(pVal: Integer); safecall;
    function Get_AutoSyst: Integer; safecall;
    procedure Set_AutoSyst(pVal: Integer); safecall;
    function Get_AutoXcrc: Integer; safecall;
    procedure Set_AutoXcrc(pVal: Integer); safecall;
    function Get_BandwidthThrottleDown: Integer; safecall;
    procedure Set_BandwidthThrottleDown(pVal: Integer); safecall;
    function Get_BandwidthThrottleUp: Integer; safecall;
    procedure Set_BandwidthThrottleUp(pVal: Integer); safecall;
    function Get_ClientIpAddress: WideString; safecall;
    procedure Set_ClientIpAddress(const pVal: WideString); safecall;
    function Get_CommandCharset: WideString; safecall;
    procedure Set_CommandCharset(const pVal: WideString); safecall;
    function Get_ConnectFailReason: Integer; safecall;
    function Get_ConnectTimeout: Integer; safecall;
    procedure Set_ConnectTimeout(pVal: Integer); safecall;
    function Get_ConnectVerified: Integer; safecall;
    function Get_CrlfMode: Integer; safecall;
    procedure Set_CrlfMode(pVal: Integer); safecall;
    function Get_DirListingCharset: WideString; safecall;
    procedure Set_DirListingCharset(const pVal: WideString); safecall;
    function Get_DownloadTransferRate: Integer; safecall;
    function Get_ForcePortIpAddress: WideString; safecall;
    procedure Set_ForcePortIpAddress(const pVal: WideString); safecall;
    function Get_Greeting: WideString; safecall;
    function Get_HasModeZ: Integer; safecall;
    function Get_HeartbeatMs: Integer; safecall;
    procedure Set_HeartbeatMs(pVal: Integer); safecall;
    function Get_hostname: WideString; safecall;
    procedure Set_hostname(const pVal: WideString); safecall;
    function Get_HttpProxyAuthMethod: WideString; safecall;
    procedure Set_HttpProxyAuthMethod(const pVal: WideString); safecall;
    function Get_HttpProxyDomain: WideString; safecall;
    procedure Set_HttpProxyDomain(const pVal: WideString); safecall;
    function Get_HttpProxyHostname: WideString; safecall;
    procedure Set_HttpProxyHostname(const pVal: WideString); safecall;
    function Get_HttpProxyPassword: WideString; safecall;
    procedure Set_HttpProxyPassword(const pVal: WideString); safecall;
    function Get_HttpProxyPort: Integer; safecall;
    procedure Set_HttpProxyPort(pVal: Integer); safecall;
    function Get_HttpProxyUsername: WideString; safecall;
    procedure Set_HttpProxyUsername(const pVal: WideString); safecall;
    function Get_IdleTimeoutMs: Integer; safecall;
    procedure Set_IdleTimeoutMs(pVal: Integer); safecall;
    function Get_IsConnected: Integer; safecall;
    function Get_KeepSessionLog: Integer; safecall;
    procedure Set_KeepSessionLog(pVal: Integer); safecall;
    function Get_LastReply: WideString; safecall;
    function Get_ListPattern: WideString; safecall;
    procedure Set_ListPattern(const pVal: WideString); safecall;
    function Get_LoginVerified: Integer; safecall;
    function Get_NumFilesAndDirs: Integer; safecall;
    function Get_PartialTransfer: Integer; safecall;
    function Get_Passive: Integer; safecall;
    procedure Set_Passive(pVal: Integer); safecall;
    function Get_PassiveUseHostAddr: Integer; safecall;
    procedure Set_PassiveUseHostAddr(pVal: Integer); safecall;
    function Get_password: WideString; safecall;
    procedure Set_password(const pVal: WideString); safecall;
    function Get_port: Integer; safecall;
    procedure Set_port(pVal: Integer); safecall;
    function Get_PreferNlst: Integer; safecall;
    procedure Set_PreferNlst(pVal: Integer); safecall;
    function Get_ProgressMonSize: Integer; safecall;
    procedure Set_ProgressMonSize(pVal: Integer); safecall;
    function Get_ProxyHostname: WideString; safecall;
    procedure Set_ProxyHostname(const pVal: WideString); safecall;
    function Get_ProxyMethod: Integer; safecall;
    procedure Set_ProxyMethod(pVal: Integer); safecall;
    function Get_ProxyPassword: WideString; safecall;
    procedure Set_ProxyPassword(const pVal: WideString); safecall;
    function Get_ProxyPort: Integer; safecall;
    procedure Set_ProxyPort(pVal: Integer); safecall;
    function Get_ProxyUsername: WideString; safecall;
    procedure Set_ProxyUsername(const pVal: WideString); safecall;
    function Get_ReadTimeout: Integer; safecall;
    procedure Set_ReadTimeout(pVal: Integer); safecall;
    function Get_RequireSslCertVerify: Integer; safecall;
    procedure Set_RequireSslCertVerify(pVal: Integer); safecall;
    function Get_RestartNext: Integer; safecall;
    procedure Set_RestartNext(pVal: Integer); safecall;
    function Get_SendBufferSize: Integer; safecall;
    procedure Set_SendBufferSize(pVal: Integer); safecall;
    function Get_SessionLog: WideString; safecall;
    function Get_SkipFinalReply: Integer; safecall;
    procedure Set_SkipFinalReply(pVal: Integer); safecall;
    function Get_SoRcvBuf: Integer; safecall;
    procedure Set_SoRcvBuf(pVal: Integer); safecall;
    function Get_SoSndBuf: Integer; safecall;
    procedure Set_SoSndBuf(pVal: Integer); safecall;
    function Get_SocksHostname: WideString; safecall;
    procedure Set_SocksHostname(const pVal: WideString); safecall;
    function Get_SocksPassword: WideString; safecall;
    procedure Set_SocksPassword(const pVal: WideString); safecall;
    function Get_SocksPort: Integer; safecall;
    procedure Set_SocksPort(pVal: Integer); safecall;
    function Get_SocksUsername: WideString; safecall;
    procedure Set_SocksUsername(const pVal: WideString); safecall;
    function Get_SocksVersion: Integer; safecall;
    procedure Set_SocksVersion(pVal: Integer); safecall;
    function Get_Ssl: Integer; safecall;
    procedure Set_Ssl(pVal: Integer); safecall;
    function Get_SslProtocol: WideString; safecall;
    procedure Set_SslProtocol(const pVal: WideString); safecall;
    function Get_SslServerCertVerified: Integer; safecall;
    function Get_SyncPreview: WideString; safecall;
    function Get_UploadTransferRate: Integer; safecall;
    function Get_UseEpsv: Integer; safecall;
    procedure Set_UseEpsv(pVal: Integer); safecall;
    function Get_username: WideString; safecall;
    procedure Set_username(const pVal: WideString); safecall;
    function AppendFile(const localFilePath: WideString; const remoteFilePath: WideString): Integer; safecall;
    function AppendFileAsync(const localFilePath: WideString; const remoteFilePath: WideString): IChilkatTask; safecall;
    function AppendFileFromBinaryData(const remoteFileName: WideString; content: OleVariant): Integer; safecall;
    function AppendFileFromBinaryDataAsync(const remoteFileName: WideString; content: OleVariant): IChilkatTask; safecall;
    function AppendFileFromTextData(const remoteFileName: WideString; const TextData: WideString; 
                                    const charset: WideString): Integer; safecall;
    function AppendFileFromTextDataAsync(const remoteFileName: WideString; 
                                         const TextData: WideString; const charset: WideString): IChilkatTask; safecall;
    procedure AsyncAbort; safecall;
    function AsyncAppendFileStart(const localFilename: WideString; const remoteFileName: WideString): Integer; safecall;
    function AsyncGetFileStart(const remoteFileName: WideString; const localFilename: WideString): Integer; safecall;
    function AsyncPutFileStart(const localFilename: WideString; const remoteFileName: WideString): Integer; safecall;
    function ChangeRemoteDir(const remoteDirPath: WideString): Integer; safecall;
    function ChangeRemoteDirAsync(const remoteDirPath: WideString): IChilkatTask; safecall;
    function ClearControlChannel: Integer; safecall;
    function ClearControlChannelAsync: IChilkatTask; safecall;
    procedure ClearDirCache; safecall;
    procedure ClearSessionLog; safecall;
    function Connect: Integer; safecall;
    function ConnectAsync: IChilkatTask; safecall;
    function ConnectOnly: Integer; safecall;
    function ConnectOnlyAsync: IChilkatTask; safecall;
    function ConvertToTls: Integer; safecall;
    function ConvertToTlsAsync: IChilkatTask; safecall;
    function CreatePlan(const localDir: WideString): WideString; safecall;
    function CreatePlanAsync(const localDir: WideString): IChilkatTask; safecall;
    function CreateRemoteDir(const remoteDirPath: WideString): Integer; safecall;
    function CreateRemoteDirAsync(const remoteDirPath: WideString): IChilkatTask; safecall;
    function DeleteMatching(const remotePattern: WideString): Integer; safecall;
    function DeleteMatchingAsync(const remotePattern: WideString): IChilkatTask; safecall;
    function DeleteRemoteFile(const remoteFilePath: WideString): Integer; safecall;
    function DeleteRemoteFileAsync(const remoteFilePath: WideString): IChilkatTask; safecall;
    function DeleteTree: Integer; safecall;
    function DeleteTreeAsync: IChilkatTask; safecall;
    function DetermineProxyMethod: Integer; safecall;
    function DetermineProxyMethodAsync: IChilkatTask; safecall;
    function DetermineSettings: WideString; safecall;
    function DetermineSettingsAsync: IChilkatTask; safecall;
    function DirTreeXml: WideString; safecall;
    function DirTreeXmlAsync: IChilkatTask; safecall;
    function Disconnect: Integer; safecall;
    function DisconnectAsync: IChilkatTask; safecall;
    function DownloadTree(const localRoot: WideString): Integer; safecall;
    function DownloadTreeAsync(const localRoot: WideString): IChilkatTask; safecall;
    function Feat: WideString; safecall;
    function FeatAsync: IChilkatTask; safecall;
    function GetCreateDt(index: Integer): ICkDateTime; safecall;
    function GetCreateDtAsync(index: Integer): IChilkatTask; safecall;
    function GetCreateDtByName(const filename: WideString): ICkDateTime; safecall;
    function GetCreateDtByNameAsync(const filename: WideString): IChilkatTask; safecall;
    function GetCreateTime(index: Integer): TDateTime; safecall;
    function GetCreateTimeByName(const filename: WideString): TDateTime; safecall;
    function GetCreateTimeByNameStr(const filename: WideString): WideString; safecall;
    function GetCreateTimeByNameStrAsync(const filename: WideString): IChilkatTask; safecall;
    function GetCreateTimeStr(index: Integer): WideString; safecall;
    function GetCreateTimeStrAsync(index: Integer): IChilkatTask; safecall;
    function GetCurrentRemoteDir: WideString; safecall;
    function GetCurrentRemoteDirAsync: IChilkatTask; safecall;
    function GetFile(const remoteFilePath: WideString; const localFilePath: WideString): Integer; safecall;
    function GetFileAsync(const remoteFilePath: WideString; const localFilePath: WideString): IChilkatTask; safecall;
    function GetFilename(index: Integer): WideString; safecall;
    function GetFilenameAsync(index: Integer): IChilkatTask; safecall;
    function GetIsDirectory(index: Integer): Integer; safecall;
    function GetIsDirectoryAsync(index: Integer): IChilkatTask; safecall;
    function GetIsSymbolicLink(index: Integer): Integer; safecall;
    function GetIsSymbolicLinkAsync(index: Integer): IChilkatTask; safecall;
    function GetLastAccessDt(index: Integer): ICkDateTime; safecall;
    function GetLastAccessDtAsync(index: Integer): IChilkatTask; safecall;
    function GetLastAccessDtByName(const filename: WideString): ICkDateTime; safecall;
    function GetLastAccessDtByNameAsync(const filename: WideString): IChilkatTask; safecall;
    function GetLastAccessTime(index: Integer): TDateTime; safecall;
    function GetLastAccessTimeByName(const filename: WideString): TDateTime; safecall;
    function GetLastAccessTimeByNameStr(const filename: WideString): WideString; safecall;
    function GetLastAccessTimeByNameStrAsync(const filename: WideString): IChilkatTask; safecall;
    function GetLastAccessTimeStr(index: Integer): WideString; safecall;
    function GetLastAccessTimeStrAsync(index: Integer): IChilkatTask; safecall;
    function GetLastModDt(index: Integer): ICkDateTime; safecall;
    function GetLastModDtAsync(index: Integer): IChilkatTask; safecall;
    function GetLastModDtByName(const filename: WideString): ICkDateTime; safecall;
    function GetLastModDtByNameAsync(const filename: WideString): IChilkatTask; safecall;
    function GetLastModifiedTime(index: Integer): TDateTime; safecall;
    function GetLastModifiedTimeByName(const filename: WideString): TDateTime; safecall;
    function GetLastModifiedTimeByNameStr(const filename: WideString): WideString; safecall;
    function GetLastModifiedTimeByNameStrAsync(const filename: WideString): IChilkatTask; safecall;
    function GetLastModifiedTimeStr(index: Integer): WideString; safecall;
    function GetLastModifiedTimeStrAsync(index: Integer): IChilkatTask; safecall;
    function GetRemoteFileBinaryData(const remoteFileName: WideString): OleVariant; safecall;
    function GetRemoteFileBinaryDataAsync(const remoteFileName: WideString): IChilkatTask; safecall;
    function GetRemoteFileTextC(const remoteFileName: WideString; const charset: WideString): WideString; safecall;
    function GetRemoteFileTextCAsync(const remoteFileName: WideString; const charset: WideString): IChilkatTask; safecall;
    function GetRemoteFileTextData(const remoteFileName: WideString): WideString; safecall;
    function GetRemoteFileTextDataAsync(const remoteFileName: WideString): IChilkatTask; safecall;
    function GetSize(index: Integer): Integer; safecall;
    function GetSizeAsync(index: Integer): IChilkatTask; safecall;
    function GetSizeByName(const filename: WideString): Integer; safecall;
    function GetSizeByNameAsync(const filename: WideString): IChilkatTask; safecall;
    function GetSizeStr(index: Integer): WideString; safecall;
    function GetSizeStrAsync(index: Integer): IChilkatTask; safecall;
    function GetSizeStrByName(const filename: WideString): WideString; safecall;
    function GetSizeStrByNameAsync(const filename: WideString): IChilkatTask; safecall;
    function GetSslServerCert: IChilkatCert; safecall;
    function GetTextDirListing(const pattern: WideString): WideString; safecall;
    function GetTextDirListingAsync(const pattern: WideString): IChilkatTask; safecall;
    function GetXmlDirListing(const pattern: WideString): WideString; safecall;
    function GetXmlDirListingAsync(const pattern: WideString): IChilkatTask; safecall;
    function IsUnlocked: Integer; safecall;
    function LoginAfterConnectOnly: Integer; safecall;
    function LoginAfterConnectOnlyAsync: IChilkatTask; safecall;
    function MGetFiles(const remotePattern: WideString; const localDir: WideString): Integer; safecall;
    function MGetFilesAsync(const remotePattern: WideString; const localDir: WideString): IChilkatTask; safecall;
    function MPutFiles(const pattern: WideString): Integer; safecall;
    function MPutFilesAsync(const pattern: WideString): IChilkatTask; safecall;
    function NlstXml(const remoteDirPattern: WideString): WideString; safecall;
    function NlstXmlAsync(const remoteDirPattern: WideString): IChilkatTask; safecall;
    function Noop: Integer; safecall;
    function NoopAsync: IChilkatTask; safecall;
    function PutFile(const localFilePath: WideString; const remoteFilePath: WideString): Integer; safecall;
    function PutFileAsync(const localFilePath: WideString; const remoteFilePath: WideString): IChilkatTask; safecall;
    function PutFileFromBinaryData(const remoteFileName: WideString; content: OleVariant): Integer; safecall;
    function PutFileFromBinaryDataAsync(const remoteFileName: WideString; content: OleVariant): IChilkatTask; safecall;
    function PutFileFromTextData(const remoteFileName: WideString; const TextData: WideString; 
                                 const charset: WideString): Integer; safecall;
    function PutFileFromTextDataAsync(const remoteFileName: WideString; const TextData: WideString; 
                                      const charset: WideString): IChilkatTask; safecall;
    function PutPlan(const plan: WideString; const alreadyDoneFilename: WideString): Integer; safecall;
    function PutPlanAsync(const plan: WideString; const alreadyDoneFilename: WideString): IChilkatTask; safecall;
    function PutTree(const localDir: WideString): Integer; safecall;
    function PutTreeAsync(const localDir: WideString): IChilkatTask; safecall;
    function Quote(const cmd: WideString): Integer; safecall;
    function QuoteAsync(const cmd: WideString): IChilkatTask; safecall;
    function RemoveRemoteDir(const remoteDirPath: WideString): Integer; safecall;
    function RemoveRemoteDirAsync(const remoteDirPath: WideString): IChilkatTask; safecall;
    function RenameRemoteFile(const existingRemoteFilePath: WideString; 
                              const newRemoteFilePath: WideString): Integer; safecall;
    function RenameRemoteFileAsync(const existingRemoteFilePath: WideString; 
                                   const newRemoteFilePath: WideString): IChilkatTask; safecall;
    function SendCommand(const cmd: WideString): WideString; safecall;
    function SendCommandAsync(const cmd: WideString): IChilkatTask; safecall;
    function SetModeZ: Integer; safecall;
    function SetModeZAsync: IChilkatTask; safecall;
    procedure SetOldestDate(oldestDateTime: TDateTime); safecall;
    procedure SetOldestDateStr(const oldestDateTimeStr: WideString); safecall;
    function SetRemoteFileDateTime(dt: TDateTime; const remoteFileName: WideString): Integer; safecall;
    function SetRemoteFileDateTimeStr(const dateTimeStr: WideString; 
                                      const remoteFileName: WideString): Integer; safecall;
    function SetRemoteFileDateTimeStrAsync(const dateTimeStr: WideString; 
                                           const remoteFileName: WideString): IChilkatTask; safecall;
    function SetRemoteFileDt(const dt: ICkDateTime; const remoteFileName: WideString): Integer; safecall;
    function SetRemoteFileDtAsync(const dt: ICkDateTime; const remoteFileName: WideString): IChilkatTask; safecall;
    procedure SetSslCertRequirement(const reqName: WideString; const reqValue: WideString); safecall;
    function SetSslClientCert(const cert: IChilkatCert): Integer; safecall;
    function SetSslClientCertPem(const pemDataOrFilename: WideString; const pemPassword: WideString): Integer; safecall;
    function SetSslClientCertPfx(const pfxFilename: WideString; const pfxPassword: WideString): Integer; safecall;
    function SetTypeAscii: Integer; safecall;
    function SetTypeAsciiAsync: IChilkatTask; safecall;
    function SetTypeBinary: Integer; safecall;
    function SetTypeBinaryAsync: IChilkatTask; safecall;
    function Site(const siteCommand: WideString): Integer; safecall;
    function SiteAsync(const siteCommand: WideString): IChilkatTask; safecall;
    procedure SleepMs(millisec: Integer); safecall;
    function Stat: WideString; safecall;
    function StatAsync: IChilkatTask; safecall;
    function SyncDeleteRemote(const localRoot: WideString): Integer; safecall;
    function SyncDeleteRemoteAsync(const localRoot: WideString): IChilkatTask; safecall;
    function SyncLocalDir(const localRoot: WideString; mode: Integer): Integer; safecall;
    function SyncLocalDirAsync(const localRoot: WideString; mode: Integer): IChilkatTask; safecall;
    function SyncLocalTree(const localRoot: WideString; mode: Integer): Integer; safecall;
    function SyncLocalTreeAsync(const localRoot: WideString; mode: Integer): IChilkatTask; safecall;
    function SyncRemoteTree(const localRoot: WideString; mode: Integer): Integer; safecall;
    function SyncRemoteTreeAsync(const localRoot: WideString; mode: Integer): IChilkatTask; safecall;
    function SyncRemoteTree2(const localDirPath: WideString; mode: Integer; bDescend: Integer; 
                             bPreviewOnly: Integer): Integer; safecall;
    function SyncRemoteTree2Async(const localDirPath: WideString; mode: Integer; bDescend: Integer; 
                                  bPreviewOnly: Integer): IChilkatTask; safecall;
    function Syst: WideString; safecall;
    function SystAsync: IChilkatTask; safecall;
    function UnlockComponent(const unlockCode: WideString): Integer; safecall;
    function Get_SyncMustMatch: WideString; safecall;
    procedure Set_SyncMustMatch(const pVal: WideString); safecall;
    function Get_SyncMustNotMatch: WideString; safecall;
    procedure Set_SyncMustNotMatch(const pVal: WideString); safecall;
    function Get_PreferIpv6: Integer; safecall;
    procedure Set_PreferIpv6(pVal: Integer); safecall;
    function Get_AsyncPercentDone: Integer; safecall;
    function Get_AutoSetUseEpsv: Integer; safecall;
    procedure Set_AutoSetUseEpsv(pVal: Integer); safecall;
    function CheckConnection: Integer; safecall;
    function CheckConnectionAsync: IChilkatTask; safecall;
    function GetDirCount: Integer; safecall;
    function GetDirCountAsync: IChilkatTask; safecall;
    function Get_AutoOptsUtf8: Integer; safecall;
    procedure Set_AutoOptsUtf8(pVal: Integer); safecall;
    function Get_SslAllowedCiphers: WideString; safecall;
    procedure Set_SslAllowedCiphers(const pVal: WideString); safecall;
    function Get_PercentDoneScale: Integer; safecall;
    procedure Set_PercentDoneScale(pVal: Integer); safecall;
    function Get_TlsVersion: WideString; safecall;
    function Get_TlsCipherSuite: WideString; safecall;
    function Get_AllowMlsd: Integer; safecall;
    procedure Set_AllowMlsd(pVal: Integer); safecall;
    function GetPermType(index: Integer): WideString; safecall;
    function GetPermTypeAsync(index: Integer): IChilkatTask; safecall;
    function GetPermissions(index: Integer): WideString; safecall;
    function GetPermissionsAsync(index: Integer): IChilkatTask; safecall;
    function GetOwner(index: Integer): WideString; safecall;
    function GetOwnerAsync(index: Integer): IChilkatTask; safecall;
    function GetGroup(index: Integer): WideString; safecall;
    function GetGroupAsync(index: Integer): IChilkatTask; safecall;
    function Get_SyncedFiles: WideString; safecall;
    procedure Set_SyncedFiles(const pVal: WideString); safecall;
    function Get_DataProtection: WideString; safecall;
    procedure Set_DataProtection(const pVal: WideString); safecall;
    function Get_TlsPinSet: WideString; safecall;
    procedure Set_TlsPinSet(const pVal: WideString); safecall;
    function Get_AbortCurrent: Integer; safecall;
    procedure Set_AbortCurrent(pVal: Integer); safecall;
    function SetOption(const option: WideString): Integer; safecall;
    function LargeFileUpload(const localPath: WideString; const remotePath: WideString; 
                             chunkSize: Integer): Integer; safecall;
    function LargeFileUploadAsync(const localPath: WideString; const remotePath: WideString; 
                                  chunkSize: Integer): IChilkatTask; safecall;
    function GetFileBd(const remoteFilePath: WideString; const binData: IChilkatBinData): Integer; safecall;
    function GetFileBdAsync(const remoteFilePath: WideString; const binData: IChilkatBinData): IChilkatTask; safecall;
    function GetFileSb(const remoteFilePath: WideString; const charset: WideString; 
                       const sb: IChilkatStringBuilder): Integer; safecall;
    function GetFileSbAsync(const remoteFilePath: WideString; const charset: WideString; 
                            const sb: IChilkatStringBuilder): IChilkatTask; safecall;
    function PutFileBd(const binData: IChilkatBinData; const remoteFilePath: WideString): Integer; safecall;
    function PutFileBdAsync(const binData: IChilkatBinData; const remoteFilePath: WideString): IChilkatTask; safecall;
    function PutFileSb(const sb: IChilkatStringBuilder; const charset: WideString; 
                       includeBom: Integer; const remoteFilePath: WideString): Integer; safecall;
    function PutFileSbAsync(const sb: IChilkatStringBuilder; const charset: WideString; 
                            includeBom: Integer; const remoteFilePath: WideString): IChilkatTask; safecall;
    function Get_LargeFileMeasures: Integer; safecall;
    procedure Set_LargeFileMeasures(pVal: Integer); safecall;
    function GetFileToStream(const remoteFilePath: WideString; const toStream: IChilkatStream): Integer; safecall;
    function GetFileToStreamAsync(const remoteFilePath: WideString; const toStream: IChilkatStream): IChilkatTask; safecall;
    function SetPassword(const password: IChilkatSecureString): Integer; safecall;
    function SetSecurePassword(const password: IChilkatSecureString): Integer; safecall;
    function Get_SyncMustMatchDir: WideString; safecall;
    procedure Set_SyncMustMatchDir(const pVal: WideString); safecall;
    function Get_SyncMustNotMatchDir: WideString; safecall;
    procedure Set_SyncMustNotMatchDir(const pVal: WideString); safecall;
    function Get_SyncCreateAllLocalDirs: Integer; safecall;
    procedure Set_SyncCreateAllLocalDirs(pVal: Integer); safecall;
    function Get_UncommonOptions: WideString; safecall;
    procedure Set_UncommonOptions(const pVal: WideString); safecall;
    function LoadTaskCaller(const task: IChilkatTask): Integer; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property LastMethodSuccess: Integer read Get_LastMethodSuccess write Set_LastMethodSuccess;
    property LastStringResult: WideString read Get_LastStringResult;
    property LastBinaryResult: OleVariant read Get_LastBinaryResult;
    property LastStringResultLen: Integer read Get_LastStringResultLen;
    property Account: WideString read Get_Account write Set_Account;
    property ActivePortRangeEnd: Integer read Get_ActivePortRangeEnd write Set_ActivePortRangeEnd;
    property ActivePortRangeStart: Integer read Get_ActivePortRangeStart write Set_ActivePortRangeStart;
    property AllocateSize: Integer read Get_AllocateSize write Set_AllocateSize;
    property AsyncBytesReceived: Integer read Get_AsyncBytesReceived;
    property AsyncBytesReceivedStr: WideString read Get_AsyncBytesReceivedStr;
    property AsyncBytesSent: Integer read Get_AsyncBytesSent;
    property AsyncBytesSentStr: WideString read Get_AsyncBytesSentStr;
    property AsyncFinished: Integer read Get_AsyncFinished;
    property AsyncLog: WideString read Get_AsyncLog;
    property AsyncSuccess: Integer read Get_AsyncSuccess;
    property AuthSsl: Integer read Get_AuthSsl write Set_AuthSsl;
    property AuthTls: Integer read Get_AuthTls write Set_AuthTls;
    property AutoFeat: Integer read Get_AutoFeat write Set_AutoFeat;
    property AutoFix: Integer read Get_AutoFix write Set_AutoFix;
    property AutoGetSizeForProgress: Integer read Get_AutoGetSizeForProgress write Set_AutoGetSizeForProgress;
    property AutoSyst: Integer read Get_AutoSyst write Set_AutoSyst;
    property AutoXcrc: Integer read Get_AutoXcrc write Set_AutoXcrc;
    property BandwidthThrottleDown: Integer read Get_BandwidthThrottleDown write Set_BandwidthThrottleDown;
    property BandwidthThrottleUp: Integer read Get_BandwidthThrottleUp write Set_BandwidthThrottleUp;
    property ClientIpAddress: WideString read Get_ClientIpAddress write Set_ClientIpAddress;
    property CommandCharset: WideString read Get_CommandCharset write Set_CommandCharset;
    property ConnectFailReason: Integer read Get_ConnectFailReason;
    property ConnectTimeout: Integer read Get_ConnectTimeout write Set_ConnectTimeout;
    property ConnectVerified: Integer read Get_ConnectVerified;
    property CrlfMode: Integer read Get_CrlfMode write Set_CrlfMode;
    property DirListingCharset: WideString read Get_DirListingCharset write Set_DirListingCharset;
    property DownloadTransferRate: Integer read Get_DownloadTransferRate;
    property ForcePortIpAddress: WideString read Get_ForcePortIpAddress write Set_ForcePortIpAddress;
    property Greeting: WideString read Get_Greeting;
    property HasModeZ: Integer read Get_HasModeZ;
    property HeartbeatMs: Integer read Get_HeartbeatMs write Set_HeartbeatMs;
    property hostname: WideString read Get_hostname write Set_hostname;
    property HttpProxyAuthMethod: WideString read Get_HttpProxyAuthMethod write Set_HttpProxyAuthMethod;
    property HttpProxyDomain: WideString read Get_HttpProxyDomain write Set_HttpProxyDomain;
    property HttpProxyHostname: WideString read Get_HttpProxyHostname write Set_HttpProxyHostname;
    property HttpProxyPassword: WideString read Get_HttpProxyPassword write Set_HttpProxyPassword;
    property HttpProxyPort: Integer read Get_HttpProxyPort write Set_HttpProxyPort;
    property HttpProxyUsername: WideString read Get_HttpProxyUsername write Set_HttpProxyUsername;
    property IdleTimeoutMs: Integer read Get_IdleTimeoutMs write Set_IdleTimeoutMs;
    property IsConnected: Integer read Get_IsConnected;
    property KeepSessionLog: Integer read Get_KeepSessionLog write Set_KeepSessionLog;
    property LastReply: WideString read Get_LastReply;
    property ListPattern: WideString read Get_ListPattern write Set_ListPattern;
    property LoginVerified: Integer read Get_LoginVerified;
    property NumFilesAndDirs: Integer read Get_NumFilesAndDirs;
    property PartialTransfer: Integer read Get_PartialTransfer;
    property Passive: Integer read Get_Passive write Set_Passive;
    property PassiveUseHostAddr: Integer read Get_PassiveUseHostAddr write Set_PassiveUseHostAddr;
    property password: WideString read Get_password write Set_password;
    property port: Integer read Get_port write Set_port;
    property PreferNlst: Integer read Get_PreferNlst write Set_PreferNlst;
    property ProgressMonSize: Integer read Get_ProgressMonSize write Set_ProgressMonSize;
    property ProxyHostname: WideString read Get_ProxyHostname write Set_ProxyHostname;
    property ProxyMethod: Integer read Get_ProxyMethod write Set_ProxyMethod;
    property ProxyPassword: WideString read Get_ProxyPassword write Set_ProxyPassword;
    property ProxyPort: Integer read Get_ProxyPort write Set_ProxyPort;
    property ProxyUsername: WideString read Get_ProxyUsername write Set_ProxyUsername;
    property ReadTimeout: Integer read Get_ReadTimeout write Set_ReadTimeout;
    property RequireSslCertVerify: Integer read Get_RequireSslCertVerify write Set_RequireSslCertVerify;
    property RestartNext: Integer read Get_RestartNext write Set_RestartNext;
    property SendBufferSize: Integer read Get_SendBufferSize write Set_SendBufferSize;
    property SessionLog: WideString read Get_SessionLog;
    property SkipFinalReply: Integer read Get_SkipFinalReply write Set_SkipFinalReply;
    property SoRcvBuf: Integer read Get_SoRcvBuf write Set_SoRcvBuf;
    property SoSndBuf: Integer read Get_SoSndBuf write Set_SoSndBuf;
    property SocksHostname: WideString read Get_SocksHostname write Set_SocksHostname;
    property SocksPassword: WideString read Get_SocksPassword write Set_SocksPassword;
    property SocksPort: Integer read Get_SocksPort write Set_SocksPort;
    property SocksUsername: WideString read Get_SocksUsername write Set_SocksUsername;
    property SocksVersion: Integer read Get_SocksVersion write Set_SocksVersion;
    property Ssl: Integer read Get_Ssl write Set_Ssl;
    property SslProtocol: WideString read Get_SslProtocol write Set_SslProtocol;
    property SslServerCertVerified: Integer read Get_SslServerCertVerified;
    property SyncPreview: WideString read Get_SyncPreview;
    property UploadTransferRate: Integer read Get_UploadTransferRate;
    property UseEpsv: Integer read Get_UseEpsv write Set_UseEpsv;
    property username: WideString read Get_username write Set_username;
    property SyncMustMatch: WideString read Get_SyncMustMatch write Set_SyncMustMatch;
    property SyncMustNotMatch: WideString read Get_SyncMustNotMatch write Set_SyncMustNotMatch;
    property PreferIpv6: Integer read Get_PreferIpv6 write Set_PreferIpv6;
    property AsyncPercentDone: Integer read Get_AsyncPercentDone;
    property AutoSetUseEpsv: Integer read Get_AutoSetUseEpsv write Set_AutoSetUseEpsv;
    property AutoOptsUtf8: Integer read Get_AutoOptsUtf8 write Set_AutoOptsUtf8;
    property SslAllowedCiphers: WideString read Get_SslAllowedCiphers write Set_SslAllowedCiphers;
    property PercentDoneScale: Integer read Get_PercentDoneScale write Set_PercentDoneScale;
    property TlsVersion: WideString read Get_TlsVersion;
    property TlsCipherSuite: WideString read Get_TlsCipherSuite;
    property AllowMlsd: Integer read Get_AllowMlsd write Set_AllowMlsd;
    property SyncedFiles: WideString read Get_SyncedFiles write Set_SyncedFiles;
    property DataProtection: WideString read Get_DataProtection write Set_DataProtection;
    property TlsPinSet: WideString read Get_TlsPinSet write Set_TlsPinSet;
    property AbortCurrent: Integer read Get_AbortCurrent write Set_AbortCurrent;
    property LargeFileMeasures: Integer read Get_LargeFileMeasures write Set_LargeFileMeasures;
    property SyncMustMatchDir: WideString read Get_SyncMustMatchDir write Set_SyncMustMatchDir;
    property SyncMustNotMatchDir: WideString read Get_SyncMustNotMatchDir write Set_SyncMustNotMatchDir;
    property SyncCreateAllLocalDirs: Integer read Get_SyncCreateAllLocalDirs write Set_SyncCreateAllLocalDirs;
    property UncommonOptions: WideString read Get_UncommonOptions write Set_UncommonOptions;
  end;

// *********************************************************************//
// DispIntf:  IChilkatFtp2Disp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3A2BC588-F8E2-4BE3-A154-A3A99CF51E9F}
// *********************************************************************//
  IChilkatFtp2Disp = dispinterface
    ['{3A2BC588-F8E2-4BE3-A154-A3A99CF51E9F}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property LastMethodSuccess: Integer dispid 9;
    property LastStringResult: WideString readonly dispid 10;
    property LastBinaryResult: OleVariant readonly dispid 11;
    property LastStringResultLen: Integer readonly dispid 12;
    property Account: WideString dispid 100;
    property ActivePortRangeEnd: Integer dispid 101;
    property ActivePortRangeStart: Integer dispid 102;
    property AllocateSize: Integer dispid 103;
    property AsyncBytesReceived: Integer readonly dispid 104;
    property AsyncBytesReceivedStr: WideString readonly dispid 105;
    property AsyncBytesSent: Integer readonly dispid 106;
    property AsyncBytesSentStr: WideString readonly dispid 107;
    property AsyncFinished: Integer readonly dispid 108;
    property AsyncLog: WideString readonly dispid 109;
    property AsyncSuccess: Integer readonly dispid 110;
    property AuthSsl: Integer dispid 111;
    property AuthTls: Integer dispid 112;
    property AutoFeat: Integer dispid 113;
    property AutoFix: Integer dispid 114;
    property AutoGetSizeForProgress: Integer dispid 115;
    property AutoSyst: Integer dispid 116;
    property AutoXcrc: Integer dispid 117;
    property BandwidthThrottleDown: Integer dispid 118;
    property BandwidthThrottleUp: Integer dispid 119;
    property ClientIpAddress: WideString dispid 120;
    property CommandCharset: WideString dispid 121;
    property ConnectFailReason: Integer readonly dispid 122;
    property ConnectTimeout: Integer dispid 123;
    property ConnectVerified: Integer readonly dispid 124;
    property CrlfMode: Integer dispid 125;
    property DirListingCharset: WideString dispid 126;
    property DownloadTransferRate: Integer readonly dispid 127;
    property ForcePortIpAddress: WideString dispid 128;
    property Greeting: WideString readonly dispid 129;
    property HasModeZ: Integer readonly dispid 130;
    property HeartbeatMs: Integer dispid 131;
    property hostname: WideString dispid 132;
    property HttpProxyAuthMethod: WideString dispid 133;
    property HttpProxyDomain: WideString dispid 134;
    property HttpProxyHostname: WideString dispid 135;
    property HttpProxyPassword: WideString dispid 136;
    property HttpProxyPort: Integer dispid 137;
    property HttpProxyUsername: WideString dispid 138;
    property IdleTimeoutMs: Integer dispid 139;
    property IsConnected: Integer readonly dispid 140;
    property KeepSessionLog: Integer dispid 141;
    property LastReply: WideString readonly dispid 142;
    property ListPattern: WideString dispid 143;
    property LoginVerified: Integer readonly dispid 144;
    property NumFilesAndDirs: Integer readonly dispid 145;
    property PartialTransfer: Integer readonly dispid 146;
    property Passive: Integer dispid 147;
    property PassiveUseHostAddr: Integer dispid 148;
    property password: WideString dispid 149;
    property port: Integer dispid 150;
    property PreferNlst: Integer dispid 151;
    property ProgressMonSize: Integer dispid 152;
    property ProxyHostname: WideString dispid 153;
    property ProxyMethod: Integer dispid 154;
    property ProxyPassword: WideString dispid 155;
    property ProxyPort: Integer dispid 156;
    property ProxyUsername: WideString dispid 157;
    property ReadTimeout: Integer dispid 158;
    property RequireSslCertVerify: Integer dispid 159;
    property RestartNext: Integer dispid 160;
    property SendBufferSize: Integer dispid 161;
    property SessionLog: WideString readonly dispid 162;
    property SkipFinalReply: Integer dispid 163;
    property SoRcvBuf: Integer dispid 164;
    property SoSndBuf: Integer dispid 165;
    property SocksHostname: WideString dispid 166;
    property SocksPassword: WideString dispid 167;
    property SocksPort: Integer dispid 168;
    property SocksUsername: WideString dispid 169;
    property SocksVersion: Integer dispid 170;
    property Ssl: Integer dispid 171;
    property SslProtocol: WideString dispid 172;
    property SslServerCertVerified: Integer readonly dispid 173;
    property SyncPreview: WideString readonly dispid 174;
    property UploadTransferRate: Integer readonly dispid 175;
    property UseEpsv: Integer dispid 176;
    property username: WideString dispid 177;
    function AppendFile(const localFilePath: WideString; const remoteFilePath: WideString): Integer; dispid 180;
    function AppendFileAsync(const localFilePath: WideString; const remoteFilePath: WideString): IChilkatTask; dispid 680;
    function AppendFileFromBinaryData(const remoteFileName: WideString; content: OleVariant): Integer; dispid 181;
    function AppendFileFromBinaryDataAsync(const remoteFileName: WideString; content: OleVariant): IChilkatTask; dispid 681;
    function AppendFileFromTextData(const remoteFileName: WideString; const TextData: WideString; 
                                    const charset: WideString): Integer; dispid 182;
    function AppendFileFromTextDataAsync(const remoteFileName: WideString; 
                                         const TextData: WideString; const charset: WideString): IChilkatTask; dispid 682;
    procedure AsyncAbort; dispid 183;
    function AsyncAppendFileStart(const localFilename: WideString; const remoteFileName: WideString): Integer; dispid 184;
    function AsyncGetFileStart(const remoteFileName: WideString; const localFilename: WideString): Integer; dispid 185;
    function AsyncPutFileStart(const localFilename: WideString; const remoteFileName: WideString): Integer; dispid 186;
    function ChangeRemoteDir(const remoteDirPath: WideString): Integer; dispid 187;
    function ChangeRemoteDirAsync(const remoteDirPath: WideString): IChilkatTask; dispid 687;
    function ClearControlChannel: Integer; dispid 188;
    function ClearControlChannelAsync: IChilkatTask; dispid 688;
    procedure ClearDirCache; dispid 189;
    procedure ClearSessionLog; dispid 190;
    function Connect: Integer; dispid 191;
    function ConnectAsync: IChilkatTask; dispid 691;
    function ConnectOnly: Integer; dispid 192;
    function ConnectOnlyAsync: IChilkatTask; dispid 692;
    function ConvertToTls: Integer; dispid 193;
    function ConvertToTlsAsync: IChilkatTask; dispid 693;
    function CreatePlan(const localDir: WideString): WideString; dispid 194;
    function CreatePlanAsync(const localDir: WideString): IChilkatTask; dispid 694;
    function CreateRemoteDir(const remoteDirPath: WideString): Integer; dispid 195;
    function CreateRemoteDirAsync(const remoteDirPath: WideString): IChilkatTask; dispid 695;
    function DeleteMatching(const remotePattern: WideString): Integer; dispid 196;
    function DeleteMatchingAsync(const remotePattern: WideString): IChilkatTask; dispid 696;
    function DeleteRemoteFile(const remoteFilePath: WideString): Integer; dispid 197;
    function DeleteRemoteFileAsync(const remoteFilePath: WideString): IChilkatTask; dispid 697;
    function DeleteTree: Integer; dispid 198;
    function DeleteTreeAsync: IChilkatTask; dispid 698;
    function DetermineProxyMethod: Integer; dispid 199;
    function DetermineProxyMethodAsync: IChilkatTask; dispid 699;
    function DetermineSettings: WideString; dispid 200;
    function DetermineSettingsAsync: IChilkatTask; dispid 700;
    function DirTreeXml: WideString; dispid 201;
    function DirTreeXmlAsync: IChilkatTask; dispid 701;
    function Disconnect: Integer; dispid 202;
    function DisconnectAsync: IChilkatTask; dispid 702;
    function DownloadTree(const localRoot: WideString): Integer; dispid 203;
    function DownloadTreeAsync(const localRoot: WideString): IChilkatTask; dispid 703;
    function Feat: WideString; dispid 204;
    function FeatAsync: IChilkatTask; dispid 704;
    function GetCreateDt(index: Integer): ICkDateTime; dispid 205;
    function GetCreateDtAsync(index: Integer): IChilkatTask; dispid 705;
    function GetCreateDtByName(const filename: WideString): ICkDateTime; dispid 206;
    function GetCreateDtByNameAsync(const filename: WideString): IChilkatTask; dispid 706;
    function GetCreateTime(index: Integer): TDateTime; dispid 207;
    function GetCreateTimeByName(const filename: WideString): TDateTime; dispid 208;
    function GetCreateTimeByNameStr(const filename: WideString): WideString; dispid 209;
    function GetCreateTimeByNameStrAsync(const filename: WideString): IChilkatTask; dispid 709;
    function GetCreateTimeStr(index: Integer): WideString; dispid 210;
    function GetCreateTimeStrAsync(index: Integer): IChilkatTask; dispid 710;
    function GetCurrentRemoteDir: WideString; dispid 211;
    function GetCurrentRemoteDirAsync: IChilkatTask; dispid 711;
    function GetFile(const remoteFilePath: WideString; const localFilePath: WideString): Integer; dispid 212;
    function GetFileAsync(const remoteFilePath: WideString; const localFilePath: WideString): IChilkatTask; dispid 712;
    function GetFilename(index: Integer): WideString; dispid 213;
    function GetFilenameAsync(index: Integer): IChilkatTask; dispid 713;
    function GetIsDirectory(index: Integer): Integer; dispid 214;
    function GetIsDirectoryAsync(index: Integer): IChilkatTask; dispid 714;
    function GetIsSymbolicLink(index: Integer): Integer; dispid 215;
    function GetIsSymbolicLinkAsync(index: Integer): IChilkatTask; dispid 715;
    function GetLastAccessDt(index: Integer): ICkDateTime; dispid 216;
    function GetLastAccessDtAsync(index: Integer): IChilkatTask; dispid 716;
    function GetLastAccessDtByName(const filename: WideString): ICkDateTime; dispid 217;
    function GetLastAccessDtByNameAsync(const filename: WideString): IChilkatTask; dispid 717;
    function GetLastAccessTime(index: Integer): TDateTime; dispid 218;
    function GetLastAccessTimeByName(const filename: WideString): TDateTime; dispid 219;
    function GetLastAccessTimeByNameStr(const filename: WideString): WideString; dispid 220;
    function GetLastAccessTimeByNameStrAsync(const filename: WideString): IChilkatTask; dispid 720;
    function GetLastAccessTimeStr(index: Integer): WideString; dispid 221;
    function GetLastAccessTimeStrAsync(index: Integer): IChilkatTask; dispid 721;
    function GetLastModDt(index: Integer): ICkDateTime; dispid 222;
    function GetLastModDtAsync(index: Integer): IChilkatTask; dispid 722;
    function GetLastModDtByName(const filename: WideString): ICkDateTime; dispid 223;
    function GetLastModDtByNameAsync(const filename: WideString): IChilkatTask; dispid 723;
    function GetLastModifiedTime(index: Integer): TDateTime; dispid 224;
    function GetLastModifiedTimeByName(const filename: WideString): TDateTime; dispid 225;
    function GetLastModifiedTimeByNameStr(const filename: WideString): WideString; dispid 226;
    function GetLastModifiedTimeByNameStrAsync(const filename: WideString): IChilkatTask; dispid 726;
    function GetLastModifiedTimeStr(index: Integer): WideString; dispid 227;
    function GetLastModifiedTimeStrAsync(index: Integer): IChilkatTask; dispid 727;
    function GetRemoteFileBinaryData(const remoteFileName: WideString): OleVariant; dispid 228;
    function GetRemoteFileBinaryDataAsync(const remoteFileName: WideString): IChilkatTask; dispid 728;
    function GetRemoteFileTextC(const remoteFileName: WideString; const charset: WideString): WideString; dispid 229;
    function GetRemoteFileTextCAsync(const remoteFileName: WideString; const charset: WideString): IChilkatTask; dispid 729;
    function GetRemoteFileTextData(const remoteFileName: WideString): WideString; dispid 230;
    function GetRemoteFileTextDataAsync(const remoteFileName: WideString): IChilkatTask; dispid 730;
    function GetSize(index: Integer): Integer; dispid 231;
    function GetSizeAsync(index: Integer): IChilkatTask; dispid 731;
    function GetSizeByName(const filename: WideString): Integer; dispid 232;
    function GetSizeByNameAsync(const filename: WideString): IChilkatTask; dispid 732;
    function GetSizeStr(index: Integer): WideString; dispid 233;
    function GetSizeStrAsync(index: Integer): IChilkatTask; dispid 733;
    function GetSizeStrByName(const filename: WideString): WideString; dispid 234;
    function GetSizeStrByNameAsync(const filename: WideString): IChilkatTask; dispid 734;
    function GetSslServerCert: IChilkatCert; dispid 235;
    function GetTextDirListing(const pattern: WideString): WideString; dispid 236;
    function GetTextDirListingAsync(const pattern: WideString): IChilkatTask; dispid 736;
    function GetXmlDirListing(const pattern: WideString): WideString; dispid 237;
    function GetXmlDirListingAsync(const pattern: WideString): IChilkatTask; dispid 737;
    function IsUnlocked: Integer; dispid 238;
    function LoginAfterConnectOnly: Integer; dispid 239;
    function LoginAfterConnectOnlyAsync: IChilkatTask; dispid 739;
    function MGetFiles(const remotePattern: WideString; const localDir: WideString): Integer; dispid 240;
    function MGetFilesAsync(const remotePattern: WideString; const localDir: WideString): IChilkatTask; dispid 740;
    function MPutFiles(const pattern: WideString): Integer; dispid 241;
    function MPutFilesAsync(const pattern: WideString): IChilkatTask; dispid 741;
    function NlstXml(const remoteDirPattern: WideString): WideString; dispid 242;
    function NlstXmlAsync(const remoteDirPattern: WideString): IChilkatTask; dispid 742;
    function Noop: Integer; dispid 243;
    function NoopAsync: IChilkatTask; dispid 743;
    function PutFile(const localFilePath: WideString; const remoteFilePath: WideString): Integer; dispid 244;
    function PutFileAsync(const localFilePath: WideString; const remoteFilePath: WideString): IChilkatTask; dispid 744;
    function PutFileFromBinaryData(const remoteFileName: WideString; content: OleVariant): Integer; dispid 245;
    function PutFileFromBinaryDataAsync(const remoteFileName: WideString; content: OleVariant): IChilkatTask; dispid 745;
    function PutFileFromTextData(const remoteFileName: WideString; const TextData: WideString; 
                                 const charset: WideString): Integer; dispid 246;
    function PutFileFromTextDataAsync(const remoteFileName: WideString; const TextData: WideString; 
                                      const charset: WideString): IChilkatTask; dispid 746;
    function PutPlan(const plan: WideString; const alreadyDoneFilename: WideString): Integer; dispid 247;
    function PutPlanAsync(const plan: WideString; const alreadyDoneFilename: WideString): IChilkatTask; dispid 747;
    function PutTree(const localDir: WideString): Integer; dispid 248;
    function PutTreeAsync(const localDir: WideString): IChilkatTask; dispid 748;
    function Quote(const cmd: WideString): Integer; dispid 249;
    function QuoteAsync(const cmd: WideString): IChilkatTask; dispid 749;
    function RemoveRemoteDir(const remoteDirPath: WideString): Integer; dispid 250;
    function RemoveRemoteDirAsync(const remoteDirPath: WideString): IChilkatTask; dispid 750;
    function RenameRemoteFile(const existingRemoteFilePath: WideString; 
                              const newRemoteFilePath: WideString): Integer; dispid 251;
    function RenameRemoteFileAsync(const existingRemoteFilePath: WideString; 
                                   const newRemoteFilePath: WideString): IChilkatTask; dispid 751;
    function SendCommand(const cmd: WideString): WideString; dispid 252;
    function SendCommandAsync(const cmd: WideString): IChilkatTask; dispid 752;
    function SetModeZ: Integer; dispid 253;
    function SetModeZAsync: IChilkatTask; dispid 753;
    procedure SetOldestDate(oldestDateTime: TDateTime); dispid 254;
    procedure SetOldestDateStr(const oldestDateTimeStr: WideString); dispid 255;
    function SetRemoteFileDateTime(dt: TDateTime; const remoteFileName: WideString): Integer; dispid 256;
    function SetRemoteFileDateTimeStr(const dateTimeStr: WideString; 
                                      const remoteFileName: WideString): Integer; dispid 257;
    function SetRemoteFileDateTimeStrAsync(const dateTimeStr: WideString; 
                                           const remoteFileName: WideString): IChilkatTask; dispid 757;
    function SetRemoteFileDt(const dt: ICkDateTime; const remoteFileName: WideString): Integer; dispid 258;
    function SetRemoteFileDtAsync(const dt: ICkDateTime; const remoteFileName: WideString): IChilkatTask; dispid 758;
    procedure SetSslCertRequirement(const reqName: WideString; const reqValue: WideString); dispid 259;
    function SetSslClientCert(const cert: IChilkatCert): Integer; dispid 260;
    function SetSslClientCertPem(const pemDataOrFilename: WideString; const pemPassword: WideString): Integer; dispid 261;
    function SetSslClientCertPfx(const pfxFilename: WideString; const pfxPassword: WideString): Integer; dispid 262;
    function SetTypeAscii: Integer; dispid 263;
    function SetTypeAsciiAsync: IChilkatTask; dispid 763;
    function SetTypeBinary: Integer; dispid 264;
    function SetTypeBinaryAsync: IChilkatTask; dispid 764;
    function Site(const siteCommand: WideString): Integer; dispid 265;
    function SiteAsync(const siteCommand: WideString): IChilkatTask; dispid 765;
    procedure SleepMs(millisec: Integer); dispid 266;
    function Stat: WideString; dispid 267;
    function StatAsync: IChilkatTask; dispid 767;
    function SyncDeleteRemote(const localRoot: WideString): Integer; dispid 268;
    function SyncDeleteRemoteAsync(const localRoot: WideString): IChilkatTask; dispid 768;
    function SyncLocalDir(const localRoot: WideString; mode: Integer): Integer; dispid 269;
    function SyncLocalDirAsync(const localRoot: WideString; mode: Integer): IChilkatTask; dispid 769;
    function SyncLocalTree(const localRoot: WideString; mode: Integer): Integer; dispid 270;
    function SyncLocalTreeAsync(const localRoot: WideString; mode: Integer): IChilkatTask; dispid 770;
    function SyncRemoteTree(const localRoot: WideString; mode: Integer): Integer; dispid 271;
    function SyncRemoteTreeAsync(const localRoot: WideString; mode: Integer): IChilkatTask; dispid 771;
    function SyncRemoteTree2(const localDirPath: WideString; mode: Integer; bDescend: Integer; 
                             bPreviewOnly: Integer): Integer; dispid 272;
    function SyncRemoteTree2Async(const localDirPath: WideString; mode: Integer; bDescend: Integer; 
                                  bPreviewOnly: Integer): IChilkatTask; dispid 772;
    function Syst: WideString; dispid 273;
    function SystAsync: IChilkatTask; dispid 773;
    function UnlockComponent(const unlockCode: WideString): Integer; dispid 274;
    property SyncMustMatch: WideString dispid 275;
    property SyncMustNotMatch: WideString dispid 276;
    property PreferIpv6: Integer dispid 277;
    property AsyncPercentDone: Integer readonly dispid 278;
    property AutoSetUseEpsv: Integer dispid 279;
    function CheckConnection: Integer; dispid 280;
    function CheckConnectionAsync: IChilkatTask; dispid 780;
    function GetDirCount: Integer; dispid 281;
    function GetDirCountAsync: IChilkatTask; dispid 781;
    property AutoOptsUtf8: Integer dispid 282;
    property SslAllowedCiphers: WideString dispid 283;
    property PercentDoneScale: Integer dispid 284;
    property TlsVersion: WideString readonly dispid 286;
    property TlsCipherSuite: WideString readonly dispid 287;
    property AllowMlsd: Integer dispid 288;
    function GetPermType(index: Integer): WideString; dispid 289;
    function GetPermTypeAsync(index: Integer): IChilkatTask; dispid 789;
    function GetPermissions(index: Integer): WideString; dispid 290;
    function GetPermissionsAsync(index: Integer): IChilkatTask; dispid 790;
    function GetOwner(index: Integer): WideString; dispid 291;
    function GetOwnerAsync(index: Integer): IChilkatTask; dispid 791;
    function GetGroup(index: Integer): WideString; dispid 292;
    function GetGroupAsync(index: Integer): IChilkatTask; dispid 792;
    property SyncedFiles: WideString dispid 293;
    property DataProtection: WideString dispid 294;
    property TlsPinSet: WideString dispid 295;
    property AbortCurrent: Integer dispid 296;
    function SetOption(const option: WideString): Integer; dispid 297;
    function LargeFileUpload(const localPath: WideString; const remotePath: WideString; 
                             chunkSize: Integer): Integer; dispid 298;
    function LargeFileUploadAsync(const localPath: WideString; const remotePath: WideString; 
                                  chunkSize: Integer): IChilkatTask; dispid 798;
    function GetFileBd(const remoteFilePath: WideString; const binData: IChilkatBinData): Integer; dispid 299;
    function GetFileBdAsync(const remoteFilePath: WideString; const binData: IChilkatBinData): IChilkatTask; dispid 799;
    function GetFileSb(const remoteFilePath: WideString; const charset: WideString; 
                       const sb: IChilkatStringBuilder): Integer; dispid 300;
    function GetFileSbAsync(const remoteFilePath: WideString; const charset: WideString; 
                            const sb: IChilkatStringBuilder): IChilkatTask; dispid 800;
    function PutFileBd(const binData: IChilkatBinData; const remoteFilePath: WideString): Integer; dispid 301;
    function PutFileBdAsync(const binData: IChilkatBinData; const remoteFilePath: WideString): IChilkatTask; dispid 801;
    function PutFileSb(const sb: IChilkatStringBuilder; const charset: WideString; 
                       includeBom: Integer; const remoteFilePath: WideString): Integer; dispid 302;
    function PutFileSbAsync(const sb: IChilkatStringBuilder; const charset: WideString; 
                            includeBom: Integer; const remoteFilePath: WideString): IChilkatTask; dispid 802;
    property LargeFileMeasures: Integer dispid 303;
    function GetFileToStream(const remoteFilePath: WideString; const toStream: IChilkatStream): Integer; dispid 304;
    function GetFileToStreamAsync(const remoteFilePath: WideString; const toStream: IChilkatStream): IChilkatTask; dispid 804;
    function SetPassword(const password: IChilkatSecureString): Integer; dispid 307;
    function SetSecurePassword(const password: IChilkatSecureString): Integer; dispid 308;
    property SyncMustMatchDir: WideString dispid 309;
    property SyncMustNotMatchDir: WideString dispid 310;
    property SyncCreateAllLocalDirs: Integer dispid 311;
    property UncommonOptions: WideString dispid 312;
    function LoadTaskCaller(const task: IChilkatTask): Integer; dispid 314;
  end;

// *********************************************************************//
// Interface: IChilkatGlobal
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {4995C839-42F3-4D4F-8A08-1BA24B5F5E8F}
// *********************************************************************//
  IChilkatGlobal = interface(IDispatch)
    ['{4995C839-42F3-4D4F-8A08-1BA24B5F5E8F}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_LastMethodSuccess: Integer; safecall;
    procedure Set_LastMethodSuccess(pVal: Integer); safecall;
    function Get_LastStringResult: WideString; safecall;
    function Get_LastBinaryResult: OleVariant; safecall;
    function Get_LastStringResultLen: Integer; safecall;
    function Get_EnableDnsCaching: Integer; safecall;
    procedure Set_EnableDnsCaching(pVal: Integer); safecall;
    function Get_DnsTimeToLive: Integer; safecall;
    procedure Set_DnsTimeToLive(pVal: Integer); safecall;
    function Get_DefaultUtf8: Integer; safecall;
    procedure Set_DefaultUtf8(pVal: Integer); safecall;
    function Get_AnsiCodePage: Integer; safecall;
    procedure Set_AnsiCodePage(pVal: Integer); safecall;
    function DnsClearCache: Integer; safecall;
    function UnlockBundle(const bundleUnlockCode: WideString): Integer; safecall;
    function Get_MaxThreads: Integer; safecall;
    procedure Set_MaxThreads(pVal: Integer); safecall;
    function Get_ThreadPoolLogPath: WideString; safecall;
    procedure Set_ThreadPoolLogPath(const pVal: WideString); safecall;
    function Get_KeepStringResult: Integer; safecall;
    procedure Set_KeepStringResult(pVal: Integer); safecall;
    function Get_DefaultNtlmVersion: Integer; safecall;
    procedure Set_DefaultNtlmVersion(pVal: Integer); safecall;
    function Get_KeepBinaryResult: Integer; safecall;
    procedure Set_KeepBinaryResult(pVal: Integer); safecall;
    function FinalizeThreadPool: Integer; safecall;
    function Get_UnlockStatus: Integer; safecall;
    function Get_PreferIpv6: Integer; safecall;
    procedure Set_PreferIpv6(pVal: Integer); safecall;
    function Get_UsePkcsConstructedEncoding: Integer; safecall;
    procedure Set_UsePkcsConstructedEncoding(pVal: Integer); safecall;
    function ThreadPoolLogLine(const str: WideString): Integer; safecall;
    function Get_VerboseTls: Integer; safecall;
    procedure Set_VerboseTls(pVal: Integer); safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property LastMethodSuccess: Integer read Get_LastMethodSuccess write Set_LastMethodSuccess;
    property LastStringResult: WideString read Get_LastStringResult;
    property LastBinaryResult: OleVariant read Get_LastBinaryResult;
    property LastStringResultLen: Integer read Get_LastStringResultLen;
    property EnableDnsCaching: Integer read Get_EnableDnsCaching write Set_EnableDnsCaching;
    property DnsTimeToLive: Integer read Get_DnsTimeToLive write Set_DnsTimeToLive;
    property DefaultUtf8: Integer read Get_DefaultUtf8 write Set_DefaultUtf8;
    property AnsiCodePage: Integer read Get_AnsiCodePage write Set_AnsiCodePage;
    property MaxThreads: Integer read Get_MaxThreads write Set_MaxThreads;
    property ThreadPoolLogPath: WideString read Get_ThreadPoolLogPath write Set_ThreadPoolLogPath;
    property KeepStringResult: Integer read Get_KeepStringResult write Set_KeepStringResult;
    property DefaultNtlmVersion: Integer read Get_DefaultNtlmVersion write Set_DefaultNtlmVersion;
    property KeepBinaryResult: Integer read Get_KeepBinaryResult write Set_KeepBinaryResult;
    property UnlockStatus: Integer read Get_UnlockStatus;
    property PreferIpv6: Integer read Get_PreferIpv6 write Set_PreferIpv6;
    property UsePkcsConstructedEncoding: Integer read Get_UsePkcsConstructedEncoding write Set_UsePkcsConstructedEncoding;
    property VerboseTls: Integer read Get_VerboseTls write Set_VerboseTls;
  end;

// *********************************************************************//
// DispIntf:  IChilkatGlobalDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {4995C839-42F3-4D4F-8A08-1BA24B5F5E8F}
// *********************************************************************//
  IChilkatGlobalDisp = dispinterface
    ['{4995C839-42F3-4D4F-8A08-1BA24B5F5E8F}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property LastMethodSuccess: Integer dispid 9;
    property LastStringResult: WideString readonly dispid 10;
    property LastBinaryResult: OleVariant readonly dispid 11;
    property LastStringResultLen: Integer readonly dispid 12;
    property EnableDnsCaching: Integer dispid 100;
    property DnsTimeToLive: Integer dispid 101;
    property DefaultUtf8: Integer dispid 102;
    property AnsiCodePage: Integer dispid 103;
    function DnsClearCache: Integer; dispid 104;
    function UnlockBundle(const bundleUnlockCode: WideString): Integer; dispid 105;
    property MaxThreads: Integer dispid 106;
    property ThreadPoolLogPath: WideString dispid 107;
    property KeepStringResult: Integer dispid 108;
    property DefaultNtlmVersion: Integer dispid 109;
    property KeepBinaryResult: Integer dispid 110;
    function FinalizeThreadPool: Integer; dispid 111;
    property UnlockStatus: Integer readonly dispid 112;
    property PreferIpv6: Integer dispid 113;
    property UsePkcsConstructedEncoding: Integer dispid 114;
    function ThreadPoolLogLine(const str: WideString): Integer; dispid 116;
    property VerboseTls: Integer dispid 117;
  end;

// *********************************************************************//
// Interface: IChilkatGzip
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {409F23C5-B973-4611-93DD-8FE839BC5860}
// *********************************************************************//
  IChilkatGzip = interface(IDispatch)
    ['{409F23C5-B973-4611-93DD-8FE839BC5860}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_LastMethodSuccess: Integer; safecall;
    procedure Set_LastMethodSuccess(pVal: Integer); safecall;
    function Get_LastStringResult: WideString; safecall;
    function Get_LastBinaryResult: OleVariant; safecall;
    function Get_LastStringResultLen: Integer; safecall;
    function Get_Comment: WideString; safecall;
    procedure Set_Comment(const pVal: WideString); safecall;
    function Get_ExtraData: OleVariant; safecall;
    procedure Set_ExtraData(pVal: OleVariant); safecall;
    function Get_filename: WideString; safecall;
    procedure Set_filename(const pVal: WideString); safecall;
    function Get_HeartbeatMs: Integer; safecall;
    procedure Set_HeartbeatMs(pVal: Integer); safecall;
    function Get_LastMod: TDateTime; safecall;
    procedure Set_LastMod(pVal: TDateTime); safecall;
    function Get_LastModStr: WideString; safecall;
    procedure Set_LastModStr(const pVal: WideString); safecall;
    function Get_UseCurrentDate: Integer; safecall;
    procedure Set_UseCurrentDate(pVal: Integer); safecall;
    function CompressFile(const inFilename: WideString; const destPath: WideString): Integer; safecall;
    function CompressFileAsync(const inFilename: WideString; const destPath: WideString): IChilkatTask; safecall;
    function CompressFile2(const inFilename: WideString; const embeddedFilename: WideString; 
                           const destPath: WideString): Integer; safecall;
    function CompressFile2Async(const inFilename: WideString; const embeddedFilename: WideString; 
                                const destPath: WideString): IChilkatTask; safecall;
    function CompressFileToMem(const inFilename: WideString): OleVariant; safecall;
    function CompressFileToMemAsync(const inFilename: WideString): IChilkatTask; safecall;
    function CompressMemToFile(inData: OleVariant; const destPath: WideString): Integer; safecall;
    function CompressMemToFileAsync(inData: OleVariant; const destPath: WideString): IChilkatTask; safecall;
    function CompressMemory(inData: OleVariant): OleVariant; safecall;
    function CompressMemoryAsync(inData: OleVariant): IChilkatTask; safecall;
    function CompressString(const inStr: WideString; const destCharset: WideString): OleVariant; safecall;
    function CompressStringAsync(const inStr: WideString; const destCharset: WideString): IChilkatTask; safecall;
    function CompressStringENC(const inStr: WideString; const charset: WideString; 
                               const encoding: WideString): WideString; safecall;
    function CompressStringToFile(const inStr: WideString; const destCharset: WideString; 
                                  const destPath: WideString): Integer; safecall;
    function CompressStringToFileAsync(const inStr: WideString; const destCharset: WideString; 
                                       const destPath: WideString): IChilkatTask; safecall;
    function Decode(const encodedStr: WideString; const encoding: WideString): OleVariant; safecall;
    function DeflateStringENC(const inString: WideString; const charsetName: WideString; 
                              const outputEncoding: WideString): WideString; safecall;
    function Encode(byteData: OleVariant; const encoding: WideString): WideString; safecall;
    function ExamineFile(const inGzFilename: WideString): Integer; safecall;
    function ExamineMemory(inGzData: OleVariant): Integer; safecall;
    function GetDt: ICkDateTime; safecall;
    function InflateStringENC(const inString: WideString; const convertFromCharset: WideString; 
                              const inputEncoding: WideString): WideString; safecall;
    function IsUnlocked: Integer; safecall;
    function ReadFile(const path: WideString): OleVariant; safecall;
    function SetDt(const dt: ICkDateTime): Integer; safecall;
    function UnTarGz(const tgzFilename: WideString; const destDir: WideString; bNoAbsolute: Integer): Integer; safecall;
    function UnTarGzAsync(const tgzFilename: WideString; const destDir: WideString; 
                          bNoAbsolute: Integer): IChilkatTask; safecall;
    function UncompressFile(const srcPath: WideString; const destPath: WideString): Integer; safecall;
    function UncompressFileAsync(const srcPath: WideString; const destPath: WideString): IChilkatTask; safecall;
    function UncompressFileToMem(const inFilename: WideString): OleVariant; safecall;
    function UncompressFileToMemAsync(const inFilename: WideString): IChilkatTask; safecall;
    function UncompressFileToString(const gzFilename: WideString; const charset: WideString): WideString; safecall;
    function UncompressFileToStringAsync(const gzFilename: WideString; const charset: WideString): IChilkatTask; safecall;
    function UncompressMemToFile(inData: OleVariant; const destPath: WideString): Integer; safecall;
    function UncompressMemToFileAsync(inData: OleVariant; const destPath: WideString): IChilkatTask; safecall;
    function UncompressMemory(inData: OleVariant): OleVariant; safecall;
    function UncompressMemoryAsync(inData: OleVariant): IChilkatTask; safecall;
    function UncompressString(inData: OleVariant; const inCharset: WideString): WideString; safecall;
    function UncompressStringAsync(inData: OleVariant; const inCharset: WideString): IChilkatTask; safecall;
    function UncompressStringENC(const inStr: WideString; const charset: WideString; 
                                 const encoding: WideString): WideString; safecall;
    function UnlockComponent(const unlockCode: WideString): Integer; safecall;
    function WriteFile(const path: WideString; BinaryData: OleVariant): Integer; safecall;
    function XfdlToXml(const xfldData: WideString): WideString; safecall;
    function Get_CompressionLevel: Integer; safecall;
    procedure Set_CompressionLevel(pVal: Integer); safecall;
    function Get_AbortCurrent: Integer; safecall;
    procedure Set_AbortCurrent(pVal: Integer); safecall;
    function UncompressBd(const bindat: IChilkatBinData): Integer; safecall;
    function UncompressBdAsync(const bindat: IChilkatBinData): IChilkatTask; safecall;
    function CompressBd(const bindat: IChilkatBinData): Integer; safecall;
    function CompressBdAsync(const bindat: IChilkatBinData): IChilkatTask; safecall;
    function LoadTaskCaller(const task: IChilkatTask): Integer; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property LastMethodSuccess: Integer read Get_LastMethodSuccess write Set_LastMethodSuccess;
    property LastStringResult: WideString read Get_LastStringResult;
    property LastBinaryResult: OleVariant read Get_LastBinaryResult;
    property LastStringResultLen: Integer read Get_LastStringResultLen;
    property Comment: WideString read Get_Comment write Set_Comment;
    property ExtraData: OleVariant read Get_ExtraData write Set_ExtraData;
    property filename: WideString read Get_filename write Set_filename;
    property HeartbeatMs: Integer read Get_HeartbeatMs write Set_HeartbeatMs;
    property LastMod: TDateTime read Get_LastMod write Set_LastMod;
    property LastModStr: WideString read Get_LastModStr write Set_LastModStr;
    property UseCurrentDate: Integer read Get_UseCurrentDate write Set_UseCurrentDate;
    property CompressionLevel: Integer read Get_CompressionLevel write Set_CompressionLevel;
    property AbortCurrent: Integer read Get_AbortCurrent write Set_AbortCurrent;
  end;

// *********************************************************************//
// DispIntf:  IChilkatGzipDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {409F23C5-B973-4611-93DD-8FE839BC5860}
// *********************************************************************//
  IChilkatGzipDisp = dispinterface
    ['{409F23C5-B973-4611-93DD-8FE839BC5860}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property LastMethodSuccess: Integer dispid 9;
    property LastStringResult: WideString readonly dispid 10;
    property LastBinaryResult: OleVariant readonly dispid 11;
    property LastStringResultLen: Integer readonly dispid 12;
    property Comment: WideString dispid 100;
    property ExtraData: OleVariant dispid 101;
    property filename: WideString dispid 102;
    property HeartbeatMs: Integer dispid 103;
    property LastMod: TDateTime dispid 104;
    property LastModStr: WideString dispid 105;
    property UseCurrentDate: Integer dispid 106;
    function CompressFile(const inFilename: WideString; const destPath: WideString): Integer; dispid 107;
    function CompressFileAsync(const inFilename: WideString; const destPath: WideString): IChilkatTask; dispid 607;
    function CompressFile2(const inFilename: WideString; const embeddedFilename: WideString; 
                           const destPath: WideString): Integer; dispid 108;
    function CompressFile2Async(const inFilename: WideString; const embeddedFilename: WideString; 
                                const destPath: WideString): IChilkatTask; dispid 608;
    function CompressFileToMem(const inFilename: WideString): OleVariant; dispid 109;
    function CompressFileToMemAsync(const inFilename: WideString): IChilkatTask; dispid 609;
    function CompressMemToFile(inData: OleVariant; const destPath: WideString): Integer; dispid 110;
    function CompressMemToFileAsync(inData: OleVariant; const destPath: WideString): IChilkatTask; dispid 610;
    function CompressMemory(inData: OleVariant): OleVariant; dispid 111;
    function CompressMemoryAsync(inData: OleVariant): IChilkatTask; dispid 611;
    function CompressString(const inStr: WideString; const destCharset: WideString): OleVariant; dispid 112;
    function CompressStringAsync(const inStr: WideString; const destCharset: WideString): IChilkatTask; dispid 612;
    function CompressStringENC(const inStr: WideString; const charset: WideString; 
                               const encoding: WideString): WideString; dispid 113;
    function CompressStringToFile(const inStr: WideString; const destCharset: WideString; 
                                  const destPath: WideString): Integer; dispid 114;
    function CompressStringToFileAsync(const inStr: WideString; const destCharset: WideString; 
                                       const destPath: WideString): IChilkatTask; dispid 614;
    function Decode(const encodedStr: WideString; const encoding: WideString): OleVariant; dispid 115;
    function DeflateStringENC(const inString: WideString; const charsetName: WideString; 
                              const outputEncoding: WideString): WideString; dispid 116;
    function Encode(byteData: OleVariant; const encoding: WideString): WideString; dispid 117;
    function ExamineFile(const inGzFilename: WideString): Integer; dispid 118;
    function ExamineMemory(inGzData: OleVariant): Integer; dispid 119;
    function GetDt: ICkDateTime; dispid 120;
    function InflateStringENC(const inString: WideString; const convertFromCharset: WideString; 
                              const inputEncoding: WideString): WideString; dispid 121;
    function IsUnlocked: Integer; dispid 122;
    function ReadFile(const path: WideString): OleVariant; dispid 123;
    function SetDt(const dt: ICkDateTime): Integer; dispid 124;
    function UnTarGz(const tgzFilename: WideString; const destDir: WideString; bNoAbsolute: Integer): Integer; dispid 125;
    function UnTarGzAsync(const tgzFilename: WideString; const destDir: WideString; 
                          bNoAbsolute: Integer): IChilkatTask; dispid 625;
    function UncompressFile(const srcPath: WideString; const destPath: WideString): Integer; dispid 126;
    function UncompressFileAsync(const srcPath: WideString; const destPath: WideString): IChilkatTask; dispid 626;
    function UncompressFileToMem(const inFilename: WideString): OleVariant; dispid 127;
    function UncompressFileToMemAsync(const inFilename: WideString): IChilkatTask; dispid 627;
    function UncompressFileToString(const gzFilename: WideString; const charset: WideString): WideString; dispid 128;
    function UncompressFileToStringAsync(const gzFilename: WideString; const charset: WideString): IChilkatTask; dispid 628;
    function UncompressMemToFile(inData: OleVariant; const destPath: WideString): Integer; dispid 129;
    function UncompressMemToFileAsync(inData: OleVariant; const destPath: WideString): IChilkatTask; dispid 629;
    function UncompressMemory(inData: OleVariant): OleVariant; dispid 130;
    function UncompressMemoryAsync(inData: OleVariant): IChilkatTask; dispid 630;
    function UncompressString(inData: OleVariant; const inCharset: WideString): WideString; dispid 131;
    function UncompressStringAsync(inData: OleVariant; const inCharset: WideString): IChilkatTask; dispid 631;
    function UncompressStringENC(const inStr: WideString; const charset: WideString; 
                                 const encoding: WideString): WideString; dispid 132;
    function UnlockComponent(const unlockCode: WideString): Integer; dispid 133;
    function WriteFile(const path: WideString; BinaryData: OleVariant): Integer; dispid 134;
    function XfdlToXml(const xfldData: WideString): WideString; dispid 135;
    property CompressionLevel: Integer dispid 136;
    property AbortCurrent: Integer dispid 137;
    function UncompressBd(const bindat: IChilkatBinData): Integer; dispid 138;
    function UncompressBdAsync(const bindat: IChilkatBinData): IChilkatTask; dispid 638;
    function CompressBd(const bindat: IChilkatBinData): Integer; dispid 139;
    function CompressBdAsync(const bindat: IChilkatBinData): IChilkatTask; dispid 639;
    function LoadTaskCaller(const task: IChilkatTask): Integer; dispid 140;
  end;

// *********************************************************************//
// Interface: IHtmlToText
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {7919C172-F7FD-40BB-9A28-ACC2EA4ED66F}
// *********************************************************************//
  IHtmlToText = interface(IDispatch)
    ['{7919C172-F7FD-40BB-9A28-ACC2EA4ED66F}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_LastMethodSuccess: Integer; safecall;
    procedure Set_LastMethodSuccess(pVal: Integer); safecall;
    function Get_LastStringResult: WideString; safecall;
    function Get_LastBinaryResult: OleVariant; safecall;
    function Get_LastStringResultLen: Integer; safecall;
    function Get_RightMargin: Integer; safecall;
    procedure Set_RightMargin(pVal: Integer); safecall;
    function Get_SuppressLinks: Integer; safecall;
    procedure Set_SuppressLinks(pVal: Integer); safecall;
    function Get_DecodeHtmlEntities: Integer; safecall;
    procedure Set_DecodeHtmlEntities(pVal: Integer); safecall;
    function ReadFileToString(const filename: WideString; const srcCharset: WideString): WideString; safecall;
    function ToText(const html: WideString): WideString; safecall;
    function UnlockComponent(const code: WideString): Integer; safecall;
    function WriteStringToFile(const stringToWrite: WideString; const filename: WideString; 
                               const charset: WideString): Integer; safecall;
    function IsUnlocked: Integer; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property LastMethodSuccess: Integer read Get_LastMethodSuccess write Set_LastMethodSuccess;
    property LastStringResult: WideString read Get_LastStringResult;
    property LastBinaryResult: OleVariant read Get_LastBinaryResult;
    property LastStringResultLen: Integer read Get_LastStringResultLen;
    property RightMargin: Integer read Get_RightMargin write Set_RightMargin;
    property SuppressLinks: Integer read Get_SuppressLinks write Set_SuppressLinks;
    property DecodeHtmlEntities: Integer read Get_DecodeHtmlEntities write Set_DecodeHtmlEntities;
  end;

// *********************************************************************//
// DispIntf:  IHtmlToTextDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {7919C172-F7FD-40BB-9A28-ACC2EA4ED66F}
// *********************************************************************//
  IHtmlToTextDisp = dispinterface
    ['{7919C172-F7FD-40BB-9A28-ACC2EA4ED66F}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property LastMethodSuccess: Integer dispid 9;
    property LastStringResult: WideString readonly dispid 10;
    property LastBinaryResult: OleVariant readonly dispid 11;
    property LastStringResultLen: Integer readonly dispid 12;
    property RightMargin: Integer dispid 100;
    property SuppressLinks: Integer dispid 101;
    property DecodeHtmlEntities: Integer dispid 102;
    function ReadFileToString(const filename: WideString; const srcCharset: WideString): WideString; dispid 103;
    function ToText(const html: WideString): WideString; dispid 104;
    function UnlockComponent(const code: WideString): Integer; dispid 105;
    function WriteStringToFile(const stringToWrite: WideString; const filename: WideString; 
                               const charset: WideString): Integer; dispid 106;
    function IsUnlocked: Integer; dispid 107;
  end;

// *********************************************************************//
// Interface: IHtmlToXml
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {FE82184C-B69F-4B58-9DBC-463FB2F6A422}
// *********************************************************************//
  IHtmlToXml = interface(IDispatch)
    ['{FE82184C-B69F-4B58-9DBC-463FB2F6A422}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_LastMethodSuccess: Integer; safecall;
    procedure Set_LastMethodSuccess(pVal: Integer); safecall;
    function Get_LastStringResult: WideString; safecall;
    function Get_LastBinaryResult: OleVariant; safecall;
    function Get_LastStringResultLen: Integer; safecall;
    function Get_html: WideString; safecall;
    procedure Set_html(const pVal: WideString); safecall;
    function Get_Nbsp: Integer; safecall;
    procedure Set_Nbsp(pVal: Integer); safecall;
    function Get_xmlCharset: WideString; safecall;
    procedure Set_xmlCharset(const pVal: WideString); safecall;
    function Get_DropCustomTags: Integer; safecall;
    procedure Set_DropCustomTags(pVal: Integer); safecall;
    function ConvertFile(const inHtmlPath: WideString; const destXmlPath: WideString): Integer; safecall;
    procedure DropTagType(const tagName: WideString); safecall;
    procedure DropTextFormattingTags; safecall;
    function IsUnlocked: Integer; safecall;
    function ReadFileToString(const filename: WideString; const srcCharset: WideString): WideString; safecall;
    procedure SetHtmlBytes(inData: OleVariant); safecall;
    function SetHtmlFromFile(const filename: WideString): Integer; safecall;
    function ToXml: WideString; safecall;
    procedure UndropTagType(const tagName: WideString); safecall;
    procedure UndropTextFormattingTags; safecall;
    function UnlockComponent(const unlockCode: WideString): Integer; safecall;
    function WriteStringToFile(const stringToWrite: WideString; const filename: WideString; 
                               const charset: WideString): Integer; safecall;
    function ReadFile(const path: WideString): OleVariant; safecall;
    function WriteFile(const path: WideString; fileData: OleVariant): Integer; safecall;
    function SetHtmlBd(const bd: IChilkatBinData): Integer; safecall;
    function ToXmlSb(const sb: IChilkatStringBuilder): Integer; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property LastMethodSuccess: Integer read Get_LastMethodSuccess write Set_LastMethodSuccess;
    property LastStringResult: WideString read Get_LastStringResult;
    property LastBinaryResult: OleVariant read Get_LastBinaryResult;
    property LastStringResultLen: Integer read Get_LastStringResultLen;
    property html: WideString read Get_html write Set_html;
    property Nbsp: Integer read Get_Nbsp write Set_Nbsp;
    property xmlCharset: WideString read Get_xmlCharset write Set_xmlCharset;
    property DropCustomTags: Integer read Get_DropCustomTags write Set_DropCustomTags;
  end;

// *********************************************************************//
// DispIntf:  IHtmlToXmlDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {FE82184C-B69F-4B58-9DBC-463FB2F6A422}
// *********************************************************************//
  IHtmlToXmlDisp = dispinterface
    ['{FE82184C-B69F-4B58-9DBC-463FB2F6A422}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property LastMethodSuccess: Integer dispid 9;
    property LastStringResult: WideString readonly dispid 10;
    property LastBinaryResult: OleVariant readonly dispid 11;
    property LastStringResultLen: Integer readonly dispid 12;
    property html: WideString dispid 100;
    property Nbsp: Integer dispid 101;
    property xmlCharset: WideString dispid 102;
    property DropCustomTags: Integer dispid 103;
    function ConvertFile(const inHtmlPath: WideString; const destXmlPath: WideString): Integer; dispid 104;
    procedure DropTagType(const tagName: WideString); dispid 105;
    procedure DropTextFormattingTags; dispid 106;
    function IsUnlocked: Integer; dispid 107;
    function ReadFileToString(const filename: WideString; const srcCharset: WideString): WideString; dispid 108;
    procedure SetHtmlBytes(inData: OleVariant); dispid 109;
    function SetHtmlFromFile(const filename: WideString): Integer; dispid 110;
    function ToXml: WideString; dispid 111;
    procedure UndropTagType(const tagName: WideString); dispid 112;
    procedure UndropTextFormattingTags; dispid 113;
    function UnlockComponent(const unlockCode: WideString): Integer; dispid 114;
    function WriteStringToFile(const stringToWrite: WideString; const filename: WideString; 
                               const charset: WideString): Integer; dispid 115;
    function ReadFile(const path: WideString): OleVariant; dispid 116;
    function WriteFile(const path: WideString; fileData: OleVariant): Integer; dispid 117;
    function SetHtmlBd(const bd: IChilkatBinData): Integer; dispid 118;
    function ToXmlSb(const sb: IChilkatStringBuilder): Integer; dispid 119;
  end;

// *********************************************************************//
// Interface: IChilkatImap
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2E0EB5F9-CD80-407B-B5F3-60AE67679967}
// *********************************************************************//
  IChilkatImap = interface(IDispatch)
    ['{2E0EB5F9-CD80-407B-B5F3-60AE67679967}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_LastMethodSuccess: Integer; safecall;
    procedure Set_LastMethodSuccess(pVal: Integer); safecall;
    function Get_LastStringResult: WideString; safecall;
    function Get_LastBinaryResult: OleVariant; safecall;
    function Get_LastStringResultLen: Integer; safecall;
    function Get_AppendSeen: Integer; safecall;
    procedure Set_AppendSeen(pVal: Integer); safecall;
    function Get_AppendUid: Integer; safecall;
    function Get_AuthMethod: WideString; safecall;
    procedure Set_AuthMethod(const pVal: WideString); safecall;
    function Get_AuthzId: WideString; safecall;
    procedure Set_AuthzId(const pVal: WideString); safecall;
    function Get_AutoDownloadAttachments: Integer; safecall;
    procedure Set_AutoDownloadAttachments(pVal: Integer); safecall;
    function Get_AutoFix: Integer; safecall;
    procedure Set_AutoFix(pVal: Integer); safecall;
    function Get_ClientIpAddress: WideString; safecall;
    procedure Set_ClientIpAddress(const pVal: WideString); safecall;
    function Get_ConnectTimeout: Integer; safecall;
    procedure Set_ConnectTimeout(pVal: Integer); safecall;
    function Get_ConnectedToHost: WideString; safecall;
    function Get_domain: WideString; safecall;
    procedure Set_domain(const pVal: WideString); safecall;
    function Get_HeartbeatMs: Integer; safecall;
    procedure Set_HeartbeatMs(pVal: Integer); safecall;
    function Get_HttpProxyAuthMethod: WideString; safecall;
    procedure Set_HttpProxyAuthMethod(const pVal: WideString); safecall;
    function Get_HttpProxyDomain: WideString; safecall;
    procedure Set_HttpProxyDomain(const pVal: WideString); safecall;
    function Get_HttpProxyHostname: WideString; safecall;
    procedure Set_HttpProxyHostname(const pVal: WideString); safecall;
    function Get_HttpProxyPassword: WideString; safecall;
    procedure Set_HttpProxyPassword(const pVal: WideString); safecall;
    function Get_HttpProxyPort: Integer; safecall;
    procedure Set_HttpProxyPort(pVal: Integer); safecall;
    function Get_HttpProxyUsername: WideString; safecall;
    procedure Set_HttpProxyUsername(const pVal: WideString); safecall;
    function Get_KeepSessionLog: Integer; safecall;
    procedure Set_KeepSessionLog(pVal: Integer); safecall;
    function Get_LastAppendedMime: WideString; safecall;
    function Get_LastCommand: WideString; safecall;
    function Get_LastIntermediateResponse: WideString; safecall;
    function Get_LastResponse: WideString; safecall;
    function Get_LoggedInUser: WideString; safecall;
    function Get_NumMessages: Integer; safecall;
    function Get_PeekMode: Integer; safecall;
    procedure Set_PeekMode(pVal: Integer); safecall;
    function Get_port: Integer; safecall;
    procedure Set_port(pVal: Integer); safecall;
    function Get_ReadTimeout: Integer; safecall;
    procedure Set_ReadTimeout(pVal: Integer); safecall;
    function Get_SearchCharset: WideString; safecall;
    procedure Set_SearchCharset(const pVal: WideString); safecall;
    function Get_SelectedMailbox: WideString; safecall;
    function Get_SendBufferSize: Integer; safecall;
    procedure Set_SendBufferSize(pVal: Integer); safecall;
    function Get_SeparatorChar: WideString; safecall;
    procedure Set_SeparatorChar(const pVal: WideString); safecall;
    function Get_SessionLog: WideString; safecall;
    function Get_SoRcvBuf: Integer; safecall;
    procedure Set_SoRcvBuf(pVal: Integer); safecall;
    function Get_SoSndBuf: Integer; safecall;
    procedure Set_SoSndBuf(pVal: Integer); safecall;
    function Get_SocksHostname: WideString; safecall;
    procedure Set_SocksHostname(const pVal: WideString); safecall;
    function Get_SocksPassword: WideString; safecall;
    procedure Set_SocksPassword(const pVal: WideString); safecall;
    function Get_SocksPort: Integer; safecall;
    procedure Set_SocksPort(pVal: Integer); safecall;
    function Get_SocksUsername: WideString; safecall;
    procedure Set_SocksUsername(const pVal: WideString); safecall;
    function Get_SocksVersion: Integer; safecall;
    procedure Set_SocksVersion(pVal: Integer); safecall;
    function Get_Ssl: Integer; safecall;
    procedure Set_Ssl(pVal: Integer); safecall;
    function Get_SslProtocol: WideString; safecall;
    procedure Set_SslProtocol(const pVal: WideString); safecall;
    function Get_SslServerCertVerified: Integer; safecall;
    function Get_StartTls: Integer; safecall;
    procedure Set_StartTls(pVal: Integer); safecall;
    function Get_UidNext: Integer; safecall;
    function Get_UidValidity: Integer; safecall;
    function AddPfxSourceData(pfxBytes: OleVariant; const pfxPassword: WideString): Integer; safecall;
    function AddPfxSourceFile(const pfxFilePath: WideString; const pfxPassword: WideString): Integer; safecall;
    function AppendMail(const mailbox: WideString; const email: IChilkatEmail): Integer; safecall;
    function AppendMailAsync(const mailbox: WideString; const email: IChilkatEmail): IChilkatTask; safecall;
    function AppendMime(const mailbox: WideString; const mimeText: WideString): Integer; safecall;
    function AppendMimeAsync(const mailbox: WideString; const mimeText: WideString): IChilkatTask; safecall;
    function AppendMimeWithDate(const mailbox: WideString; const mimeText: WideString; 
                                internalDate: TDateTime): Integer; safecall;
    function AppendMimeWithDateStr(const mailbox: WideString; const mimeText: WideString; 
                                   const internalDateStr: WideString): Integer; safecall;
    function AppendMimeWithDateStrAsync(const mailbox: WideString; const mimeText: WideString; 
                                        const internalDateStr: WideString): IChilkatTask; safecall;
    function AppendMimeWithFlags(const mailbox: WideString; const mimeText: WideString; 
                                 seen: Integer; flagged: Integer; answered: Integer; draft: Integer): Integer; safecall;
    function AppendMimeWithFlagsAsync(const mailbox: WideString; const mimeText: WideString; 
                                      seen: Integer; flagged: Integer; answered: Integer; 
                                      draft: Integer): IChilkatTask; safecall;
    function CheckForNewEmail: IMessageSet; safecall;
    function CheckForNewEmailAsync: IChilkatTask; safecall;
    procedure ClearSessionLog; safecall;
    function CloseMailbox(const mailbox: WideString): Integer; safecall;
    function CloseMailboxAsync(const mailbox: WideString): IChilkatTask; safecall;
    function Connect(const domainName: WideString): Integer; safecall;
    function ConnectAsync(const domainName: WideString): IChilkatTask; safecall;
    function Copy(msgId: Integer; bUid: Integer; const copyToMailbox: WideString): Integer; safecall;
    function CopyAsync(msgId: Integer; bUid: Integer; const copyToMailbox: WideString): IChilkatTask; safecall;
    function CopyMultiple(const messageSet: IMessageSet; const copyToMailbox: WideString): Integer; safecall;
    function CopyMultipleAsync(const messageSet: IMessageSet; const copyToMailbox: WideString): IChilkatTask; safecall;
    function CopySequence(startSeqNum: Integer; Count: Integer; const copyToMailbox: WideString): Integer; safecall;
    function CopySequenceAsync(startSeqNum: Integer; Count: Integer; const copyToMailbox: WideString): IChilkatTask; safecall;
    function CreateMailbox(const mailbox: WideString): Integer; safecall;
    function CreateMailboxAsync(const mailbox: WideString): IChilkatTask; safecall;
    function DeleteMailbox(const mailbox: WideString): Integer; safecall;
    function DeleteMailboxAsync(const mailbox: WideString): IChilkatTask; safecall;
    function Disconnect: Integer; safecall;
    function DisconnectAsync: IChilkatTask; safecall;
    function ExamineMailbox(const mailbox: WideString): Integer; safecall;
    function ExamineMailboxAsync(const mailbox: WideString): IChilkatTask; safecall;
    function Expunge: Integer; safecall;
    function ExpungeAsync: IChilkatTask; safecall;
    function ExpungeAndClose: Integer; safecall;
    function ExpungeAndCloseAsync: IChilkatTask; safecall;
    function FetchAttachment(const emailObject: IChilkatEmail; attachmentIndex: Integer; 
                             const saveToPath: WideString): Integer; safecall;
    function FetchAttachmentAsync(const emailObject: IChilkatEmail; attachmentIndex: Integer; 
                                  const saveToPath: WideString): IChilkatTask; safecall;
    function FetchAttachmentBytes(const email: IChilkatEmail; attachIndex: Integer): OleVariant; safecall;
    function FetchAttachmentBytesAsync(const email: IChilkatEmail; attachIndex: Integer): IChilkatTask; safecall;
    function FetchAttachmentString(const emailObject: IChilkatEmail; attachmentIndex: Integer; 
                                   const charset: WideString): WideString; safecall;
    function FetchAttachmentStringAsync(const emailObject: IChilkatEmail; attachmentIndex: Integer; 
                                        const charset: WideString): IChilkatTask; safecall;
    function FetchBundle(const messageSet: IMessageSet): IChilkatEmailBundle; safecall;
    function FetchBundleAsync(const messageSet: IMessageSet): IChilkatTask; safecall;
    function FetchBundleAsMime(const messageSet: IMessageSet): ICkStringArray; safecall;
    function FetchBundleAsMimeAsync(const messageSet: IMessageSet): IChilkatTask; safecall;
    function FetchChunk(startSeqNum: Integer; Count: Integer; const failedSet: IMessageSet; 
                        const fetchedSet: IMessageSet): IChilkatEmailBundle; safecall;
    function FetchChunkAsync(startSeqNum: Integer; Count: Integer; const failedSet: IMessageSet; 
                             const fetchedSet: IMessageSet): IChilkatTask; safecall;
    function FetchFlags(msgId: Integer; bUid: Integer): WideString; safecall;
    function FetchFlagsAsync(msgId: Integer; bUid: Integer): IChilkatTask; safecall;
    function FetchHeaders(const messageSet: IMessageSet): IChilkatEmailBundle; safecall;
    function FetchHeadersAsync(const messageSet: IMessageSet): IChilkatTask; safecall;
    function FetchSequence(startSeqNum: Integer; NumMessages: Integer): IChilkatEmailBundle; safecall;
    function FetchSequenceAsync(startSeqNum: Integer; NumMessages: Integer): IChilkatTask; safecall;
    function FetchSequenceAsMime(startSeqNum: Integer; NumMessages: Integer): ICkStringArray; safecall;
    function FetchSequenceAsMimeAsync(startSeqNum: Integer; NumMessages: Integer): IChilkatTask; safecall;
    function FetchSequenceHeaders(startSeqNum: Integer; NumMessages: Integer): IChilkatEmailBundle; safecall;
    function FetchSequenceHeadersAsync(startSeqNum: Integer; NumMessages: Integer): IChilkatTask; safecall;
    function FetchSingle(msgId: Integer; bUid: Integer): IChilkatEmail; safecall;
    function FetchSingleAsync(msgId: Integer; bUid: Integer): IChilkatTask; safecall;
    function FetchSingleAsMime(msgId: Integer; bUid: Integer): WideString; safecall;
    function FetchSingleAsMimeAsync(msgId: Integer; bUid: Integer): IChilkatTask; safecall;
    function FetchSingleHeader(msgId: Integer; bUid: Integer): IChilkatEmail; safecall;
    function FetchSingleHeaderAsync(msgId: Integer; bUid: Integer): IChilkatTask; safecall;
    function FetchSingleHeaderAsMime(msgId: Integer; bUid: Integer): WideString; safecall;
    function FetchSingleHeaderAsMimeAsync(msgId: Integer; bUid: Integer): IChilkatTask; safecall;
    function GetAllUids: IMessageSet; safecall;
    function GetAllUidsAsync: IChilkatTask; safecall;
    function GetMailAttachFilename(const email: IChilkatEmail; attachIndex: Integer): WideString; safecall;
    function GetMailAttachSize(const email: IChilkatEmail; attachIndex: Integer): Integer; safecall;
    function GetMailFlag(const email: IChilkatEmail; const flagName: WideString): Integer; safecall;
    function GetMailNumAttach(const email: IChilkatEmail): Integer; safecall;
    function GetMailSize(const email: IChilkatEmail): Integer; safecall;
    function GetSslServerCert: IChilkatCert; safecall;
    function IsConnected: Integer; safecall;
    function IsLoggedIn: Integer; safecall;
    function IsUnlocked: Integer; safecall;
    function ListMailboxes(const reference: WideString; const wildcardedMailbox: WideString): IMailboxes; safecall;
    function ListMailboxesAsync(const reference: WideString; const wildcardedMailbox: WideString): IChilkatTask; safecall;
    function ListSubscribed(const reference: WideString; const wildcardedMailbox: WideString): IMailboxes; safecall;
    function ListSubscribedAsync(const reference: WideString; const wildcardedMailbox: WideString): IChilkatTask; safecall;
    function login(const loginName: WideString; const password: WideString): Integer; safecall;
    function LoginAsync(const loginName: WideString; const password: WideString): IChilkatTask; safecall;
    function Logout: Integer; safecall;
    function LogoutAsync: IChilkatTask; safecall;
    function Noop: Integer; safecall;
    function NoopAsync: IChilkatTask; safecall;
    function RefetchMailFlags(const email: IChilkatEmail): Integer; safecall;
    function RefetchMailFlagsAsync(const email: IChilkatEmail): IChilkatTask; safecall;
    function RenameMailbox(const fromMailbox: WideString; const toMailbox: WideString): Integer; safecall;
    function RenameMailboxAsync(const fromMailbox: WideString; const toMailbox: WideString): IChilkatTask; safecall;
    function Search(const criteria: WideString; bUid: Integer): IMessageSet; safecall;
    function SearchAsync(const criteria: WideString; bUid: Integer): IChilkatTask; safecall;
    function SelectMailbox(const mailbox: WideString): Integer; safecall;
    function SelectMailboxAsync(const mailbox: WideString): IChilkatTask; safecall;
    function SendRawCommand(const cmd: WideString): WideString; safecall;
    function SendRawCommandAsync(const cmd: WideString): IChilkatTask; safecall;
    function SendRawCommandB(const cmd: WideString): OleVariant; safecall;
    function SendRawCommandBAsync(const cmd: WideString): IChilkatTask; safecall;
    function SendRawCommandC(cmd: OleVariant): OleVariant; safecall;
    function SendRawCommandCAsync(cmd: OleVariant): IChilkatTask; safecall;
    function SetCSP(const csp: IChilkatCsp): Integer; safecall;
    function SetDecryptCert2(const cert: IChilkatCert; const key: IPrivateKey): Integer; safecall;
    function SetFlag(msgId: Integer; bUid: Integer; const flagName: WideString; value: Integer): Integer; safecall;
    function SetFlagAsync(msgId: Integer; bUid: Integer; const flagName: WideString; value: Integer): IChilkatTask; safecall;
    function SetFlags(const messageSet: IMessageSet; const flagName: WideString; value: Integer): Integer; safecall;
    function SetFlagsAsync(const messageSet: IMessageSet; const flagName: WideString; value: Integer): IChilkatTask; safecall;
    function SetMailFlag(const email: IChilkatEmail; const flagName: WideString; value: Integer): Integer; safecall;
    function SetMailFlagAsync(const email: IChilkatEmail; const flagName: WideString; value: Integer): IChilkatTask; safecall;
    function SetSslClientCert(const cert: IChilkatCert): Integer; safecall;
    function SetSslClientCertPem(const pemDataOrFilename: WideString; const pemPassword: WideString): Integer; safecall;
    function SetSslClientCertPfx(const pfxFilename: WideString; const pfxPassword: WideString): Integer; safecall;
    function SshAuthenticatePk(const sshLogin: WideString; const privateKey: IChilkatSshKey): Integer; safecall;
    function SshAuthenticatePkAsync(const sshLogin: WideString; const privateKey: IChilkatSshKey): IChilkatTask; safecall;
    function SshAuthenticatePw(const sshLogin: WideString; const sshPassword: WideString): Integer; safecall;
    function SshAuthenticatePwAsync(const sshLogin: WideString; const sshPassword: WideString): IChilkatTask; safecall;
    function SshTunnel(const sshServerHostname: WideString; sshPort: Integer): Integer; safecall;
    function StoreFlags(msgId: Integer; bUid: Integer; const flagNames: WideString; value: Integer): Integer; safecall;
    function StoreFlagsAsync(msgId: Integer; bUid: Integer; const flagNames: WideString; 
                             value: Integer): IChilkatTask; safecall;
    function Subscribe(const mailbox: WideString): Integer; safecall;
    function SubscribeAsync(const mailbox: WideString): IChilkatTask; safecall;
    function UnlockComponent(const unlockCode: WideString): Integer; safecall;
    function Unsubscribe(const mailbox: WideString): Integer; safecall;
    function UnsubscribeAsync(const mailbox: WideString): IChilkatTask; safecall;
    function Capability: WideString; safecall;
    function CapabilityAsync: IChilkatTask; safecall;
    function IdleStart: Integer; safecall;
    function IdleStartAsync: IChilkatTask; safecall;
    function IdleDone: Integer; safecall;
    function IdleDoneAsync: IChilkatTask; safecall;
    function IdleCheck(timeoutMs: Integer): WideString; safecall;
    function IdleCheckAsync(timeoutMs: Integer): IChilkatTask; safecall;
    function Get_RequireSslCertVerify: Integer; safecall;
    procedure Set_RequireSslCertVerify(pVal: Integer); safecall;
    function Get_PreferIpv6: Integer; safecall;
    procedure Set_PreferIpv6(pVal: Integer); safecall;
    function UseCertVault(const vault: IChilkatXmlCertVault): Integer; safecall;
    function SetDecryptCert(const cert: IChilkatCert): Integer; safecall;
    function Get_LastResponseCode: WideString; safecall;
    function CheckConnection: Integer; safecall;
    function GetMailboxStatus(const mailbox: WideString): WideString; safecall;
    function GetMailboxStatusAsync(const mailbox: WideString): IChilkatTask; safecall;
    function Get_SslAllowedCiphers: WideString; safecall;
    procedure Set_SslAllowedCiphers(const pVal: WideString); safecall;
    function Get_PercentDoneScale: Integer; safecall;
    procedure Set_PercentDoneScale(pVal: Integer); safecall;
    function Get_TlsVersion: WideString; safecall;
    function Get_TlsCipherSuite: WideString; safecall;
    function SshOpenTunnel(const sshHostname: WideString; sshPort: Integer): Integer; safecall;
    function SshOpenTunnelAsync(const sshHostname: WideString; sshPort: Integer): IChilkatTask; safecall;
    function SshCloseTunnel: Integer; safecall;
    function SshCloseTunnelAsync: IChilkatTask; safecall;
    function UseSshTunnel(const tunnel: IChilkatSocket): Integer; safecall;
    function UseSsh(const ssh: IChilkatSsh): Integer; safecall;
    function Get_TlsPinSet: WideString; safecall;
    procedure Set_TlsPinSet(const pVal: WideString); safecall;
    function Get_AbortCurrent: Integer; safecall;
    procedure Set_AbortCurrent(pVal: Integer); safecall;
    function HasCapability(const name: WideString; const capabilityResponse: WideString): Integer; safecall;
    function GetQuotaRoot(const mailboxName: WideString): WideString; safecall;
    function GetQuotaRootAsync(const mailboxName: WideString): IChilkatTask; safecall;
    function GetQuota(const quotaRoot: WideString): WideString; safecall;
    function GetQuotaAsync(const quotaRoot: WideString): IChilkatTask; safecall;
    function SetQuota(const quotaRoot: WideString; const Resource: WideString; quota: Integer): Integer; safecall;
    function SetQuotaAsync(const quotaRoot: WideString; const Resource: WideString; quota: Integer): IChilkatTask; safecall;
    function FetchSingleAsMimeSb(msgId: Integer; bUid: Integer; const sbMime: IChilkatStringBuilder): Integer; safecall;
    function FetchSingleAsMimeSbAsync(msgId: Integer; bUid: Integer; 
                                      const sbMime: IChilkatStringBuilder): IChilkatTask; safecall;
    function FetchAttachmentSb(const email: IChilkatEmail; attachmentIndex: Integer; 
                               const charset: WideString; const sb: IChilkatStringBuilder): Integer; safecall;
    function FetchAttachmentSbAsync(const email: IChilkatEmail; attachmentIndex: Integer; 
                                    const charset: WideString; const sb: IChilkatStringBuilder): IChilkatTask; safecall;
    function FetchAttachmentBd(const email: IChilkatEmail; attachmentIndex: Integer; 
                               const binData: IChilkatBinData): Integer; safecall;
    function FetchAttachmentBdAsync(const email: IChilkatEmail; attachmentIndex: Integer; 
                                    const binData: IChilkatBinData): IChilkatTask; safecall;
    function AppendMimeWithFlagsSb(const mailbox: WideString; const sbMime: IChilkatStringBuilder; 
                                   seen: Integer; flagged: Integer; answered: Integer; 
                                   draft: Integer): Integer; safecall;
    function AppendMimeWithFlagsSbAsync(const mailbox: WideString; 
                                        const sbMime: IChilkatStringBuilder; seen: Integer; 
                                        flagged: Integer; answered: Integer; draft: Integer): IChilkatTask; safecall;
    function MoveMessages(const messageSet: IMessageSet; const destFolder: WideString): Integer; safecall;
    function MoveMessagesAsync(const messageSet: IMessageSet; const destFolder: WideString): IChilkatTask; safecall;
    function LoginSecure(const loginName: IChilkatSecureString; const password: IChilkatSecureString): Integer; safecall;
    function LoginSecureAsync(const loginName: IChilkatSecureString; 
                              const password: IChilkatSecureString): IChilkatTask; safecall;
    function Sort(const sortCriteria: WideString; const charset: WideString; 
                  const searchCriteria: WideString; bUid: Integer): IMessageSet; safecall;
    function SortAsync(const sortCriteria: WideString; const charset: WideString; 
                       const searchCriteria: WideString; bUid: Integer): IChilkatTask; safecall;
    function FetchSingleBd(msgId: Integer; bUid: Integer; const mimeData: IChilkatBinData): Integer; safecall;
    function FetchSingleBdAsync(msgId: Integer; bUid: Integer; const mimeData: IChilkatBinData): IChilkatTask; safecall;
    function ThreadCmd(const threadAlg: WideString; const charset: WideString; 
                       const searchCriteria: WideString; bUid: Integer): IChilkatJsonObject; safecall;
    function ThreadCmdAsync(const threadAlg: WideString; const charset: WideString; 
                            const searchCriteria: WideString; bUid: Integer): IChilkatTask; safecall;
    function Get_UncommonOptions: WideString; safecall;
    procedure Set_UncommonOptions(const pVal: WideString); safecall;
    function LoadTaskCaller(const task: IChilkatTask): Integer; safecall;
    function Get_HighestModSeq: WideString; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property LastMethodSuccess: Integer read Get_LastMethodSuccess write Set_LastMethodSuccess;
    property LastStringResult: WideString read Get_LastStringResult;
    property LastBinaryResult: OleVariant read Get_LastBinaryResult;
    property LastStringResultLen: Integer read Get_LastStringResultLen;
    property AppendSeen: Integer read Get_AppendSeen write Set_AppendSeen;
    property AppendUid: Integer read Get_AppendUid;
    property AuthMethod: WideString read Get_AuthMethod write Set_AuthMethod;
    property AuthzId: WideString read Get_AuthzId write Set_AuthzId;
    property AutoDownloadAttachments: Integer read Get_AutoDownloadAttachments write Set_AutoDownloadAttachments;
    property AutoFix: Integer read Get_AutoFix write Set_AutoFix;
    property ClientIpAddress: WideString read Get_ClientIpAddress write Set_ClientIpAddress;
    property ConnectTimeout: Integer read Get_ConnectTimeout write Set_ConnectTimeout;
    property ConnectedToHost: WideString read Get_ConnectedToHost;
    property domain: WideString read Get_domain write Set_domain;
    property HeartbeatMs: Integer read Get_HeartbeatMs write Set_HeartbeatMs;
    property HttpProxyAuthMethod: WideString read Get_HttpProxyAuthMethod write Set_HttpProxyAuthMethod;
    property HttpProxyDomain: WideString read Get_HttpProxyDomain write Set_HttpProxyDomain;
    property HttpProxyHostname: WideString read Get_HttpProxyHostname write Set_HttpProxyHostname;
    property HttpProxyPassword: WideString read Get_HttpProxyPassword write Set_HttpProxyPassword;
    property HttpProxyPort: Integer read Get_HttpProxyPort write Set_HttpProxyPort;
    property HttpProxyUsername: WideString read Get_HttpProxyUsername write Set_HttpProxyUsername;
    property KeepSessionLog: Integer read Get_KeepSessionLog write Set_KeepSessionLog;
    property LastAppendedMime: WideString read Get_LastAppendedMime;
    property LastCommand: WideString read Get_LastCommand;
    property LastIntermediateResponse: WideString read Get_LastIntermediateResponse;
    property LastResponse: WideString read Get_LastResponse;
    property LoggedInUser: WideString read Get_LoggedInUser;
    property NumMessages: Integer read Get_NumMessages;
    property PeekMode: Integer read Get_PeekMode write Set_PeekMode;
    property port: Integer read Get_port write Set_port;
    property ReadTimeout: Integer read Get_ReadTimeout write Set_ReadTimeout;
    property SearchCharset: WideString read Get_SearchCharset write Set_SearchCharset;
    property SelectedMailbox: WideString read Get_SelectedMailbox;
    property SendBufferSize: Integer read Get_SendBufferSize write Set_SendBufferSize;
    property SeparatorChar: WideString read Get_SeparatorChar write Set_SeparatorChar;
    property SessionLog: WideString read Get_SessionLog;
    property SoRcvBuf: Integer read Get_SoRcvBuf write Set_SoRcvBuf;
    property SoSndBuf: Integer read Get_SoSndBuf write Set_SoSndBuf;
    property SocksHostname: WideString read Get_SocksHostname write Set_SocksHostname;
    property SocksPassword: WideString read Get_SocksPassword write Set_SocksPassword;
    property SocksPort: Integer read Get_SocksPort write Set_SocksPort;
    property SocksUsername: WideString read Get_SocksUsername write Set_SocksUsername;
    property SocksVersion: Integer read Get_SocksVersion write Set_SocksVersion;
    property Ssl: Integer read Get_Ssl write Set_Ssl;
    property SslProtocol: WideString read Get_SslProtocol write Set_SslProtocol;
    property SslServerCertVerified: Integer read Get_SslServerCertVerified;
    property StartTls: Integer read Get_StartTls write Set_StartTls;
    property UidNext: Integer read Get_UidNext;
    property UidValidity: Integer read Get_UidValidity;
    property RequireSslCertVerify: Integer read Get_RequireSslCertVerify write Set_RequireSslCertVerify;
    property PreferIpv6: Integer read Get_PreferIpv6 write Set_PreferIpv6;
    property LastResponseCode: WideString read Get_LastResponseCode;
    property SslAllowedCiphers: WideString read Get_SslAllowedCiphers write Set_SslAllowedCiphers;
    property PercentDoneScale: Integer read Get_PercentDoneScale write Set_PercentDoneScale;
    property TlsVersion: WideString read Get_TlsVersion;
    property TlsCipherSuite: WideString read Get_TlsCipherSuite;
    property TlsPinSet: WideString read Get_TlsPinSet write Set_TlsPinSet;
    property AbortCurrent: Integer read Get_AbortCurrent write Set_AbortCurrent;
    property UncommonOptions: WideString read Get_UncommonOptions write Set_UncommonOptions;
    property HighestModSeq: WideString read Get_HighestModSeq;
  end;

// *********************************************************************//
// DispIntf:  IChilkatImapDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2E0EB5F9-CD80-407B-B5F3-60AE67679967}
// *********************************************************************//
  IChilkatImapDisp = dispinterface
    ['{2E0EB5F9-CD80-407B-B5F3-60AE67679967}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property LastMethodSuccess: Integer dispid 9;
    property LastStringResult: WideString readonly dispid 10;
    property LastBinaryResult: OleVariant readonly dispid 11;
    property LastStringResultLen: Integer readonly dispid 12;
    property AppendSeen: Integer dispid 100;
    property AppendUid: Integer readonly dispid 101;
    property AuthMethod: WideString dispid 102;
    property AuthzId: WideString dispid 103;
    property AutoDownloadAttachments: Integer dispid 104;
    property AutoFix: Integer dispid 105;
    property ClientIpAddress: WideString dispid 106;
    property ConnectTimeout: Integer dispid 107;
    property ConnectedToHost: WideString readonly dispid 108;
    property domain: WideString dispid 109;
    property HeartbeatMs: Integer dispid 110;
    property HttpProxyAuthMethod: WideString dispid 111;
    property HttpProxyDomain: WideString dispid 112;
    property HttpProxyHostname: WideString dispid 113;
    property HttpProxyPassword: WideString dispid 114;
    property HttpProxyPort: Integer dispid 115;
    property HttpProxyUsername: WideString dispid 116;
    property KeepSessionLog: Integer dispid 117;
    property LastAppendedMime: WideString readonly dispid 118;
    property LastCommand: WideString readonly dispid 119;
    property LastIntermediateResponse: WideString readonly dispid 120;
    property LastResponse: WideString readonly dispid 121;
    property LoggedInUser: WideString readonly dispid 122;
    property NumMessages: Integer readonly dispid 123;
    property PeekMode: Integer dispid 124;
    property port: Integer dispid 125;
    property ReadTimeout: Integer dispid 126;
    property SearchCharset: WideString dispid 127;
    property SelectedMailbox: WideString readonly dispid 128;
    property SendBufferSize: Integer dispid 129;
    property SeparatorChar: WideString dispid 130;
    property SessionLog: WideString readonly dispid 131;
    property SoRcvBuf: Integer dispid 132;
    property SoSndBuf: Integer dispid 133;
    property SocksHostname: WideString dispid 134;
    property SocksPassword: WideString dispid 135;
    property SocksPort: Integer dispid 136;
    property SocksUsername: WideString dispid 137;
    property SocksVersion: Integer dispid 138;
    property Ssl: Integer dispid 139;
    property SslProtocol: WideString dispid 140;
    property SslServerCertVerified: Integer readonly dispid 141;
    property StartTls: Integer dispid 142;
    property UidNext: Integer readonly dispid 143;
    property UidValidity: Integer readonly dispid 144;
    function AddPfxSourceData(pfxBytes: OleVariant; const pfxPassword: WideString): Integer; dispid 145;
    function AddPfxSourceFile(const pfxFilePath: WideString; const pfxPassword: WideString): Integer; dispid 146;
    function AppendMail(const mailbox: WideString; const email: IChilkatEmail): Integer; dispid 147;
    function AppendMailAsync(const mailbox: WideString; const email: IChilkatEmail): IChilkatTask; dispid 647;
    function AppendMime(const mailbox: WideString; const mimeText: WideString): Integer; dispid 148;
    function AppendMimeAsync(const mailbox: WideString; const mimeText: WideString): IChilkatTask; dispid 648;
    function AppendMimeWithDate(const mailbox: WideString; const mimeText: WideString; 
                                internalDate: TDateTime): Integer; dispid 149;
    function AppendMimeWithDateStr(const mailbox: WideString; const mimeText: WideString; 
                                   const internalDateStr: WideString): Integer; dispid 150;
    function AppendMimeWithDateStrAsync(const mailbox: WideString; const mimeText: WideString; 
                                        const internalDateStr: WideString): IChilkatTask; dispid 650;
    function AppendMimeWithFlags(const mailbox: WideString; const mimeText: WideString; 
                                 seen: Integer; flagged: Integer; answered: Integer; draft: Integer): Integer; dispid 151;
    function AppendMimeWithFlagsAsync(const mailbox: WideString; const mimeText: WideString; 
                                      seen: Integer; flagged: Integer; answered: Integer; 
                                      draft: Integer): IChilkatTask; dispid 651;
    function CheckForNewEmail: IMessageSet; dispid 152;
    function CheckForNewEmailAsync: IChilkatTask; dispid 652;
    procedure ClearSessionLog; dispid 153;
    function CloseMailbox(const mailbox: WideString): Integer; dispid 154;
    function CloseMailboxAsync(const mailbox: WideString): IChilkatTask; dispid 654;
    function Connect(const domainName: WideString): Integer; dispid 155;
    function ConnectAsync(const domainName: WideString): IChilkatTask; dispid 655;
    function Copy(msgId: Integer; bUid: Integer; const copyToMailbox: WideString): Integer; dispid 156;
    function CopyAsync(msgId: Integer; bUid: Integer; const copyToMailbox: WideString): IChilkatTask; dispid 656;
    function CopyMultiple(const messageSet: IMessageSet; const copyToMailbox: WideString): Integer; dispid 157;
    function CopyMultipleAsync(const messageSet: IMessageSet; const copyToMailbox: WideString): IChilkatTask; dispid 657;
    function CopySequence(startSeqNum: Integer; Count: Integer; const copyToMailbox: WideString): Integer; dispid 158;
    function CopySequenceAsync(startSeqNum: Integer; Count: Integer; const copyToMailbox: WideString): IChilkatTask; dispid 658;
    function CreateMailbox(const mailbox: WideString): Integer; dispid 159;
    function CreateMailboxAsync(const mailbox: WideString): IChilkatTask; dispid 659;
    function DeleteMailbox(const mailbox: WideString): Integer; dispid 160;
    function DeleteMailboxAsync(const mailbox: WideString): IChilkatTask; dispid 660;
    function Disconnect: Integer; dispid 161;
    function DisconnectAsync: IChilkatTask; dispid 661;
    function ExamineMailbox(const mailbox: WideString): Integer; dispid 162;
    function ExamineMailboxAsync(const mailbox: WideString): IChilkatTask; dispid 662;
    function Expunge: Integer; dispid 163;
    function ExpungeAsync: IChilkatTask; dispid 663;
    function ExpungeAndClose: Integer; dispid 164;
    function ExpungeAndCloseAsync: IChilkatTask; dispid 664;
    function FetchAttachment(const emailObject: IChilkatEmail; attachmentIndex: Integer; 
                             const saveToPath: WideString): Integer; dispid 165;
    function FetchAttachmentAsync(const emailObject: IChilkatEmail; attachmentIndex: Integer; 
                                  const saveToPath: WideString): IChilkatTask; dispid 665;
    function FetchAttachmentBytes(const email: IChilkatEmail; attachIndex: Integer): OleVariant; dispid 166;
    function FetchAttachmentBytesAsync(const email: IChilkatEmail; attachIndex: Integer): IChilkatTask; dispid 666;
    function FetchAttachmentString(const emailObject: IChilkatEmail; attachmentIndex: Integer; 
                                   const charset: WideString): WideString; dispid 167;
    function FetchAttachmentStringAsync(const emailObject: IChilkatEmail; attachmentIndex: Integer; 
                                        const charset: WideString): IChilkatTask; dispid 667;
    function FetchBundle(const messageSet: IMessageSet): IChilkatEmailBundle; dispid 168;
    function FetchBundleAsync(const messageSet: IMessageSet): IChilkatTask; dispid 668;
    function FetchBundleAsMime(const messageSet: IMessageSet): ICkStringArray; dispid 169;
    function FetchBundleAsMimeAsync(const messageSet: IMessageSet): IChilkatTask; dispid 669;
    function FetchChunk(startSeqNum: Integer; Count: Integer; const failedSet: IMessageSet; 
                        const fetchedSet: IMessageSet): IChilkatEmailBundle; dispid 170;
    function FetchChunkAsync(startSeqNum: Integer; Count: Integer; const failedSet: IMessageSet; 
                             const fetchedSet: IMessageSet): IChilkatTask; dispid 670;
    function FetchFlags(msgId: Integer; bUid: Integer): WideString; dispid 171;
    function FetchFlagsAsync(msgId: Integer; bUid: Integer): IChilkatTask; dispid 671;
    function FetchHeaders(const messageSet: IMessageSet): IChilkatEmailBundle; dispid 172;
    function FetchHeadersAsync(const messageSet: IMessageSet): IChilkatTask; dispid 672;
    function FetchSequence(startSeqNum: Integer; NumMessages: Integer): IChilkatEmailBundle; dispid 173;
    function FetchSequenceAsync(startSeqNum: Integer; NumMessages: Integer): IChilkatTask; dispid 673;
    function FetchSequenceAsMime(startSeqNum: Integer; NumMessages: Integer): ICkStringArray; dispid 174;
    function FetchSequenceAsMimeAsync(startSeqNum: Integer; NumMessages: Integer): IChilkatTask; dispid 674;
    function FetchSequenceHeaders(startSeqNum: Integer; NumMessages: Integer): IChilkatEmailBundle; dispid 175;
    function FetchSequenceHeadersAsync(startSeqNum: Integer; NumMessages: Integer): IChilkatTask; dispid 675;
    function FetchSingle(msgId: Integer; bUid: Integer): IChilkatEmail; dispid 176;
    function FetchSingleAsync(msgId: Integer; bUid: Integer): IChilkatTask; dispid 676;
    function FetchSingleAsMime(msgId: Integer; bUid: Integer): WideString; dispid 177;
    function FetchSingleAsMimeAsync(msgId: Integer; bUid: Integer): IChilkatTask; dispid 677;
    function FetchSingleHeader(msgId: Integer; bUid: Integer): IChilkatEmail; dispid 178;
    function FetchSingleHeaderAsync(msgId: Integer; bUid: Integer): IChilkatTask; dispid 678;
    function FetchSingleHeaderAsMime(msgId: Integer; bUid: Integer): WideString; dispid 179;
    function FetchSingleHeaderAsMimeAsync(msgId: Integer; bUid: Integer): IChilkatTask; dispid 679;
    function GetAllUids: IMessageSet; dispid 180;
    function GetAllUidsAsync: IChilkatTask; dispid 680;
    function GetMailAttachFilename(const email: IChilkatEmail; attachIndex: Integer): WideString; dispid 181;
    function GetMailAttachSize(const email: IChilkatEmail; attachIndex: Integer): Integer; dispid 182;
    function GetMailFlag(const email: IChilkatEmail; const flagName: WideString): Integer; dispid 183;
    function GetMailNumAttach(const email: IChilkatEmail): Integer; dispid 184;
    function GetMailSize(const email: IChilkatEmail): Integer; dispid 185;
    function GetSslServerCert: IChilkatCert; dispid 186;
    function IsConnected: Integer; dispid 187;
    function IsLoggedIn: Integer; dispid 188;
    function IsUnlocked: Integer; dispid 189;
    function ListMailboxes(const reference: WideString; const wildcardedMailbox: WideString): IMailboxes; dispid 190;
    function ListMailboxesAsync(const reference: WideString; const wildcardedMailbox: WideString): IChilkatTask; dispid 690;
    function ListSubscribed(const reference: WideString; const wildcardedMailbox: WideString): IMailboxes; dispid 191;
    function ListSubscribedAsync(const reference: WideString; const wildcardedMailbox: WideString): IChilkatTask; dispid 691;
    function login(const loginName: WideString; const password: WideString): Integer; dispid 192;
    function LoginAsync(const loginName: WideString; const password: WideString): IChilkatTask; dispid 692;
    function Logout: Integer; dispid 193;
    function LogoutAsync: IChilkatTask; dispid 693;
    function Noop: Integer; dispid 194;
    function NoopAsync: IChilkatTask; dispid 694;
    function RefetchMailFlags(const email: IChilkatEmail): Integer; dispid 195;
    function RefetchMailFlagsAsync(const email: IChilkatEmail): IChilkatTask; dispid 695;
    function RenameMailbox(const fromMailbox: WideString; const toMailbox: WideString): Integer; dispid 196;
    function RenameMailboxAsync(const fromMailbox: WideString; const toMailbox: WideString): IChilkatTask; dispid 696;
    function Search(const criteria: WideString; bUid: Integer): IMessageSet; dispid 197;
    function SearchAsync(const criteria: WideString; bUid: Integer): IChilkatTask; dispid 697;
    function SelectMailbox(const mailbox: WideString): Integer; dispid 198;
    function SelectMailboxAsync(const mailbox: WideString): IChilkatTask; dispid 698;
    function SendRawCommand(const cmd: WideString): WideString; dispid 199;
    function SendRawCommandAsync(const cmd: WideString): IChilkatTask; dispid 699;
    function SendRawCommandB(const cmd: WideString): OleVariant; dispid 200;
    function SendRawCommandBAsync(const cmd: WideString): IChilkatTask; dispid 700;
    function SendRawCommandC(cmd: OleVariant): OleVariant; dispid 201;
    function SendRawCommandCAsync(cmd: OleVariant): IChilkatTask; dispid 701;
    function SetCSP(const csp: IChilkatCsp): Integer; dispid 202;
    function SetDecryptCert2(const cert: IChilkatCert; const key: IPrivateKey): Integer; dispid 203;
    function SetFlag(msgId: Integer; bUid: Integer; const flagName: WideString; value: Integer): Integer; dispid 204;
    function SetFlagAsync(msgId: Integer; bUid: Integer; const flagName: WideString; value: Integer): IChilkatTask; dispid 704;
    function SetFlags(const messageSet: IMessageSet; const flagName: WideString; value: Integer): Integer; dispid 205;
    function SetFlagsAsync(const messageSet: IMessageSet; const flagName: WideString; value: Integer): IChilkatTask; dispid 705;
    function SetMailFlag(const email: IChilkatEmail; const flagName: WideString; value: Integer): Integer; dispid 206;
    function SetMailFlagAsync(const email: IChilkatEmail; const flagName: WideString; value: Integer): IChilkatTask; dispid 706;
    function SetSslClientCert(const cert: IChilkatCert): Integer; dispid 207;
    function SetSslClientCertPem(const pemDataOrFilename: WideString; const pemPassword: WideString): Integer; dispid 208;
    function SetSslClientCertPfx(const pfxFilename: WideString; const pfxPassword: WideString): Integer; dispid 209;
    function SshAuthenticatePk(const sshLogin: WideString; const privateKey: IChilkatSshKey): Integer; dispid 210;
    function SshAuthenticatePkAsync(const sshLogin: WideString; const privateKey: IChilkatSshKey): IChilkatTask; dispid 710;
    function SshAuthenticatePw(const sshLogin: WideString; const sshPassword: WideString): Integer; dispid 211;
    function SshAuthenticatePwAsync(const sshLogin: WideString; const sshPassword: WideString): IChilkatTask; dispid 711;
    function SshTunnel(const sshServerHostname: WideString; sshPort: Integer): Integer; dispid 212;
    function StoreFlags(msgId: Integer; bUid: Integer; const flagNames: WideString; value: Integer): Integer; dispid 213;
    function StoreFlagsAsync(msgId: Integer; bUid: Integer; const flagNames: WideString; 
                             value: Integer): IChilkatTask; dispid 713;
    function Subscribe(const mailbox: WideString): Integer; dispid 214;
    function SubscribeAsync(const mailbox: WideString): IChilkatTask; dispid 714;
    function UnlockComponent(const unlockCode: WideString): Integer; dispid 215;
    function Unsubscribe(const mailbox: WideString): Integer; dispid 216;
    function UnsubscribeAsync(const mailbox: WideString): IChilkatTask; dispid 716;
    function Capability: WideString; dispid 217;
    function CapabilityAsync: IChilkatTask; dispid 717;
    function IdleStart: Integer; dispid 218;
    function IdleStartAsync: IChilkatTask; dispid 718;
    function IdleDone: Integer; dispid 219;
    function IdleDoneAsync: IChilkatTask; dispid 719;
    function IdleCheck(timeoutMs: Integer): WideString; dispid 220;
    function IdleCheckAsync(timeoutMs: Integer): IChilkatTask; dispid 720;
    property RequireSslCertVerify: Integer dispid 221;
    property PreferIpv6: Integer dispid 222;
    function UseCertVault(const vault: IChilkatXmlCertVault): Integer; dispid 223;
    function SetDecryptCert(const cert: IChilkatCert): Integer; dispid 224;
    property LastResponseCode: WideString readonly dispid 225;
    function CheckConnection: Integer; dispid 226;
    function GetMailboxStatus(const mailbox: WideString): WideString; dispid 227;
    function GetMailboxStatusAsync(const mailbox: WideString): IChilkatTask; dispid 727;
    property SslAllowedCiphers: WideString dispid 228;
    property PercentDoneScale: Integer dispid 229;
    property TlsVersion: WideString readonly dispid 230;
    property TlsCipherSuite: WideString readonly dispid 231;
    function SshOpenTunnel(const sshHostname: WideString; sshPort: Integer): Integer; dispid 232;
    function SshOpenTunnelAsync(const sshHostname: WideString; sshPort: Integer): IChilkatTask; dispid 732;
    function SshCloseTunnel: Integer; dispid 233;
    function SshCloseTunnelAsync: IChilkatTask; dispid 733;
    function UseSshTunnel(const tunnel: IChilkatSocket): Integer; dispid 234;
    function UseSsh(const ssh: IChilkatSsh): Integer; dispid 235;
    property TlsPinSet: WideString dispid 236;
    property AbortCurrent: Integer dispid 237;
    function HasCapability(const name: WideString; const capabilityResponse: WideString): Integer; dispid 238;
    function GetQuotaRoot(const mailboxName: WideString): WideString; dispid 239;
    function GetQuotaRootAsync(const mailboxName: WideString): IChilkatTask; dispid 739;
    function GetQuota(const quotaRoot: WideString): WideString; dispid 240;
    function GetQuotaAsync(const quotaRoot: WideString): IChilkatTask; dispid 740;
    function SetQuota(const quotaRoot: WideString; const Resource: WideString; quota: Integer): Integer; dispid 241;
    function SetQuotaAsync(const quotaRoot: WideString; const Resource: WideString; quota: Integer): IChilkatTask; dispid 741;
    function FetchSingleAsMimeSb(msgId: Integer; bUid: Integer; const sbMime: IChilkatStringBuilder): Integer; dispid 242;
    function FetchSingleAsMimeSbAsync(msgId: Integer; bUid: Integer; 
                                      const sbMime: IChilkatStringBuilder): IChilkatTask; dispid 742;
    function FetchAttachmentSb(const email: IChilkatEmail; attachmentIndex: Integer; 
                               const charset: WideString; const sb: IChilkatStringBuilder): Integer; dispid 243;
    function FetchAttachmentSbAsync(const email: IChilkatEmail; attachmentIndex: Integer; 
                                    const charset: WideString; const sb: IChilkatStringBuilder): IChilkatTask; dispid 743;
    function FetchAttachmentBd(const email: IChilkatEmail; attachmentIndex: Integer; 
                               const binData: IChilkatBinData): Integer; dispid 244;
    function FetchAttachmentBdAsync(const email: IChilkatEmail; attachmentIndex: Integer; 
                                    const binData: IChilkatBinData): IChilkatTask; dispid 744;
    function AppendMimeWithFlagsSb(const mailbox: WideString; const sbMime: IChilkatStringBuilder; 
                                   seen: Integer; flagged: Integer; answered: Integer; 
                                   draft: Integer): Integer; dispid 245;
    function AppendMimeWithFlagsSbAsync(const mailbox: WideString; 
                                        const sbMime: IChilkatStringBuilder; seen: Integer; 
                                        flagged: Integer; answered: Integer; draft: Integer): IChilkatTask; dispid 745;
    function MoveMessages(const messageSet: IMessageSet; const destFolder: WideString): Integer; dispid 246;
    function MoveMessagesAsync(const messageSet: IMessageSet; const destFolder: WideString): IChilkatTask; dispid 746;
    function LoginSecure(const loginName: IChilkatSecureString; const password: IChilkatSecureString): Integer; dispid 247;
    function LoginSecureAsync(const loginName: IChilkatSecureString; 
                              const password: IChilkatSecureString): IChilkatTask; dispid 747;
    function Sort(const sortCriteria: WideString; const charset: WideString; 
                  const searchCriteria: WideString; bUid: Integer): IMessageSet; dispid 248;
    function SortAsync(const sortCriteria: WideString; const charset: WideString; 
                       const searchCriteria: WideString; bUid: Integer): IChilkatTask; dispid 748;
    function FetchSingleBd(msgId: Integer; bUid: Integer; const mimeData: IChilkatBinData): Integer; dispid 249;
    function FetchSingleBdAsync(msgId: Integer; bUid: Integer; const mimeData: IChilkatBinData): IChilkatTask; dispid 749;
    function ThreadCmd(const threadAlg: WideString; const charset: WideString; 
                       const searchCriteria: WideString; bUid: Integer): IChilkatJsonObject; dispid 250;
    function ThreadCmdAsync(const threadAlg: WideString; const charset: WideString; 
                            const searchCriteria: WideString; bUid: Integer): IChilkatTask; dispid 750;
    property UncommonOptions: WideString dispid 251;
    function LoadTaskCaller(const task: IChilkatTask): Integer; dispid 252;
    property HighestModSeq: WideString readonly dispid 253;
  end;

// *********************************************************************//
// Interface: IMessageSet
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {0F01CF8C-CE79-4812-8D55-3BD7CC34A318}
// *********************************************************************//
  IMessageSet = interface(IDispatch)
    ['{0F01CF8C-CE79-4812-8D55-3BD7CC34A318}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastMethodSuccess: Integer; safecall;
    procedure Set_LastMethodSuccess(pVal: Integer); safecall;
    function Get_LastStringResult: WideString; safecall;
    function Get_LastBinaryResult: OleVariant; safecall;
    function Get_LastStringResultLen: Integer; safecall;
    function Get_HasUids: Integer; safecall;
    procedure Set_HasUids(pVal: Integer); safecall;
    function Get_Count: Integer; safecall;
    function ContainsId(msgId: Integer): Integer; safecall;
    function FromCompactString(const str: WideString): Integer; safecall;
    function GetId(index: Integer): Integer; safecall;
    procedure InsertId(id: Integer); safecall;
    procedure RemoveId(id: Integer); safecall;
    function ToCompactString: WideString; safecall;
    function ToCommaSeparatedStr: WideString; safecall;
    function LoadTaskResult(const task: IChilkatTask): Integer; safecall;
    property LastMethodSuccess: Integer read Get_LastMethodSuccess write Set_LastMethodSuccess;
    property LastStringResult: WideString read Get_LastStringResult;
    property LastBinaryResult: OleVariant read Get_LastBinaryResult;
    property LastStringResultLen: Integer read Get_LastStringResultLen;
    property HasUids: Integer read Get_HasUids write Set_HasUids;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  IMessageSetDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {0F01CF8C-CE79-4812-8D55-3BD7CC34A318}
// *********************************************************************//
  IMessageSetDisp = dispinterface
    ['{0F01CF8C-CE79-4812-8D55-3BD7CC34A318}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastMethodSuccess: Integer dispid 9;
    property LastStringResult: WideString readonly dispid 10;
    property LastBinaryResult: OleVariant readonly dispid 11;
    property LastStringResultLen: Integer readonly dispid 12;
    property HasUids: Integer dispid 100;
    property Count: Integer readonly dispid 101;
    function ContainsId(msgId: Integer): Integer; dispid 102;
    function FromCompactString(const str: WideString): Integer; dispid 103;
    function GetId(index: Integer): Integer; dispid 104;
    procedure InsertId(id: Integer); dispid 105;
    procedure RemoveId(id: Integer); dispid 106;
    function ToCompactString: WideString; dispid 107;
    function ToCommaSeparatedStr: WideString; dispid 108;
    function LoadTaskResult(const task: IChilkatTask): Integer; dispid 111;
  end;

// *********************************************************************//
// Interface: IMailboxes
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2DB04566-D0BC-4FCF-926A-3E11B37E0B01}
// *********************************************************************//
  IMailboxes = interface(IDispatch)
    ['{2DB04566-D0BC-4FCF-926A-3E11B37E0B01}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastMethodSuccess: Integer; safecall;
    procedure Set_LastMethodSuccess(pVal: Integer); safecall;
    function Get_LastStringResult: WideString; safecall;
    function Get_LastBinaryResult: OleVariant; safecall;
    function Get_LastStringResultLen: Integer; safecall;
    function Get_Count: Integer; safecall;
    function HasInferiors(index: Integer): Integer; safecall;
    function IsMarked(index: Integer): Integer; safecall;
    function IsSelectable(index: Integer): Integer; safecall;
    function GetName(index: Integer): WideString; safecall;
    function GetFlags(index: Integer): WideString; safecall;
    function HasFlag(index: Integer; const flagName: WideString): Integer; safecall;
    function GetNumFlags(index: Integer): Integer; safecall;
    function GetNthFlag(index: Integer; flagIndex: Integer): WideString; safecall;
    function GetMailboxIndex(const mbxName: WideString): Integer; safecall;
    function LoadTaskResult(const task: IChilkatTask): Integer; safecall;
    property LastMethodSuccess: Integer read Get_LastMethodSuccess write Set_LastMethodSuccess;
    property LastStringResult: WideString read Get_LastStringResult;
    property LastBinaryResult: OleVariant read Get_LastBinaryResult;
    property LastStringResultLen: Integer read Get_LastStringResultLen;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  IMailboxesDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2DB04566-D0BC-4FCF-926A-3E11B37E0B01}
// *********************************************************************//
  IMailboxesDisp = dispinterface
    ['{2DB04566-D0BC-4FCF-926A-3E11B37E0B01}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastMethodSuccess: Integer dispid 9;
    property LastStringResult: WideString readonly dispid 10;
    property LastBinaryResult: OleVariant readonly dispid 11;
    property LastStringResultLen: Integer readonly dispid 12;
    property Count: Integer readonly dispid 100;
    function HasInferiors(index: Integer): Integer; dispid 101;
    function IsMarked(index: Integer): Integer; dispid 102;
    function IsSelectable(index: Integer): Integer; dispid 103;
    function GetName(index: Integer): WideString; dispid 104;
    function GetFlags(index: Integer): WideString; dispid 105;
    function HasFlag(index: Integer; const flagName: WideString): Integer; dispid 106;
    function GetNumFlags(index: Integer): Integer; dispid 107;
    function GetNthFlag(index: Integer; flagIndex: Integer): WideString; dispid 108;
    function GetMailboxIndex(const mbxName: WideString): Integer; dispid 109;
    function LoadTaskResult(const task: IChilkatTask): Integer; dispid 110;
  end;

// *********************************************************************//
// Interface: IChilkatJwe
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {C7309141-CCF2-45D0-A672-FFB26648B94F}
// *********************************************************************//
  IChilkatJwe = interface(IDispatch)
    ['{C7309141-CCF2-45D0-A672-FFB26648B94F}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_LastMethodSuccess: Integer; safecall;
    procedure Set_LastMethodSuccess(pVal: Integer); safecall;
    function Get_LastStringResult: WideString; safecall;
    function Get_LastBinaryResult: OleVariant; safecall;
    function Get_LastStringResultLen: Integer; safecall;
    function SetProtectedHeader(const json: IChilkatJsonObject): Integer; safecall;
    function SetUnprotectedHeader(const json: IChilkatJsonObject): Integer; safecall;
    function SetRecipientHeader(index: Integer; const json: IChilkatJsonObject): Integer; safecall;
    function SetPrivateKey(index: Integer; const privKey: IPrivateKey): Integer; safecall;
    function SetPublicKey(index: Integer; const pubKey: IPublicKey): Integer; safecall;
    function SetWrappingKey(index: Integer; const encodedKey: WideString; const encoding: WideString): Integer; safecall;
    function SetPassword(index: Integer; const password: WideString): Integer; safecall;
    function Encrypt(const content: WideString; const charset: WideString): WideString; safecall;
    function EncryptSb(const contentSb: IChilkatStringBuilder; const charset: WideString; 
                       const jweSb: IChilkatStringBuilder): Integer; safecall;
    function EncryptBd(const contentBd: IChilkatBinData; const jweSb: IChilkatStringBuilder): Integer; safecall;
    function Decrypt(index: Integer; const charset: WideString): WideString; safecall;
    function DecryptSb(index: Integer; const charset: WideString; 
                       const contentSb: IChilkatStringBuilder): Integer; safecall;
    function DecryptBd(index: Integer; const bd: IChilkatBinData): Integer; safecall;
    function LoadJwe(const jwe: WideString): Integer; safecall;
    function LoadJweSb(const sb: IChilkatStringBuilder): Integer; safecall;
    function Get_NumRecipients: Integer; safecall;
    function SetAad(const aad: WideString; const charset: WideString): Integer; safecall;
    function SetAadBd(const aad: IChilkatBinData): Integer; safecall;
    function Get_PreferCompact: Integer; safecall;
    procedure Set_PreferCompact(pVal: Integer); safecall;
    function Get_PreferFlattened: Integer; safecall;
    procedure Set_PreferFlattened(pVal: Integer); safecall;
    function FindRecipient(const paramName: WideString; const paramValue: WideString; 
                           caseSensitive: Integer): Integer; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property LastMethodSuccess: Integer read Get_LastMethodSuccess write Set_LastMethodSuccess;
    property LastStringResult: WideString read Get_LastStringResult;
    property LastBinaryResult: OleVariant read Get_LastBinaryResult;
    property LastStringResultLen: Integer read Get_LastStringResultLen;
    property NumRecipients: Integer read Get_NumRecipients;
    property PreferCompact: Integer read Get_PreferCompact write Set_PreferCompact;
    property PreferFlattened: Integer read Get_PreferFlattened write Set_PreferFlattened;
  end;

// *********************************************************************//
// DispIntf:  IChilkatJweDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {C7309141-CCF2-45D0-A672-FFB26648B94F}
// *********************************************************************//
  IChilkatJweDisp = dispinterface
    ['{C7309141-CCF2-45D0-A672-FFB26648B94F}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property LastMethodSuccess: Integer dispid 9;
    property LastStringResult: WideString readonly dispid 10;
    property LastBinaryResult: OleVariant readonly dispid 11;
    property LastStringResultLen: Integer readonly dispid 12;
    function SetProtectedHeader(const json: IChilkatJsonObject): Integer; dispid 101;
    function SetUnprotectedHeader(const json: IChilkatJsonObject): Integer; dispid 102;
    function SetRecipientHeader(index: Integer; const json: IChilkatJsonObject): Integer; dispid 103;
    function SetPrivateKey(index: Integer; const privKey: IPrivateKey): Integer; dispid 104;
    function SetPublicKey(index: Integer; const pubKey: IPublicKey): Integer; dispid 105;
    function SetWrappingKey(index: Integer; const encodedKey: WideString; const encoding: WideString): Integer; dispid 106;
    function SetPassword(index: Integer; const password: WideString): Integer; dispid 107;
    function Encrypt(const content: WideString; const charset: WideString): WideString; dispid 108;
    function EncryptSb(const contentSb: IChilkatStringBuilder; const charset: WideString; 
                       const jweSb: IChilkatStringBuilder): Integer; dispid 109;
    function EncryptBd(const contentBd: IChilkatBinData; const jweSb: IChilkatStringBuilder): Integer; dispid 110;
    function Decrypt(index: Integer; const charset: WideString): WideString; dispid 111;
    function DecryptSb(index: Integer; const charset: WideString; 
                       const contentSb: IChilkatStringBuilder): Integer; dispid 112;
    function DecryptBd(index: Integer; const bd: IChilkatBinData): Integer; dispid 113;
    function LoadJwe(const jwe: WideString): Integer; dispid 114;
    function LoadJweSb(const sb: IChilkatStringBuilder): Integer; dispid 115;
    property NumRecipients: Integer readonly dispid 116;
    function SetAad(const aad: WideString; const charset: WideString): Integer; dispid 117;
    function SetAadBd(const aad: IChilkatBinData): Integer; dispid 118;
    property PreferCompact: Integer dispid 119;
    property PreferFlattened: Integer dispid 120;
    function FindRecipient(const paramName: WideString; const paramValue: WideString; 
                           caseSensitive: Integer): Integer; dispid 121;
  end;

// *********************************************************************//
// Interface: IChilkatJws
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {623BCB7F-A659-48E0-8310-630137759D2B}
// *********************************************************************//
  IChilkatJws = interface(IDispatch)
    ['{623BCB7F-A659-48E0-8310-630137759D2B}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_LastMethodSuccess: Integer; safecall;
    procedure Set_LastMethodSuccess(pVal: Integer); safecall;
    function Get_LastStringResult: WideString; safecall;
    function Get_LastBinaryResult: OleVariant; safecall;
    function Get_LastStringResultLen: Integer; safecall;
    function SetProtectedHeader(index: Integer; const json: IChilkatJsonObject): Integer; safecall;
    function SetUnprotectedHeader(index: Integer; const json: IChilkatJsonObject): Integer; safecall;
    function CreateJws: WideString; safecall;
    function CreateJwsSb(const sbJws: IChilkatStringBuilder): Integer; safecall;
    function SetPayloadSb(const sbPayload: IChilkatStringBuilder; const charset: WideString; 
                          includeBom: Integer): Integer; safecall;
    function SetPayloadBd(const binData: IChilkatBinData): Integer; safecall;
    function GetPayloadSb(const charset: WideString; const sbPayload: IChilkatStringBuilder): Integer; safecall;
    function GetPayloadBd(const binData: IChilkatBinData): Integer; safecall;
    function LoadJwsSb(const sbJws: IChilkatStringBuilder): Integer; safecall;
    function LoadJws(const jwsStr: WideString): Integer; safecall;
    function GetProtectedHeader(index: Integer): IChilkatJsonObject; safecall;
    function GetUnprotectedHeader(index: Integer): IChilkatJsonObject; safecall;
    function Get_NumSignatures: Integer; safecall;
    function SetMacKey(index: Integer; const key: WideString; const encoding: WideString): Integer; safecall;
    function SetMacKeyBd(index: Integer; const key: IChilkatBinData): Integer; safecall;
    function SetPrivateKey(index: Integer; const privKey: IPrivateKey): Integer; safecall;
    function SetPublicKey(index: Integer; const pubKey: IPublicKey): Integer; safecall;
    function Validate(index: Integer): Integer; safecall;
    function Get_PreferCompact: Integer; safecall;
    procedure Set_PreferCompact(pVal: Integer); safecall;
    function Get_PreferFlattened: Integer; safecall;
    procedure Set_PreferFlattened(pVal: Integer); safecall;
    function SetPayload(const payload: WideString; const charset: WideString; includeBom: Integer): Integer; safecall;
    function GetPayload(const charset: WideString): WideString; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property LastMethodSuccess: Integer read Get_LastMethodSuccess write Set_LastMethodSuccess;
    property LastStringResult: WideString read Get_LastStringResult;
    property LastBinaryResult: OleVariant read Get_LastBinaryResult;
    property LastStringResultLen: Integer read Get_LastStringResultLen;
    property NumSignatures: Integer read Get_NumSignatures;
    property PreferCompact: Integer read Get_PreferCompact write Set_PreferCompact;
    property PreferFlattened: Integer read Get_PreferFlattened write Set_PreferFlattened;
  end;

// *********************************************************************//
// DispIntf:  IChilkatJwsDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {623BCB7F-A659-48E0-8310-630137759D2B}
// *********************************************************************//
  IChilkatJwsDisp = dispinterface
    ['{623BCB7F-A659-48E0-8310-630137759D2B}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property LastMethodSuccess: Integer dispid 9;
    property LastStringResult: WideString readonly dispid 10;
    property LastBinaryResult: OleVariant readonly dispid 11;
    property LastStringResultLen: Integer readonly dispid 12;
    function SetProtectedHeader(index: Integer; const json: IChilkatJsonObject): Integer; dispid 101;
    function SetUnprotectedHeader(index: Integer; const json: IChilkatJsonObject): Integer; dispid 102;
    function CreateJws: WideString; dispid 103;
    function CreateJwsSb(const sbJws: IChilkatStringBuilder): Integer; dispid 104;
    function SetPayloadSb(const sbPayload: IChilkatStringBuilder; const charset: WideString; 
                          includeBom: Integer): Integer; dispid 105;
    function SetPayloadBd(const binData: IChilkatBinData): Integer; dispid 106;
    function GetPayloadSb(const charset: WideString; const sbPayload: IChilkatStringBuilder): Integer; dispid 107;
    function GetPayloadBd(const binData: IChilkatBinData): Integer; dispid 108;
    function LoadJwsSb(const sbJws: IChilkatStringBuilder): Integer; dispid 109;
    function LoadJws(const jwsStr: WideString): Integer; dispid 110;
    function GetProtectedHeader(index: Integer): IChilkatJsonObject; dispid 111;
    function GetUnprotectedHeader(index: Integer): IChilkatJsonObject; dispid 112;
    property NumSignatures: Integer readonly dispid 113;
    function SetMacKey(index: Integer; const key: WideString; const encoding: WideString): Integer; dispid 114;
    function SetMacKeyBd(index: Integer; const key: IChilkatBinData): Integer; dispid 115;
    function SetPrivateKey(index: Integer; const privKey: IPrivateKey): Integer; dispid 116;
    function SetPublicKey(index: Integer; const pubKey: IPublicKey): Integer; dispid 117;
    function Validate(index: Integer): Integer; dispid 118;
    property PreferCompact: Integer dispid 119;
    property PreferFlattened: Integer dispid 120;
    function SetPayload(const payload: WideString; const charset: WideString; includeBom: Integer): Integer; dispid 121;
    function GetPayload(const charset: WideString): WideString; dispid 122;
  end;

// *********************************************************************//
// Interface: IChilkatJwt
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {09718276-04D7-4A84-B699-42FA9A49A645}
// *********************************************************************//
  IChilkatJwt = interface(IDispatch)
    ['{09718276-04D7-4A84-B699-42FA9A49A645}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_LastMethodSuccess: Integer; safecall;
    procedure Set_LastMethodSuccess(pVal: Integer); safecall;
    function Get_LastStringResult: WideString; safecall;
    function Get_LastBinaryResult: OleVariant; safecall;
    function Get_LastStringResultLen: Integer; safecall;
    function Get_AutoCompact: Integer; safecall;
    procedure Set_AutoCompact(pVal: Integer); safecall;
    function CreateJwt(const Header: WideString; const payload: WideString; 
                       const password: WideString): WideString; safecall;
    function CreateJwtPk(const Header: WideString; const payload: WideString; const key: IPrivateKey): WideString; safecall;
    function VerifyJwt(const token: WideString; const password: WideString): Integer; safecall;
    function VerifyJwtPk(const token: WideString; const key: IPublicKey): Integer; safecall;
    function GetHeader(const token: WideString): WideString; safecall;
    function GetPayload(const token: WideString): WideString; safecall;
    function GenNumericDate(numSecOffset: Integer): Integer; safecall;
    function IsTimeValid(const jwt: WideString; leeway: Integer): Integer; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property LastMethodSuccess: Integer read Get_LastMethodSuccess write Set_LastMethodSuccess;
    property LastStringResult: WideString read Get_LastStringResult;
    property LastBinaryResult: OleVariant read Get_LastBinaryResult;
    property LastStringResultLen: Integer read Get_LastStringResultLen;
    property AutoCompact: Integer read Get_AutoCompact write Set_AutoCompact;
  end;

// *********************************************************************//
// DispIntf:  IChilkatJwtDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {09718276-04D7-4A84-B699-42FA9A49A645}
// *********************************************************************//
  IChilkatJwtDisp = dispinterface
    ['{09718276-04D7-4A84-B699-42FA9A49A645}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property LastMethodSuccess: Integer dispid 9;
    property LastStringResult: WideString readonly dispid 10;
    property LastBinaryResult: OleVariant readonly dispid 11;
    property LastStringResultLen: Integer readonly dispid 12;
    property AutoCompact: Integer dispid 100;
    function CreateJwt(const Header: WideString; const payload: WideString; 
                       const password: WideString): WideString; dispid 101;
    function CreateJwtPk(const Header: WideString; const payload: WideString; const key: IPrivateKey): WideString; dispid 102;
    function VerifyJwt(const token: WideString; const password: WideString): Integer; dispid 103;
    function VerifyJwtPk(const token: WideString; const key: IPublicKey): Integer; dispid 104;
    function GetHeader(const token: WideString): WideString; dispid 105;
    function GetPayload(const token: WideString): WideString; dispid 106;
    function GenNumericDate(numSecOffset: Integer): Integer; dispid 107;
    function IsTimeValid(const jwt: WideString; leeway: Integer): Integer; dispid 108;
  end;

// *********************************************************************//
// Interface: IKeyContainer
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {C374E6D6-2B8E-4030-89EC-3DE7FC67257F}
// *********************************************************************//
  IKeyContainer = interface(IDispatch)
    ['{C374E6D6-2B8E-4030-89EC-3DE7FC67257F}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_LastMethodSuccess: Integer; safecall;
    procedure Set_LastMethodSuccess(pVal: Integer); safecall;
    function Get_LastStringResult: WideString; safecall;
    function Get_LastBinaryResult: OleVariant; safecall;
    function Get_LastStringResultLen: Integer; safecall;
    function Get_IsMachineKeyset: Integer; safecall;
    function Get_IsOpen: Integer; safecall;
    function Get_ContainerName: WideString; safecall;
    procedure CloseContainer; safecall;
    function CreateContainer(const name: WideString; MachineKeyset: Integer): Integer; safecall;
    function DeleteContainer: Integer; safecall;
    function FetchContainerNames(bMachineKeyset: Integer): Integer; safecall;
    function GenerateKeyPair(bKeyExchangePair: Integer; keyLengthInBits: Integer): Integer; safecall;
    function GenerateUuid: WideString; safecall;
    function GetNumContainers(bMachineKeyset: Integer): Integer; safecall;
    function GetPrivateKey(bKeyExchangePair: Integer): IPrivateKey; safecall;
    function GetPublicKey(bKeyExchangePair: Integer): IPublicKey; safecall;
    function ImportPrivateKey(const key: IPrivateKey; bKeyExchangePair: Integer): Integer; safecall;
    function ImportPublicKey(const key: IPublicKey; bKeyExchangePair: Integer): Integer; safecall;
    function OpenContainer(const name: WideString; needPrivateKeyAccess: Integer; 
                           MachineKeyset: Integer): Integer; safecall;
    function GetNthContainerName(bMachineKeyset: Integer; index: Integer): WideString; safecall;
    function GetStorageProviders(const json: IChilkatJsonObject): Integer; safecall;
    function GetKeys(const storageProvider: WideString; const json: IChilkatJsonObject): Integer; safecall;
    function ImportKey(const keyName: WideString; const storageProvider: WideString; 
                       allowOverwrite: Integer; allowExport: Integer; const key: IPrivateKey): Integer; safecall;
    function ExportKey(const keyName: WideString; const storageProvider: WideString; 
                       silentFlag: Integer; const key: IPrivateKey): Integer; safecall;
    function DeleteKey(const keyName: WideString; const storageProvider: WideString): Integer; safecall;
    function Get_MachineKeys: Integer; safecall;
    procedure Set_MachineKeys(pVal: Integer); safecall;
    function Get_LegacyKeySpec: Integer; safecall;
    procedure Set_LegacyKeySpec(pVal: Integer); safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property LastMethodSuccess: Integer read Get_LastMethodSuccess write Set_LastMethodSuccess;
    property LastStringResult: WideString read Get_LastStringResult;
    property LastBinaryResult: OleVariant read Get_LastBinaryResult;
    property LastStringResultLen: Integer read Get_LastStringResultLen;
    property IsMachineKeyset: Integer read Get_IsMachineKeyset;
    property IsOpen: Integer read Get_IsOpen;
    property ContainerName: WideString read Get_ContainerName;
    property MachineKeys: Integer read Get_MachineKeys write Set_MachineKeys;
    property LegacyKeySpec: Integer read Get_LegacyKeySpec write Set_LegacyKeySpec;
  end;

// *********************************************************************//
// DispIntf:  IKeyContainerDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {C374E6D6-2B8E-4030-89EC-3DE7FC67257F}
// *********************************************************************//
  IKeyContainerDisp = dispinterface
    ['{C374E6D6-2B8E-4030-89EC-3DE7FC67257F}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property LastMethodSuccess: Integer dispid 9;
    property LastStringResult: WideString readonly dispid 10;
    property LastBinaryResult: OleVariant readonly dispid 11;
    property LastStringResultLen: Integer readonly dispid 12;
    property IsMachineKeyset: Integer readonly dispid 100;
    property IsOpen: Integer readonly dispid 101;
    property ContainerName: WideString readonly dispid 102;
    procedure CloseContainer; dispid 103;
    function CreateContainer(const name: WideString; MachineKeyset: Integer): Integer; dispid 104;
    function DeleteContainer: Integer; dispid 105;
    function FetchContainerNames(bMachineKeyset: Integer): Integer; dispid 106;
    function GenerateKeyPair(bKeyExchangePair: Integer; keyLengthInBits: Integer): Integer; dispid 107;
    function GenerateUuid: WideString; dispid 108;
    function GetNumContainers(bMachineKeyset: Integer): Integer; dispid 109;
    function GetPrivateKey(bKeyExchangePair: Integer): IPrivateKey; dispid 110;
    function GetPublicKey(bKeyExchangePair: Integer): IPublicKey; dispid 111;
    function ImportPrivateKey(const key: IPrivateKey; bKeyExchangePair: Integer): Integer; dispid 112;
    function ImportPublicKey(const key: IPublicKey; bKeyExchangePair: Integer): Integer; dispid 113;
    function OpenContainer(const name: WideString; needPrivateKeyAccess: Integer; 
                           MachineKeyset: Integer): Integer; dispid 114;
    function GetNthContainerName(bMachineKeyset: Integer; index: Integer): WideString; dispid 116;
    function GetStorageProviders(const json: IChilkatJsonObject): Integer; dispid 117;
    function GetKeys(const storageProvider: WideString; const json: IChilkatJsonObject): Integer; dispid 118;
    function ImportKey(const keyName: WideString; const storageProvider: WideString; 
                       allowOverwrite: Integer; allowExport: Integer; const key: IPrivateKey): Integer; dispid 119;
    function ExportKey(const keyName: WideString; const storageProvider: WideString; 
                       silentFlag: Integer; const key: IPrivateKey): Integer; dispid 120;
    function DeleteKey(const keyName: WideString; const storageProvider: WideString): Integer; dispid 121;
    property MachineKeys: Integer dispid 122;
    property LegacyKeySpec: Integer dispid 123;
  end;

// *********************************************************************//
// Interface: IChilkatLog
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {53162CD7-EADA-4DA9-BEB2-E899CAFF3A63}
// *********************************************************************//
  IChilkatLog = interface(IDispatch)
    ['{53162CD7-EADA-4DA9-BEB2-E899CAFF3A63}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_LastMethodSuccess: Integer; safecall;
    procedure Set_LastMethodSuccess(pVal: Integer); safecall;
    function Get_LastStringResult: WideString; safecall;
    function Get_LastBinaryResult: OleVariant; safecall;
    function Get_LastStringResultLen: Integer; safecall;
    procedure Clear(const initialTag: WideString); safecall;
    procedure EnterContext(const Tag: WideString); safecall;
    procedure LeaveContext; safecall;
    procedure LogError(const message: WideString); safecall;
    procedure LogData(const Tag: WideString; const message: WideString); safecall;
    procedure LogInfo(const message: WideString); safecall;
    procedure LogDataHex(const Tag: WideString; data: OleVariant); safecall;
    procedure LogDataBase64(const Tag: WideString; data: OleVariant); safecall;
    procedure LogTimestamp(const Tag: WideString); safecall;
    procedure LogDateTime(const Tag: WideString; gmt: Integer); safecall;
    procedure LogInt(const Tag: WideString; value: Integer); safecall;
    procedure LogDataMax(const Tag: WideString; const message: WideString; maxNumChars: Integer); safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property LastMethodSuccess: Integer read Get_LastMethodSuccess write Set_LastMethodSuccess;
    property LastStringResult: WideString read Get_LastStringResult;
    property LastBinaryResult: OleVariant read Get_LastBinaryResult;
    property LastStringResultLen: Integer read Get_LastStringResultLen;
  end;

// *********************************************************************//
// DispIntf:  IChilkatLogDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {53162CD7-EADA-4DA9-BEB2-E899CAFF3A63}
// *********************************************************************//
  IChilkatLogDisp = dispinterface
    ['{53162CD7-EADA-4DA9-BEB2-E899CAFF3A63}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property LastMethodSuccess: Integer dispid 9;
    property LastStringResult: WideString readonly dispid 10;
    property LastBinaryResult: OleVariant readonly dispid 11;
    property LastStringResultLen: Integer readonly dispid 12;
    procedure Clear(const initialTag: WideString); dispid 100;
    procedure EnterContext(const Tag: WideString); dispid 101;
    procedure LeaveContext; dispid 102;
    procedure LogError(const message: WideString); dispid 103;
    procedure LogData(const Tag: WideString; const message: WideString); dispid 104;
    procedure LogInfo(const message: WideString); dispid 105;
    procedure LogDataHex(const Tag: WideString; data: OleVariant); dispid 106;
    procedure LogDataBase64(const Tag: WideString; data: OleVariant); dispid 107;
    procedure LogTimestamp(const Tag: WideString); dispid 108;
    procedure LogDateTime(const Tag: WideString; gmt: Integer); dispid 109;
    procedure LogInt(const Tag: WideString; value: Integer); dispid 110;
    procedure LogDataMax(const Tag: WideString; const message: WideString; maxNumChars: Integer); dispid 112;
  end;

// *********************************************************************//
// Interface: IChilkatMailMan
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {7998B064-06E7-4960-ACEF-AAFF0A262487}
// *********************************************************************//
  IChilkatMailMan = interface(IDispatch)
    ['{7998B064-06E7-4960-ACEF-AAFF0A262487}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_LastMethodSuccess: Integer; safecall;
    procedure Set_LastMethodSuccess(pVal: Integer); safecall;
    function Get_LastStringResult: WideString; safecall;
    function Get_LastBinaryResult: OleVariant; safecall;
    function Get_LastStringResultLen: Integer; safecall;
    function Get_AllOrNone: Integer; safecall;
    procedure Set_AllOrNone(pVal: Integer); safecall;
    function Get_AutoFix: Integer; safecall;
    procedure Set_AutoFix(pVal: Integer); safecall;
    function Get_AutoGenMessageId: Integer; safecall;
    procedure Set_AutoGenMessageId(pVal: Integer); safecall;
    function Get_AutoSmtpRset: Integer; safecall;
    procedure Set_AutoSmtpRset(pVal: Integer); safecall;
    function Get_ClientIpAddress: WideString; safecall;
    procedure Set_ClientIpAddress(const pVal: WideString); safecall;
    function Get_ConnectTimeout: Integer; safecall;
    procedure Set_ConnectTimeout(pVal: Integer); safecall;
    function Get_DsnEnvid: WideString; safecall;
    procedure Set_DsnEnvid(const pVal: WideString); safecall;
    function Get_DsnNotify: WideString; safecall;
    procedure Set_DsnNotify(const pVal: WideString); safecall;
    function Get_DsnRet: WideString; safecall;
    procedure Set_DsnRet(const pVal: WideString); safecall;
    function Get_EmbedCertChain: Integer; safecall;
    procedure Set_EmbedCertChain(pVal: Integer); safecall;
    function Get_Filter: WideString; safecall;
    procedure Set_Filter(const pVal: WideString); safecall;
    function Get_HeartbeatMs: Integer; safecall;
    procedure Set_HeartbeatMs(pVal: Integer); safecall;
    function Get_HeloHostname: WideString; safecall;
    procedure Set_HeloHostname(const pVal: WideString); safecall;
    function Get_HttpProxyAuthMethod: WideString; safecall;
    procedure Set_HttpProxyAuthMethod(const pVal: WideString); safecall;
    function Get_HttpProxyDomain: WideString; safecall;
    procedure Set_HttpProxyDomain(const pVal: WideString); safecall;
    function Get_HttpProxyHostname: WideString; safecall;
    procedure Set_HttpProxyHostname(const pVal: WideString); safecall;
    function Get_HttpProxyPassword: WideString; safecall;
    procedure Set_HttpProxyPassword(const pVal: WideString); safecall;
    function Get_HttpProxyPort: Integer; safecall;
    procedure Set_HttpProxyPort(pVal: Integer); safecall;
    function Get_HttpProxyUsername: WideString; safecall;
    procedure Set_HttpProxyUsername(const pVal: WideString); safecall;
    function Get_ImmediateDelete: Integer; safecall;
    procedure Set_ImmediateDelete(pVal: Integer); safecall;
    function Get_IncludeRootCert: Integer; safecall;
    procedure Set_IncludeRootCert(pVal: Integer); safecall;
    function Get_IsSmtpConnected: Integer; safecall;
    function Get_LastSendQFilename: WideString; safecall;
    function Get_LastSmtpStatus: Integer; safecall;
    function Get_LogMailReceivedFilename: WideString; safecall;
    procedure Set_LogMailReceivedFilename(const pVal: WideString); safecall;
    function Get_LogMailSentFilename: WideString; safecall;
    procedure Set_LogMailSentFilename(const pVal: WideString); safecall;
    function Get_MailHost: WideString; safecall;
    procedure Set_MailHost(const pVal: WideString); safecall;
    function Get_MailPort: Integer; safecall;
    procedure Set_MailPort(pVal: Integer); safecall;
    function Get_MaxCount: Integer; safecall;
    procedure Set_MaxCount(pVal: Integer); safecall;
    function Get_OpaqueSigning: Integer; safecall;
    procedure Set_OpaqueSigning(pVal: Integer); safecall;
    function Get_Pop3SPA: Integer; safecall;
    procedure Set_Pop3SPA(pVal: Integer); safecall;
    function Get_Pop3SessionId: Integer; safecall;
    function Get_Pop3SessionLog: WideString; safecall;
    function Get_Pop3SslServerCertVerified: Integer; safecall;
    function Get_Pop3Stls: Integer; safecall;
    procedure Set_Pop3Stls(pVal: Integer); safecall;
    function Get_PopPassword: WideString; safecall;
    procedure Set_PopPassword(const pVal: WideString); safecall;
    function Get_PopPasswordBase64: WideString; safecall;
    procedure Set_PopPasswordBase64(const pVal: WideString); safecall;
    function Get_PopSsl: Integer; safecall;
    procedure Set_PopSsl(pVal: Integer); safecall;
    function Get_PopUsername: WideString; safecall;
    procedure Set_PopUsername(const pVal: WideString); safecall;
    function Get_ReadTimeout: Integer; safecall;
    procedure Set_ReadTimeout(pVal: Integer); safecall;
    function Get_RequireSslCertVerify: Integer; safecall;
    procedure Set_RequireSslCertVerify(pVal: Integer); safecall;
    function Get_ResetDateOnLoad: Integer; safecall;
    procedure Set_ResetDateOnLoad(pVal: Integer); safecall;
    function Get_SendBufferSize: Integer; safecall;
    procedure Set_SendBufferSize(pVal: Integer); safecall;
    function Get_SendIndividual: Integer; safecall;
    procedure Set_SendIndividual(pVal: Integer); safecall;
    function Get_SizeLimit: Integer; safecall;
    procedure Set_SizeLimit(pVal: Integer); safecall;
    function Get_SmtpAuthMethod: WideString; safecall;
    procedure Set_SmtpAuthMethod(const pVal: WideString); safecall;
    function Get_SmtpHost: WideString; safecall;
    procedure Set_SmtpHost(const pVal: WideString); safecall;
    function Get_SmtpLoginDomain: WideString; safecall;
    procedure Set_SmtpLoginDomain(const pVal: WideString); safecall;
    function Get_SmtpPassword: WideString; safecall;
    procedure Set_SmtpPassword(const pVal: WideString); safecall;
    function Get_SmtpPort: Integer; safecall;
    procedure Set_SmtpPort(pVal: Integer); safecall;
    function Get_SmtpSessionLog: WideString; safecall;
    function Get_SmtpSsl: Integer; safecall;
    procedure Set_SmtpSsl(pVal: Integer); safecall;
    function Get_SmtpSslServerCertVerified: Integer; safecall;
    function Get_SmtpUsername: WideString; safecall;
    procedure Set_SmtpUsername(const pVal: WideString); safecall;
    function Get_SoRcvBuf: Integer; safecall;
    procedure Set_SoRcvBuf(pVal: Integer); safecall;
    function Get_SoSndBuf: Integer; safecall;
    procedure Set_SoSndBuf(pVal: Integer); safecall;
    function Get_SocksHostname: WideString; safecall;
    procedure Set_SocksHostname(const pVal: WideString); safecall;
    function Get_SocksPassword: WideString; safecall;
    procedure Set_SocksPassword(const pVal: WideString); safecall;
    function Get_SocksPort: Integer; safecall;
    procedure Set_SocksPort(pVal: Integer); safecall;
    function Get_SocksUsername: WideString; safecall;
    procedure Set_SocksUsername(const pVal: WideString); safecall;
    function Get_SocksVersion: Integer; safecall;
    procedure Set_SocksVersion(pVal: Integer); safecall;
    function Get_StartTls: Integer; safecall;
    procedure Set_StartTls(pVal: Integer); safecall;
    function Get_UseApop: Integer; safecall;
    procedure Set_UseApop(pVal: Integer); safecall;
    function AddPfxSourceData(pfxData: OleVariant; const password: WideString): Integer; safecall;
    function AddPfxSourceFile(const pfxFilePath: WideString; const password: WideString): Integer; safecall;
    function CheckMail: Integer; safecall;
    function CheckMailAsync: IChilkatTask; safecall;
    procedure ClearBadEmailAddresses; safecall;
    procedure ClearPop3SessionLog; safecall;
    procedure ClearSmtpSessionLog; safecall;
    function CloseSmtpConnection: Integer; safecall;
    function CloseSmtpConnectionAsync: IChilkatTask; safecall;
    function CopyMail: IChilkatEmailBundle; safecall;
    function CopyMailAsync: IChilkatTask; safecall;
    function DeleteBundle(const emailBundle: IChilkatEmailBundle): Integer; safecall;
    function DeleteBundleAsync(const emailBundle: IChilkatEmailBundle): IChilkatTask; safecall;
    function DeleteByMsgnum(msgnum: Integer): Integer; safecall;
    function DeleteByMsgnumAsync(msgnum: Integer): IChilkatTask; safecall;
    function DeleteByUidl(const uidl: WideString): Integer; safecall;
    function DeleteByUidlAsync(const uidl: WideString): IChilkatTask; safecall;
    function DeleteEmail(const email: IChilkatEmail): Integer; safecall;
    function DeleteEmailAsync(const email: IChilkatEmail): IChilkatTask; safecall;
    function DeleteMultiple(const uidlArray: ICkStringArray): Integer; safecall;
    function DeleteMultipleAsync(const uidlArray: ICkStringArray): IChilkatTask; safecall;
    function FetchByMsgnum(msgnum: Integer): IChilkatEmail; safecall;
    function FetchByMsgnumAsync(msgnum: Integer): IChilkatTask; safecall;
    function FetchEmail(const uidl: WideString): IChilkatEmail; safecall;
    function FetchEmailAsync(const uidl: WideString): IChilkatTask; safecall;
    function FetchMime(const uidl: WideString): OleVariant; safecall;
    function FetchMimeAsync(const uidl: WideString): IChilkatTask; safecall;
    function FetchMimeByMsgnum(msgnum: Integer): OleVariant; safecall;
    function FetchMimeByMsgnumAsync(msgnum: Integer): IChilkatTask; safecall;
    function FetchMultiple(const uidlArray: ICkStringArray): IChilkatEmailBundle; safecall;
    function FetchMultipleAsync(const uidlArray: ICkStringArray): IChilkatTask; safecall;
    function FetchMultipleHeaders(const uidlArray: ICkStringArray; numBodyLines: Integer): IChilkatEmailBundle; safecall;
    function FetchMultipleHeadersAsync(const uidlArray: ICkStringArray; numBodyLines: Integer): IChilkatTask; safecall;
    function FetchMultipleMime(const uidlArray: ICkStringArray): ICkStringArray; safecall;
    function FetchMultipleMimeAsync(const uidlArray: ICkStringArray): IChilkatTask; safecall;
    function FetchSingleHeader(numBodyLines: Integer; messageNumber: Integer): IChilkatEmail; safecall;
    function FetchSingleHeaderAsync(numBodyLines: Integer; messageNumber: Integer): IChilkatTask; safecall;
    function FetchSingleHeaderByUidl(numBodyLines: Integer; const uidl: WideString): IChilkatEmail; safecall;
    function FetchSingleHeaderByUidlAsync(numBodyLines: Integer; const uidl: WideString): IChilkatTask; safecall;
    function GetAllHeaders(numBodyLines: Integer): IChilkatEmailBundle; safecall;
    function GetAllHeadersAsync(numBodyLines: Integer): IChilkatTask; safecall;
    function GetFullEmail(const email: IChilkatEmail): IChilkatEmail; safecall;
    function GetFullEmailAsync(const email: IChilkatEmail): IChilkatTask; safecall;
    function GetHeaders(numBodyLines: Integer; fromIndex: Integer; toIndex: Integer): IChilkatEmailBundle; safecall;
    function GetHeadersAsync(numBodyLines: Integer; fromIndex: Integer; toIndex: Integer): IChilkatTask; safecall;
    function GetMailboxCount: Integer; safecall;
    function GetMailboxCountAsync: IChilkatTask; safecall;
    function GetMailboxInfoXml: WideString; safecall;
    function GetMailboxInfoXmlAsync: IChilkatTask; safecall;
    function GetMailboxSize: Integer; safecall;
    function GetMailboxSizeAsync: IChilkatTask; safecall;
    function GetPop3SslServerCert: IChilkatCert; safecall;
    function GetSentToEmailAddrs: ICkStringArray; safecall;
    function GetSizeByUidl(const uidl: WideString): Integer; safecall;
    function GetSizeByUidlAsync(const uidl: WideString): IChilkatTask; safecall;
    function GetSmtpSslServerCert: IChilkatCert; safecall;
    function GetUidls: ICkStringArray; safecall;
    function GetUidlsAsync: IChilkatTask; safecall;
    function IsSmtpDsnCapable: Integer; safecall;
    function IsSmtpDsnCapableAsync: IChilkatTask; safecall;
    function IsUnlocked: Integer; safecall;
    function LoadEml(const emlFilename: WideString): IChilkatEmail; safecall;
    function LoadMbx(const mbxFileName: WideString): IChilkatEmailBundle; safecall;
    function LoadMime(const mimeText: WideString): IChilkatEmail; safecall;
    function LoadXmlEmail(const filename: WideString): IChilkatEmail; safecall;
    function LoadXmlEmailString(const xmlString: WideString): IChilkatEmail; safecall;
    function LoadXmlFile(const filename: WideString): IChilkatEmailBundle; safecall;
    function LoadXmlString(const xmlString: WideString): IChilkatEmailBundle; safecall;
    function MxLookup(const emailAddress: WideString): WideString; safecall;
    function MxLookupAll(const emailAddress: WideString): ICkStringArray; safecall;
    function OpenSmtpConnection: Integer; safecall;
    function OpenSmtpConnectionAsync: IChilkatTask; safecall;
    function Pop3BeginSession: Integer; safecall;
    function Pop3BeginSessionAsync: IChilkatTask; safecall;
    function Pop3EndSession: Integer; safecall;
    function Pop3EndSessionAsync: IChilkatTask; safecall;
    function Pop3EndSessionNoQuit: Integer; safecall;
    function Pop3EndSessionNoQuitAsync: IChilkatTask; safecall;
    function Pop3Noop: Integer; safecall;
    function Pop3NoopAsync: IChilkatTask; safecall;
    function Pop3Reset: Integer; safecall;
    function Pop3ResetAsync: IChilkatTask; safecall;
    function Pop3SendRawCommand(const command: WideString; const charset: WideString): WideString; safecall;
    function Pop3SendRawCommandAsync(const command: WideString; const charset: WideString): IChilkatTask; safecall;
    function QuickSend(const fromAddr: WideString; const toAddr: WideString; 
                       const subject: WideString; const Body: WideString; 
                       const smtpServer: WideString): Integer; safecall;
    function QuickSendAsync(const fromAddr: WideString; const toAddr: WideString; 
                            const subject: WideString; const Body: WideString; 
                            const smtpServer: WideString): IChilkatTask; safecall;
    function RenderToMime(const email: IChilkatEmail): WideString; safecall;
    function RenderToMimeBytes(const email: IChilkatEmail): OleVariant; safecall;
    function SendBundle(const bundle: IChilkatEmailBundle): Integer; safecall;
    function SendBundleAsync(const bundle: IChilkatEmailBundle): IChilkatTask; safecall;
    function SendEmail(const email: IChilkatEmail): Integer; safecall;
    function SendEmailAsync(const email: IChilkatEmail): IChilkatTask; safecall;
    function SendMime(const fromAddr: WideString; const recipients: WideString; 
                      const mimeSource: WideString): Integer; safecall;
    function SendMimeAsync(const fromAddr: WideString; const recipients: WideString; 
                           const mimeSource: WideString): IChilkatTask; safecall;
    function SendMimeBytes(const fromAddr: WideString; const recipients: WideString; 
                           mimeSource: OleVariant): Integer; safecall;
    function SendMimeBytesAsync(const fromAddr: WideString; const recipients: WideString; 
                                mimeSource: OleVariant): IChilkatTask; safecall;
    function SendMimeBytesQ(const From: WideString; const recipients: WideString; 
                            mimeData: OleVariant): Integer; safecall;
    function SendMimeQ(const fromAddr: WideString; const recipients: WideString; 
                       const mimeSource: WideString): Integer; safecall;
    function SendMimeToList(const fromAddr: WideString; const distListFilename: WideString; 
                            const mimeSource: WideString): Integer; safecall;
    function SendMimeToListAsync(const fromAddr: WideString; const distListFilename: WideString; 
                                 const mimeSource: WideString): IChilkatTask; safecall;
    function SendQ(const email: IChilkatEmail): Integer; safecall;
    function SendQ2(const email: IChilkatEmail; const queueDir: WideString): Integer; safecall;
    function SendToDistributionList(const emailObj: IChilkatEmail; 
                                    const recipientList: ICkStringArray): Integer; safecall;
    function SendToDistributionListAsync(const emailObj: IChilkatEmail; 
                                         const recipientList: ICkStringArray): IChilkatTask; safecall;
    function SetCSP(const csp: IChilkatCsp): Integer; safecall;
    function SetDecryptCert2(const cert: IChilkatCert; const privateKey: IPrivateKey): Integer; safecall;
    function SetSslClientCert(const cert: IChilkatCert): Integer; safecall;
    function SetSslClientCertPem(const pemDataOrFilename: WideString; const pemPassword: WideString): Integer; safecall;
    function SetSslClientCertPfx(const pfxFilename: WideString; const pfxPassword: WideString): Integer; safecall;
    function SmtpNoop: Integer; safecall;
    function SmtpNoopAsync: IChilkatTask; safecall;
    function SmtpReset: Integer; safecall;
    function SmtpResetAsync: IChilkatTask; safecall;
    function SmtpSendRawCommand(const command: WideString; const charset: WideString; 
                                bEncodeBase64: Integer): WideString; safecall;
    function SmtpSendRawCommandAsync(const command: WideString; const charset: WideString; 
                                     bEncodeBase64: Integer): IChilkatTask; safecall;
    function SshAuthenticatePk(const sshLogin: WideString; const sshUsername: IChilkatSshKey): Integer; safecall;
    function SshAuthenticatePkAsync(const sshLogin: WideString; const sshUsername: IChilkatSshKey): IChilkatTask; safecall;
    function SshAuthenticatePw(const sshLogin: WideString; const sshPassword: WideString): Integer; safecall;
    function SshAuthenticatePwAsync(const sshLogin: WideString; const sshPassword: WideString): IChilkatTask; safecall;
    function SshCloseTunnel: Integer; safecall;
    function SshCloseTunnelAsync: IChilkatTask; safecall;
    function SshTunnel(bSmtp: Integer; const sshServerHostname: WideString; sshPort: Integer): Integer; safecall;
    function TransferMail: IChilkatEmailBundle; safecall;
    function TransferMailAsync: IChilkatTask; safecall;
    function TransferMultipleMime(const uidlArray: ICkStringArray): ICkStringArray; safecall;
    function TransferMultipleMimeAsync(const uidlArray: ICkStringArray): IChilkatTask; safecall;
    function UnlockComponent(const code: WideString): Integer; safecall;
    function VerifyPopConnection: Integer; safecall;
    function VerifyPopConnectionAsync: IChilkatTask; safecall;
    function VerifyPopLogin: Integer; safecall;
    function VerifyPopLoginAsync: IChilkatTask; safecall;
    function VerifySmtpConnection: Integer; safecall;
    function VerifySmtpConnectionAsync: IChilkatTask; safecall;
    function VerifySmtpLogin: Integer; safecall;
    function VerifySmtpLoginAsync: IChilkatTask; safecall;
    procedure GetBadEmailAddresses(const strArray: ICkStringArray); safecall;
    function Get_P7mEncryptAttachFilename: WideString; safecall;
    procedure Set_P7mEncryptAttachFilename(const pVal: WideString); safecall;
    function Get_P7mSigAttachFilename: WideString; safecall;
    procedure Set_P7mSigAttachFilename(const pVal: WideString); safecall;
    function Get_P7sSigAttachFilename: WideString; safecall;
    procedure Set_P7sSigAttachFilename(const pVal: WideString); safecall;
    function Get_PreferIpv6: Integer; safecall;
    procedure Set_PreferIpv6(pVal: Integer); safecall;
    function UseCertVault(const vault: IChilkatXmlCertVault): Integer; safecall;
    function SetDecryptCert(const cert: IChilkatCert): Integer; safecall;
    function Get_OAuth2AccessToken: WideString; safecall;
    procedure Set_OAuth2AccessToken(const pVal: WideString); safecall;
    function Get_SslProtocol: WideString; safecall;
    procedure Set_SslProtocol(const pVal: WideString); safecall;
    function Get_SmtpFailReason: WideString; safecall;
    function SmtpConnect: Integer; safecall;
    function SmtpConnectAsync: IChilkatTask; safecall;
    function SmtpAuthenticate: Integer; safecall;
    function SmtpAuthenticateAsync: IChilkatTask; safecall;
    function Get_IsPop3Connected: Integer; safecall;
    function Get_SslAllowedCiphers: WideString; safecall;
    procedure Set_SslAllowedCiphers(const pVal: WideString); safecall;
    function Get_AutoUnwrapSecurity: Integer; safecall;
    procedure Set_AutoUnwrapSecurity(pVal: Integer); safecall;
    function Get_SmtpPipelining: Integer; safecall;
    procedure Set_SmtpPipelining(pVal: Integer); safecall;
    function Get_PercentDoneScale: Integer; safecall;
    procedure Set_PercentDoneScale(pVal: Integer); safecall;
    function Get_TlsVersion: WideString; safecall;
    function Get_TlsCipherSuite: WideString; safecall;
    function LoadQueuedEmail(const path: WideString): IChilkatEmail; safecall;
    function SshOpenTunnel(const sshHostname: WideString; sshPort: Integer): Integer; safecall;
    function SshOpenTunnelAsync(const sshHostname: WideString; sshPort: Integer): IChilkatTask; safecall;
    function UseSshTunnel(const tunnel: IChilkatSocket): Integer; safecall;
    function VerifyRecips(const email: IChilkatEmail; const badAddrs: ICkStringArray): Integer; safecall;
    function VerifyRecipsAsync(const email: IChilkatEmail; const badAddrs: ICkStringArray): IChilkatTask; safecall;
    function UseSsh(const ssh: IChilkatSsh): Integer; safecall;
    function Get_TlsPinSet: WideString; safecall;
    procedure Set_TlsPinSet(const pVal: WideString); safecall;
    function Get_ConnectFailReason: Integer; safecall;
    function Pop3Connect: Integer; safecall;
    function Pop3ConnectAsync: IChilkatTask; safecall;
    function Pop3Authenticate: Integer; safecall;
    function Pop3AuthenticateAsync: IChilkatTask; safecall;
    function Get_AbortCurrent: Integer; safecall;
    procedure Set_AbortCurrent(pVal: Integer); safecall;
    function RenderToMimeSb(const email: IChilkatEmail; const renderedMime: IChilkatStringBuilder): Integer; safecall;
    function RenderToMimeBd(const email: IChilkatEmail; const renderedMime: IChilkatBinData): Integer; safecall;
    function Get_StartTLSifPossible: Integer; safecall;
    procedure Set_StartTLSifPossible(pVal: Integer); safecall;
    function LastJsonData: IChilkatJsonObject; safecall;
    function SetPassword(const protocol: WideString; const password: IChilkatSecureString): Integer; safecall;
    function SendMimeBd(const fromAddr: WideString; const recipients: WideString; 
                        const mimeData: IChilkatBinData): Integer; safecall;
    function SendMimeBdAsync(const fromAddr: WideString; const recipients: WideString; 
                             const mimeData: IChilkatBinData): IChilkatTask; safecall;
    function FetchMimeBd(const uidl: WideString; const mimeData: IChilkatBinData): Integer; safecall;
    function FetchMimeBdAsync(const uidl: WideString; const mimeData: IChilkatBinData): IChilkatTask; safecall;
    function Get_UncommonOptions: WideString; safecall;
    procedure Set_UncommonOptions(const pVal: WideString); safecall;
    function LoadTaskCaller(const task: IChilkatTask): Integer; safecall;
    function Get_LastSmtpStatusMsg: WideString; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property LastMethodSuccess: Integer read Get_LastMethodSuccess write Set_LastMethodSuccess;
    property LastStringResult: WideString read Get_LastStringResult;
    property LastBinaryResult: OleVariant read Get_LastBinaryResult;
    property LastStringResultLen: Integer read Get_LastStringResultLen;
    property AllOrNone: Integer read Get_AllOrNone write Set_AllOrNone;
    property AutoFix: Integer read Get_AutoFix write Set_AutoFix;
    property AutoGenMessageId: Integer read Get_AutoGenMessageId write Set_AutoGenMessageId;
    property AutoSmtpRset: Integer read Get_AutoSmtpRset write Set_AutoSmtpRset;
    property ClientIpAddress: WideString read Get_ClientIpAddress write Set_ClientIpAddress;
    property ConnectTimeout: Integer read Get_ConnectTimeout write Set_ConnectTimeout;
    property DsnEnvid: WideString read Get_DsnEnvid write Set_DsnEnvid;
    property DsnNotify: WideString read Get_DsnNotify write Set_DsnNotify;
    property DsnRet: WideString read Get_DsnRet write Set_DsnRet;
    property EmbedCertChain: Integer read Get_EmbedCertChain write Set_EmbedCertChain;
    property Filter: WideString read Get_Filter write Set_Filter;
    property HeartbeatMs: Integer read Get_HeartbeatMs write Set_HeartbeatMs;
    property HeloHostname: WideString read Get_HeloHostname write Set_HeloHostname;
    property HttpProxyAuthMethod: WideString read Get_HttpProxyAuthMethod write Set_HttpProxyAuthMethod;
    property HttpProxyDomain: WideString read Get_HttpProxyDomain write Set_HttpProxyDomain;
    property HttpProxyHostname: WideString read Get_HttpProxyHostname write Set_HttpProxyHostname;
    property HttpProxyPassword: WideString read Get_HttpProxyPassword write Set_HttpProxyPassword;
    property HttpProxyPort: Integer read Get_HttpProxyPort write Set_HttpProxyPort;
    property HttpProxyUsername: WideString read Get_HttpProxyUsername write Set_HttpProxyUsername;
    property ImmediateDelete: Integer read Get_ImmediateDelete write Set_ImmediateDelete;
    property IncludeRootCert: Integer read Get_IncludeRootCert write Set_IncludeRootCert;
    property IsSmtpConnected: Integer read Get_IsSmtpConnected;
    property LastSendQFilename: WideString read Get_LastSendQFilename;
    property LastSmtpStatus: Integer read Get_LastSmtpStatus;
    property LogMailReceivedFilename: WideString read Get_LogMailReceivedFilename write Set_LogMailReceivedFilename;
    property LogMailSentFilename: WideString read Get_LogMailSentFilename write Set_LogMailSentFilename;
    property MailHost: WideString read Get_MailHost write Set_MailHost;
    property MailPort: Integer read Get_MailPort write Set_MailPort;
    property MaxCount: Integer read Get_MaxCount write Set_MaxCount;
    property OpaqueSigning: Integer read Get_OpaqueSigning write Set_OpaqueSigning;
    property Pop3SPA: Integer read Get_Pop3SPA write Set_Pop3SPA;
    property Pop3SessionId: Integer read Get_Pop3SessionId;
    property Pop3SessionLog: WideString read Get_Pop3SessionLog;
    property Pop3SslServerCertVerified: Integer read Get_Pop3SslServerCertVerified;
    property Pop3Stls: Integer read Get_Pop3Stls write Set_Pop3Stls;
    property PopPassword: WideString read Get_PopPassword write Set_PopPassword;
    property PopPasswordBase64: WideString read Get_PopPasswordBase64 write Set_PopPasswordBase64;
    property PopSsl: Integer read Get_PopSsl write Set_PopSsl;
    property PopUsername: WideString read Get_PopUsername write Set_PopUsername;
    property ReadTimeout: Integer read Get_ReadTimeout write Set_ReadTimeout;
    property RequireSslCertVerify: Integer read Get_RequireSslCertVerify write Set_RequireSslCertVerify;
    property ResetDateOnLoad: Integer read Get_ResetDateOnLoad write Set_ResetDateOnLoad;
    property SendBufferSize: Integer read Get_SendBufferSize write Set_SendBufferSize;
    property SendIndividual: Integer read Get_SendIndividual write Set_SendIndividual;
    property SizeLimit: Integer read Get_SizeLimit write Set_SizeLimit;
    property SmtpAuthMethod: WideString read Get_SmtpAuthMethod write Set_SmtpAuthMethod;
    property SmtpHost: WideString read Get_SmtpHost write Set_SmtpHost;
    property SmtpLoginDomain: WideString read Get_SmtpLoginDomain write Set_SmtpLoginDomain;
    property SmtpPassword: WideString read Get_SmtpPassword write Set_SmtpPassword;
    property SmtpPort: Integer read Get_SmtpPort write Set_SmtpPort;
    property SmtpSessionLog: WideString read Get_SmtpSessionLog;
    property SmtpSsl: Integer read Get_SmtpSsl write Set_SmtpSsl;
    property SmtpSslServerCertVerified: Integer read Get_SmtpSslServerCertVerified;
    property SmtpUsername: WideString read Get_SmtpUsername write Set_SmtpUsername;
    property SoRcvBuf: Integer read Get_SoRcvBuf write Set_SoRcvBuf;
    property SoSndBuf: Integer read Get_SoSndBuf write Set_SoSndBuf;
    property SocksHostname: WideString read Get_SocksHostname write Set_SocksHostname;
    property SocksPassword: WideString read Get_SocksPassword write Set_SocksPassword;
    property SocksPort: Integer read Get_SocksPort write Set_SocksPort;
    property SocksUsername: WideString read Get_SocksUsername write Set_SocksUsername;
    property SocksVersion: Integer read Get_SocksVersion write Set_SocksVersion;
    property StartTls: Integer read Get_StartTls write Set_StartTls;
    property UseApop: Integer read Get_UseApop write Set_UseApop;
    property P7mEncryptAttachFilename: WideString read Get_P7mEncryptAttachFilename write Set_P7mEncryptAttachFilename;
    property P7mSigAttachFilename: WideString read Get_P7mSigAttachFilename write Set_P7mSigAttachFilename;
    property P7sSigAttachFilename: WideString read Get_P7sSigAttachFilename write Set_P7sSigAttachFilename;
    property PreferIpv6: Integer read Get_PreferIpv6 write Set_PreferIpv6;
    property OAuth2AccessToken: WideString read Get_OAuth2AccessToken write Set_OAuth2AccessToken;
    property SslProtocol: WideString read Get_SslProtocol write Set_SslProtocol;
    property SmtpFailReason: WideString read Get_SmtpFailReason;
    property IsPop3Connected: Integer read Get_IsPop3Connected;
    property SslAllowedCiphers: WideString read Get_SslAllowedCiphers write Set_SslAllowedCiphers;
    property AutoUnwrapSecurity: Integer read Get_AutoUnwrapSecurity write Set_AutoUnwrapSecurity;
    property SmtpPipelining: Integer read Get_SmtpPipelining write Set_SmtpPipelining;
    property PercentDoneScale: Integer read Get_PercentDoneScale write Set_PercentDoneScale;
    property TlsVersion: WideString read Get_TlsVersion;
    property TlsCipherSuite: WideString read Get_TlsCipherSuite;
    property TlsPinSet: WideString read Get_TlsPinSet write Set_TlsPinSet;
    property ConnectFailReason: Integer read Get_ConnectFailReason;
    property AbortCurrent: Integer read Get_AbortCurrent write Set_AbortCurrent;
    property StartTLSifPossible: Integer read Get_StartTLSifPossible write Set_StartTLSifPossible;
    property UncommonOptions: WideString read Get_UncommonOptions write Set_UncommonOptions;
    property LastSmtpStatusMsg: WideString read Get_LastSmtpStatusMsg;
  end;

// *********************************************************************//
// DispIntf:  IChilkatMailManDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {7998B064-06E7-4960-ACEF-AAFF0A262487}
// *********************************************************************//
  IChilkatMailManDisp = dispinterface
    ['{7998B064-06E7-4960-ACEF-AAFF0A262487}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property LastMethodSuccess: Integer dispid 9;
    property LastStringResult: WideString readonly dispid 10;
    property LastBinaryResult: OleVariant readonly dispid 11;
    property LastStringResultLen: Integer readonly dispid 12;
    property AllOrNone: Integer dispid 100;
    property AutoFix: Integer dispid 101;
    property AutoGenMessageId: Integer dispid 102;
    property AutoSmtpRset: Integer dispid 103;
    property ClientIpAddress: WideString dispid 104;
    property ConnectTimeout: Integer dispid 105;
    property DsnEnvid: WideString dispid 106;
    property DsnNotify: WideString dispid 107;
    property DsnRet: WideString dispid 108;
    property EmbedCertChain: Integer dispid 109;
    property Filter: WideString dispid 110;
    property HeartbeatMs: Integer dispid 111;
    property HeloHostname: WideString dispid 112;
    property HttpProxyAuthMethod: WideString dispid 113;
    property HttpProxyDomain: WideString dispid 114;
    property HttpProxyHostname: WideString dispid 115;
    property HttpProxyPassword: WideString dispid 116;
    property HttpProxyPort: Integer dispid 117;
    property HttpProxyUsername: WideString dispid 118;
    property ImmediateDelete: Integer dispid 119;
    property IncludeRootCert: Integer dispid 120;
    property IsSmtpConnected: Integer readonly dispid 121;
    property LastSendQFilename: WideString readonly dispid 122;
    property LastSmtpStatus: Integer readonly dispid 123;
    property LogMailReceivedFilename: WideString dispid 124;
    property LogMailSentFilename: WideString dispid 125;
    property MailHost: WideString dispid 126;
    property MailPort: Integer dispid 127;
    property MaxCount: Integer dispid 128;
    property OpaqueSigning: Integer dispid 129;
    property Pop3SPA: Integer dispid 130;
    property Pop3SessionId: Integer readonly dispid 131;
    property Pop3SessionLog: WideString readonly dispid 132;
    property Pop3SslServerCertVerified: Integer readonly dispid 133;
    property Pop3Stls: Integer dispid 134;
    property PopPassword: WideString dispid 135;
    property PopPasswordBase64: WideString dispid 136;
    property PopSsl: Integer dispid 137;
    property PopUsername: WideString dispid 138;
    property ReadTimeout: Integer dispid 139;
    property RequireSslCertVerify: Integer dispid 140;
    property ResetDateOnLoad: Integer dispid 141;
    property SendBufferSize: Integer dispid 142;
    property SendIndividual: Integer dispid 143;
    property SizeLimit: Integer dispid 144;
    property SmtpAuthMethod: WideString dispid 145;
    property SmtpHost: WideString dispid 146;
    property SmtpLoginDomain: WideString dispid 147;
    property SmtpPassword: WideString dispid 148;
    property SmtpPort: Integer dispid 149;
    property SmtpSessionLog: WideString readonly dispid 150;
    property SmtpSsl: Integer dispid 151;
    property SmtpSslServerCertVerified: Integer readonly dispid 152;
    property SmtpUsername: WideString dispid 153;
    property SoRcvBuf: Integer dispid 154;
    property SoSndBuf: Integer dispid 155;
    property SocksHostname: WideString dispid 156;
    property SocksPassword: WideString dispid 157;
    property SocksPort: Integer dispid 158;
    property SocksUsername: WideString dispid 159;
    property SocksVersion: Integer dispid 160;
    property StartTls: Integer dispid 161;
    property UseApop: Integer dispid 162;
    function AddPfxSourceData(pfxData: OleVariant; const password: WideString): Integer; dispid 163;
    function AddPfxSourceFile(const pfxFilePath: WideString; const password: WideString): Integer; dispid 164;
    function CheckMail: Integer; dispid 165;
    function CheckMailAsync: IChilkatTask; dispid 665;
    procedure ClearBadEmailAddresses; dispid 166;
    procedure ClearPop3SessionLog; dispid 167;
    procedure ClearSmtpSessionLog; dispid 168;
    function CloseSmtpConnection: Integer; dispid 169;
    function CloseSmtpConnectionAsync: IChilkatTask; dispid 669;
    function CopyMail: IChilkatEmailBundle; dispid 170;
    function CopyMailAsync: IChilkatTask; dispid 670;
    function DeleteBundle(const emailBundle: IChilkatEmailBundle): Integer; dispid 171;
    function DeleteBundleAsync(const emailBundle: IChilkatEmailBundle): IChilkatTask; dispid 671;
    function DeleteByMsgnum(msgnum: Integer): Integer; dispid 172;
    function DeleteByMsgnumAsync(msgnum: Integer): IChilkatTask; dispid 672;
    function DeleteByUidl(const uidl: WideString): Integer; dispid 173;
    function DeleteByUidlAsync(const uidl: WideString): IChilkatTask; dispid 673;
    function DeleteEmail(const email: IChilkatEmail): Integer; dispid 174;
    function DeleteEmailAsync(const email: IChilkatEmail): IChilkatTask; dispid 674;
    function DeleteMultiple(const uidlArray: ICkStringArray): Integer; dispid 175;
    function DeleteMultipleAsync(const uidlArray: ICkStringArray): IChilkatTask; dispid 675;
    function FetchByMsgnum(msgnum: Integer): IChilkatEmail; dispid 176;
    function FetchByMsgnumAsync(msgnum: Integer): IChilkatTask; dispid 676;
    function FetchEmail(const uidl: WideString): IChilkatEmail; dispid 177;
    function FetchEmailAsync(const uidl: WideString): IChilkatTask; dispid 677;
    function FetchMime(const uidl: WideString): OleVariant; dispid 178;
    function FetchMimeAsync(const uidl: WideString): IChilkatTask; dispid 678;
    function FetchMimeByMsgnum(msgnum: Integer): OleVariant; dispid 179;
    function FetchMimeByMsgnumAsync(msgnum: Integer): IChilkatTask; dispid 679;
    function FetchMultiple(const uidlArray: ICkStringArray): IChilkatEmailBundle; dispid 180;
    function FetchMultipleAsync(const uidlArray: ICkStringArray): IChilkatTask; dispid 680;
    function FetchMultipleHeaders(const uidlArray: ICkStringArray; numBodyLines: Integer): IChilkatEmailBundle; dispid 181;
    function FetchMultipleHeadersAsync(const uidlArray: ICkStringArray; numBodyLines: Integer): IChilkatTask; dispid 681;
    function FetchMultipleMime(const uidlArray: ICkStringArray): ICkStringArray; dispid 182;
    function FetchMultipleMimeAsync(const uidlArray: ICkStringArray): IChilkatTask; dispid 682;
    function FetchSingleHeader(numBodyLines: Integer; messageNumber: Integer): IChilkatEmail; dispid 183;
    function FetchSingleHeaderAsync(numBodyLines: Integer; messageNumber: Integer): IChilkatTask; dispid 683;
    function FetchSingleHeaderByUidl(numBodyLines: Integer; const uidl: WideString): IChilkatEmail; dispid 184;
    function FetchSingleHeaderByUidlAsync(numBodyLines: Integer; const uidl: WideString): IChilkatTask; dispid 684;
    function GetAllHeaders(numBodyLines: Integer): IChilkatEmailBundle; dispid 185;
    function GetAllHeadersAsync(numBodyLines: Integer): IChilkatTask; dispid 685;
    function GetFullEmail(const email: IChilkatEmail): IChilkatEmail; dispid 186;
    function GetFullEmailAsync(const email: IChilkatEmail): IChilkatTask; dispid 686;
    function GetHeaders(numBodyLines: Integer; fromIndex: Integer; toIndex: Integer): IChilkatEmailBundle; dispid 187;
    function GetHeadersAsync(numBodyLines: Integer; fromIndex: Integer; toIndex: Integer): IChilkatTask; dispid 687;
    function GetMailboxCount: Integer; dispid 188;
    function GetMailboxCountAsync: IChilkatTask; dispid 688;
    function GetMailboxInfoXml: WideString; dispid 189;
    function GetMailboxInfoXmlAsync: IChilkatTask; dispid 689;
    function GetMailboxSize: Integer; dispid 190;
    function GetMailboxSizeAsync: IChilkatTask; dispid 690;
    function GetPop3SslServerCert: IChilkatCert; dispid 191;
    function GetSentToEmailAddrs: ICkStringArray; dispid 192;
    function GetSizeByUidl(const uidl: WideString): Integer; dispid 193;
    function GetSizeByUidlAsync(const uidl: WideString): IChilkatTask; dispid 693;
    function GetSmtpSslServerCert: IChilkatCert; dispid 194;
    function GetUidls: ICkStringArray; dispid 195;
    function GetUidlsAsync: IChilkatTask; dispid 695;
    function IsSmtpDsnCapable: Integer; dispid 196;
    function IsSmtpDsnCapableAsync: IChilkatTask; dispid 696;
    function IsUnlocked: Integer; dispid 197;
    function LoadEml(const emlFilename: WideString): IChilkatEmail; dispid 198;
    function LoadMbx(const mbxFileName: WideString): IChilkatEmailBundle; dispid 199;
    function LoadMime(const mimeText: WideString): IChilkatEmail; dispid 200;
    function LoadXmlEmail(const filename: WideString): IChilkatEmail; dispid 201;
    function LoadXmlEmailString(const xmlString: WideString): IChilkatEmail; dispid 202;
    function LoadXmlFile(const filename: WideString): IChilkatEmailBundle; dispid 203;
    function LoadXmlString(const xmlString: WideString): IChilkatEmailBundle; dispid 204;
    function MxLookup(const emailAddress: WideString): WideString; dispid 205;
    function MxLookupAll(const emailAddress: WideString): ICkStringArray; dispid 206;
    function OpenSmtpConnection: Integer; dispid 207;
    function OpenSmtpConnectionAsync: IChilkatTask; dispid 707;
    function Pop3BeginSession: Integer; dispid 208;
    function Pop3BeginSessionAsync: IChilkatTask; dispid 708;
    function Pop3EndSession: Integer; dispid 209;
    function Pop3EndSessionAsync: IChilkatTask; dispid 709;
    function Pop3EndSessionNoQuit: Integer; dispid 210;
    function Pop3EndSessionNoQuitAsync: IChilkatTask; dispid 710;
    function Pop3Noop: Integer; dispid 211;
    function Pop3NoopAsync: IChilkatTask; dispid 711;
    function Pop3Reset: Integer; dispid 212;
    function Pop3ResetAsync: IChilkatTask; dispid 712;
    function Pop3SendRawCommand(const command: WideString; const charset: WideString): WideString; dispid 213;
    function Pop3SendRawCommandAsync(const command: WideString; const charset: WideString): IChilkatTask; dispid 713;
    function QuickSend(const fromAddr: WideString; const toAddr: WideString; 
                       const subject: WideString; const Body: WideString; 
                       const smtpServer: WideString): Integer; dispid 214;
    function QuickSendAsync(const fromAddr: WideString; const toAddr: WideString; 
                            const subject: WideString; const Body: WideString; 
                            const smtpServer: WideString): IChilkatTask; dispid 714;
    function RenderToMime(const email: IChilkatEmail): WideString; dispid 215;
    function RenderToMimeBytes(const email: IChilkatEmail): OleVariant; dispid 216;
    function SendBundle(const bundle: IChilkatEmailBundle): Integer; dispid 217;
    function SendBundleAsync(const bundle: IChilkatEmailBundle): IChilkatTask; dispid 717;
    function SendEmail(const email: IChilkatEmail): Integer; dispid 218;
    function SendEmailAsync(const email: IChilkatEmail): IChilkatTask; dispid 718;
    function SendMime(const fromAddr: WideString; const recipients: WideString; 
                      const mimeSource: WideString): Integer; dispid 219;
    function SendMimeAsync(const fromAddr: WideString; const recipients: WideString; 
                           const mimeSource: WideString): IChilkatTask; dispid 719;
    function SendMimeBytes(const fromAddr: WideString; const recipients: WideString; 
                           mimeSource: OleVariant): Integer; dispid 220;
    function SendMimeBytesAsync(const fromAddr: WideString; const recipients: WideString; 
                                mimeSource: OleVariant): IChilkatTask; dispid 720;
    function SendMimeBytesQ(const From: WideString; const recipients: WideString; 
                            mimeData: OleVariant): Integer; dispid 221;
    function SendMimeQ(const fromAddr: WideString; const recipients: WideString; 
                       const mimeSource: WideString): Integer; dispid 222;
    function SendMimeToList(const fromAddr: WideString; const distListFilename: WideString; 
                            const mimeSource: WideString): Integer; dispid 223;
    function SendMimeToListAsync(const fromAddr: WideString; const distListFilename: WideString; 
                                 const mimeSource: WideString): IChilkatTask; dispid 723;
    function SendQ(const email: IChilkatEmail): Integer; dispid 224;
    function SendQ2(const email: IChilkatEmail; const queueDir: WideString): Integer; dispid 225;
    function SendToDistributionList(const emailObj: IChilkatEmail; 
                                    const recipientList: ICkStringArray): Integer; dispid 226;
    function SendToDistributionListAsync(const emailObj: IChilkatEmail; 
                                         const recipientList: ICkStringArray): IChilkatTask; dispid 726;
    function SetCSP(const csp: IChilkatCsp): Integer; dispid 227;
    function SetDecryptCert2(const cert: IChilkatCert; const privateKey: IPrivateKey): Integer; dispid 228;
    function SetSslClientCert(const cert: IChilkatCert): Integer; dispid 229;
    function SetSslClientCertPem(const pemDataOrFilename: WideString; const pemPassword: WideString): Integer; dispid 230;
    function SetSslClientCertPfx(const pfxFilename: WideString; const pfxPassword: WideString): Integer; dispid 231;
    function SmtpNoop: Integer; dispid 232;
    function SmtpNoopAsync: IChilkatTask; dispid 732;
    function SmtpReset: Integer; dispid 233;
    function SmtpResetAsync: IChilkatTask; dispid 733;
    function SmtpSendRawCommand(const command: WideString; const charset: WideString; 
                                bEncodeBase64: Integer): WideString; dispid 234;
    function SmtpSendRawCommandAsync(const command: WideString; const charset: WideString; 
                                     bEncodeBase64: Integer): IChilkatTask; dispid 734;
    function SshAuthenticatePk(const sshLogin: WideString; const sshUsername: IChilkatSshKey): Integer; dispid 235;
    function SshAuthenticatePkAsync(const sshLogin: WideString; const sshUsername: IChilkatSshKey): IChilkatTask; dispid 735;
    function SshAuthenticatePw(const sshLogin: WideString; const sshPassword: WideString): Integer; dispid 236;
    function SshAuthenticatePwAsync(const sshLogin: WideString; const sshPassword: WideString): IChilkatTask; dispid 736;
    function SshCloseTunnel: Integer; dispid 237;
    function SshCloseTunnelAsync: IChilkatTask; dispid 737;
    function SshTunnel(bSmtp: Integer; const sshServerHostname: WideString; sshPort: Integer): Integer; dispid 238;
    function TransferMail: IChilkatEmailBundle; dispid 239;
    function TransferMailAsync: IChilkatTask; dispid 739;
    function TransferMultipleMime(const uidlArray: ICkStringArray): ICkStringArray; dispid 240;
    function TransferMultipleMimeAsync(const uidlArray: ICkStringArray): IChilkatTask; dispid 740;
    function UnlockComponent(const code: WideString): Integer; dispid 241;
    function VerifyPopConnection: Integer; dispid 242;
    function VerifyPopConnectionAsync: IChilkatTask; dispid 742;
    function VerifyPopLogin: Integer; dispid 243;
    function VerifyPopLoginAsync: IChilkatTask; dispid 743;
    function VerifySmtpConnection: Integer; dispid 244;
    function VerifySmtpConnectionAsync: IChilkatTask; dispid 744;
    function VerifySmtpLogin: Integer; dispid 245;
    function VerifySmtpLoginAsync: IChilkatTask; dispid 745;
    procedure GetBadEmailAddresses(const strArray: ICkStringArray); dispid 246;
    property P7mEncryptAttachFilename: WideString dispid 250;
    property P7mSigAttachFilename: WideString dispid 251;
    property P7sSigAttachFilename: WideString dispid 252;
    property PreferIpv6: Integer dispid 253;
    function UseCertVault(const vault: IChilkatXmlCertVault): Integer; dispid 254;
    function SetDecryptCert(const cert: IChilkatCert): Integer; dispid 255;
    property OAuth2AccessToken: WideString dispid 256;
    property SslProtocol: WideString dispid 257;
    property SmtpFailReason: WideString readonly dispid 258;
    function SmtpConnect: Integer; dispid 259;
    function SmtpConnectAsync: IChilkatTask; dispid 759;
    function SmtpAuthenticate: Integer; dispid 260;
    function SmtpAuthenticateAsync: IChilkatTask; dispid 760;
    property IsPop3Connected: Integer readonly dispid 261;
    property SslAllowedCiphers: WideString dispid 262;
    property AutoUnwrapSecurity: Integer dispid 263;
    property SmtpPipelining: Integer dispid 264;
    property PercentDoneScale: Integer dispid 265;
    property TlsVersion: WideString readonly dispid 266;
    property TlsCipherSuite: WideString readonly dispid 267;
    function LoadQueuedEmail(const path: WideString): IChilkatEmail; dispid 268;
    function SshOpenTunnel(const sshHostname: WideString; sshPort: Integer): Integer; dispid 269;
    function SshOpenTunnelAsync(const sshHostname: WideString; sshPort: Integer): IChilkatTask; dispid 769;
    function UseSshTunnel(const tunnel: IChilkatSocket): Integer; dispid 270;
    function VerifyRecips(const email: IChilkatEmail; const badAddrs: ICkStringArray): Integer; dispid 271;
    function VerifyRecipsAsync(const email: IChilkatEmail; const badAddrs: ICkStringArray): IChilkatTask; dispid 771;
    function UseSsh(const ssh: IChilkatSsh): Integer; dispid 272;
    property TlsPinSet: WideString dispid 273;
    property ConnectFailReason: Integer readonly dispid 274;
    function Pop3Connect: Integer; dispid 275;
    function Pop3ConnectAsync: IChilkatTask; dispid 775;
    function Pop3Authenticate: Integer; dispid 276;
    function Pop3AuthenticateAsync: IChilkatTask; dispid 776;
    property AbortCurrent: Integer dispid 277;
    function RenderToMimeSb(const email: IChilkatEmail; const renderedMime: IChilkatStringBuilder): Integer; dispid 278;
    function RenderToMimeBd(const email: IChilkatEmail; const renderedMime: IChilkatBinData): Integer; dispid 279;
    property StartTLSifPossible: Integer dispid 280;
    function LastJsonData: IChilkatJsonObject; dispid 281;
    function SetPassword(const protocol: WideString; const password: IChilkatSecureString): Integer; dispid 282;
    function SendMimeBd(const fromAddr: WideString; const recipients: WideString; 
                        const mimeData: IChilkatBinData): Integer; dispid 283;
    function SendMimeBdAsync(const fromAddr: WideString; const recipients: WideString; 
                             const mimeData: IChilkatBinData): IChilkatTask; dispid 783;
    function FetchMimeBd(const uidl: WideString; const mimeData: IChilkatBinData): Integer; dispid 284;
    function FetchMimeBdAsync(const uidl: WideString; const mimeData: IChilkatBinData): IChilkatTask; dispid 784;
    property UncommonOptions: WideString dispid 285;
    function LoadTaskCaller(const task: IChilkatTask): Integer; dispid 286;
    property LastSmtpStatusMsg: WideString readonly dispid 287;
  end;

// *********************************************************************//
// Interface: IChilkatMht
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F1089DE8-926E-4BB9-ADAF-9E312F1BBD78}
// *********************************************************************//
  IChilkatMht = interface(IDispatch)
    ['{F1089DE8-926E-4BB9-ADAF-9E312F1BBD78}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_LastMethodSuccess: Integer; safecall;
    procedure Set_LastMethodSuccess(pVal: Integer); safecall;
    function Get_LastStringResult: WideString; safecall;
    function Get_LastBinaryResult: OleVariant; safecall;
    function Get_LastStringResultLen: Integer; safecall;
    function Get_BaseUrl: WideString; safecall;
    procedure Set_BaseUrl(const pVal: WideString); safecall;
    function Get_ConnectTimeout: Integer; safecall;
    procedure Set_ConnectTimeout(pVal: Integer); safecall;
    function Get_DebugHtmlAfter: WideString; safecall;
    procedure Set_DebugHtmlAfter(const pVal: WideString); safecall;
    function Get_DebugHtmlBefore: WideString; safecall;
    procedure Set_DebugHtmlBefore(const pVal: WideString); safecall;
    function Get_DebugTagCleaning: Integer; safecall;
    procedure Set_DebugTagCleaning(pVal: Integer); safecall;
    function Get_EmbedImages: Integer; safecall;
    procedure Set_EmbedImages(pVal: Integer); safecall;
    function Get_EmbedLocalOnly: Integer; safecall;
    procedure Set_EmbedLocalOnly(pVal: Integer); safecall;
    function Get_FetchFromCache: Integer; safecall;
    procedure Set_FetchFromCache(pVal: Integer); safecall;
    function Get_HeartbeatMs: Integer; safecall;
    procedure Set_HeartbeatMs(pVal: Integer); safecall;
    function Get_IgnoreMustRevalidate: Integer; safecall;
    procedure Set_IgnoreMustRevalidate(pVal: Integer); safecall;
    function Get_IgnoreNoCache: Integer; safecall;
    procedure Set_IgnoreNoCache(pVal: Integer); safecall;
    function Get_NoScripts: Integer; safecall;
    procedure Set_NoScripts(pVal: Integer); safecall;
    function Get_NtlmAuth: Integer; safecall;
    procedure Set_NtlmAuth(pVal: Integer); safecall;
    function Get_NumCacheLevels: Integer; safecall;
    procedure Set_NumCacheLevels(pVal: Integer); safecall;
    function Get_NumCacheRoots: Integer; safecall;
    function Get_PreferMHTScripts: Integer; safecall;
    procedure Set_PreferMHTScripts(pVal: Integer); safecall;
    function Get_Proxy: WideString; safecall;
    procedure Set_Proxy(const pVal: WideString); safecall;
    function Get_ProxyLogin: WideString; safecall;
    procedure Set_ProxyLogin(const pVal: WideString); safecall;
    function Get_ProxyPassword: WideString; safecall;
    procedure Set_ProxyPassword(const pVal: WideString); safecall;
    function Get_ReadTimeout: Integer; safecall;
    procedure Set_ReadTimeout(pVal: Integer); safecall;
    function Get_SocksHostname: WideString; safecall;
    procedure Set_SocksHostname(const pVal: WideString); safecall;
    function Get_SocksPassword: WideString; safecall;
    procedure Set_SocksPassword(const pVal: WideString); safecall;
    function Get_SocksPort: Integer; safecall;
    procedure Set_SocksPort(pVal: Integer); safecall;
    function Get_SocksUsername: WideString; safecall;
    procedure Set_SocksUsername(const pVal: WideString); safecall;
    function Get_SocksVersion: Integer; safecall;
    procedure Set_SocksVersion(pVal: Integer); safecall;
    function Get_UnpackUseRelPaths: Integer; safecall;
    procedure Set_UnpackUseRelPaths(pVal: Integer); safecall;
    function Get_UpdateCache: Integer; safecall;
    procedure Set_UpdateCache(pVal: Integer); safecall;
    function Get_UseCids: Integer; safecall;
    procedure Set_UseCids(pVal: Integer); safecall;
    function Get_UseFilename: Integer; safecall;
    procedure Set_UseFilename(pVal: Integer); safecall;
    function Get_UseIEProxy: Integer; safecall;
    procedure Set_UseIEProxy(pVal: Integer); safecall;
    function Get_UseInline: Integer; safecall;
    procedure Set_UseInline(pVal: Integer); safecall;
    function Get_WebSiteLogin: WideString; safecall;
    procedure Set_WebSiteLogin(const pVal: WideString); safecall;
    function Get_WebSiteLoginDomain: WideString; safecall;
    procedure Set_WebSiteLoginDomain(const pVal: WideString); safecall;
    function Get_WebSitePassword: WideString; safecall;
    procedure Set_WebSitePassword(const pVal: WideString); safecall;
    procedure AddCacheRoot(const dir: WideString); safecall;
    procedure AddCustomHeader(const name: WideString; const value: WideString); safecall;
    procedure AddExternalStyleSheet(const url: WideString); safecall;
    procedure ClearCustomHeaders; safecall;
    procedure ExcludeImagesMatching(const pattern: WideString); safecall;
    function GetAndSaveEML(const url_or_htmlFilepath: WideString; const emlPath: WideString): Integer; safecall;
    function GetAndSaveEMLAsync(const url_or_htmlFilepath: WideString; const emlPath: WideString): IChilkatTask; safecall;
    function GetAndSaveMHT(const url_or_htmlFilepath: WideString; const mhtPath: WideString): Integer; safecall;
    function GetAndSaveMHTAsync(const url_or_htmlFilepath: WideString; const mhtPath: WideString): IChilkatTask; safecall;
    function GetAndZipEML(const url_or_htmlFilepath: WideString; 
                          const zipEntryFilename: WideString; const zipFilename: WideString): Integer; safecall;
    function GetAndZipEMLAsync(const url_or_htmlFilepath: WideString; 
                               const zipEntryFilename: WideString; const zipFilename: WideString): IChilkatTask; safecall;
    function GetAndZipMHT(const url_or_htmlFilepath: WideString; 
                          const zipEntryFilename: WideString; const zipFilename: WideString): Integer; safecall;
    function GetAndZipMHTAsync(const url_or_htmlFilepath: WideString; 
                               const zipEntryFilename: WideString; const zipFilename: WideString): IChilkatTask; safecall;
    function GetCacheRoot(index: Integer): WideString; safecall;
    function GetEML(const url_or_htmlFilepath: WideString): WideString; safecall;
    function GetEMLAsync(const url_or_htmlFilepath: WideString): IChilkatTask; safecall;
    function GetMHT(const url_or_htmlFilepath: WideString): WideString; safecall;
    function GetMHTAsync(const url_or_htmlFilepath: WideString): IChilkatTask; safecall;
    function HtmlToEML(const htmlText: WideString): WideString; safecall;
    function HtmlToEMLAsync(const htmlText: WideString): IChilkatTask; safecall;
    function HtmlToEMLFile(const html: WideString; const emlFilename: WideString): Integer; safecall;
    function HtmlToEMLFileAsync(const html: WideString; const emlFilename: WideString): IChilkatTask; safecall;
    function HtmlToMHT(const htmlText: WideString): WideString; safecall;
    function HtmlToMHTAsync(const htmlText: WideString): IChilkatTask; safecall;
    function HtmlToMHTFile(const html: WideString; const mhtFilename: WideString): Integer; safecall;
    function HtmlToMHTFileAsync(const html: WideString; const mhtFilename: WideString): IChilkatTask; safecall;
    function IsUnlocked: Integer; safecall;
    procedure RemoveCustomHeader(const name: WideString); safecall;
    procedure RestoreDefaults; safecall;
    function UnlockComponent(const unlockCode: WideString): Integer; safecall;
    function UnpackMHT(const mhtFilename: WideString; const unpackDir: WideString; 
                       const htmlFilename: WideString; const partsSubdir: WideString): Integer; safecall;
    function UnpackMHTString(const mhtString: WideString; const unpackDir: WideString; 
                             const htmlFilename: WideString; const partsSubdir: WideString): Integer; safecall;
    function Get_RequireSslCertVerify: Integer; safecall;
    procedure Set_RequireSslCertVerify(pVal: Integer); safecall;
    function Get_PreferIpv6: Integer; safecall;
    procedure Set_PreferIpv6(pVal: Integer); safecall;
    function Get_UnpackDirect: Integer; safecall;
    procedure Set_UnpackDirect(pVal: Integer); safecall;
    function Get_AbortCurrent: Integer; safecall;
    procedure Set_AbortCurrent(pVal: Integer); safecall;
    function LoadTaskCaller(const task: IChilkatTask): Integer; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property LastMethodSuccess: Integer read Get_LastMethodSuccess write Set_LastMethodSuccess;
    property LastStringResult: WideString read Get_LastStringResult;
    property LastBinaryResult: OleVariant read Get_LastBinaryResult;
    property LastStringResultLen: Integer read Get_LastStringResultLen;
    property BaseUrl: WideString read Get_BaseUrl write Set_BaseUrl;
    property ConnectTimeout: Integer read Get_ConnectTimeout write Set_ConnectTimeout;
    property DebugHtmlAfter: WideString read Get_DebugHtmlAfter write Set_DebugHtmlAfter;
    property DebugHtmlBefore: WideString read Get_DebugHtmlBefore write Set_DebugHtmlBefore;
    property DebugTagCleaning: Integer read Get_DebugTagCleaning write Set_DebugTagCleaning;
    property EmbedImages: Integer read Get_EmbedImages write Set_EmbedImages;
    property EmbedLocalOnly: Integer read Get_EmbedLocalOnly write Set_EmbedLocalOnly;
    property FetchFromCache: Integer read Get_FetchFromCache write Set_FetchFromCache;
    property HeartbeatMs: Integer read Get_HeartbeatMs write Set_HeartbeatMs;
    property IgnoreMustRevalidate: Integer read Get_IgnoreMustRevalidate write Set_IgnoreMustRevalidate;
    property IgnoreNoCache: Integer read Get_IgnoreNoCache write Set_IgnoreNoCache;
    property NoScripts: Integer read Get_NoScripts write Set_NoScripts;
    property NtlmAuth: Integer read Get_NtlmAuth write Set_NtlmAuth;
    property NumCacheLevels: Integer read Get_NumCacheLevels write Set_NumCacheLevels;
    property NumCacheRoots: Integer read Get_NumCacheRoots;
    property PreferMHTScripts: Integer read Get_PreferMHTScripts write Set_PreferMHTScripts;
    property Proxy: WideString read Get_Proxy write Set_Proxy;
    property ProxyLogin: WideString read Get_ProxyLogin write Set_ProxyLogin;
    property ProxyPassword: WideString read Get_ProxyPassword write Set_ProxyPassword;
    property ReadTimeout: Integer read Get_ReadTimeout write Set_ReadTimeout;
    property SocksHostname: WideString read Get_SocksHostname write Set_SocksHostname;
    property SocksPassword: WideString read Get_SocksPassword write Set_SocksPassword;
    property SocksPort: Integer read Get_SocksPort write Set_SocksPort;
    property SocksUsername: WideString read Get_SocksUsername write Set_SocksUsername;
    property SocksVersion: Integer read Get_SocksVersion write Set_SocksVersion;
    property UnpackUseRelPaths: Integer read Get_UnpackUseRelPaths write Set_UnpackUseRelPaths;
    property UpdateCache: Integer read Get_UpdateCache write Set_UpdateCache;
    property UseCids: Integer read Get_UseCids write Set_UseCids;
    property UseFilename: Integer read Get_UseFilename write Set_UseFilename;
    property UseIEProxy: Integer read Get_UseIEProxy write Set_UseIEProxy;
    property UseInline: Integer read Get_UseInline write Set_UseInline;
    property WebSiteLogin: WideString read Get_WebSiteLogin write Set_WebSiteLogin;
    property WebSiteLoginDomain: WideString read Get_WebSiteLoginDomain write Set_WebSiteLoginDomain;
    property WebSitePassword: WideString read Get_WebSitePassword write Set_WebSitePassword;
    property RequireSslCertVerify: Integer read Get_RequireSslCertVerify write Set_RequireSslCertVerify;
    property PreferIpv6: Integer read Get_PreferIpv6 write Set_PreferIpv6;
    property UnpackDirect: Integer read Get_UnpackDirect write Set_UnpackDirect;
    property AbortCurrent: Integer read Get_AbortCurrent write Set_AbortCurrent;
  end;

// *********************************************************************//
// DispIntf:  IChilkatMhtDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F1089DE8-926E-4BB9-ADAF-9E312F1BBD78}
// *********************************************************************//
  IChilkatMhtDisp = dispinterface
    ['{F1089DE8-926E-4BB9-ADAF-9E312F1BBD78}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property LastMethodSuccess: Integer dispid 9;
    property LastStringResult: WideString readonly dispid 10;
    property LastBinaryResult: OleVariant readonly dispid 11;
    property LastStringResultLen: Integer readonly dispid 12;
    property BaseUrl: WideString dispid 100;
    property ConnectTimeout: Integer dispid 101;
    property DebugHtmlAfter: WideString dispid 102;
    property DebugHtmlBefore: WideString dispid 103;
    property DebugTagCleaning: Integer dispid 104;
    property EmbedImages: Integer dispid 105;
    property EmbedLocalOnly: Integer dispid 106;
    property FetchFromCache: Integer dispid 107;
    property HeartbeatMs: Integer dispid 108;
    property IgnoreMustRevalidate: Integer dispid 109;
    property IgnoreNoCache: Integer dispid 110;
    property NoScripts: Integer dispid 111;
    property NtlmAuth: Integer dispid 112;
    property NumCacheLevels: Integer dispid 113;
    property NumCacheRoots: Integer readonly dispid 114;
    property PreferMHTScripts: Integer dispid 115;
    property Proxy: WideString dispid 116;
    property ProxyLogin: WideString dispid 117;
    property ProxyPassword: WideString dispid 118;
    property ReadTimeout: Integer dispid 119;
    property SocksHostname: WideString dispid 120;
    property SocksPassword: WideString dispid 121;
    property SocksPort: Integer dispid 122;
    property SocksUsername: WideString dispid 123;
    property SocksVersion: Integer dispid 124;
    property UnpackUseRelPaths: Integer dispid 125;
    property UpdateCache: Integer dispid 126;
    property UseCids: Integer dispid 127;
    property UseFilename: Integer dispid 128;
    property UseIEProxy: Integer dispid 129;
    property UseInline: Integer dispid 130;
    property WebSiteLogin: WideString dispid 131;
    property WebSiteLoginDomain: WideString dispid 132;
    property WebSitePassword: WideString dispid 133;
    procedure AddCacheRoot(const dir: WideString); dispid 134;
    procedure AddCustomHeader(const name: WideString; const value: WideString); dispid 135;
    procedure AddExternalStyleSheet(const url: WideString); dispid 136;
    procedure ClearCustomHeaders; dispid 137;
    procedure ExcludeImagesMatching(const pattern: WideString); dispid 138;
    function GetAndSaveEML(const url_or_htmlFilepath: WideString; const emlPath: WideString): Integer; dispid 139;
    function GetAndSaveEMLAsync(const url_or_htmlFilepath: WideString; const emlPath: WideString): IChilkatTask; dispid 639;
    function GetAndSaveMHT(const url_or_htmlFilepath: WideString; const mhtPath: WideString): Integer; dispid 140;
    function GetAndSaveMHTAsync(const url_or_htmlFilepath: WideString; const mhtPath: WideString): IChilkatTask; dispid 640;
    function GetAndZipEML(const url_or_htmlFilepath: WideString; 
                          const zipEntryFilename: WideString; const zipFilename: WideString): Integer; dispid 141;
    function GetAndZipEMLAsync(const url_or_htmlFilepath: WideString; 
                               const zipEntryFilename: WideString; const zipFilename: WideString): IChilkatTask; dispid 641;
    function GetAndZipMHT(const url_or_htmlFilepath: WideString; 
                          const zipEntryFilename: WideString; const zipFilename: WideString): Integer; dispid 142;
    function GetAndZipMHTAsync(const url_or_htmlFilepath: WideString; 
                               const zipEntryFilename: WideString; const zipFilename: WideString): IChilkatTask; dispid 642;
    function GetCacheRoot(index: Integer): WideString; dispid 143;
    function GetEML(const url_or_htmlFilepath: WideString): WideString; dispid 144;
    function GetEMLAsync(const url_or_htmlFilepath: WideString): IChilkatTask; dispid 644;
    function GetMHT(const url_or_htmlFilepath: WideString): WideString; dispid 146;
    function GetMHTAsync(const url_or_htmlFilepath: WideString): IChilkatTask; dispid 646;
    function HtmlToEML(const htmlText: WideString): WideString; dispid 148;
    function HtmlToEMLAsync(const htmlText: WideString): IChilkatTask; dispid 648;
    function HtmlToEMLFile(const html: WideString; const emlFilename: WideString): Integer; dispid 149;
    function HtmlToEMLFileAsync(const html: WideString; const emlFilename: WideString): IChilkatTask; dispid 649;
    function HtmlToMHT(const htmlText: WideString): WideString; dispid 151;
    function HtmlToMHTAsync(const htmlText: WideString): IChilkatTask; dispid 651;
    function HtmlToMHTFile(const html: WideString; const mhtFilename: WideString): Integer; dispid 152;
    function HtmlToMHTFileAsync(const html: WideString; const mhtFilename: WideString): IChilkatTask; dispid 652;
    function IsUnlocked: Integer; dispid 153;
    procedure RemoveCustomHeader(const name: WideString); dispid 154;
    procedure RestoreDefaults; dispid 155;
    function UnlockComponent(const unlockCode: WideString): Integer; dispid 156;
    function UnpackMHT(const mhtFilename: WideString; const unpackDir: WideString; 
                       const htmlFilename: WideString; const partsSubdir: WideString): Integer; dispid 157;
    function UnpackMHTString(const mhtString: WideString; const unpackDir: WideString; 
                             const htmlFilename: WideString; const partsSubdir: WideString): Integer; dispid 158;
    property RequireSslCertVerify: Integer dispid 159;
    property PreferIpv6: Integer dispid 160;
    property UnpackDirect: Integer dispid 161;
    property AbortCurrent: Integer dispid 162;
    function LoadTaskCaller(const task: IChilkatTask): Integer; dispid 163;
  end;

// *********************************************************************//
// Interface: IChilkatMime
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {45484EC9-E196-492F-8C1F-6D311F89036E}
// *********************************************************************//
  IChilkatMime = interface(IDispatch)
    ['{45484EC9-E196-492F-8C1F-6D311F89036E}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_LastMethodSuccess: Integer; safecall;
    procedure Set_LastMethodSuccess(pVal: Integer); safecall;
    function Get_LastStringResult: WideString; safecall;
    function Get_LastBinaryResult: OleVariant; safecall;
    function Get_LastStringResultLen: Integer; safecall;
    function Get_boundary: WideString; safecall;
    procedure Set_boundary(const pVal: WideString); safecall;
    function Get_charset: WideString; safecall;
    procedure Set_charset(const pVal: WideString); safecall;
    function Get_contentType: WideString; safecall;
    procedure Set_contentType(const pVal: WideString); safecall;
    function Get_CurrentDateTime: WideString; safecall;
    function Get_disposition: WideString; safecall;
    procedure Set_disposition(const pVal: WideString); safecall;
    function Get_encoding: WideString; safecall;
    procedure Set_encoding(const pVal: WideString); safecall;
    function Get_filename: WideString; safecall;
    procedure Set_filename(const pVal: WideString); safecall;
    function Get_Micalg: WideString; safecall;
    procedure Set_Micalg(const pVal: WideString); safecall;
    function Get_name: WideString; safecall;
    procedure Set_name(const pVal: WideString); safecall;
    function Get_NumEncryptCerts: Integer; safecall;
    function Get_NumHeaderFields: Integer; safecall;
    function Get_NumParts: Integer; safecall;
    function Get_NumSignerCerts: Integer; safecall;
    function Get_Pkcs7CryptAlg: WideString; safecall;
    procedure Set_Pkcs7CryptAlg(const pVal: WideString); safecall;
    function Get_Pkcs7KeyLength: Integer; safecall;
    procedure Set_Pkcs7KeyLength(pVal: Integer); safecall;
    function Get_protocol: WideString; safecall;
    procedure Set_protocol(const pVal: WideString); safecall;
    function Get_SigningHashAlg: WideString; safecall;
    procedure Set_SigningHashAlg(const pVal: WideString); safecall;
    function Get_UnwrapExtras: Integer; safecall;
    procedure Set_UnwrapExtras(pVal: Integer); safecall;
    function Get_UseMmDescription: Integer; safecall;
    procedure Set_UseMmDescription(pVal: Integer); safecall;
    function Get_UseXPkcs7: Integer; safecall;
    procedure Set_UseXPkcs7(pVal: Integer); safecall;
    procedure AddContentLength; safecall;
    function AddDetachedSignature(const cert: IChilkatCert): Integer; safecall;
    function AddDetachedSignature2(const cert: IChilkatCert; transferHeaderFields: Integer): Integer; safecall;
    function AddDetachedSignaturePk(const cert: IChilkatCert; const privateKey: IPrivateKey): Integer; safecall;
    function AddDetachedSignaturePk2(const cert: IChilkatCert; const privateKey: IPrivateKey; 
                                     transferHeaderFields: Integer): Integer; safecall;
    function AddEncryptCert(const cert: IChilkatCert): Integer; safecall;
    function AddHeaderField(const name: WideString; const value: WideString): Integer; safecall;
    function AddPfxSourceData(pfxFileData: OleVariant; const pfxPassword: WideString): Integer; safecall;
    function AddPfxSourceFile(const pfxFilePath: WideString; const password: WideString): Integer; safecall;
    function AppendPart(const mime: IChilkatMime): Integer; safecall;
    function AppendPartFromFile(const filename: WideString): Integer; safecall;
    function AsnBodyToXml: WideString; safecall;
    procedure ClearEncryptCerts; safecall;
    function ContainsEncryptedParts: Integer; safecall;
    function ContainsSignedParts: Integer; safecall;
    procedure Convert8Bit; safecall;
    function ConvertToMultipartAlt: Integer; safecall;
    function ConvertToMultipartMixed: Integer; safecall;
    function ConvertToSigned(const cert: IChilkatCert): Integer; safecall;
    function ConvertToSignedPk(const cert: IChilkatCert; const privateKey: IPrivateKey): Integer; safecall;
    function Decrypt: Integer; safecall;
    function Decrypt2(const cert: IChilkatCert; const privateKey: IPrivateKey): Integer; safecall;
    function DecryptUsingPfxData(pfxData: OleVariant; const password: WideString): Integer; safecall;
    function DecryptUsingPfxFile(const pfxFilePath: WideString; const pfxPassword: WideString): Integer; safecall;
    function Encrypt(const cert: IChilkatCert): Integer; safecall;
    function EncryptN: Integer; safecall;
    function ExtractPartsToFiles(const dirPath: WideString): ICkStringArray; safecall;
    function FindIssuer(const cert: IChilkatCert): IChilkatCert; safecall;
    function GetBodyBinary: OleVariant; safecall;
    function GetBodyDecoded: WideString; safecall;
    function GetBodyEncoded: WideString; safecall;
    function GetEncryptCert(index: Integer): IChilkatCert; safecall;
    function GetEntireBody: WideString; safecall;
    function GetEntireHead: WideString; safecall;
    function GetHeaderField(const fieldName: WideString): WideString; safecall;
    function GetHeaderFieldAttribute(const name: WideString; const attrName: WideString): WideString; safecall;
    function GetHeaderFieldName(index: Integer): WideString; safecall;
    function GetHeaderFieldValue(index: Integer): WideString; safecall;
    function GetMime: WideString; safecall;
    function GetMimeBytes: OleVariant; safecall;
    function GetPart(index: Integer): IChilkatMime; safecall;
    function GetSignatureSigningTime(index: Integer): TDateTime; safecall;
    function GetSignatureSigningTimeStr(index: Integer): WideString; safecall;
    function GetSignerCert(index: Integer): IChilkatCert; safecall;
    function GetXml: WideString; safecall;
    function HasSignatureSigningTime(index: Integer): Integer; safecall;
    function IsApplicationData: Integer; safecall;
    function IsAttachment: Integer; safecall;
    function IsAudio: Integer; safecall;
    function IsEncrypted: Integer; safecall;
    function isHtml: Integer; safecall;
    function IsImage: Integer; safecall;
    function IsMultipart: Integer; safecall;
    function IsMultipartAlternative: Integer; safecall;
    function IsMultipartMixed: Integer; safecall;
    function IsMultipartRelated: Integer; safecall;
    function IsPlainText: Integer; safecall;
    function IsSigned: Integer; safecall;
    function IsText: Integer; safecall;
    function IsUnlocked: Integer; safecall;
    function IsVideo: Integer; safecall;
    function IsXml: Integer; safecall;
    function LoadMime(const mimeMsg: WideString): Integer; safecall;
    function LoadMimeBytes(binData: OleVariant): Integer; safecall;
    function LoadMimeFile(const filename: WideString): Integer; safecall;
    function LoadXml(const xml: WideString): Integer; safecall;
    function LoadXmlFile(const filename: WideString): Integer; safecall;
    function NewMessageRfc822(const mimeObject: IChilkatMime): Integer; safecall;
    function NewMultipartAlternative: Integer; safecall;
    function NewMultipartMixed: Integer; safecall;
    function NewMultipartRelated: Integer; safecall;
    procedure RemoveHeaderField(const fieldName: WideString; bAllOccurrences: Integer); safecall;
    function RemovePart(index: Integer): Integer; safecall;
    function SaveBody(const filename: WideString): Integer; safecall;
    function SaveMime(const filename: WideString): Integer; safecall;
    function SaveXml(const filename: WideString): Integer; safecall;
    procedure SetBody(const str: WideString); safecall;
    function SetBodyFromBinary(binData: OleVariant): Integer; safecall;
    function SetBodyFromEncoded(const encoding: WideString; const str: WideString): Integer; safecall;
    function SetBodyFromFile(const filename: WideString): Integer; safecall;
    function SetBodyFromHtml(const str: WideString): Integer; safecall;
    function SetBodyFromPlainText(const str: WideString): Integer; safecall;
    function SetBodyFromXml(const str: WideString): Integer; safecall;
    function SetCSP(const csp: IChilkatCsp): Integer; safecall;
    function SetHeaderField(const name: WideString; const value: WideString): Integer; safecall;
    function SetVerifyCert(const cert: IChilkatCert): Integer; safecall;
    function UnlockComponent(const unlockCode: WideString): Integer; safecall;
    function UnwrapSecurity: Integer; safecall;
    procedure UrlEncodeBody(const charset: WideString); safecall;
    function Verify: Integer; safecall;
    function GetSignerCertChain(index: Integer): IChilkatCertChain; safecall;
    function UseCertVault(const vault: IChilkatXmlCertVault): Integer; safecall;
    function DecryptUsingCert(const cert: IChilkatCert): Integer; safecall;
    function AddDecryptCert(const cert: IChilkatCert): Integer; safecall;
    function GetStructure(const fmt: WideString): WideString; safecall;
    function GetMimeSb(const sb: IChilkatStringBuilder): Integer; safecall;
    function GetMimeBd(const bindat: IChilkatBinData): Integer; safecall;
    function LoadMimeSb(const sb: IChilkatStringBuilder): Integer; safecall;
    function LoadMimeBd(const bindat: IChilkatBinData): Integer; safecall;
    function GetBodyBd(const bindat: IChilkatBinData): Integer; safecall;
    function Get_SigningAlg: WideString; safecall;
    procedure Set_SigningAlg(const pVal: WideString); safecall;
    function Get_OaepHash: WideString; safecall;
    procedure Set_OaepHash(const pVal: WideString); safecall;
    function Get_OaepPadding: Integer; safecall;
    procedure Set_OaepPadding(pVal: Integer); safecall;
    function LastJsonData: IChilkatJsonObject; safecall;
    function Get_OaepMgfHash: WideString; safecall;
    procedure Set_OaepMgfHash(const pVal: WideString); safecall;
    function Get_CmsOptions: WideString; safecall;
    procedure Set_CmsOptions(const pVal: WideString); safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property LastMethodSuccess: Integer read Get_LastMethodSuccess write Set_LastMethodSuccess;
    property LastStringResult: WideString read Get_LastStringResult;
    property LastBinaryResult: OleVariant read Get_LastBinaryResult;
    property LastStringResultLen: Integer read Get_LastStringResultLen;
    property boundary: WideString read Get_boundary write Set_boundary;
    property charset: WideString read Get_charset write Set_charset;
    property contentType: WideString read Get_contentType write Set_contentType;
    property CurrentDateTime: WideString read Get_CurrentDateTime;
    property disposition: WideString read Get_disposition write Set_disposition;
    property encoding: WideString read Get_encoding write Set_encoding;
    property filename: WideString read Get_filename write Set_filename;
    property Micalg: WideString read Get_Micalg write Set_Micalg;
    property name: WideString read Get_name write Set_name;
    property NumEncryptCerts: Integer read Get_NumEncryptCerts;
    property NumHeaderFields: Integer read Get_NumHeaderFields;
    property NumParts: Integer read Get_NumParts;
    property NumSignerCerts: Integer read Get_NumSignerCerts;
    property Pkcs7CryptAlg: WideString read Get_Pkcs7CryptAlg write Set_Pkcs7CryptAlg;
    property Pkcs7KeyLength: Integer read Get_Pkcs7KeyLength write Set_Pkcs7KeyLength;
    property protocol: WideString read Get_protocol write Set_protocol;
    property SigningHashAlg: WideString read Get_SigningHashAlg write Set_SigningHashAlg;
    property UnwrapExtras: Integer read Get_UnwrapExtras write Set_UnwrapExtras;
    property UseMmDescription: Integer read Get_UseMmDescription write Set_UseMmDescription;
    property UseXPkcs7: Integer read Get_UseXPkcs7 write Set_UseXPkcs7;
    property SigningAlg: WideString read Get_SigningAlg write Set_SigningAlg;
    property OaepHash: WideString read Get_OaepHash write Set_OaepHash;
    property OaepPadding: Integer read Get_OaepPadding write Set_OaepPadding;
    property OaepMgfHash: WideString read Get_OaepMgfHash write Set_OaepMgfHash;
    property CmsOptions: WideString read Get_CmsOptions write Set_CmsOptions;
  end;

// *********************************************************************//
// DispIntf:  IChilkatMimeDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {45484EC9-E196-492F-8C1F-6D311F89036E}
// *********************************************************************//
  IChilkatMimeDisp = dispinterface
    ['{45484EC9-E196-492F-8C1F-6D311F89036E}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property LastMethodSuccess: Integer dispid 9;
    property LastStringResult: WideString readonly dispid 10;
    property LastBinaryResult: OleVariant readonly dispid 11;
    property LastStringResultLen: Integer readonly dispid 12;
    property boundary: WideString dispid 100;
    property charset: WideString dispid 101;
    property contentType: WideString dispid 102;
    property CurrentDateTime: WideString readonly dispid 103;
    property disposition: WideString dispid 104;
    property encoding: WideString dispid 105;
    property filename: WideString dispid 106;
    property Micalg: WideString dispid 107;
    property name: WideString dispid 108;
    property NumEncryptCerts: Integer readonly dispid 109;
    property NumHeaderFields: Integer readonly dispid 110;
    property NumParts: Integer readonly dispid 111;
    property NumSignerCerts: Integer readonly dispid 112;
    property Pkcs7CryptAlg: WideString dispid 113;
    property Pkcs7KeyLength: Integer dispid 114;
    property protocol: WideString dispid 115;
    property SigningHashAlg: WideString dispid 116;
    property UnwrapExtras: Integer dispid 117;
    property UseMmDescription: Integer dispid 118;
    property UseXPkcs7: Integer dispid 119;
    procedure AddContentLength; dispid 120;
    function AddDetachedSignature(const cert: IChilkatCert): Integer; dispid 121;
    function AddDetachedSignature2(const cert: IChilkatCert; transferHeaderFields: Integer): Integer; dispid 122;
    function AddDetachedSignaturePk(const cert: IChilkatCert; const privateKey: IPrivateKey): Integer; dispid 123;
    function AddDetachedSignaturePk2(const cert: IChilkatCert; const privateKey: IPrivateKey; 
                                     transferHeaderFields: Integer): Integer; dispid 124;
    function AddEncryptCert(const cert: IChilkatCert): Integer; dispid 125;
    function AddHeaderField(const name: WideString; const value: WideString): Integer; dispid 126;
    function AddPfxSourceData(pfxFileData: OleVariant; const pfxPassword: WideString): Integer; dispid 127;
    function AddPfxSourceFile(const pfxFilePath: WideString; const password: WideString): Integer; dispid 128;
    function AppendPart(const mime: IChilkatMime): Integer; dispid 129;
    function AppendPartFromFile(const filename: WideString): Integer; dispid 130;
    function AsnBodyToXml: WideString; dispid 131;
    procedure ClearEncryptCerts; dispid 132;
    function ContainsEncryptedParts: Integer; dispid 133;
    function ContainsSignedParts: Integer; dispid 134;
    procedure Convert8Bit; dispid 135;
    function ConvertToMultipartAlt: Integer; dispid 136;
    function ConvertToMultipartMixed: Integer; dispid 137;
    function ConvertToSigned(const cert: IChilkatCert): Integer; dispid 138;
    function ConvertToSignedPk(const cert: IChilkatCert; const privateKey: IPrivateKey): Integer; dispid 139;
    function Decrypt: Integer; dispid 140;
    function Decrypt2(const cert: IChilkatCert; const privateKey: IPrivateKey): Integer; dispid 141;
    function DecryptUsingPfxData(pfxData: OleVariant; const password: WideString): Integer; dispid 142;
    function DecryptUsingPfxFile(const pfxFilePath: WideString; const pfxPassword: WideString): Integer; dispid 143;
    function Encrypt(const cert: IChilkatCert): Integer; dispid 144;
    function EncryptN: Integer; dispid 145;
    function ExtractPartsToFiles(const dirPath: WideString): ICkStringArray; dispid 146;
    function FindIssuer(const cert: IChilkatCert): IChilkatCert; dispid 147;
    function GetBodyBinary: OleVariant; dispid 148;
    function GetBodyDecoded: WideString; dispid 149;
    function GetBodyEncoded: WideString; dispid 150;
    function GetEncryptCert(index: Integer): IChilkatCert; dispid 151;
    function GetEntireBody: WideString; dispid 152;
    function GetEntireHead: WideString; dispid 153;
    function GetHeaderField(const fieldName: WideString): WideString; dispid 154;
    function GetHeaderFieldAttribute(const name: WideString; const attrName: WideString): WideString; dispid 155;
    function GetHeaderFieldName(index: Integer): WideString; dispid 156;
    function GetHeaderFieldValue(index: Integer): WideString; dispid 157;
    function GetMime: WideString; dispid 158;
    function GetMimeBytes: OleVariant; dispid 159;
    function GetPart(index: Integer): IChilkatMime; dispid 160;
    function GetSignatureSigningTime(index: Integer): TDateTime; dispid 161;
    function GetSignatureSigningTimeStr(index: Integer): WideString; dispid 162;
    function GetSignerCert(index: Integer): IChilkatCert; dispid 163;
    function GetXml: WideString; dispid 164;
    function HasSignatureSigningTime(index: Integer): Integer; dispid 165;
    function IsApplicationData: Integer; dispid 166;
    function IsAttachment: Integer; dispid 167;
    function IsAudio: Integer; dispid 168;
    function IsEncrypted: Integer; dispid 169;
    function isHtml: Integer; dispid 170;
    function IsImage: Integer; dispid 171;
    function IsMultipart: Integer; dispid 172;
    function IsMultipartAlternative: Integer; dispid 173;
    function IsMultipartMixed: Integer; dispid 174;
    function IsMultipartRelated: Integer; dispid 175;
    function IsPlainText: Integer; dispid 176;
    function IsSigned: Integer; dispid 177;
    function IsText: Integer; dispid 178;
    function IsUnlocked: Integer; dispid 179;
    function IsVideo: Integer; dispid 180;
    function IsXml: Integer; dispid 181;
    function LoadMime(const mimeMsg: WideString): Integer; dispid 182;
    function LoadMimeBytes(binData: OleVariant): Integer; dispid 183;
    function LoadMimeFile(const filename: WideString): Integer; dispid 184;
    function LoadXml(const xml: WideString): Integer; dispid 185;
    function LoadXmlFile(const filename: WideString): Integer; dispid 186;
    function NewMessageRfc822(const mimeObject: IChilkatMime): Integer; dispid 187;
    function NewMultipartAlternative: Integer; dispid 188;
    function NewMultipartMixed: Integer; dispid 189;
    function NewMultipartRelated: Integer; dispid 190;
    procedure RemoveHeaderField(const fieldName: WideString; bAllOccurrences: Integer); dispid 191;
    function RemovePart(index: Integer): Integer; dispid 192;
    function SaveBody(const filename: WideString): Integer; dispid 193;
    function SaveMime(const filename: WideString): Integer; dispid 194;
    function SaveXml(const filename: WideString): Integer; dispid 195;
    procedure SetBody(const str: WideString); dispid 196;
    function SetBodyFromBinary(binData: OleVariant): Integer; dispid 197;
    function SetBodyFromEncoded(const encoding: WideString; const str: WideString): Integer; dispid 198;
    function SetBodyFromFile(const filename: WideString): Integer; dispid 199;
    function SetBodyFromHtml(const str: WideString): Integer; dispid 200;
    function SetBodyFromPlainText(const str: WideString): Integer; dispid 201;
    function SetBodyFromXml(const str: WideString): Integer; dispid 202;
    function SetCSP(const csp: IChilkatCsp): Integer; dispid 203;
    function SetHeaderField(const name: WideString; const value: WideString): Integer; dispid 204;
    function SetVerifyCert(const cert: IChilkatCert): Integer; dispid 205;
    function UnlockComponent(const unlockCode: WideString): Integer; dispid 206;
    function UnwrapSecurity: Integer; dispid 207;
    procedure UrlEncodeBody(const charset: WideString); dispid 208;
    function Verify: Integer; dispid 209;
    function GetSignerCertChain(index: Integer): IChilkatCertChain; dispid 210;
    function UseCertVault(const vault: IChilkatXmlCertVault): Integer; dispid 211;
    function DecryptUsingCert(const cert: IChilkatCert): Integer; dispid 212;
    function AddDecryptCert(const cert: IChilkatCert): Integer; dispid 213;
    function GetStructure(const fmt: WideString): WideString; dispid 214;
    function GetMimeSb(const sb: IChilkatStringBuilder): Integer; dispid 215;
    function GetMimeBd(const bindat: IChilkatBinData): Integer; dispid 216;
    function LoadMimeSb(const sb: IChilkatStringBuilder): Integer; dispid 217;
    function LoadMimeBd(const bindat: IChilkatBinData): Integer; dispid 218;
    function GetBodyBd(const bindat: IChilkatBinData): Integer; dispid 219;
    property SigningAlg: WideString dispid 220;
    property OaepHash: WideString dispid 221;
    property OaepPadding: Integer dispid 222;
    function LastJsonData: IChilkatJsonObject; dispid 223;
    property OaepMgfHash: WideString dispid 224;
    property CmsOptions: WideString dispid 225;
  end;

// *********************************************************************//
// Interface: IChilkatNtlm
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {B7C0253A-251F-4BC7-98D1-31A045DCE65D}
// *********************************************************************//
  IChilkatNtlm = interface(IDispatch)
    ['{B7C0253A-251F-4BC7-98D1-31A045DCE65D}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_LastMethodSuccess: Integer; safecall;
    procedure Set_LastMethodSuccess(pVal: Integer); safecall;
    function Get_LastStringResult: WideString; safecall;
    function Get_LastBinaryResult: OleVariant; safecall;
    function Get_LastStringResultLen: Integer; safecall;
    function Get_ClientChallenge: WideString; safecall;
    procedure Set_ClientChallenge(const pVal: WideString); safecall;
    function Get_DnsComputerName: WideString; safecall;
    procedure Set_DnsComputerName(const pVal: WideString); safecall;
    function Get_DnsDomainName: WideString; safecall;
    procedure Set_DnsDomainName(const pVal: WideString); safecall;
    function Get_domain: WideString; safecall;
    procedure Set_domain(const pVal: WideString); safecall;
    function Get_EncodingMode: WideString; safecall;
    procedure Set_EncodingMode(const pVal: WideString); safecall;
    function Get_Flags: WideString; safecall;
    procedure Set_Flags(const pVal: WideString); safecall;
    function Get_NetBiosComputerName: WideString; safecall;
    procedure Set_NetBiosComputerName(const pVal: WideString); safecall;
    function Get_NetBiosDomainName: WideString; safecall;
    procedure Set_NetBiosDomainName(const pVal: WideString); safecall;
    function Get_NtlmVersion: Integer; safecall;
    procedure Set_NtlmVersion(pVal: Integer); safecall;
    function Get_OemCodePage: Integer; safecall;
    procedure Set_OemCodePage(pVal: Integer); safecall;
    function Get_password: WideString; safecall;
    procedure Set_password(const pVal: WideString); safecall;
    function Get_ServerChallenge: WideString; safecall;
    procedure Set_ServerChallenge(const pVal: WideString); safecall;
    function Get_TargetName: WideString; safecall;
    procedure Set_TargetName(const pVal: WideString); safecall;
    function Get_username: WideString; safecall;
    procedure Set_username(const pVal: WideString); safecall;
    function Get_Workstation: WideString; safecall;
    procedure Set_Workstation(const pVal: WideString); safecall;
    function CompareType3(const msg1: WideString; const msg2: WideString): Integer; safecall;
    function GenType1: WideString; safecall;
    function GenType2(const type1Msg: WideString): WideString; safecall;
    function GenType3(const type2Msg: WideString): WideString; safecall;
    function LoadType3(const type3Msg: WideString): Integer; safecall;
    function ParseType1(const type1Msg: WideString): WideString; safecall;
    function ParseType2(const type2Msg: WideString): WideString; safecall;
    function ParseType3(const type3Msg: WideString): WideString; safecall;
    function SetFlag(const flagLetter: WideString; onOrOff: Integer): Integer; safecall;
    function UnlockComponent(const unlockCode: WideString): Integer; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property LastMethodSuccess: Integer read Get_LastMethodSuccess write Set_LastMethodSuccess;
    property LastStringResult: WideString read Get_LastStringResult;
    property LastBinaryResult: OleVariant read Get_LastBinaryResult;
    property LastStringResultLen: Integer read Get_LastStringResultLen;
    property ClientChallenge: WideString read Get_ClientChallenge write Set_ClientChallenge;
    property DnsComputerName: WideString read Get_DnsComputerName write Set_DnsComputerName;
    property DnsDomainName: WideString read Get_DnsDomainName write Set_DnsDomainName;
    property domain: WideString read Get_domain write Set_domain;
    property EncodingMode: WideString read Get_EncodingMode write Set_EncodingMode;
    property Flags: WideString read Get_Flags write Set_Flags;
    property NetBiosComputerName: WideString read Get_NetBiosComputerName write Set_NetBiosComputerName;
    property NetBiosDomainName: WideString read Get_NetBiosDomainName write Set_NetBiosDomainName;
    property NtlmVersion: Integer read Get_NtlmVersion write Set_NtlmVersion;
    property OemCodePage: Integer read Get_OemCodePage write Set_OemCodePage;
    property password: WideString read Get_password write Set_password;
    property ServerChallenge: WideString read Get_ServerChallenge write Set_ServerChallenge;
    property TargetName: WideString read Get_TargetName write Set_TargetName;
    property username: WideString read Get_username write Set_username;
    property Workstation: WideString read Get_Workstation write Set_Workstation;
  end;

// *********************************************************************//
// DispIntf:  IChilkatNtlmDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {B7C0253A-251F-4BC7-98D1-31A045DCE65D}
// *********************************************************************//
  IChilkatNtlmDisp = dispinterface
    ['{B7C0253A-251F-4BC7-98D1-31A045DCE65D}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property LastMethodSuccess: Integer dispid 9;
    property LastStringResult: WideString readonly dispid 10;
    property LastBinaryResult: OleVariant readonly dispid 11;
    property LastStringResultLen: Integer readonly dispid 12;
    property ClientChallenge: WideString dispid 100;
    property DnsComputerName: WideString dispid 101;
    property DnsDomainName: WideString dispid 102;
    property domain: WideString dispid 103;
    property EncodingMode: WideString dispid 104;
    property Flags: WideString dispid 105;
    property NetBiosComputerName: WideString dispid 106;
    property NetBiosDomainName: WideString dispid 107;
    property NtlmVersion: Integer dispid 108;
    property OemCodePage: Integer dispid 109;
    property password: WideString dispid 110;
    property ServerChallenge: WideString dispid 111;
    property TargetName: WideString dispid 112;
    property username: WideString dispid 113;
    property Workstation: WideString dispid 114;
    function CompareType3(const msg1: WideString; const msg2: WideString): Integer; dispid 115;
    function GenType1: WideString; dispid 116;
    function GenType2(const type1Msg: WideString): WideString; dispid 117;
    function GenType3(const type2Msg: WideString): WideString; dispid 118;
    function LoadType3(const type3Msg: WideString): Integer; dispid 119;
    function ParseType1(const type1Msg: WideString): WideString; dispid 120;
    function ParseType2(const type2Msg: WideString): WideString; dispid 121;
    function ParseType3(const type3Msg: WideString): WideString; dispid 122;
    function SetFlag(const flagLetter: WideString; onOrOff: Integer): Integer; dispid 123;
    function UnlockComponent(const unlockCode: WideString): Integer; dispid 124;
  end;

// *********************************************************************//
// Interface: IChilkatOAuth1
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {47C1D4CA-692B-46D4-A127-5691075D0F6A}
// *********************************************************************//
  IChilkatOAuth1 = interface(IDispatch)
    ['{47C1D4CA-692B-46D4-A127-5691075D0F6A}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_LastMethodSuccess: Integer; safecall;
    procedure Set_LastMethodSuccess(pVal: Integer); safecall;
    function Get_LastStringResult: WideString; safecall;
    function Get_LastBinaryResult: OleVariant; safecall;
    function Get_LastStringResultLen: Integer; safecall;
    function Get_OauthVersion: WideString; safecall;
    procedure Set_OauthVersion(const pVal: WideString); safecall;
    function Get_OauthMethod: WideString; safecall;
    procedure Set_OauthMethod(const pVal: WideString); safecall;
    function Get_OauthUrl: WideString; safecall;
    procedure Set_OauthUrl(const pVal: WideString); safecall;
    function Get_ConsumerKey: WideString; safecall;
    procedure Set_ConsumerKey(const pVal: WideString); safecall;
    function Get_ConsumerSecret: WideString; safecall;
    procedure Set_ConsumerSecret(const pVal: WideString); safecall;
    function Get_token: WideString; safecall;
    procedure Set_token(const pVal: WideString); safecall;
    function Get_TokenSecret: WideString; safecall;
    procedure Set_TokenSecret(const pVal: WideString); safecall;
    function Get_Nonce: WideString; safecall;
    procedure Set_Nonce(const pVal: WideString); safecall;
    function Get_timestamp: WideString; safecall;
    procedure Set_timestamp(const pVal: WideString); safecall;
    function Get_SignatureMethod: WideString; safecall;
    procedure Set_SignatureMethod(const pVal: WideString); safecall;
    function Get_QueryString: WideString; safecall;
    function Get_BaseString: WideString; safecall;
    function Get_HmacKey: WideString; safecall;
    function Get_Signature: WideString; safecall;
    function Get_EncodedSignature: WideString; safecall;
    function Get_AuthorizationHeader: WideString; safecall;
    function Get_GeneratedUrl: WideString; safecall;
    function Generate: Integer; safecall;
    function AddParam(const name: WideString; const value: WideString): Integer; safecall;
    function RemoveParam(const name: WideString): Integer; safecall;
    function GenNonce(numBytes: Integer): Integer; safecall;
    function GenTimeStamp: Integer; safecall;
    function SetRsaKey(const privKey: IPrivateKey): Integer; safecall;
    function Get_Realm: WideString; safecall;
    procedure Set_Realm(const pVal: WideString); safecall;
    function Get_UncommonOptions: WideString; safecall;
    procedure Set_UncommonOptions(const pVal: WideString); safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property LastMethodSuccess: Integer read Get_LastMethodSuccess write Set_LastMethodSuccess;
    property LastStringResult: WideString read Get_LastStringResult;
    property LastBinaryResult: OleVariant read Get_LastBinaryResult;
    property LastStringResultLen: Integer read Get_LastStringResultLen;
    property OauthVersion: WideString read Get_OauthVersion write Set_OauthVersion;
    property OauthMethod: WideString read Get_OauthMethod write Set_OauthMethod;
    property OauthUrl: WideString read Get_OauthUrl write Set_OauthUrl;
    property ConsumerKey: WideString read Get_ConsumerKey write Set_ConsumerKey;
    property ConsumerSecret: WideString read Get_ConsumerSecret write Set_ConsumerSecret;
    property token: WideString read Get_token write Set_token;
    property TokenSecret: WideString read Get_TokenSecret write Set_TokenSecret;
    property Nonce: WideString read Get_Nonce write Set_Nonce;
    property timestamp: WideString read Get_timestamp write Set_timestamp;
    property SignatureMethod: WideString read Get_SignatureMethod write Set_SignatureMethod;
    property QueryString: WideString read Get_QueryString;
    property BaseString: WideString read Get_BaseString;
    property HmacKey: WideString read Get_HmacKey;
    property Signature: WideString read Get_Signature;
    property EncodedSignature: WideString read Get_EncodedSignature;
    property AuthorizationHeader: WideString read Get_AuthorizationHeader;
    property GeneratedUrl: WideString read Get_GeneratedUrl;
    property Realm: WideString read Get_Realm write Set_Realm;
    property UncommonOptions: WideString read Get_UncommonOptions write Set_UncommonOptions;
  end;

// *********************************************************************//
// DispIntf:  IChilkatOAuth1Disp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {47C1D4CA-692B-46D4-A127-5691075D0F6A}
// *********************************************************************//
  IChilkatOAuth1Disp = dispinterface
    ['{47C1D4CA-692B-46D4-A127-5691075D0F6A}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property LastMethodSuccess: Integer dispid 9;
    property LastStringResult: WideString readonly dispid 10;
    property LastBinaryResult: OleVariant readonly dispid 11;
    property LastStringResultLen: Integer readonly dispid 12;
    property OauthVersion: WideString dispid 100;
    property OauthMethod: WideString dispid 101;
    property OauthUrl: WideString dispid 102;
    property ConsumerKey: WideString dispid 103;
    property ConsumerSecret: WideString dispid 104;
    property token: WideString dispid 105;
    property TokenSecret: WideString dispid 106;
    property Nonce: WideString dispid 107;
    property timestamp: WideString dispid 108;
    property SignatureMethod: WideString dispid 109;
    property QueryString: WideString readonly dispid 110;
    property BaseString: WideString readonly dispid 111;
    property HmacKey: WideString readonly dispid 112;
    property Signature: WideString readonly dispid 113;
    property EncodedSignature: WideString readonly dispid 114;
    property AuthorizationHeader: WideString readonly dispid 115;
    property GeneratedUrl: WideString readonly dispid 116;
    function Generate: Integer; dispid 117;
    function AddParam(const name: WideString; const value: WideString): Integer; dispid 118;
    function RemoveParam(const name: WideString): Integer; dispid 119;
    function GenNonce(numBytes: Integer): Integer; dispid 120;
    function GenTimeStamp: Integer; dispid 121;
    function SetRsaKey(const privKey: IPrivateKey): Integer; dispid 122;
    property Realm: WideString dispid 123;
    property UncommonOptions: WideString dispid 124;
  end;

// *********************************************************************//
// Interface: IChilkatOAuth2
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {DD2EABF5-8988-4A8E-908C-AD7FFA38AE59}
// *********************************************************************//
  IChilkatOAuth2 = interface(IDispatch)
    ['{DD2EABF5-8988-4A8E-908C-AD7FFA38AE59}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_LastMethodSuccess: Integer; safecall;
    procedure Set_LastMethodSuccess(pVal: Integer); safecall;
    function Get_LastStringResult: WideString; safecall;
    function Get_LastBinaryResult: OleVariant; safecall;
    function Get_LastStringResultLen: Integer; safecall;
    function Get_AccessTokenResponse: WideString; safecall;
    function Get_AuthFlowState: Integer; safecall;
    function Get_AuthorizationEndpoint: WideString; safecall;
    procedure Set_AuthorizationEndpoint(const pVal: WideString); safecall;
    function Get_ClientId: WideString; safecall;
    procedure Set_ClientId(const pVal: WideString); safecall;
    function Get_ClientSecret: WideString; safecall;
    procedure Set_ClientSecret(const pVal: WideString); safecall;
    function Get_CodeChallenge: Integer; safecall;
    procedure Set_CodeChallenge(pVal: Integer); safecall;
    function Get_CodeChallengeMethod: WideString; safecall;
    procedure Set_CodeChallengeMethod(const pVal: WideString); safecall;
    function Get_FailureInfo: WideString; safecall;
    function Get_Scope: WideString; safecall;
    procedure Set_Scope(const pVal: WideString); safecall;
    function Get_TokenEndpoint: WideString; safecall;
    procedure Set_TokenEndpoint(const pVal: WideString); safecall;
    function Cancel: Integer; safecall;
    function Monitor: Integer; safecall;
    function MonitorAsync: IChilkatTask; safecall;
    function StartAuth: WideString; safecall;
    function Get_RedirectAllowHtml: WideString; safecall;
    procedure Set_RedirectAllowHtml(const pVal: WideString); safecall;
    function Get_RedirectDenyHtml: WideString; safecall;
    procedure Set_RedirectDenyHtml(const pVal: WideString); safecall;
    procedure SleepMs(millisec: Integer); safecall;
    function Get_AccessToken: WideString; safecall;
    procedure Set_AccessToken(const pVal: WideString); safecall;
    function Get_TokenType: WideString; safecall;
    procedure Set_TokenType(const pVal: WideString); safecall;
    function Get_RefreshToken: WideString; safecall;
    procedure Set_RefreshToken(const pVal: WideString); safecall;
    function RefreshAccessToken: Integer; safecall;
    function RefreshAccessTokenAsync: IChilkatTask; safecall;
    function UseConnection(const sock: IChilkatSocket): Integer; safecall;
    function Get_ListenPort: Integer; safecall;
    procedure Set_ListenPort(pVal: Integer); safecall;
    function Get_LocalHost: WideString; safecall;
    procedure Set_LocalHost(const pVal: WideString); safecall;
    function Get_Resource: WideString; safecall;
    procedure Set_Resource(const pVal: WideString); safecall;
    function Get_ListenPortRangeEnd: Integer; safecall;
    procedure Set_ListenPortRangeEnd(pVal: Integer); safecall;
    function GetRedirectRequestParam(const paramName: WideString): WideString; safecall;
    function Get_AppCallbackUrl: WideString; safecall;
    procedure Set_AppCallbackUrl(const pVal: WideString); safecall;
    function Get_UseBasicAuth: Integer; safecall;
    procedure Set_UseBasicAuth(pVal: Integer); safecall;
    function SetRefreshHeader(const name: WideString; const value: WideString): Integer; safecall;
    function SetRefreshHeaderAsync(const name: WideString; const value: WideString): IChilkatTask; safecall;
    function Get_IncludeNonce: Integer; safecall;
    procedure Set_IncludeNonce(pVal: Integer); safecall;
    function Get_ResponseMode: WideString; safecall;
    procedure Set_ResponseMode(const pVal: WideString); safecall;
    function Get_ResponseType: WideString; safecall;
    procedure Set_ResponseType(const pVal: WideString); safecall;
    function Get_NonceLength: Integer; safecall;
    procedure Set_NonceLength(pVal: Integer); safecall;
    function LoadTaskCaller(const task: IChilkatTask): Integer; safecall;
    function Get_UncommonOptions: WideString; safecall;
    procedure Set_UncommonOptions(const pVal: WideString); safecall;
    function AddTokenQueryParam(const name: WideString; const value: WideString): Integer; safecall;
    function AddAuthQueryParam(const name: WideString; const value: WideString): Integer; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property LastMethodSuccess: Integer read Get_LastMethodSuccess write Set_LastMethodSuccess;
    property LastStringResult: WideString read Get_LastStringResult;
    property LastBinaryResult: OleVariant read Get_LastBinaryResult;
    property LastStringResultLen: Integer read Get_LastStringResultLen;
    property AccessTokenResponse: WideString read Get_AccessTokenResponse;
    property AuthFlowState: Integer read Get_AuthFlowState;
    property AuthorizationEndpoint: WideString read Get_AuthorizationEndpoint write Set_AuthorizationEndpoint;
    property ClientId: WideString read Get_ClientId write Set_ClientId;
    property ClientSecret: WideString read Get_ClientSecret write Set_ClientSecret;
    property CodeChallenge: Integer read Get_CodeChallenge write Set_CodeChallenge;
    property CodeChallengeMethod: WideString read Get_CodeChallengeMethod write Set_CodeChallengeMethod;
    property FailureInfo: WideString read Get_FailureInfo;
    property Scope: WideString read Get_Scope write Set_Scope;
    property TokenEndpoint: WideString read Get_TokenEndpoint write Set_TokenEndpoint;
    property RedirectAllowHtml: WideString read Get_RedirectAllowHtml write Set_RedirectAllowHtml;
    property RedirectDenyHtml: WideString read Get_RedirectDenyHtml write Set_RedirectDenyHtml;
    property AccessToken: WideString read Get_AccessToken write Set_AccessToken;
    property TokenType: WideString read Get_TokenType write Set_TokenType;
    property RefreshToken: WideString read Get_RefreshToken write Set_RefreshToken;
    property ListenPort: Integer read Get_ListenPort write Set_ListenPort;
    property LocalHost: WideString read Get_LocalHost write Set_LocalHost;
    property Resource: WideString read Get_Resource write Set_Resource;
    property ListenPortRangeEnd: Integer read Get_ListenPortRangeEnd write Set_ListenPortRangeEnd;
    property AppCallbackUrl: WideString read Get_AppCallbackUrl write Set_AppCallbackUrl;
    property UseBasicAuth: Integer read Get_UseBasicAuth write Set_UseBasicAuth;
    property IncludeNonce: Integer read Get_IncludeNonce write Set_IncludeNonce;
    property ResponseMode: WideString read Get_ResponseMode write Set_ResponseMode;
    property ResponseType: WideString read Get_ResponseType write Set_ResponseType;
    property NonceLength: Integer read Get_NonceLength write Set_NonceLength;
    property UncommonOptions: WideString read Get_UncommonOptions write Set_UncommonOptions;
  end;

// *********************************************************************//
// DispIntf:  IChilkatOAuth2Disp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {DD2EABF5-8988-4A8E-908C-AD7FFA38AE59}
// *********************************************************************//
  IChilkatOAuth2Disp = dispinterface
    ['{DD2EABF5-8988-4A8E-908C-AD7FFA38AE59}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property LastMethodSuccess: Integer dispid 9;
    property LastStringResult: WideString readonly dispid 10;
    property LastBinaryResult: OleVariant readonly dispid 11;
    property LastStringResultLen: Integer readonly dispid 12;
    property AccessTokenResponse: WideString readonly dispid 100;
    property AuthFlowState: Integer readonly dispid 101;
    property AuthorizationEndpoint: WideString dispid 102;
    property ClientId: WideString dispid 103;
    property ClientSecret: WideString dispid 104;
    property CodeChallenge: Integer dispid 105;
    property CodeChallengeMethod: WideString dispid 106;
    property FailureInfo: WideString readonly dispid 107;
    property Scope: WideString dispid 108;
    property TokenEndpoint: WideString dispid 109;
    function Cancel: Integer; dispid 110;
    function Monitor: Integer; dispid 111;
    function MonitorAsync: IChilkatTask; dispid 611;
    function StartAuth: WideString; dispid 112;
    property RedirectAllowHtml: WideString dispid 113;
    property RedirectDenyHtml: WideString dispid 114;
    procedure SleepMs(millisec: Integer); dispid 115;
    property AccessToken: WideString dispid 116;
    property TokenType: WideString dispid 117;
    property RefreshToken: WideString dispid 118;
    function RefreshAccessToken: Integer; dispid 119;
    function RefreshAccessTokenAsync: IChilkatTask; dispid 619;
    function UseConnection(const sock: IChilkatSocket): Integer; dispid 120;
    property ListenPort: Integer dispid 121;
    property LocalHost: WideString dispid 122;
    property Resource: WideString dispid 124;
    property ListenPortRangeEnd: Integer dispid 125;
    function GetRedirectRequestParam(const paramName: WideString): WideString; dispid 126;
    property AppCallbackUrl: WideString dispid 127;
    property UseBasicAuth: Integer dispid 128;
    function SetRefreshHeader(const name: WideString; const value: WideString): Integer; dispid 129;
    function SetRefreshHeaderAsync(const name: WideString; const value: WideString): IChilkatTask; dispid 629;
    property IncludeNonce: Integer dispid 130;
    property ResponseMode: WideString dispid 131;
    property ResponseType: WideString dispid 132;
    property NonceLength: Integer dispid 133;
    function LoadTaskCaller(const task: IChilkatTask): Integer; dispid 134;
    property UncommonOptions: WideString dispid 135;
    function AddTokenQueryParam(const name: WideString; const value: WideString): Integer; dispid 136;
    function AddAuthQueryParam(const name: WideString; const value: WideString): Integer; dispid 137;
  end;

// *********************************************************************//
// Interface: IChilkatPdf
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {451414D2-10F9-47D9-8078-0D10C55B4D26}
// *********************************************************************//
  IChilkatPdf = interface(IDispatch)
    ['{451414D2-10F9-47D9-8078-0D10C55B4D26}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_LastMethodSuccess: Integer; safecall;
    procedure Set_LastMethodSuccess(pVal: Integer); safecall;
    function Get_LastStringResult: WideString; safecall;
    function Get_LastBinaryResult: OleVariant; safecall;
    function Get_LastStringResultLen: Integer; safecall;
    function Get_NumSignatures: Integer; safecall;
    function LoadFile(const filePath: WideString): Integer; safecall;
    function LoadBd(const pdfData: IChilkatBinData): Integer; safecall;
    function Get_NumPages: Integer; safecall;
    function Get_UncommonOptions: WideString; safecall;
    procedure Set_UncommonOptions(const pVal: WideString); safecall;
    function VerifySignature(index: Integer; const sigInfo: IChilkatJsonObject): Integer; safecall;
    function SignPdf(const jsonOptions: IChilkatJsonObject; const outFilePath: WideString): Integer; safecall;
    function SignPdfAsync(const jsonOptions: IChilkatJsonObject; const outFilePath: WideString): IChilkatTask; safecall;
    function GetDss(const json: IChilkatJsonObject): Integer; safecall;
    procedure SetHttpObj(const http: IChilkatHttp); safecall;
    function SetSigningCert(const cert: IChilkatCert): Integer; safecall;
    function SetSigningCert2(const cert: IChilkatCert; const privateKey: IPrivateKey): Integer; safecall;
    function AddSigningCert(const cert: IChilkatCert): Integer; safecall;
    function SetSignatureJpeg(const jpgData: IChilkatBinData): Integer; safecall;
    function GetSignerCert(index: Integer; const cert: IChilkatCert): Integer; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property LastMethodSuccess: Integer read Get_LastMethodSuccess write Set_LastMethodSuccess;
    property LastStringResult: WideString read Get_LastStringResult;
    property LastBinaryResult: OleVariant read Get_LastBinaryResult;
    property LastStringResultLen: Integer read Get_LastStringResultLen;
    property NumSignatures: Integer read Get_NumSignatures;
    property NumPages: Integer read Get_NumPages;
    property UncommonOptions: WideString read Get_UncommonOptions write Set_UncommonOptions;
  end;

// *********************************************************************//
// DispIntf:  IChilkatPdfDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {451414D2-10F9-47D9-8078-0D10C55B4D26}
// *********************************************************************//
  IChilkatPdfDisp = dispinterface
    ['{451414D2-10F9-47D9-8078-0D10C55B4D26}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property LastMethodSuccess: Integer dispid 9;
    property LastStringResult: WideString readonly dispid 10;
    property LastBinaryResult: OleVariant readonly dispid 11;
    property LastStringResultLen: Integer readonly dispid 12;
    property NumSignatures: Integer readonly dispid 100;
    function LoadFile(const filePath: WideString): Integer; dispid 101;
    function LoadBd(const pdfData: IChilkatBinData): Integer; dispid 102;
    property NumPages: Integer readonly dispid 111;
    property UncommonOptions: WideString dispid 120;
    function VerifySignature(index: Integer; const sigInfo: IChilkatJsonObject): Integer; dispid 123;
    function SignPdf(const jsonOptions: IChilkatJsonObject; const outFilePath: WideString): Integer; dispid 126;
    function SignPdfAsync(const jsonOptions: IChilkatJsonObject; const outFilePath: WideString): IChilkatTask; dispid 626;
    function GetDss(const json: IChilkatJsonObject): Integer; dispid 128;
    procedure SetHttpObj(const http: IChilkatHttp); dispid 129;
    function SetSigningCert(const cert: IChilkatCert): Integer; dispid 130;
    function SetSigningCert2(const cert: IChilkatCert; const privateKey: IPrivateKey): Integer; dispid 131;
    function AddSigningCert(const cert: IChilkatCert): Integer; dispid 132;
    function SetSignatureJpeg(const jpgData: IChilkatBinData): Integer; dispid 135;
    function GetSignerCert(index: Integer; const cert: IChilkatCert): Integer; dispid 136;
  end;

// *********************************************************************//
// Interface: IChilkatPkcs11
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9AA01786-63E0-45E4-8676-24B49937318E}
// *********************************************************************//
  IChilkatPkcs11 = interface(IDispatch)
    ['{9AA01786-63E0-45E4-8676-24B49937318E}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_LastMethodSuccess: Integer; safecall;
    procedure Set_LastMethodSuccess(pVal: Integer); safecall;
    function Get_LastStringResult: WideString; safecall;
    function Get_LastBinaryResult: OleVariant; safecall;
    function Get_LastStringResultLen: Integer; safecall;
    function Test123: Integer; safecall;
    function Test123Async: IChilkatTask; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property LastMethodSuccess: Integer read Get_LastMethodSuccess write Set_LastMethodSuccess;
    property LastStringResult: WideString read Get_LastStringResult;
    property LastBinaryResult: OleVariant read Get_LastBinaryResult;
    property LastStringResultLen: Integer read Get_LastStringResultLen;
  end;

// *********************************************************************//
// DispIntf:  IChilkatPkcs11Disp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9AA01786-63E0-45E4-8676-24B49937318E}
// *********************************************************************//
  IChilkatPkcs11Disp = dispinterface
    ['{9AA01786-63E0-45E4-8676-24B49937318E}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property LastMethodSuccess: Integer dispid 9;
    property LastStringResult: WideString readonly dispid 10;
    property LastBinaryResult: OleVariant readonly dispid 11;
    property LastStringResultLen: Integer readonly dispid 12;
    function Test123: Integer; dispid 100;
    function Test123Async: IChilkatTask; dispid 600;
  end;

// *********************************************************************//
// Interface: IChilkatRest
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {D985C806-44A2-4BBD-9FC4-EDD1CD82F03E}
// *********************************************************************//
  IChilkatRest = interface(IDispatch)
    ['{D985C806-44A2-4BBD-9FC4-EDD1CD82F03E}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_LastMethodSuccess: Integer; safecall;
    procedure Set_LastMethodSuccess(pVal: Integer); safecall;
    function Get_LastStringResult: WideString; safecall;
    function Get_LastBinaryResult: OleVariant; safecall;
    function Get_LastStringResultLen: Integer; safecall;
    function Get_Host: WideString; safecall;
    procedure Set_Host(const pVal: WideString); safecall;
    function Get_Authorization: WideString; safecall;
    procedure Set_Authorization(const pVal: WideString); safecall;
    function SendReqNoBody(const httpVerb: WideString; const uriPath: WideString): Integer; safecall;
    function SendReqNoBodyAsync(const httpVerb: WideString; const uriPath: WideString): IChilkatTask; safecall;
    function UseConnection(const connection: IChilkatSocket; autoReconnect: Integer): Integer; safecall;
    function ReadResponseHeader: Integer; safecall;
    function ReadResponseHeaderAsync: IChilkatTask; safecall;
    function SetAuthAws(const authProvider: IChilkatAuthAws): Integer; safecall;
    function Get_IdleTimeoutMs: Integer; safecall;
    procedure Set_IdleTimeoutMs(pVal: Integer); safecall;
    function ReadRespBodyString: WideString; safecall;
    function ReadRespBodyStringAsync: IChilkatTask; safecall;
    function ReadRespBodyBinary: OleVariant; safecall;
    function ReadRespBodyBinaryAsync: IChilkatTask; safecall;
    function ReadRespBodyStream(const stream: IChilkatStream; autoSetStreamCharset: Integer): Integer; safecall;
    function ReadRespBodyStreamAsync(const stream: IChilkatStream; autoSetStreamCharset: Integer): IChilkatTask; safecall;
    function SendReqBinaryBody(const httpVerb: WideString; const uriPath: WideString; 
                               Body: OleVariant): Integer; safecall;
    function SendReqBinaryBodyAsync(const httpVerb: WideString; const uriPath: WideString; 
                                    Body: OleVariant): IChilkatTask; safecall;
    function SendReqStringBody(const httpVerb: WideString; const uriPath: WideString; 
                               const bodyText: WideString): Integer; safecall;
    function SendReqStringBodyAsync(const httpVerb: WideString; const uriPath: WideString; 
                                    const bodyText: WideString): IChilkatTask; safecall;
    function SendReqStreamBody(const httpVerb: WideString; const uriPath: WideString; 
                               const stream: IChilkatStream): Integer; safecall;
    function SendReqStreamBodyAsync(const httpVerb: WideString; const uriPath: WideString; 
                                    const stream: IChilkatStream): IChilkatTask; safecall;
    function ClearAllHeaders: Integer; safecall;
    function AddHeader(const name: WideString; const value: WideString): Integer; safecall;
    function RemoveHeader(const name: WideString): Integer; safecall;
    function ClearAllQueryParams: Integer; safecall;
    function AddQueryParam(const name: WideString; const value: WideString): Integer; safecall;
    function RemoveQueryParam(const name: WideString): Integer; safecall;
    function SendReqFormUrlEncoded(const httpVerb: WideString; const uriPath: WideString): Integer; safecall;
    function SendReqFormUrlEncodedAsync(const httpVerb: WideString; const uriPath: WideString): IChilkatTask; safecall;
    function SetAuthGoogle(const authProvider: IChilkatAuthGoogle): Integer; safecall;
    function SetAuthAzureStorage(const authProvider: IChilkatAuthAzureStorage): Integer; safecall;
    function SetAuthAzureAD(const authProvider: IChilkatAuthAzureAD): Integer; safecall;
    function Get_ResponseStatusText: WideString; safecall;
    function Get_ResponseStatusCode: Integer; safecall;
    function Get_NumResponseHeaders: Integer; safecall;
    function Connect(const hostname: WideString; port: Integer; tls: Integer; autoReconnect: Integer): Integer; safecall;
    function ConnectAsync(const hostname: WideString; port: Integer; tls: Integer; 
                          autoReconnect: Integer): IChilkatTask; safecall;
    function ResponseHdrName(index: Integer): WideString; safecall;
    function ResponseHdrValue(index: Integer): WideString; safecall;
    function FullRequestString(const httpVerb: WideString; const uriPath: WideString; 
                               const bodyText: WideString): WideString; safecall;
    function FullRequestStringAsync(const httpVerb: WideString; const uriPath: WideString; 
                                    const bodyText: WideString): IChilkatTask; safecall;
    function Get_PartSelector: WideString; safecall;
    procedure Set_PartSelector(const pVal: WideString); safecall;
    function SetMultipartBodyBinary(bodyData: OleVariant): Integer; safecall;
    function SetMultipartBodyString(const bodyText: WideString): Integer; safecall;
    function SetMultipartBodyStream(const stream: IChilkatStream): Integer; safecall;
    function FullRequestBinary(const httpVerb: WideString; const uriPath: WideString; 
                               bodyBytes: OleVariant): WideString; safecall;
    function FullRequestBinaryAsync(const httpVerb: WideString; const uriPath: WideString; 
                                    bodyBytes: OleVariant): IChilkatTask; safecall;
    function SendReqMultipart(const httpVerb: WideString; const uriPath: WideString): Integer; safecall;
    function SendReqMultipartAsync(const httpVerb: WideString; const uriPath: WideString): IChilkatTask; safecall;
    function FullRequestMultipart(const httpVerb: WideString; const uriPath: WideString): WideString; safecall;
    function FullRequestMultipartAsync(const httpVerb: WideString; const uriPath: WideString): IChilkatTask; safecall;
    function FullRequestNoBody(const httpVerb: WideString; const uriPath: WideString): WideString; safecall;
    function FullRequestNoBodyAsync(const httpVerb: WideString; const uriPath: WideString): IChilkatTask; safecall;
    function FullRequestStream(const httpVerb: WideString; const uriPath: WideString; 
                               const stream: IChilkatStream): WideString; safecall;
    function FullRequestStreamAsync(const httpVerb: WideString; const uriPath: WideString; 
                                    const stream: IChilkatStream): IChilkatTask; safecall;
    function Get_ResponseHeader: WideString; safecall;
    function Get_LastRequestHeader: WideString; safecall;
    function Get_LastRequestStartLine: WideString; safecall;
    function ResponseHdrByName(const name: WideString): WideString; safecall;
    function SetAuthOAuth1(const authProvider: IChilkatOAuth1; useQueryParams: Integer): Integer; safecall;
    function SetAuthBasic(const username: WideString; const password: WideString): Integer; safecall;
    function FullRequestFormUrlEncoded(const httpVerb: WideString; const uriPath: WideString): WideString; safecall;
    function FullRequestFormUrlEncodedAsync(const httpVerb: WideString; const uriPath: WideString): IChilkatTask; safecall;
    function Get_HeartbeatMs: Integer; safecall;
    procedure Set_HeartbeatMs(pVal: Integer); safecall;
    function RedirectUrl: IChilkatUrl; safecall;
    function AddQueryParams(const QueryString: WideString): Integer; safecall;
    function Disconnect(maxWaitMs: Integer): Integer; safecall;
    function DisconnectAsync(maxWaitMs: Integer): IChilkatTask; safecall;
    function Get_StreamNonChunked: Integer; safecall;
    procedure Set_StreamNonChunked(pVal: Integer); safecall;
    function SetResponseBodyStream(expectedStatus: Integer; autoSetStreamCharset: Integer; 
                                   const responseStream: IChilkatStream): Integer; safecall;
    procedure ClearResponseBodyStream; safecall;
    function Get_ConnectFailReason: Integer; safecall;
    function Get_PercentDoneOnSend: Integer; safecall;
    procedure Set_PercentDoneOnSend(pVal: Integer); safecall;
    function Get_AllowHeaderQB: Integer; safecall;
    procedure Set_AllowHeaderQB(pVal: Integer); safecall;
    function SetAuthOAuth2(const authProvider: IChilkatOAuth2): Integer; safecall;
    function FullRequestSb(const httpVerb: WideString; const uriPath: WideString; 
                           const requestBody: IChilkatStringBuilder; 
                           const responseBody: IChilkatStringBuilder): Integer; safecall;
    function FullRequestSbAsync(const httpVerb: WideString; const uriPath: WideString; 
                                const requestBody: IChilkatStringBuilder; 
                                const responseBody: IChilkatStringBuilder): IChilkatTask; safecall;
    function AddQueryParamSb(const name: WideString; const value: IChilkatStringBuilder): Integer; safecall;
    function SetMultipartBodySb(const bodySb: IChilkatStringBuilder): Integer; safecall;
    function SetMultipartBodyBd(const bodyData: IChilkatBinData): Integer; safecall;
    function SendReqSb(const httpVerb: WideString; const uriPath: WideString; 
                       const bodySb: IChilkatStringBuilder): Integer; safecall;
    function SendReqSbAsync(const httpVerb: WideString; const uriPath: WideString; 
                            const bodySb: IChilkatStringBuilder): IChilkatTask; safecall;
    function SendReqBd(const httpVerb: WideString; const uriPath: WideString; 
                       const Body: IChilkatBinData): Integer; safecall;
    function SendReqBdAsync(const httpVerb: WideString; const uriPath: WideString; 
                            const Body: IChilkatBinData): IChilkatTask; safecall;
    function ReadRespSb(const responseBody: IChilkatStringBuilder): Integer; safecall;
    function ReadRespSbAsync(const responseBody: IChilkatStringBuilder): IChilkatTask; safecall;
    function ReadRespBd(const responseBody: IChilkatBinData): Integer; safecall;
    function ReadRespBdAsync(const responseBody: IChilkatBinData): IChilkatTask; safecall;
    function Get_AllowHeaderFolding: Integer; safecall;
    procedure Set_AllowHeaderFolding(pVal: Integer); safecall;
    function ClearAllParts: Integer; safecall;
    function FullRequestNoBodySb(const httpVerb: WideString; const uriPath: WideString; 
                                 const sb: IChilkatStringBuilder): Integer; safecall;
    function FullRequestNoBodySbAsync(const httpVerb: WideString; const uriPath: WideString; 
                                      const sb: IChilkatStringBuilder): IChilkatTask; safecall;
    function FullRequestBd(const httpVerb: WideString; const uriPath: WideString; 
                           const binData: IChilkatBinData; const responseBody: IChilkatStringBuilder): Integer; safecall;
    function FullRequestBdAsync(const httpVerb: WideString; const uriPath: WideString; 
                                const binData: IChilkatBinData; 
                                const responseBody: IChilkatStringBuilder): IChilkatTask; safecall;
    function FullRequestNoBodyBd(const httpVerb: WideString; const uriPath: WideString; 
                                 const binData: IChilkatBinData): Integer; safecall;
    function FullRequestNoBodyBdAsync(const httpVerb: WideString; const uriPath: WideString; 
                                      const binData: IChilkatBinData): IChilkatTask; safecall;
    function SetAuthAzureSas(const authProvider: IChilkatAuthAzureSAS): Integer; safecall;
    function AddMwsSignature(const httpVerb: WideString; const uriPath: WideString; 
                             const domain: WideString; const mwsSecretKey: WideString): Integer; safecall;
    function ClearAuth: Integer; safecall;
    function AddPathParam(const name: WideString; const value: WideString): Integer; safecall;
    function ClearAllPathParams: Integer; safecall;
    function Get_ConnectTimeoutMs: Integer; safecall;
    procedure Set_ConnectTimeoutMs(pVal: Integer); safecall;
    function SetAuthBasicSecure(const username: IChilkatSecureString; 
                                const password: IChilkatSecureString): Integer; safecall;
    function Get_DebugMode: Integer; safecall;
    procedure Set_DebugMode(pVal: Integer); safecall;
    function GetLastDebugRequest(const bd: IChilkatBinData): Integer; safecall;
    function LastJsonData: IChilkatJsonObject; safecall;
    function Get_UncommonOptions: WideString; safecall;
    procedure Set_UncommonOptions(const pVal: WideString); safecall;
    function LoadTaskCaller(const task: IChilkatTask): Integer; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property LastMethodSuccess: Integer read Get_LastMethodSuccess write Set_LastMethodSuccess;
    property LastStringResult: WideString read Get_LastStringResult;
    property LastBinaryResult: OleVariant read Get_LastBinaryResult;
    property LastStringResultLen: Integer read Get_LastStringResultLen;
    property Host: WideString read Get_Host write Set_Host;
    property Authorization: WideString read Get_Authorization write Set_Authorization;
    property IdleTimeoutMs: Integer read Get_IdleTimeoutMs write Set_IdleTimeoutMs;
    property ResponseStatusText: WideString read Get_ResponseStatusText;
    property ResponseStatusCode: Integer read Get_ResponseStatusCode;
    property NumResponseHeaders: Integer read Get_NumResponseHeaders;
    property PartSelector: WideString read Get_PartSelector write Set_PartSelector;
    property ResponseHeader: WideString read Get_ResponseHeader;
    property LastRequestHeader: WideString read Get_LastRequestHeader;
    property LastRequestStartLine: WideString read Get_LastRequestStartLine;
    property HeartbeatMs: Integer read Get_HeartbeatMs write Set_HeartbeatMs;
    property StreamNonChunked: Integer read Get_StreamNonChunked write Set_StreamNonChunked;
    property ConnectFailReason: Integer read Get_ConnectFailReason;
    property PercentDoneOnSend: Integer read Get_PercentDoneOnSend write Set_PercentDoneOnSend;
    property AllowHeaderQB: Integer read Get_AllowHeaderQB write Set_AllowHeaderQB;
    property AllowHeaderFolding: Integer read Get_AllowHeaderFolding write Set_AllowHeaderFolding;
    property ConnectTimeoutMs: Integer read Get_ConnectTimeoutMs write Set_ConnectTimeoutMs;
    property DebugMode: Integer read Get_DebugMode write Set_DebugMode;
    property UncommonOptions: WideString read Get_UncommonOptions write Set_UncommonOptions;
  end;

// *********************************************************************//
// DispIntf:  IChilkatRestDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {D985C806-44A2-4BBD-9FC4-EDD1CD82F03E}
// *********************************************************************//
  IChilkatRestDisp = dispinterface
    ['{D985C806-44A2-4BBD-9FC4-EDD1CD82F03E}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property LastMethodSuccess: Integer dispid 9;
    property LastStringResult: WideString readonly dispid 10;
    property LastBinaryResult: OleVariant readonly dispid 11;
    property LastStringResultLen: Integer readonly dispid 12;
    property Host: WideString dispid 100;
    property Authorization: WideString dispid 101;
    function SendReqNoBody(const httpVerb: WideString; const uriPath: WideString): Integer; dispid 102;
    function SendReqNoBodyAsync(const httpVerb: WideString; const uriPath: WideString): IChilkatTask; dispid 602;
    function UseConnection(const connection: IChilkatSocket; autoReconnect: Integer): Integer; dispid 103;
    function ReadResponseHeader: Integer; dispid 104;
    function ReadResponseHeaderAsync: IChilkatTask; dispid 604;
    function SetAuthAws(const authProvider: IChilkatAuthAws): Integer; dispid 105;
    property IdleTimeoutMs: Integer dispid 106;
    function ReadRespBodyString: WideString; dispid 107;
    function ReadRespBodyStringAsync: IChilkatTask; dispid 607;
    function ReadRespBodyBinary: OleVariant; dispid 108;
    function ReadRespBodyBinaryAsync: IChilkatTask; dispid 608;
    function ReadRespBodyStream(const stream: IChilkatStream; autoSetStreamCharset: Integer): Integer; dispid 109;
    function ReadRespBodyStreamAsync(const stream: IChilkatStream; autoSetStreamCharset: Integer): IChilkatTask; dispid 609;
    function SendReqBinaryBody(const httpVerb: WideString; const uriPath: WideString; 
                               Body: OleVariant): Integer; dispid 110;
    function SendReqBinaryBodyAsync(const httpVerb: WideString; const uriPath: WideString; 
                                    Body: OleVariant): IChilkatTask; dispid 610;
    function SendReqStringBody(const httpVerb: WideString; const uriPath: WideString; 
                               const bodyText: WideString): Integer; dispid 111;
    function SendReqStringBodyAsync(const httpVerb: WideString; const uriPath: WideString; 
                                    const bodyText: WideString): IChilkatTask; dispid 611;
    function SendReqStreamBody(const httpVerb: WideString; const uriPath: WideString; 
                               const stream: IChilkatStream): Integer; dispid 112;
    function SendReqStreamBodyAsync(const httpVerb: WideString; const uriPath: WideString; 
                                    const stream: IChilkatStream): IChilkatTask; dispid 612;
    function ClearAllHeaders: Integer; dispid 113;
    function AddHeader(const name: WideString; const value: WideString): Integer; dispid 114;
    function RemoveHeader(const name: WideString): Integer; dispid 115;
    function ClearAllQueryParams: Integer; dispid 116;
    function AddQueryParam(const name: WideString; const value: WideString): Integer; dispid 117;
    function RemoveQueryParam(const name: WideString): Integer; dispid 118;
    function SendReqFormUrlEncoded(const httpVerb: WideString; const uriPath: WideString): Integer; dispid 119;
    function SendReqFormUrlEncodedAsync(const httpVerb: WideString; const uriPath: WideString): IChilkatTask; dispid 619;
    function SetAuthGoogle(const authProvider: IChilkatAuthGoogle): Integer; dispid 120;
    function SetAuthAzureStorage(const authProvider: IChilkatAuthAzureStorage): Integer; dispid 121;
    function SetAuthAzureAD(const authProvider: IChilkatAuthAzureAD): Integer; dispid 122;
    property ResponseStatusText: WideString readonly dispid 124;
    property ResponseStatusCode: Integer readonly dispid 125;
    property NumResponseHeaders: Integer readonly dispid 126;
    function Connect(const hostname: WideString; port: Integer; tls: Integer; autoReconnect: Integer): Integer; dispid 127;
    function ConnectAsync(const hostname: WideString; port: Integer; tls: Integer; 
                          autoReconnect: Integer): IChilkatTask; dispid 627;
    function ResponseHdrName(index: Integer): WideString; dispid 128;
    function ResponseHdrValue(index: Integer): WideString; dispid 129;
    function FullRequestString(const httpVerb: WideString; const uriPath: WideString; 
                               const bodyText: WideString): WideString; dispid 131;
    function FullRequestStringAsync(const httpVerb: WideString; const uriPath: WideString; 
                                    const bodyText: WideString): IChilkatTask; dispid 631;
    property PartSelector: WideString dispid 132;
    function SetMultipartBodyBinary(bodyData: OleVariant): Integer; dispid 133;
    function SetMultipartBodyString(const bodyText: WideString): Integer; dispid 134;
    function SetMultipartBodyStream(const stream: IChilkatStream): Integer; dispid 135;
    function FullRequestBinary(const httpVerb: WideString; const uriPath: WideString; 
                               bodyBytes: OleVariant): WideString; dispid 136;
    function FullRequestBinaryAsync(const httpVerb: WideString; const uriPath: WideString; 
                                    bodyBytes: OleVariant): IChilkatTask; dispid 636;
    function SendReqMultipart(const httpVerb: WideString; const uriPath: WideString): Integer; dispid 137;
    function SendReqMultipartAsync(const httpVerb: WideString; const uriPath: WideString): IChilkatTask; dispid 637;
    function FullRequestMultipart(const httpVerb: WideString; const uriPath: WideString): WideString; dispid 138;
    function FullRequestMultipartAsync(const httpVerb: WideString; const uriPath: WideString): IChilkatTask; dispid 638;
    function FullRequestNoBody(const httpVerb: WideString; const uriPath: WideString): WideString; dispid 139;
    function FullRequestNoBodyAsync(const httpVerb: WideString; const uriPath: WideString): IChilkatTask; dispid 639;
    function FullRequestStream(const httpVerb: WideString; const uriPath: WideString; 
                               const stream: IChilkatStream): WideString; dispid 140;
    function FullRequestStreamAsync(const httpVerb: WideString; const uriPath: WideString; 
                                    const stream: IChilkatStream): IChilkatTask; dispid 640;
    property ResponseHeader: WideString readonly dispid 141;
    property LastRequestHeader: WideString readonly dispid 142;
    property LastRequestStartLine: WideString readonly dispid 143;
    function ResponseHdrByName(const name: WideString): WideString; dispid 144;
    function SetAuthOAuth1(const authProvider: IChilkatOAuth1; useQueryParams: Integer): Integer; dispid 145;
    function SetAuthBasic(const username: WideString; const password: WideString): Integer; dispid 146;
    function FullRequestFormUrlEncoded(const httpVerb: WideString; const uriPath: WideString): WideString; dispid 147;
    function FullRequestFormUrlEncodedAsync(const httpVerb: WideString; const uriPath: WideString): IChilkatTask; dispid 647;
    property HeartbeatMs: Integer dispid 148;
    function RedirectUrl: IChilkatUrl; dispid 149;
    function AddQueryParams(const QueryString: WideString): Integer; dispid 150;
    function Disconnect(maxWaitMs: Integer): Integer; dispid 151;
    function DisconnectAsync(maxWaitMs: Integer): IChilkatTask; dispid 651;
    property StreamNonChunked: Integer dispid 152;
    function SetResponseBodyStream(expectedStatus: Integer; autoSetStreamCharset: Integer; 
                                   const responseStream: IChilkatStream): Integer; dispid 153;
    procedure ClearResponseBodyStream; dispid 154;
    property ConnectFailReason: Integer readonly dispid 155;
    property PercentDoneOnSend: Integer dispid 156;
    property AllowHeaderQB: Integer dispid 157;
    function SetAuthOAuth2(const authProvider: IChilkatOAuth2): Integer; dispid 158;
    function FullRequestSb(const httpVerb: WideString; const uriPath: WideString; 
                           const requestBody: IChilkatStringBuilder; 
                           const responseBody: IChilkatStringBuilder): Integer; dispid 159;
    function FullRequestSbAsync(const httpVerb: WideString; const uriPath: WideString; 
                                const requestBody: IChilkatStringBuilder; 
                                const responseBody: IChilkatStringBuilder): IChilkatTask; dispid 659;
    function AddQueryParamSb(const name: WideString; const value: IChilkatStringBuilder): Integer; dispid 160;
    function SetMultipartBodySb(const bodySb: IChilkatStringBuilder): Integer; dispid 161;
    function SetMultipartBodyBd(const bodyData: IChilkatBinData): Integer; dispid 162;
    function SendReqSb(const httpVerb: WideString; const uriPath: WideString; 
                       const bodySb: IChilkatStringBuilder): Integer; dispid 163;
    function SendReqSbAsync(const httpVerb: WideString; const uriPath: WideString; 
                            const bodySb: IChilkatStringBuilder): IChilkatTask; dispid 663;
    function SendReqBd(const httpVerb: WideString; const uriPath: WideString; 
                       const Body: IChilkatBinData): Integer; dispid 164;
    function SendReqBdAsync(const httpVerb: WideString; const uriPath: WideString; 
                            const Body: IChilkatBinData): IChilkatTask; dispid 664;
    function ReadRespSb(const responseBody: IChilkatStringBuilder): Integer; dispid 165;
    function ReadRespSbAsync(const responseBody: IChilkatStringBuilder): IChilkatTask; dispid 665;
    function ReadRespBd(const responseBody: IChilkatBinData): Integer; dispid 166;
    function ReadRespBdAsync(const responseBody: IChilkatBinData): IChilkatTask; dispid 666;
    property AllowHeaderFolding: Integer dispid 167;
    function ClearAllParts: Integer; dispid 168;
    function FullRequestNoBodySb(const httpVerb: WideString; const uriPath: WideString; 
                                 const sb: IChilkatStringBuilder): Integer; dispid 169;
    function FullRequestNoBodySbAsync(const httpVerb: WideString; const uriPath: WideString; 
                                      const sb: IChilkatStringBuilder): IChilkatTask; dispid 669;
    function FullRequestBd(const httpVerb: WideString; const uriPath: WideString; 
                           const binData: IChilkatBinData; const responseBody: IChilkatStringBuilder): Integer; dispid 170;
    function FullRequestBdAsync(const httpVerb: WideString; const uriPath: WideString; 
                                const binData: IChilkatBinData; 
                                const responseBody: IChilkatStringBuilder): IChilkatTask; dispid 670;
    function FullRequestNoBodyBd(const httpVerb: WideString; const uriPath: WideString; 
                                 const binData: IChilkatBinData): Integer; dispid 171;
    function FullRequestNoBodyBdAsync(const httpVerb: WideString; const uriPath: WideString; 
                                      const binData: IChilkatBinData): IChilkatTask; dispid 671;
    function SetAuthAzureSas(const authProvider: IChilkatAuthAzureSAS): Integer; dispid 172;
    function AddMwsSignature(const httpVerb: WideString; const uriPath: WideString; 
                             const domain: WideString; const mwsSecretKey: WideString): Integer; dispid 173;
    function ClearAuth: Integer; dispid 174;
    function AddPathParam(const name: WideString; const value: WideString): Integer; dispid 175;
    function ClearAllPathParams: Integer; dispid 176;
    property ConnectTimeoutMs: Integer dispid 177;
    function SetAuthBasicSecure(const username: IChilkatSecureString; 
                                const password: IChilkatSecureString): Integer; dispid 178;
    property DebugMode: Integer dispid 179;
    function GetLastDebugRequest(const bd: IChilkatBinData): Integer; dispid 180;
    function LastJsonData: IChilkatJsonObject; dispid 181;
    property UncommonOptions: WideString dispid 182;
    function LoadTaskCaller(const task: IChilkatTask): Integer; dispid 183;
  end;

// *********************************************************************//
// Interface: IChilkatUrl
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {26823E1F-8672-4404-955F-87A5A6E3D80E}
// *********************************************************************//
  IChilkatUrl = interface(IDispatch)
    ['{26823E1F-8672-4404-955F-87A5A6E3D80E}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastMethodSuccess: Integer; safecall;
    procedure Set_LastMethodSuccess(pVal: Integer); safecall;
    function Get_LastStringResult: WideString; safecall;
    function Get_LastBinaryResult: OleVariant; safecall;
    function Get_LastStringResultLen: Integer; safecall;
    function ParseUrl(const url: WideString): Integer; safecall;
    function Get_Host: WideString; safecall;
    function Get_port: Integer; safecall;
    function Get_Ssl: Integer; safecall;
    function Get_HostType: WideString; safecall;
    function Get_login: WideString; safecall;
    function Get_password: WideString; safecall;
    function Get_path: WideString; safecall;
    function Get_Query: WideString; safecall;
    function Get_Frag: WideString; safecall;
    function Get_PathWithQueryParams: WideString; safecall;
    property LastMethodSuccess: Integer read Get_LastMethodSuccess write Set_LastMethodSuccess;
    property LastStringResult: WideString read Get_LastStringResult;
    property LastBinaryResult: OleVariant read Get_LastBinaryResult;
    property LastStringResultLen: Integer read Get_LastStringResultLen;
    property Host: WideString read Get_Host;
    property port: Integer read Get_port;
    property Ssl: Integer read Get_Ssl;
    property HostType: WideString read Get_HostType;
    property login: WideString read Get_login;
    property password: WideString read Get_password;
    property path: WideString read Get_path;
    property Query: WideString read Get_Query;
    property Frag: WideString read Get_Frag;
    property PathWithQueryParams: WideString read Get_PathWithQueryParams;
  end;

// *********************************************************************//
// DispIntf:  IChilkatUrlDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {26823E1F-8672-4404-955F-87A5A6E3D80E}
// *********************************************************************//
  IChilkatUrlDisp = dispinterface
    ['{26823E1F-8672-4404-955F-87A5A6E3D80E}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastMethodSuccess: Integer dispid 9;
    property LastStringResult: WideString readonly dispid 10;
    property LastBinaryResult: OleVariant readonly dispid 11;
    property LastStringResultLen: Integer readonly dispid 12;
    function ParseUrl(const url: WideString): Integer; dispid 100;
    property Host: WideString readonly dispid 101;
    property port: Integer readonly dispid 102;
    property Ssl: Integer readonly dispid 103;
    property HostType: WideString readonly dispid 104;
    property login: WideString readonly dispid 105;
    property password: WideString readonly dispid 106;
    property path: WideString readonly dispid 107;
    property Query: WideString readonly dispid 108;
    property Frag: WideString readonly dispid 109;
    property PathWithQueryParams: WideString readonly dispid 110;
  end;

// *********************************************************************//
// Interface: IChilkatRsa
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {C931B7DB-71FB-45CE-BA70-36BEF6CEAF1E}
// *********************************************************************//
  IChilkatRsa = interface(IDispatch)
    ['{C931B7DB-71FB-45CE-BA70-36BEF6CEAF1E}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_LastMethodSuccess: Integer; safecall;
    procedure Set_LastMethodSuccess(pVal: Integer); safecall;
    function Get_LastStringResult: WideString; safecall;
    function Get_LastBinaryResult: OleVariant; safecall;
    function Get_LastStringResultLen: Integer; safecall;
    function Get_EncodingMode: WideString; safecall;
    procedure Set_EncodingMode(const pVal: WideString); safecall;
    function Get_littleEndian: Integer; safecall;
    procedure Set_littleEndian(pVal: Integer); safecall;
    function Get_NoUnpad: Integer; safecall;
    procedure Set_NoUnpad(pVal: Integer); safecall;
    function Get_numBits: Integer; safecall;
    function Get_OaepPadding: Integer; safecall;
    procedure Set_OaepPadding(pVal: Integer); safecall;
    function Get_charset: WideString; safecall;
    procedure Set_charset(const pVal: WideString); safecall;
    function DecryptBytes(inData: OleVariant; usePrivateKey: Integer): OleVariant; safecall;
    function DecryptBytesENC(const str: WideString; bUsePrivateKey: Integer): OleVariant; safecall;
    function DecryptString(binarySig: OleVariant; usePrivateKey: Integer): WideString; safecall;
    function DecryptStringENC(const encodedSig: WideString; usePrivateKey: Integer): WideString; safecall;
    function EncryptBytes(BinaryData: OleVariant; usePrivateKey: Integer): OleVariant; safecall;
    function EncryptBytesENC(data: OleVariant; bUsePrivateKey: Integer): WideString; safecall;
    function EncryptString(const stringToEncrypt: WideString; usePrivateKey: Integer): OleVariant; safecall;
    function EncryptStringENC(const str: WideString; bUsePrivateKey: Integer): WideString; safecall;
    function ExportPrivateKey: WideString; safecall;
    function ExportPublicKey: WideString; safecall;
    function GenerateKey(numBits: Integer): Integer; safecall;
    function ImportPrivateKey(const xmlKey: WideString): Integer; safecall;
    function ImportPublicKey(const xmlKey: WideString): Integer; safecall;
    function OpenSslSignBytes(data: OleVariant): OleVariant; safecall;
    function OpenSslSignBytesENC(data: OleVariant): WideString; safecall;
    function OpenSslSignString(const str: WideString): OleVariant; safecall;
    function OpenSslSignStringENC(const str: WideString): WideString; safecall;
    function OpenSslVerifyBytes(Signature: OleVariant): OleVariant; safecall;
    function OpenSslVerifyBytesENC(const str: WideString): OleVariant; safecall;
    function OpenSslVerifyString(data: OleVariant): WideString; safecall;
    function OpenSslVerifyStringENC(const str: WideString): WideString; safecall;
    function SignBytes(BinaryData: OleVariant; const HashAlgorithm: WideString): OleVariant; safecall;
    function SignBytesENC(BinaryData: OleVariant; const HashAlgorithm: WideString): WideString; safecall;
    function SignHash(HashBytes: OleVariant; const hashAlg: WideString): OleVariant; safecall;
    function SignHashENC(const encodedHash: WideString; const hashAlg: WideString): WideString; safecall;
    function SignString(const strToBeHashed: WideString; const HashAlgorithm: WideString): OleVariant; safecall;
    function SignStringENC(const strToBeHashed: WideString; const HashAlgorithm: WideString): WideString; safecall;
    function SnkToXml(const filename: WideString): WideString; safecall;
    function UnlockComponent(const unlockCode: WideString): Integer; safecall;
    function VerifyBytes(originalData: OleVariant; const HashAlgorithm: WideString; 
                         signatureBytes: OleVariant): Integer; safecall;
    function VerifyBytesENC(originalData: OleVariant; const HashAlgorithm: WideString; 
                            const encodedSig: WideString): Integer; safecall;
    function VerifyHash(HashBytes: OleVariant; const hashAlg: WideString; sigBytes: OleVariant): Integer; safecall;
    function VerifyHashENC(const encodedHash: WideString; const hashAlg: WideString; 
                           const encodedSig: WideString): Integer; safecall;
    function VerifyPrivateKey(const xml: WideString): Integer; safecall;
    function VerifyString(const originalString: WideString; const HashAlgorithm: WideString; 
                          binarySig: OleVariant): Integer; safecall;
    function VerifyStringENC(const originalString: WideString; const HashAlgorithm: WideString; 
                             const encodedSig: WideString): Integer; safecall;
    function ImportPrivateKeyObj(const key: IPrivateKey): Integer; safecall;
    function ImportPublicKeyObj(const key: IPublicKey): Integer; safecall;
    function ExportPrivateKeyObj: IPrivateKey; safecall;
    function ExportPublicKeyObj: IPublicKey; safecall;
    function Get_OaepHash: WideString; safecall;
    procedure Set_OaepHash(const pVal: WideString); safecall;
    function Get_OaepMgfHash: WideString; safecall;
    procedure Set_OaepMgfHash(const pVal: WideString); safecall;
    function SetX509Cert(const cert: IChilkatCert; usePrivateKey: Integer): Integer; safecall;
    function DecryptBd(const bd: IChilkatBinData; usePrivateKey: Integer): Integer; safecall;
    function EncryptBd(const bd: IChilkatBinData; usePrivateKey: Integer): Integer; safecall;
    function OpenSslSignBd(const bd: IChilkatBinData): Integer; safecall;
    function OpenSslVerifyBd(const bd: IChilkatBinData): Integer; safecall;
    function SignBd(const bdData: IChilkatBinData; const HashAlgorithm: WideString; 
                    const bdSig: IChilkatBinData): Integer; safecall;
    function VerifyBd(const bdData: IChilkatBinData; const HashAlgorithm: WideString; 
                      const bdSig: IChilkatBinData): Integer; safecall;
    function Get_PssSaltLen: Integer; safecall;
    procedure Set_PssSaltLen(pVal: Integer); safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property LastMethodSuccess: Integer read Get_LastMethodSuccess write Set_LastMethodSuccess;
    property LastStringResult: WideString read Get_LastStringResult;
    property LastBinaryResult: OleVariant read Get_LastBinaryResult;
    property LastStringResultLen: Integer read Get_LastStringResultLen;
    property EncodingMode: WideString read Get_EncodingMode write Set_EncodingMode;
    property littleEndian: Integer read Get_littleEndian write Set_littleEndian;
    property NoUnpad: Integer read Get_NoUnpad write Set_NoUnpad;
    property numBits: Integer read Get_numBits;
    property OaepPadding: Integer read Get_OaepPadding write Set_OaepPadding;
    property charset: WideString read Get_charset write Set_charset;
    property OaepHash: WideString read Get_OaepHash write Set_OaepHash;
    property OaepMgfHash: WideString read Get_OaepMgfHash write Set_OaepMgfHash;
    property PssSaltLen: Integer read Get_PssSaltLen write Set_PssSaltLen;
  end;

// *********************************************************************//
// DispIntf:  IChilkatRsaDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {C931B7DB-71FB-45CE-BA70-36BEF6CEAF1E}
// *********************************************************************//
  IChilkatRsaDisp = dispinterface
    ['{C931B7DB-71FB-45CE-BA70-36BEF6CEAF1E}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property LastMethodSuccess: Integer dispid 9;
    property LastStringResult: WideString readonly dispid 10;
    property LastBinaryResult: OleVariant readonly dispid 11;
    property LastStringResultLen: Integer readonly dispid 12;
    property EncodingMode: WideString dispid 100;
    property littleEndian: Integer dispid 101;
    property NoUnpad: Integer dispid 102;
    property numBits: Integer readonly dispid 103;
    property OaepPadding: Integer dispid 104;
    property charset: WideString dispid 105;
    function DecryptBytes(inData: OleVariant; usePrivateKey: Integer): OleVariant; dispid 106;
    function DecryptBytesENC(const str: WideString; bUsePrivateKey: Integer): OleVariant; dispid 107;
    function DecryptString(binarySig: OleVariant; usePrivateKey: Integer): WideString; dispid 108;
    function DecryptStringENC(const encodedSig: WideString; usePrivateKey: Integer): WideString; dispid 109;
    function EncryptBytes(BinaryData: OleVariant; usePrivateKey: Integer): OleVariant; dispid 110;
    function EncryptBytesENC(data: OleVariant; bUsePrivateKey: Integer): WideString; dispid 111;
    function EncryptString(const stringToEncrypt: WideString; usePrivateKey: Integer): OleVariant; dispid 112;
    function EncryptStringENC(const str: WideString; bUsePrivateKey: Integer): WideString; dispid 113;
    function ExportPrivateKey: WideString; dispid 114;
    function ExportPublicKey: WideString; dispid 115;
    function GenerateKey(numBits: Integer): Integer; dispid 116;
    function ImportPrivateKey(const xmlKey: WideString): Integer; dispid 117;
    function ImportPublicKey(const xmlKey: WideString): Integer; dispid 118;
    function OpenSslSignBytes(data: OleVariant): OleVariant; dispid 119;
    function OpenSslSignBytesENC(data: OleVariant): WideString; dispid 120;
    function OpenSslSignString(const str: WideString): OleVariant; dispid 121;
    function OpenSslSignStringENC(const str: WideString): WideString; dispid 122;
    function OpenSslVerifyBytes(Signature: OleVariant): OleVariant; dispid 123;
    function OpenSslVerifyBytesENC(const str: WideString): OleVariant; dispid 124;
    function OpenSslVerifyString(data: OleVariant): WideString; dispid 125;
    function OpenSslVerifyStringENC(const str: WideString): WideString; dispid 126;
    function SignBytes(BinaryData: OleVariant; const HashAlgorithm: WideString): OleVariant; dispid 127;
    function SignBytesENC(BinaryData: OleVariant; const HashAlgorithm: WideString): WideString; dispid 128;
    function SignHash(HashBytes: OleVariant; const hashAlg: WideString): OleVariant; dispid 129;
    function SignHashENC(const encodedHash: WideString; const hashAlg: WideString): WideString; dispid 130;
    function SignString(const strToBeHashed: WideString; const HashAlgorithm: WideString): OleVariant; dispid 131;
    function SignStringENC(const strToBeHashed: WideString; const HashAlgorithm: WideString): WideString; dispid 132;
    function SnkToXml(const filename: WideString): WideString; dispid 133;
    function UnlockComponent(const unlockCode: WideString): Integer; dispid 134;
    function VerifyBytes(originalData: OleVariant; const HashAlgorithm: WideString; 
                         signatureBytes: OleVariant): Integer; dispid 135;
    function VerifyBytesENC(originalData: OleVariant; const HashAlgorithm: WideString; 
                            const encodedSig: WideString): Integer; dispid 136;
    function VerifyHash(HashBytes: OleVariant; const hashAlg: WideString; sigBytes: OleVariant): Integer; dispid 137;
    function VerifyHashENC(const encodedHash: WideString; const hashAlg: WideString; 
                           const encodedSig: WideString): Integer; dispid 138;
    function VerifyPrivateKey(const xml: WideString): Integer; dispid 139;
    function VerifyString(const originalString: WideString; const HashAlgorithm: WideString; 
                          binarySig: OleVariant): Integer; dispid 140;
    function VerifyStringENC(const originalString: WideString; const HashAlgorithm: WideString; 
                             const encodedSig: WideString): Integer; dispid 141;
    function ImportPrivateKeyObj(const key: IPrivateKey): Integer; dispid 142;
    function ImportPublicKeyObj(const key: IPublicKey): Integer; dispid 143;
    function ExportPrivateKeyObj: IPrivateKey; dispid 144;
    function ExportPublicKeyObj: IPublicKey; dispid 145;
    property OaepHash: WideString dispid 146;
    property OaepMgfHash: WideString dispid 148;
    function SetX509Cert(const cert: IChilkatCert; usePrivateKey: Integer): Integer; dispid 149;
    function DecryptBd(const bd: IChilkatBinData; usePrivateKey: Integer): Integer; dispid 150;
    function EncryptBd(const bd: IChilkatBinData; usePrivateKey: Integer): Integer; dispid 151;
    function OpenSslSignBd(const bd: IChilkatBinData): Integer; dispid 152;
    function OpenSslVerifyBd(const bd: IChilkatBinData): Integer; dispid 153;
    function SignBd(const bdData: IChilkatBinData; const HashAlgorithm: WideString; 
                    const bdSig: IChilkatBinData): Integer; dispid 154;
    function VerifyBd(const bdData: IChilkatBinData; const HashAlgorithm: WideString; 
                      const bdSig: IChilkatBinData): Integer; dispid 155;
    property PssSaltLen: Integer dispid 156;
  end;

// *********************************************************************//
// Interface: IChilkatRss
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {270A27B7-1D62-490D-82E4-A35269722E23}
// *********************************************************************//
  IChilkatRss = interface(IDispatch)
    ['{270A27B7-1D62-490D-82E4-A35269722E23}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_LastMethodSuccess: Integer; safecall;
    procedure Set_LastMethodSuccess(pVal: Integer); safecall;
    function Get_LastStringResult: WideString; safecall;
    function Get_LastBinaryResult: OleVariant; safecall;
    function Get_LastStringResultLen: Integer; safecall;
    function Get_NumItems: Integer; safecall;
    function Get_NumChannels: Integer; safecall;
    function AddNewChannel: IChilkatRss; safecall;
    function AddNewImage: IChilkatRss; safecall;
    function AddNewItem: IChilkatRss; safecall;
    function DownloadRss(const url: WideString): Integer; safecall;
    function DownloadRssAsync(const url: WideString): IChilkatTask; safecall;
    function GetAttr(const Tag: WideString; const attrName: WideString): WideString; safecall;
    function GetChannel(index: Integer): IChilkatRss; safecall;
    function GetCount(const Tag: WideString): Integer; safecall;
    function GetDate(const Tag: WideString): TDateTime; safecall;
    function GetDateStr(const Tag: WideString): WideString; safecall;
    function GetImage: IChilkatRss; safecall;
    function GetInt(const Tag: WideString): Integer; safecall;
    function GetItem(index: Integer): IChilkatRss; safecall;
    function GetString(const Tag: WideString): WideString; safecall;
    function LoadRssFile(const filePath: WideString): Integer; safecall;
    function LoadRssString(const rssString: WideString): Integer; safecall;
    function MGetAttr(const Tag: WideString; index: Integer; const attrName: WideString): WideString; safecall;
    function MGetString(const Tag: WideString; index: Integer): WideString; safecall;
    function MSetAttr(const Tag: WideString; idx: Integer; const attrName: WideString; 
                      const value: WideString): Integer; safecall;
    function MSetString(const Tag: WideString; idx: Integer; const value: WideString): Integer; safecall;
    procedure NewRss; safecall;
    procedure Remove(const Tag: WideString); safecall;
    procedure SetAttr(const Tag: WideString; const attrName: WideString; const value: WideString); safecall;
    procedure SetDate(const Tag: WideString; dateTime: TDateTime); safecall;
    procedure SetDateNow(const Tag: WideString); safecall;
    procedure SetDateStr(const Tag: WideString; const dateTimeStr: WideString); safecall;
    procedure SetInt(const Tag: WideString; value: Integer); safecall;
    procedure SetString(const Tag: WideString; const value: WideString); safecall;
    function ToXmlString: WideString; safecall;
    function LoadTaskCaller(const task: IChilkatTask): Integer; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property LastMethodSuccess: Integer read Get_LastMethodSuccess write Set_LastMethodSuccess;
    property LastStringResult: WideString read Get_LastStringResult;
    property LastBinaryResult: OleVariant read Get_LastBinaryResult;
    property LastStringResultLen: Integer read Get_LastStringResultLen;
    property NumItems: Integer read Get_NumItems;
    property NumChannels: Integer read Get_NumChannels;
  end;

// *********************************************************************//
// DispIntf:  IChilkatRssDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {270A27B7-1D62-490D-82E4-A35269722E23}
// *********************************************************************//
  IChilkatRssDisp = dispinterface
    ['{270A27B7-1D62-490D-82E4-A35269722E23}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property LastMethodSuccess: Integer dispid 9;
    property LastStringResult: WideString readonly dispid 10;
    property LastBinaryResult: OleVariant readonly dispid 11;
    property LastStringResultLen: Integer readonly dispid 12;
    property NumItems: Integer readonly dispid 100;
    property NumChannels: Integer readonly dispid 101;
    function AddNewChannel: IChilkatRss; dispid 102;
    function AddNewImage: IChilkatRss; dispid 103;
    function AddNewItem: IChilkatRss; dispid 104;
    function DownloadRss(const url: WideString): Integer; dispid 105;
    function DownloadRssAsync(const url: WideString): IChilkatTask; dispid 605;
    function GetAttr(const Tag: WideString; const attrName: WideString): WideString; dispid 106;
    function GetChannel(index: Integer): IChilkatRss; dispid 107;
    function GetCount(const Tag: WideString): Integer; dispid 108;
    function GetDate(const Tag: WideString): TDateTime; dispid 109;
    function GetDateStr(const Tag: WideString): WideString; dispid 110;
    function GetImage: IChilkatRss; dispid 111;
    function GetInt(const Tag: WideString): Integer; dispid 112;
    function GetItem(index: Integer): IChilkatRss; dispid 113;
    function GetString(const Tag: WideString): WideString; dispid 114;
    function LoadRssFile(const filePath: WideString): Integer; dispid 115;
    function LoadRssString(const rssString: WideString): Integer; dispid 116;
    function MGetAttr(const Tag: WideString; index: Integer; const attrName: WideString): WideString; dispid 117;
    function MGetString(const Tag: WideString; index: Integer): WideString; dispid 118;
    function MSetAttr(const Tag: WideString; idx: Integer; const attrName: WideString; 
                      const value: WideString): Integer; dispid 119;
    function MSetString(const Tag: WideString; idx: Integer; const value: WideString): Integer; dispid 120;
    procedure NewRss; dispid 121;
    procedure Remove(const Tag: WideString); dispid 122;
    procedure SetAttr(const Tag: WideString; const attrName: WideString; const value: WideString); dispid 123;
    procedure SetDate(const Tag: WideString; dateTime: TDateTime); dispid 124;
    procedure SetDateNow(const Tag: WideString); dispid 125;
    procedure SetDateStr(const Tag: WideString; const dateTimeStr: WideString); dispid 126;
    procedure SetInt(const Tag: WideString; value: Integer); dispid 127;
    procedure SetString(const Tag: WideString; const value: WideString); dispid 128;
    function ToXmlString: WideString; dispid 129;
    function LoadTaskCaller(const task: IChilkatTask): Integer; dispid 130;
  end;

// *********************************************************************//
// Interface: IChilkatSCard
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {8AB7C0CF-D2E0-4136-AD0D-8BEFA9E29F4D}
// *********************************************************************//
  IChilkatSCard = interface(IDispatch)
    ['{8AB7C0CF-D2E0-4136-AD0D-8BEFA9E29F4D}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_LastMethodSuccess: Integer; safecall;
    procedure Set_LastMethodSuccess(pVal: Integer); safecall;
    function Get_LastStringResult: WideString; safecall;
    function Get_LastBinaryResult: OleVariant; safecall;
    function Get_LastStringResultLen: Integer; safecall;
    function EstablishContext(const Scope: WideString): Integer; safecall;
    function Get_Context: WideString; safecall;
    function ReleaseContext: Integer; safecall;
    function ListReaders(const st: IChilkatStringTable): Integer; safecall;
    function Connect(const reader: WideString; const shareMode: WideString; 
                     const preferredProtocol: WideString): Integer; safecall;
    function Get_ConnectedReader: WideString; safecall;
    function Get_ActiveProtocol: WideString; safecall;
    function Disconnect(const disposition: WideString): Integer; safecall;
    function CheckStatus: Integer; safecall;
    function Get_ReaderStatus: WideString; safecall;
    function Get_CardAtr: WideString; safecall;
    function Get_ScardError: WideString; safecall;
    function Reconnect(const shareMode: WideString; const preferredProtocol: WideString; 
                       const action: WideString): Integer; safecall;
    function GetStatusChange(maxWaitMs: Integer; const stReaderNames: IChilkatStringTable; 
                             const json: IChilkatJsonObject): Integer; safecall;
    function GetStatusChangeAsync(maxWaitMs: Integer; const stReaderNames: IChilkatStringTable; 
                                  const json: IChilkatJsonObject): IChilkatTask; safecall;
    function GetStatusChangeCancel: Integer; safecall;
    function Transmit(const protocol: WideString; const bdSend: IChilkatBinData; 
                      const bdRecv: IChilkatBinData; maxRecvLen: Integer): Integer; safecall;
    function BeginTransaction: Integer; safecall;
    function EndTransaction(const disposition: WideString): Integer; safecall;
    function Get_PcscLibPath: WideString; safecall;
    procedure Set_PcscLibPath(const pVal: WideString); safecall;
    function TransmitHex(const protocol: WideString; const apduHex: WideString; 
                         const bdRecv: IChilkatBinData; maxRecvLen: Integer): Integer; safecall;
    function SendControl(controlCode: Integer; const bdSend: IChilkatBinData; 
                         const bdRecv: IChilkatBinData): Integer; safecall;
    function SendControlHex(controlCode: Integer; const sendData: WideString; 
                            const bdRecv: IChilkatBinData): Integer; safecall;
    function GetAttrib(const attr: WideString; const bd: IChilkatBinData): Integer; safecall;
    function GetAttribStr(const attr: WideString): WideString; safecall;
    function GetAttribUint(const attr: WideString): Integer; safecall;
    function ListReaderGroups(const readerGroups: IChilkatStringTable): Integer; safecall;
    function FindSmartcards(const json: IChilkatJsonObject): Integer; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property LastMethodSuccess: Integer read Get_LastMethodSuccess write Set_LastMethodSuccess;
    property LastStringResult: WideString read Get_LastStringResult;
    property LastBinaryResult: OleVariant read Get_LastBinaryResult;
    property LastStringResultLen: Integer read Get_LastStringResultLen;
    property Context: WideString read Get_Context;
    property ConnectedReader: WideString read Get_ConnectedReader;
    property ActiveProtocol: WideString read Get_ActiveProtocol;
    property ReaderStatus: WideString read Get_ReaderStatus;
    property CardAtr: WideString read Get_CardAtr;
    property ScardError: WideString read Get_ScardError;
    property PcscLibPath: WideString read Get_PcscLibPath write Set_PcscLibPath;
  end;

// *********************************************************************//
// DispIntf:  IChilkatSCardDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {8AB7C0CF-D2E0-4136-AD0D-8BEFA9E29F4D}
// *********************************************************************//
  IChilkatSCardDisp = dispinterface
    ['{8AB7C0CF-D2E0-4136-AD0D-8BEFA9E29F4D}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property LastMethodSuccess: Integer dispid 9;
    property LastStringResult: WideString readonly dispid 10;
    property LastBinaryResult: OleVariant readonly dispid 11;
    property LastStringResultLen: Integer readonly dispid 12;
    function EstablishContext(const Scope: WideString): Integer; dispid 101;
    property Context: WideString readonly dispid 103;
    function ReleaseContext: Integer; dispid 104;
    function ListReaders(const st: IChilkatStringTable): Integer; dispid 105;
    function Connect(const reader: WideString; const shareMode: WideString; 
                     const preferredProtocol: WideString): Integer; dispid 106;
    property ConnectedReader: WideString readonly dispid 107;
    property ActiveProtocol: WideString readonly dispid 108;
    function Disconnect(const disposition: WideString): Integer; dispid 109;
    function CheckStatus: Integer; dispid 110;
    property ReaderStatus: WideString readonly dispid 111;
    property CardAtr: WideString readonly dispid 112;
    property ScardError: WideString readonly dispid 115;
    function Reconnect(const shareMode: WideString; const preferredProtocol: WideString; 
                       const action: WideString): Integer; dispid 116;
    function GetStatusChange(maxWaitMs: Integer; const stReaderNames: IChilkatStringTable; 
                             const json: IChilkatJsonObject): Integer; dispid 117;
    function GetStatusChangeAsync(maxWaitMs: Integer; const stReaderNames: IChilkatStringTable; 
                                  const json: IChilkatJsonObject): IChilkatTask; dispid 617;
    function GetStatusChangeCancel: Integer; dispid 118;
    function Transmit(const protocol: WideString; const bdSend: IChilkatBinData; 
                      const bdRecv: IChilkatBinData; maxRecvLen: Integer): Integer; dispid 119;
    function BeginTransaction: Integer; dispid 120;
    function EndTransaction(const disposition: WideString): Integer; dispid 121;
    property PcscLibPath: WideString dispid 122;
    function TransmitHex(const protocol: WideString; const apduHex: WideString; 
                         const bdRecv: IChilkatBinData; maxRecvLen: Integer): Integer; dispid 123;
    function SendControl(controlCode: Integer; const bdSend: IChilkatBinData; 
                         const bdRecv: IChilkatBinData): Integer; dispid 124;
    function SendControlHex(controlCode: Integer; const sendData: WideString; 
                            const bdRecv: IChilkatBinData): Integer; dispid 125;
    function GetAttrib(const attr: WideString; const bd: IChilkatBinData): Integer; dispid 126;
    function GetAttribStr(const attr: WideString): WideString; dispid 127;
    function GetAttribUint(const attr: WideString): Integer; dispid 128;
    function ListReaderGroups(const readerGroups: IChilkatStringTable): Integer; dispid 129;
    function FindSmartcards(const json: IChilkatJsonObject): Integer; dispid 130;
  end;

// *********************************************************************//
// Interface: IChilkatSFtp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2701FB1F-7865-4CD0-8E1B-2BB97F701946}
// *********************************************************************//
  IChilkatSFtp = interface(IDispatch)
    ['{2701FB1F-7865-4CD0-8E1B-2BB97F701946}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_LastMethodSuccess: Integer; safecall;
    procedure Set_LastMethodSuccess(pVal: Integer); safecall;
    function Get_LastStringResult: WideString; safecall;
    function Get_LastBinaryResult: OleVariant; safecall;
    function Get_LastStringResultLen: Integer; safecall;
    function Get_AccumulateBuffer: OleVariant; safecall;
    function Get_ClientIdentifier: WideString; safecall;
    procedure Set_ClientIdentifier(const pVal: WideString); safecall;
    function Get_ClientIpAddress: WideString; safecall;
    procedure Set_ClientIpAddress(const pVal: WideString); safecall;
    function Get_ConnectTimeoutMs: Integer; safecall;
    procedure Set_ConnectTimeoutMs(pVal: Integer); safecall;
    function Get_DisconnectCode: Integer; safecall;
    function Get_DisconnectReason: WideString; safecall;
    function Get_EnableCache: Integer; safecall;
    procedure Set_EnableCache(pVal: Integer); safecall;
    function Get_FilenameCharset: WideString; safecall;
    procedure Set_FilenameCharset(const pVal: WideString); safecall;
    function Get_ForceCipher: WideString; safecall;
    procedure Set_ForceCipher(const pVal: WideString); safecall;
    function Get_ForceV3: Integer; safecall;
    procedure Set_ForceV3(pVal: Integer); safecall;
    function Get_HeartbeatMs: Integer; safecall;
    procedure Set_HeartbeatMs(pVal: Integer); safecall;
    function Get_HostKeyAlg: WideString; safecall;
    procedure Set_HostKeyAlg(const pVal: WideString); safecall;
    function Get_HostKeyFingerprint: WideString; safecall;
    function Get_HttpProxyAuthMethod: WideString; safecall;
    procedure Set_HttpProxyAuthMethod(const pVal: WideString); safecall;
    function Get_HttpProxyDomain: WideString; safecall;
    procedure Set_HttpProxyDomain(const pVal: WideString); safecall;
    function Get_HttpProxyHostname: WideString; safecall;
    procedure Set_HttpProxyHostname(const pVal: WideString); safecall;
    function Get_HttpProxyPassword: WideString; safecall;
    procedure Set_HttpProxyPassword(const pVal: WideString); safecall;
    function Get_HttpProxyPort: Integer; safecall;
    procedure Set_HttpProxyPort(pVal: Integer); safecall;
    function Get_HttpProxyUsername: WideString; safecall;
    procedure Set_HttpProxyUsername(const pVal: WideString); safecall;
    function Get_IdleTimeoutMs: Integer; safecall;
    procedure Set_IdleTimeoutMs(pVal: Integer); safecall;
    function Get_IncludeDotDirs: Integer; safecall;
    procedure Set_IncludeDotDirs(pVal: Integer); safecall;
    function Get_InitializeFailCode: Integer; safecall;
    function Get_InitializeFailReason: WideString; safecall;
    function Get_IsConnected: Integer; safecall;
    function Get_KeepSessionLog: Integer; safecall;
    procedure Set_KeepSessionLog(pVal: Integer); safecall;
    function Get_MaxPacketSize: Integer; safecall;
    procedure Set_MaxPacketSize(pVal: Integer); safecall;
    function Get_PasswordChangeRequested: Integer; safecall;
    function Get_PreserveDate: Integer; safecall;
    procedure Set_PreserveDate(pVal: Integer); safecall;
    function Get_ProtocolVersion: Integer; safecall;
    function Get_SessionLog: WideString; safecall;
    function Get_SoRcvBuf: Integer; safecall;
    procedure Set_SoRcvBuf(pVal: Integer); safecall;
    function Get_SoSndBuf: Integer; safecall;
    procedure Set_SoSndBuf(pVal: Integer); safecall;
    function Get_SocksHostname: WideString; safecall;
    procedure Set_SocksHostname(const pVal: WideString); safecall;
    function Get_SocksPassword: WideString; safecall;
    procedure Set_SocksPassword(const pVal: WideString); safecall;
    function Get_SocksPort: Integer; safecall;
    procedure Set_SocksPort(pVal: Integer); safecall;
    function Get_SocksUsername: WideString; safecall;
    procedure Set_SocksUsername(const pVal: WideString); safecall;
    function Get_SocksVersion: Integer; safecall;
    procedure Set_SocksVersion(pVal: Integer); safecall;
    function Get_SyncMustMatch: WideString; safecall;
    procedure Set_SyncMustMatch(const pVal: WideString); safecall;
    function Get_TcpNoDelay: Integer; safecall;
    procedure Set_TcpNoDelay(pVal: Integer); safecall;
    function Get_UploadChunkSize: Integer; safecall;
    procedure Set_UploadChunkSize(pVal: Integer); safecall;
    function Get_UtcMode: Integer; safecall;
    procedure Set_UtcMode(pVal: Integer); safecall;
    function Get_SyncMustNotMatch: WideString; safecall;
    procedure Set_SyncMustNotMatch(const pVal: WideString); safecall;
    function AccumulateBytes(const handle: WideString; maxBytes: Integer): Integer; safecall;
    function AccumulateBytesAsync(const handle: WideString; maxBytes: Integer): IChilkatTask; safecall;
    function Add64(const n1: WideString; const n2: WideString): WideString; safecall;
    function AuthenticatePk(const username: WideString; const privateKey: IChilkatSshKey): Integer; safecall;
    function AuthenticatePkAsync(const username: WideString; const privateKey: IChilkatSshKey): IChilkatTask; safecall;
    function AuthenticatePw(const login: WideString; const password: WideString): Integer; safecall;
    function AuthenticatePwAsync(const login: WideString; const password: WideString): IChilkatTask; safecall;
    function AuthenticatePwPk(const username: WideString; const password: WideString; 
                              const privateKey: IChilkatSshKey): Integer; safecall;
    function AuthenticatePwPkAsync(const username: WideString; const password: WideString; 
                                   const privateKey: IChilkatSshKey): IChilkatTask; safecall;
    procedure ClearAccumulateBuffer; safecall;
    procedure ClearCache; safecall;
    procedure ClearSessionLog; safecall;
    function CloseHandle(const handle: WideString): Integer; safecall;
    function CloseHandleAsync(const handle: WideString): IChilkatTask; safecall;
    function Connect(const domainName: WideString; port: Integer): Integer; safecall;
    function ConnectAsync(const domainName: WideString; port: Integer): IChilkatTask; safecall;
    function CopyFileAttr(const localFilename: WideString; const remoteFileName: WideString; 
                          isHandle: Integer): Integer; safecall;
    function CopyFileAttrAsync(const localFilename: WideString; const remoteFileName: WideString; 
                               isHandle: Integer): IChilkatTask; safecall;
    function CreateDir(const path: WideString): Integer; safecall;
    function CreateDirAsync(const path: WideString): IChilkatTask; safecall;
    procedure Disconnect; safecall;
    function DownloadFile(const handle: WideString; const toFilename: WideString): Integer; safecall;
    function DownloadFileAsync(const handle: WideString; const toFilename: WideString): IChilkatTask; safecall;
    function DownloadFileByName(const remoteFilePath: WideString; const localFilePath: WideString): Integer; safecall;
    function DownloadFileByNameAsync(const remoteFilePath: WideString; 
                                     const localFilePath: WideString): IChilkatTask; safecall;
    function Eof(const handle: WideString): Integer; safecall;
    function GetFileCreateDt(const pathOrHandle: WideString; bFollowLinks: Integer; 
                             bIsHandle: Integer): ICkDateTime; safecall;
    function GetFileCreateDtAsync(const pathOrHandle: WideString; bFollowLinks: Integer; 
                                  bIsHandle: Integer): IChilkatTask; safecall;
    function GetFileCreateTime(const pathOrHandle: WideString; bFollowLinks: Integer; 
                               bIsHandle: Integer): TDateTime; safecall;
    function GetFileCreateTimeStr(const pathOrHandle: WideString; bFollowLinks: Integer; 
                                  bIsHandle: Integer): WideString; safecall;
    function GetFileCreateTimeStrAsync(const pathOrHandle: WideString; bFollowLinks: Integer; 
                                       bIsHandle: Integer): IChilkatTask; safecall;
    function GetFileGroup(const pathOrHandle: WideString; bFollowLinks: Integer; bIsHandle: Integer): WideString; safecall;
    function GetFileGroupAsync(const pathOrHandle: WideString; bFollowLinks: Integer; 
                               bIsHandle: Integer): IChilkatTask; safecall;
    function GetFileLastAccess(const pathOrHandle: WideString; bFollowLinks: Integer; 
                               bIsHandle: Integer): TDateTime; safecall;
    function GetFileLastAccessDt(const pathOrHandle: WideString; bFollowLinks: Integer; 
                                 bIsHandle: Integer): ICkDateTime; safecall;
    function GetFileLastAccessDtAsync(const pathOrHandle: WideString; bFollowLinks: Integer; 
                                      bIsHandle: Integer): IChilkatTask; safecall;
    function GetFileLastAccessStr(const pathOrHandle: WideString; bFollowLinks: Integer; 
                                  bIsHandle: Integer): WideString; safecall;
    function GetFileLastAccessStrAsync(const pathOrHandle: WideString; bFollowLinks: Integer; 
                                       bIsHandle: Integer): IChilkatTask; safecall;
    function GetFileLastModified(const pathOrHandle: WideString; bFollowLinks: Integer; 
                                 bIsHandle: Integer): TDateTime; safecall;
    function GetFileLastModifiedDt(const pathOrHandle: WideString; bFollowLinks: Integer; 
                                   bIsHandle: Integer): ICkDateTime; safecall;
    function GetFileLastModifiedDtAsync(const pathOrHandle: WideString; bFollowLinks: Integer; 
                                        bIsHandle: Integer): IChilkatTask; safecall;
    function GetFileLastModifiedStr(const pathOrHandle: WideString; bFollowLinks: Integer; 
                                    bIsHandle: Integer): WideString; safecall;
    function GetFileLastModifiedStrAsync(const pathOrHandle: WideString; bFollowLinks: Integer; 
                                         bIsHandle: Integer): IChilkatTask; safecall;
    function GetFileOwner(const pathOrHandle: WideString; bFollowLinks: Integer; bIsHandle: Integer): WideString; safecall;
    function GetFileOwnerAsync(const pathOrHandle: WideString; bFollowLinks: Integer; 
                               bIsHandle: Integer): IChilkatTask; safecall;
    function GetFilePermissions(const pathOrHandle: WideString; bFollowLinks: Integer; 
                                bIsHandle: Integer): Integer; safecall;
    function GetFilePermissionsAsync(const pathOrHandle: WideString; bFollowLinks: Integer; 
                                     bIsHandle: Integer): IChilkatTask; safecall;
    function GetFileSize32(const pathOrHandle: WideString; bFollowLinks: Integer; bIsHandle: Integer): Integer; safecall;
    function GetFileSizeStr(const pathOrHandle: WideString; bFollowLinks: Integer; 
                            bIsHandle: Integer): WideString; safecall;
    function InitializeSftp: Integer; safecall;
    function InitializeSftpAsync: IChilkatTask; safecall;
    function LastReadFailed(const handle: WideString): Integer; safecall;
    function LastReadNumBytes(const handle: WideString): Integer; safecall;
    function OpenDir(const path: WideString): WideString; safecall;
    function OpenDirAsync(const path: WideString): IChilkatTask; safecall;
    function OpenFile(const remotePath: WideString; const Access: WideString; 
                      const createDisposition: WideString): WideString; safecall;
    function OpenFileAsync(const remotePath: WideString; const Access: WideString; 
                           const createDisposition: WideString): IChilkatTask; safecall;
    function ReadDir(const handle: WideString): IChilkatSFtpDir; safecall;
    function ReadDirAsync(const handle: WideString): IChilkatTask; safecall;
    function ReadFileBytes(const handle: WideString; numBytes: Integer): OleVariant; safecall;
    function ReadFileBytesAsync(const handle: WideString; numBytes: Integer): IChilkatTask; safecall;
    function ReadFileBytes32(const handle: WideString; offset: Integer; numBytes: Integer): OleVariant; safecall;
    function ReadFileBytes64s(const handle: WideString; const offset: WideString; numBytes: Integer): OleVariant; safecall;
    function ReadFileText(const handle: WideString; numBytes: Integer; const charset: WideString): WideString; safecall;
    function ReadFileTextAsync(const handle: WideString; numBytes: Integer; 
                               const charset: WideString): IChilkatTask; safecall;
    function ReadFileText32(const handle: WideString; offset: Integer; numBytes: Integer; 
                            const charset: WideString): WideString; safecall;
    function ReadFileText64s(const handle: WideString; const offset: WideString; numBytes: Integer; 
                             const charset: WideString): WideString; safecall;
    function RealPath(const OriginalPath: WideString; const composePath: WideString): WideString; safecall;
    function RealPathAsync(const OriginalPath: WideString; const composePath: WideString): IChilkatTask; safecall;
    function RemoveDir(const path: WideString): Integer; safecall;
    function RemoveDirAsync(const path: WideString): IChilkatTask; safecall;
    function RemoveFile(const filename: WideString): Integer; safecall;
    function RemoveFileAsync(const filename: WideString): IChilkatTask; safecall;
    function RenameFileOrDir(const oldPath: WideString; const newPath: WideString): Integer; safecall;
    function RenameFileOrDirAsync(const oldPath: WideString; const newPath: WideString): IChilkatTask; safecall;
    function ResumeDownloadFileByName(const remoteFilePath: WideString; 
                                      const localFilePath: WideString): Integer; safecall;
    function ResumeDownloadFileByNameAsync(const remoteFilePath: WideString; 
                                           const localFilePath: WideString): IChilkatTask; safecall;
    function ResumeUploadFileByName(const remoteFilePath: WideString; 
                                    const localFilePath: WideString): Integer; safecall;
    function ResumeUploadFileByNameAsync(const remoteFilePath: WideString; 
                                         const localFilePath: WideString): IChilkatTask; safecall;
    function SetCreateDt(const pathOrHandle: WideString; isHandle: Integer; 
                         const createDateTime: ICkDateTime): Integer; safecall;
    function SetCreateDtAsync(const pathOrHandle: WideString; isHandle: Integer; 
                              const createDateTime: ICkDateTime): IChilkatTask; safecall;
    function SetCreateTime(const pathOrHandle: WideString; isHandle: Integer; 
                           createDateTime: TDateTime): Integer; safecall;
    function SetCreateTimeStr(const pathOrHandle: WideString; bIsHandle: Integer; 
                              const dateTimeStr: WideString): Integer; safecall;
    function SetCreateTimeStrAsync(const pathOrHandle: WideString; bIsHandle: Integer; 
                                   const dateTimeStr: WideString): IChilkatTask; safecall;
    function SetLastAccessDt(const pathOrHandle: WideString; isHandle: Integer; 
                             const accessDateTime: ICkDateTime): Integer; safecall;
    function SetLastAccessDtAsync(const pathOrHandle: WideString; isHandle: Integer; 
                                  const accessDateTime: ICkDateTime): IChilkatTask; safecall;
    function SetLastAccessTime(const pathOrHandle: WideString; isHandle: Integer; 
                               accessDateTime: TDateTime): Integer; safecall;
    function SetLastAccessTimeStr(const pathOrHandle: WideString; bIsHandle: Integer; 
                                  const dateTimeStr: WideString): Integer; safecall;
    function SetLastAccessTimeStrAsync(const pathOrHandle: WideString; bIsHandle: Integer; 
                                       const dateTimeStr: WideString): IChilkatTask; safecall;
    function SetLastModifiedDt(const pathOrHandle: WideString; isHandle: Integer; 
                               const modifiedDateTime: ICkDateTime): Integer; safecall;
    function SetLastModifiedDtAsync(const pathOrHandle: WideString; isHandle: Integer; 
                                    const modifiedDateTime: ICkDateTime): IChilkatTask; safecall;
    function SetLastModifiedTime(const pathOrHandle: WideString; isHandle: Integer; 
                                 modifiedDateTime: TDateTime): Integer; safecall;
    function SetLastModifiedTimeStr(const pathOrHandle: WideString; bIsHandle: Integer; 
                                    const dateTimeStr: WideString): Integer; safecall;
    function SetLastModifiedTimeStrAsync(const pathOrHandle: WideString; bIsHandle: Integer; 
                                         const dateTimeStr: WideString): IChilkatTask; safecall;
    function SetOwnerAndGroup(const pathOrHandle: WideString; isHandle: Integer; 
                              const Owner: WideString; const Group: WideString): Integer; safecall;
    function SetOwnerAndGroupAsync(const pathOrHandle: WideString; isHandle: Integer; 
                                   const Owner: WideString; const Group: WideString): IChilkatTask; safecall;
    function SetPermissions(const pathOrHandle: WideString; isHandle: Integer; Permissions: Integer): Integer; safecall;
    function SetPermissionsAsync(const pathOrHandle: WideString; isHandle: Integer; 
                                 Permissions: Integer): IChilkatTask; safecall;
    function SyncTreeUpload(const localBaseDir: WideString; const remoteBaseDir: WideString; 
                            mode: Integer; bRecurse: Integer): Integer; safecall;
    function SyncTreeUploadAsync(const localBaseDir: WideString; const remoteBaseDir: WideString; 
                                 mode: Integer; bRecurse: Integer): IChilkatTask; safecall;
    function UnlockComponent(const unlockCode: WideString): Integer; safecall;
    function UploadFile(const handle: WideString; const fromLocalFilePath: WideString): Integer; safecall;
    function UploadFileAsync(const handle: WideString; const fromLocalFilePath: WideString): IChilkatTask; safecall;
    function UploadFileByName(const remoteFilePath: WideString; const localFilePath: WideString): Integer; safecall;
    function UploadFileByNameAsync(const remoteFilePath: WideString; const localFilePath: WideString): IChilkatTask; safecall;
    function WriteFileBytes(const handle: WideString; byteData: OleVariant): Integer; safecall;
    function WriteFileBytesAsync(const handle: WideString; byteData: OleVariant): IChilkatTask; safecall;
    function WriteFileBytes32(const handle: WideString; offset: Integer; data: OleVariant): Integer; safecall;
    function WriteFileBytes64s(const handle: WideString; const offset64: WideString; 
                               data: OleVariant): Integer; safecall;
    function WriteFileText(const handle: WideString; const charset: WideString; 
                           const TextData: WideString): Integer; safecall;
    function WriteFileTextAsync(const handle: WideString; const charset: WideString; 
                                const TextData: WideString): IChilkatTask; safecall;
    function WriteFileText32(const handle: WideString; offset32: Integer; 
                             const charset: WideString; const TextData: WideString): Integer; safecall;
    function WriteFileText64s(const handle: WideString; const offset64: WideString; 
                              const charset: WideString; const TextData: WideString): Integer; safecall;
    function SyncTreeDownload(const remoteRoot: WideString; const localRoot: WideString; 
                              mode: Integer; Recurse: Integer): Integer; safecall;
    function SyncTreeDownloadAsync(const remoteRoot: WideString; const localRoot: WideString; 
                                   mode: Integer; Recurse: Integer): IChilkatTask; safecall;
    function Get_PreferIpv6: Integer; safecall;
    procedure Set_PreferIpv6(pVal: Integer); safecall;
    function Get_PercentDoneScale: Integer; safecall;
    procedure Set_PercentDoneScale(pVal: Integer); safecall;
    function Get_BandwidthThrottleDown: Integer; safecall;
    procedure Set_BandwidthThrottleDown(pVal: Integer); safecall;
    function Get_BandwidthThrottleUp: Integer; safecall;
    procedure Set_BandwidthThrottleUp(pVal: Integer); safecall;
    function Get_SyncedFiles: WideString; safecall;
    procedure Set_SyncedFiles(const pVal: WideString); safecall;
    function Get_AuthFailReason: Integer; safecall;
    function Get_ReadDirMustMatch: WideString; safecall;
    procedure Set_ReadDirMustMatch(const pVal: WideString); safecall;
    function Get_ReadDirMustNotMatch: WideString; safecall;
    procedure Set_ReadDirMustNotMatch(const pVal: WideString); safecall;
    function ConnectThroughSsh(const sshConn: IChilkatSsh; const hostname: WideString; port: Integer): Integer; safecall;
    function ConnectThroughSshAsync(const sshConn: IChilkatSsh; const hostname: WideString; 
                                    port: Integer): IChilkatTask; safecall;
    function Get_EnableCompression: Integer; safecall;
    procedure Set_EnableCompression(pVal: Integer); safecall;
    function Get_AbortCurrent: Integer; safecall;
    procedure Set_AbortCurrent(pVal: Integer); safecall;
    function Get_SyncDirectives: WideString; safecall;
    procedure Set_SyncDirectives(const pVal: WideString); safecall;
    function UploadSb(const sb: IChilkatStringBuilder; const remoteFilePath: WideString; 
                      const charset: WideString; includeBom: Integer): Integer; safecall;
    function UploadSbAsync(const sb: IChilkatStringBuilder; const remoteFilePath: WideString; 
                           const charset: WideString; includeBom: Integer): IChilkatTask; safecall;
    function UploadBd(const binData: IChilkatBinData; const remoteFilePath: WideString): Integer; safecall;
    function UploadBdAsync(const binData: IChilkatBinData; const remoteFilePath: WideString): IChilkatTask; safecall;
    function DownloadBd(const remoteFilePath: WideString; const binData: IChilkatBinData): Integer; safecall;
    function DownloadBdAsync(const remoteFilePath: WideString; const binData: IChilkatBinData): IChilkatTask; safecall;
    function DownloadSb(const remoteFilePath: WideString; const charset: WideString; 
                        const sb: IChilkatStringBuilder): Integer; safecall;
    function DownloadSbAsync(const remoteFilePath: WideString; const charset: WideString; 
                             const sb: IChilkatStringBuilder): IChilkatTask; safecall;
    function SendIgnore: Integer; safecall;
    function SendIgnoreAsync: IChilkatTask; safecall;
    function FileExists(const remotePath: WideString; followLinks: Integer): Integer; safecall;
    function FileExistsAsync(const remotePath: WideString; followLinks: Integer): IChilkatTask; safecall;
    function Get_XferByteCount: Integer; safecall;
    function Get_ServerIdentifier: WideString; safecall;
    function AuthenticateSecPw(const login: IChilkatSecureString; 
                               const password: IChilkatSecureString): Integer; safecall;
    function AuthenticateSecPwAsync(const login: IChilkatSecureString; 
                                    const password: IChilkatSecureString): IChilkatTask; safecall;
    function AuthenticateSecPwPk(const username: IChilkatSecureString; 
                                 const password: IChilkatSecureString; 
                                 const privateKey: IChilkatSshKey): Integer; safecall;
    function AuthenticateSecPwPkAsync(const username: IChilkatSecureString; 
                                      const password: IChilkatSecureString; 
                                      const privateKey: IChilkatSshKey): IChilkatTask; safecall;
    function SymLink(const oldPath: WideString; const newPath: WideString): Integer; safecall;
    function SymLinkAsync(const oldPath: WideString; const newPath: WideString): IChilkatTask; safecall;
    function HardLink(const oldPath: WideString; const newPath: WideString): Integer; safecall;
    function HardLinkAsync(const oldPath: WideString; const newPath: WideString): IChilkatTask; safecall;
    function Fsync(const handle: WideString): Integer; safecall;
    function FsyncAsync(const handle: WideString): IChilkatTask; safecall;
    function ReadLink(const path: WideString): WideString; safecall;
    function ReadLinkAsync(const path: WideString): IChilkatTask; safecall;
    function Get_UncommonOptions: WideString; safecall;
    procedure Set_UncommonOptions(const pVal: WideString); safecall;
    function Get_SyncMustMatchDir: WideString; safecall;
    procedure Set_SyncMustMatchDir(const pVal: WideString); safecall;
    function Get_SyncMustNotMatchDir: WideString; safecall;
    procedure Set_SyncMustNotMatchDir(const pVal: WideString); safecall;
    function Get_SyncCreateAllLocalDirs: Integer; safecall;
    procedure Set_SyncCreateAllLocalDirs(pVal: Integer); safecall;
    function WriteFileBd(const handle: WideString; const bd: IChilkatBinData): Integer; safecall;
    function WriteFileBdAsync(const handle: WideString; const bd: IChilkatBinData): IChilkatTask; safecall;
    function ReadFileBd(const handle: WideString; numBytes: Integer; const bd: IChilkatBinData): Integer; safecall;
    function ReadFileBdAsync(const handle: WideString; numBytes: Integer; const bd: IChilkatBinData): IChilkatTask; safecall;
    function LastJsonData: IChilkatJsonObject; safecall;
    function LoadTaskCaller(const task: IChilkatTask): Integer; safecall;
    function Get_LastStatusCode: Integer; safecall;
    function Get_LastStatusMessage: WideString; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property LastMethodSuccess: Integer read Get_LastMethodSuccess write Set_LastMethodSuccess;
    property LastStringResult: WideString read Get_LastStringResult;
    property LastBinaryResult: OleVariant read Get_LastBinaryResult;
    property LastStringResultLen: Integer read Get_LastStringResultLen;
    property AccumulateBuffer: OleVariant read Get_AccumulateBuffer;
    property ClientIdentifier: WideString read Get_ClientIdentifier write Set_ClientIdentifier;
    property ClientIpAddress: WideString read Get_ClientIpAddress write Set_ClientIpAddress;
    property ConnectTimeoutMs: Integer read Get_ConnectTimeoutMs write Set_ConnectTimeoutMs;
    property DisconnectCode: Integer read Get_DisconnectCode;
    property DisconnectReason: WideString read Get_DisconnectReason;
    property EnableCache: Integer read Get_EnableCache write Set_EnableCache;
    property FilenameCharset: WideString read Get_FilenameCharset write Set_FilenameCharset;
    property ForceCipher: WideString read Get_ForceCipher write Set_ForceCipher;
    property ForceV3: Integer read Get_ForceV3 write Set_ForceV3;
    property HeartbeatMs: Integer read Get_HeartbeatMs write Set_HeartbeatMs;
    property HostKeyAlg: WideString read Get_HostKeyAlg write Set_HostKeyAlg;
    property HostKeyFingerprint: WideString read Get_HostKeyFingerprint;
    property HttpProxyAuthMethod: WideString read Get_HttpProxyAuthMethod write Set_HttpProxyAuthMethod;
    property HttpProxyDomain: WideString read Get_HttpProxyDomain write Set_HttpProxyDomain;
    property HttpProxyHostname: WideString read Get_HttpProxyHostname write Set_HttpProxyHostname;
    property HttpProxyPassword: WideString read Get_HttpProxyPassword write Set_HttpProxyPassword;
    property HttpProxyPort: Integer read Get_HttpProxyPort write Set_HttpProxyPort;
    property HttpProxyUsername: WideString read Get_HttpProxyUsername write Set_HttpProxyUsername;
    property IdleTimeoutMs: Integer read Get_IdleTimeoutMs write Set_IdleTimeoutMs;
    property IncludeDotDirs: Integer read Get_IncludeDotDirs write Set_IncludeDotDirs;
    property InitializeFailCode: Integer read Get_InitializeFailCode;
    property InitializeFailReason: WideString read Get_InitializeFailReason;
    property IsConnected: Integer read Get_IsConnected;
    property KeepSessionLog: Integer read Get_KeepSessionLog write Set_KeepSessionLog;
    property MaxPacketSize: Integer read Get_MaxPacketSize write Set_MaxPacketSize;
    property PasswordChangeRequested: Integer read Get_PasswordChangeRequested;
    property PreserveDate: Integer read Get_PreserveDate write Set_PreserveDate;
    property ProtocolVersion: Integer read Get_ProtocolVersion;
    property SessionLog: WideString read Get_SessionLog;
    property SoRcvBuf: Integer read Get_SoRcvBuf write Set_SoRcvBuf;
    property SoSndBuf: Integer read Get_SoSndBuf write Set_SoSndBuf;
    property SocksHostname: WideString read Get_SocksHostname write Set_SocksHostname;
    property SocksPassword: WideString read Get_SocksPassword write Set_SocksPassword;
    property SocksPort: Integer read Get_SocksPort write Set_SocksPort;
    property SocksUsername: WideString read Get_SocksUsername write Set_SocksUsername;
    property SocksVersion: Integer read Get_SocksVersion write Set_SocksVersion;
    property SyncMustMatch: WideString read Get_SyncMustMatch write Set_SyncMustMatch;
    property TcpNoDelay: Integer read Get_TcpNoDelay write Set_TcpNoDelay;
    property UploadChunkSize: Integer read Get_UploadChunkSize write Set_UploadChunkSize;
    property UtcMode: Integer read Get_UtcMode write Set_UtcMode;
    property SyncMustNotMatch: WideString read Get_SyncMustNotMatch write Set_SyncMustNotMatch;
    property PreferIpv6: Integer read Get_PreferIpv6 write Set_PreferIpv6;
    property PercentDoneScale: Integer read Get_PercentDoneScale write Set_PercentDoneScale;
    property BandwidthThrottleDown: Integer read Get_BandwidthThrottleDown write Set_BandwidthThrottleDown;
    property BandwidthThrottleUp: Integer read Get_BandwidthThrottleUp write Set_BandwidthThrottleUp;
    property SyncedFiles: WideString read Get_SyncedFiles write Set_SyncedFiles;
    property AuthFailReason: Integer read Get_AuthFailReason;
    property ReadDirMustMatch: WideString read Get_ReadDirMustMatch write Set_ReadDirMustMatch;
    property ReadDirMustNotMatch: WideString read Get_ReadDirMustNotMatch write Set_ReadDirMustNotMatch;
    property EnableCompression: Integer read Get_EnableCompression write Set_EnableCompression;
    property AbortCurrent: Integer read Get_AbortCurrent write Set_AbortCurrent;
    property SyncDirectives: WideString read Get_SyncDirectives write Set_SyncDirectives;
    property XferByteCount: Integer read Get_XferByteCount;
    property ServerIdentifier: WideString read Get_ServerIdentifier;
    property UncommonOptions: WideString read Get_UncommonOptions write Set_UncommonOptions;
    property SyncMustMatchDir: WideString read Get_SyncMustMatchDir write Set_SyncMustMatchDir;
    property SyncMustNotMatchDir: WideString read Get_SyncMustNotMatchDir write Set_SyncMustNotMatchDir;
    property SyncCreateAllLocalDirs: Integer read Get_SyncCreateAllLocalDirs write Set_SyncCreateAllLocalDirs;
    property LastStatusCode: Integer read Get_LastStatusCode;
    property LastStatusMessage: WideString read Get_LastStatusMessage;
  end;

// *********************************************************************//
// DispIntf:  IChilkatSFtpDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2701FB1F-7865-4CD0-8E1B-2BB97F701946}
// *********************************************************************//
  IChilkatSFtpDisp = dispinterface
    ['{2701FB1F-7865-4CD0-8E1B-2BB97F701946}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property LastMethodSuccess: Integer dispid 9;
    property LastStringResult: WideString readonly dispid 10;
    property LastBinaryResult: OleVariant readonly dispid 11;
    property LastStringResultLen: Integer readonly dispid 12;
    property AccumulateBuffer: OleVariant readonly dispid 100;
    property ClientIdentifier: WideString dispid 101;
    property ClientIpAddress: WideString dispid 102;
    property ConnectTimeoutMs: Integer dispid 103;
    property DisconnectCode: Integer readonly dispid 104;
    property DisconnectReason: WideString readonly dispid 105;
    property EnableCache: Integer dispid 106;
    property FilenameCharset: WideString dispid 107;
    property ForceCipher: WideString dispid 108;
    property ForceV3: Integer dispid 109;
    property HeartbeatMs: Integer dispid 110;
    property HostKeyAlg: WideString dispid 111;
    property HostKeyFingerprint: WideString readonly dispid 112;
    property HttpProxyAuthMethod: WideString dispid 113;
    property HttpProxyDomain: WideString dispid 114;
    property HttpProxyHostname: WideString dispid 115;
    property HttpProxyPassword: WideString dispid 116;
    property HttpProxyPort: Integer dispid 117;
    property HttpProxyUsername: WideString dispid 118;
    property IdleTimeoutMs: Integer dispid 119;
    property IncludeDotDirs: Integer dispid 120;
    property InitializeFailCode: Integer readonly dispid 121;
    property InitializeFailReason: WideString readonly dispid 122;
    property IsConnected: Integer readonly dispid 123;
    property KeepSessionLog: Integer dispid 124;
    property MaxPacketSize: Integer dispid 125;
    property PasswordChangeRequested: Integer readonly dispid 126;
    property PreserveDate: Integer dispid 127;
    property ProtocolVersion: Integer readonly dispid 128;
    property SessionLog: WideString readonly dispid 129;
    property SoRcvBuf: Integer dispid 130;
    property SoSndBuf: Integer dispid 131;
    property SocksHostname: WideString dispid 132;
    property SocksPassword: WideString dispid 133;
    property SocksPort: Integer dispid 134;
    property SocksUsername: WideString dispid 135;
    property SocksVersion: Integer dispid 136;
    property SyncMustMatch: WideString dispid 137;
    property TcpNoDelay: Integer dispid 138;
    property UploadChunkSize: Integer dispid 139;
    property UtcMode: Integer dispid 140;
    property SyncMustNotMatch: WideString dispid 141;
    function AccumulateBytes(const handle: WideString; maxBytes: Integer): Integer; dispid 142;
    function AccumulateBytesAsync(const handle: WideString; maxBytes: Integer): IChilkatTask; dispid 642;
    function Add64(const n1: WideString; const n2: WideString): WideString; dispid 143;
    function AuthenticatePk(const username: WideString; const privateKey: IChilkatSshKey): Integer; dispid 144;
    function AuthenticatePkAsync(const username: WideString; const privateKey: IChilkatSshKey): IChilkatTask; dispid 644;
    function AuthenticatePw(const login: WideString; const password: WideString): Integer; dispid 145;
    function AuthenticatePwAsync(const login: WideString; const password: WideString): IChilkatTask; dispid 645;
    function AuthenticatePwPk(const username: WideString; const password: WideString; 
                              const privateKey: IChilkatSshKey): Integer; dispid 146;
    function AuthenticatePwPkAsync(const username: WideString; const password: WideString; 
                                   const privateKey: IChilkatSshKey): IChilkatTask; dispid 646;
    procedure ClearAccumulateBuffer; dispid 147;
    procedure ClearCache; dispid 148;
    procedure ClearSessionLog; dispid 149;
    function CloseHandle(const handle: WideString): Integer; dispid 150;
    function CloseHandleAsync(const handle: WideString): IChilkatTask; dispid 650;
    function Connect(const domainName: WideString; port: Integer): Integer; dispid 151;
    function ConnectAsync(const domainName: WideString; port: Integer): IChilkatTask; dispid 651;
    function CopyFileAttr(const localFilename: WideString; const remoteFileName: WideString; 
                          isHandle: Integer): Integer; dispid 152;
    function CopyFileAttrAsync(const localFilename: WideString; const remoteFileName: WideString; 
                               isHandle: Integer): IChilkatTask; dispid 652;
    function CreateDir(const path: WideString): Integer; dispid 153;
    function CreateDirAsync(const path: WideString): IChilkatTask; dispid 653;
    procedure Disconnect; dispid 154;
    function DownloadFile(const handle: WideString; const toFilename: WideString): Integer; dispid 155;
    function DownloadFileAsync(const handle: WideString; const toFilename: WideString): IChilkatTask; dispid 655;
    function DownloadFileByName(const remoteFilePath: WideString; const localFilePath: WideString): Integer; dispid 156;
    function DownloadFileByNameAsync(const remoteFilePath: WideString; 
                                     const localFilePath: WideString): IChilkatTask; dispid 656;
    function Eof(const handle: WideString): Integer; dispid 157;
    function GetFileCreateDt(const pathOrHandle: WideString; bFollowLinks: Integer; 
                             bIsHandle: Integer): ICkDateTime; dispid 158;
    function GetFileCreateDtAsync(const pathOrHandle: WideString; bFollowLinks: Integer; 
                                  bIsHandle: Integer): IChilkatTask; dispid 658;
    function GetFileCreateTime(const pathOrHandle: WideString; bFollowLinks: Integer; 
                               bIsHandle: Integer): TDateTime; dispid 159;
    function GetFileCreateTimeStr(const pathOrHandle: WideString; bFollowLinks: Integer; 
                                  bIsHandle: Integer): WideString; dispid 160;
    function GetFileCreateTimeStrAsync(const pathOrHandle: WideString; bFollowLinks: Integer; 
                                       bIsHandle: Integer): IChilkatTask; dispid 660;
    function GetFileGroup(const pathOrHandle: WideString; bFollowLinks: Integer; bIsHandle: Integer): WideString; dispid 161;
    function GetFileGroupAsync(const pathOrHandle: WideString; bFollowLinks: Integer; 
                               bIsHandle: Integer): IChilkatTask; dispid 661;
    function GetFileLastAccess(const pathOrHandle: WideString; bFollowLinks: Integer; 
                               bIsHandle: Integer): TDateTime; dispid 162;
    function GetFileLastAccessDt(const pathOrHandle: WideString; bFollowLinks: Integer; 
                                 bIsHandle: Integer): ICkDateTime; dispid 163;
    function GetFileLastAccessDtAsync(const pathOrHandle: WideString; bFollowLinks: Integer; 
                                      bIsHandle: Integer): IChilkatTask; dispid 663;
    function GetFileLastAccessStr(const pathOrHandle: WideString; bFollowLinks: Integer; 
                                  bIsHandle: Integer): WideString; dispid 164;
    function GetFileLastAccessStrAsync(const pathOrHandle: WideString; bFollowLinks: Integer; 
                                       bIsHandle: Integer): IChilkatTask; dispid 664;
    function GetFileLastModified(const pathOrHandle: WideString; bFollowLinks: Integer; 
                                 bIsHandle: Integer): TDateTime; dispid 165;
    function GetFileLastModifiedDt(const pathOrHandle: WideString; bFollowLinks: Integer; 
                                   bIsHandle: Integer): ICkDateTime; dispid 166;
    function GetFileLastModifiedDtAsync(const pathOrHandle: WideString; bFollowLinks: Integer; 
                                        bIsHandle: Integer): IChilkatTask; dispid 666;
    function GetFileLastModifiedStr(const pathOrHandle: WideString; bFollowLinks: Integer; 
                                    bIsHandle: Integer): WideString; dispid 167;
    function GetFileLastModifiedStrAsync(const pathOrHandle: WideString; bFollowLinks: Integer; 
                                         bIsHandle: Integer): IChilkatTask; dispid 667;
    function GetFileOwner(const pathOrHandle: WideString; bFollowLinks: Integer; bIsHandle: Integer): WideString; dispid 168;
    function GetFileOwnerAsync(const pathOrHandle: WideString; bFollowLinks: Integer; 
                               bIsHandle: Integer): IChilkatTask; dispid 668;
    function GetFilePermissions(const pathOrHandle: WideString; bFollowLinks: Integer; 
                                bIsHandle: Integer): Integer; dispid 169;
    function GetFilePermissionsAsync(const pathOrHandle: WideString; bFollowLinks: Integer; 
                                     bIsHandle: Integer): IChilkatTask; dispid 669;
    function GetFileSize32(const pathOrHandle: WideString; bFollowLinks: Integer; bIsHandle: Integer): Integer; dispid 170;
    function GetFileSizeStr(const pathOrHandle: WideString; bFollowLinks: Integer; 
                            bIsHandle: Integer): WideString; dispid 171;
    function InitializeSftp: Integer; dispid 172;
    function InitializeSftpAsync: IChilkatTask; dispid 672;
    function LastReadFailed(const handle: WideString): Integer; dispid 173;
    function LastReadNumBytes(const handle: WideString): Integer; dispid 174;
    function OpenDir(const path: WideString): WideString; dispid 175;
    function OpenDirAsync(const path: WideString): IChilkatTask; dispid 675;
    function OpenFile(const remotePath: WideString; const Access: WideString; 
                      const createDisposition: WideString): WideString; dispid 176;
    function OpenFileAsync(const remotePath: WideString; const Access: WideString; 
                           const createDisposition: WideString): IChilkatTask; dispid 676;
    function ReadDir(const handle: WideString): IChilkatSFtpDir; dispid 177;
    function ReadDirAsync(const handle: WideString): IChilkatTask; dispid 677;
    function ReadFileBytes(const handle: WideString; numBytes: Integer): OleVariant; dispid 178;
    function ReadFileBytesAsync(const handle: WideString; numBytes: Integer): IChilkatTask; dispid 678;
    function ReadFileBytes32(const handle: WideString; offset: Integer; numBytes: Integer): OleVariant; dispid 179;
    function ReadFileBytes64s(const handle: WideString; const offset: WideString; numBytes: Integer): OleVariant; dispid 180;
    function ReadFileText(const handle: WideString; numBytes: Integer; const charset: WideString): WideString; dispid 181;
    function ReadFileTextAsync(const handle: WideString; numBytes: Integer; 
                               const charset: WideString): IChilkatTask; dispid 681;
    function ReadFileText32(const handle: WideString; offset: Integer; numBytes: Integer; 
                            const charset: WideString): WideString; dispid 182;
    function ReadFileText64s(const handle: WideString; const offset: WideString; numBytes: Integer; 
                             const charset: WideString): WideString; dispid 183;
    function RealPath(const OriginalPath: WideString; const composePath: WideString): WideString; dispid 184;
    function RealPathAsync(const OriginalPath: WideString; const composePath: WideString): IChilkatTask; dispid 684;
    function RemoveDir(const path: WideString): Integer; dispid 185;
    function RemoveDirAsync(const path: WideString): IChilkatTask; dispid 685;
    function RemoveFile(const filename: WideString): Integer; dispid 186;
    function RemoveFileAsync(const filename: WideString): IChilkatTask; dispid 686;
    function RenameFileOrDir(const oldPath: WideString; const newPath: WideString): Integer; dispid 187;
    function RenameFileOrDirAsync(const oldPath: WideString; const newPath: WideString): IChilkatTask; dispid 687;
    function ResumeDownloadFileByName(const remoteFilePath: WideString; 
                                      const localFilePath: WideString): Integer; dispid 188;
    function ResumeDownloadFileByNameAsync(const remoteFilePath: WideString; 
                                           const localFilePath: WideString): IChilkatTask; dispid 688;
    function ResumeUploadFileByName(const remoteFilePath: WideString; 
                                    const localFilePath: WideString): Integer; dispid 189;
    function ResumeUploadFileByNameAsync(const remoteFilePath: WideString; 
                                         const localFilePath: WideString): IChilkatTask; dispid 689;
    function SetCreateDt(const pathOrHandle: WideString; isHandle: Integer; 
                         const createDateTime: ICkDateTime): Integer; dispid 190;
    function SetCreateDtAsync(const pathOrHandle: WideString; isHandle: Integer; 
                              const createDateTime: ICkDateTime): IChilkatTask; dispid 690;
    function SetCreateTime(const pathOrHandle: WideString; isHandle: Integer; 
                           createDateTime: TDateTime): Integer; dispid 191;
    function SetCreateTimeStr(const pathOrHandle: WideString; bIsHandle: Integer; 
                              const dateTimeStr: WideString): Integer; dispid 192;
    function SetCreateTimeStrAsync(const pathOrHandle: WideString; bIsHandle: Integer; 
                                   const dateTimeStr: WideString): IChilkatTask; dispid 692;
    function SetLastAccessDt(const pathOrHandle: WideString; isHandle: Integer; 
                             const accessDateTime: ICkDateTime): Integer; dispid 193;
    function SetLastAccessDtAsync(const pathOrHandle: WideString; isHandle: Integer; 
                                  const accessDateTime: ICkDateTime): IChilkatTask; dispid 693;
    function SetLastAccessTime(const pathOrHandle: WideString; isHandle: Integer; 
                               accessDateTime: TDateTime): Integer; dispid 194;
    function SetLastAccessTimeStr(const pathOrHandle: WideString; bIsHandle: Integer; 
                                  const dateTimeStr: WideString): Integer; dispid 195;
    function SetLastAccessTimeStrAsync(const pathOrHandle: WideString; bIsHandle: Integer; 
                                       const dateTimeStr: WideString): IChilkatTask; dispid 695;
    function SetLastModifiedDt(const pathOrHandle: WideString; isHandle: Integer; 
                               const modifiedDateTime: ICkDateTime): Integer; dispid 196;
    function SetLastModifiedDtAsync(const pathOrHandle: WideString; isHandle: Integer; 
                                    const modifiedDateTime: ICkDateTime): IChilkatTask; dispid 696;
    function SetLastModifiedTime(const pathOrHandle: WideString; isHandle: Integer; 
                                 modifiedDateTime: TDateTime): Integer; dispid 197;
    function SetLastModifiedTimeStr(const pathOrHandle: WideString; bIsHandle: Integer; 
                                    const dateTimeStr: WideString): Integer; dispid 198;
    function SetLastModifiedTimeStrAsync(const pathOrHandle: WideString; bIsHandle: Integer; 
                                         const dateTimeStr: WideString): IChilkatTask; dispid 698;
    function SetOwnerAndGroup(const pathOrHandle: WideString; isHandle: Integer; 
                              const Owner: WideString; const Group: WideString): Integer; dispid 199;
    function SetOwnerAndGroupAsync(const pathOrHandle: WideString; isHandle: Integer; 
                                   const Owner: WideString; const Group: WideString): IChilkatTask; dispid 699;
    function SetPermissions(const pathOrHandle: WideString; isHandle: Integer; Permissions: Integer): Integer; dispid 200;
    function SetPermissionsAsync(const pathOrHandle: WideString; isHandle: Integer; 
                                 Permissions: Integer): IChilkatTask; dispid 700;
    function SyncTreeUpload(const localBaseDir: WideString; const remoteBaseDir: WideString; 
                            mode: Integer; bRecurse: Integer): Integer; dispid 201;
    function SyncTreeUploadAsync(const localBaseDir: WideString; const remoteBaseDir: WideString; 
                                 mode: Integer; bRecurse: Integer): IChilkatTask; dispid 701;
    function UnlockComponent(const unlockCode: WideString): Integer; dispid 202;
    function UploadFile(const handle: WideString; const fromLocalFilePath: WideString): Integer; dispid 203;
    function UploadFileAsync(const handle: WideString; const fromLocalFilePath: WideString): IChilkatTask; dispid 703;
    function UploadFileByName(const remoteFilePath: WideString; const localFilePath: WideString): Integer; dispid 204;
    function UploadFileByNameAsync(const remoteFilePath: WideString; const localFilePath: WideString): IChilkatTask; dispid 704;
    function WriteFileBytes(const handle: WideString; byteData: OleVariant): Integer; dispid 205;
    function WriteFileBytesAsync(const handle: WideString; byteData: OleVariant): IChilkatTask; dispid 705;
    function WriteFileBytes32(const handle: WideString; offset: Integer; data: OleVariant): Integer; dispid 206;
    function WriteFileBytes64s(const handle: WideString; const offset64: WideString; 
                               data: OleVariant): Integer; dispid 207;
    function WriteFileText(const handle: WideString; const charset: WideString; 
                           const TextData: WideString): Integer; dispid 208;
    function WriteFileTextAsync(const handle: WideString; const charset: WideString; 
                                const TextData: WideString): IChilkatTask; dispid 708;
    function WriteFileText32(const handle: WideString; offset32: Integer; 
                             const charset: WideString; const TextData: WideString): Integer; dispid 209;
    function WriteFileText64s(const handle: WideString; const offset64: WideString; 
                              const charset: WideString; const TextData: WideString): Integer; dispid 210;
    function SyncTreeDownload(const remoteRoot: WideString; const localRoot: WideString; 
                              mode: Integer; Recurse: Integer): Integer; dispid 211;
    function SyncTreeDownloadAsync(const remoteRoot: WideString; const localRoot: WideString; 
                                   mode: Integer; Recurse: Integer): IChilkatTask; dispid 711;
    property PreferIpv6: Integer dispid 212;
    property PercentDoneScale: Integer dispid 213;
    property BandwidthThrottleDown: Integer dispid 214;
    property BandwidthThrottleUp: Integer dispid 215;
    property SyncedFiles: WideString dispid 216;
    property AuthFailReason: Integer readonly dispid 217;
    property ReadDirMustMatch: WideString dispid 218;
    property ReadDirMustNotMatch: WideString dispid 219;
    function ConnectThroughSsh(const sshConn: IChilkatSsh; const hostname: WideString; port: Integer): Integer; dispid 220;
    function ConnectThroughSshAsync(const sshConn: IChilkatSsh; const hostname: WideString; 
                                    port: Integer): IChilkatTask; dispid 720;
    property EnableCompression: Integer dispid 221;
    property AbortCurrent: Integer dispid 222;
    property SyncDirectives: WideString dispid 223;
    function UploadSb(const sb: IChilkatStringBuilder; const remoteFilePath: WideString; 
                      const charset: WideString; includeBom: Integer): Integer; dispid 224;
    function UploadSbAsync(const sb: IChilkatStringBuilder; const remoteFilePath: WideString; 
                           const charset: WideString; includeBom: Integer): IChilkatTask; dispid 724;
    function UploadBd(const binData: IChilkatBinData; const remoteFilePath: WideString): Integer; dispid 225;
    function UploadBdAsync(const binData: IChilkatBinData; const remoteFilePath: WideString): IChilkatTask; dispid 725;
    function DownloadBd(const remoteFilePath: WideString; const binData: IChilkatBinData): Integer; dispid 226;
    function DownloadBdAsync(const remoteFilePath: WideString; const binData: IChilkatBinData): IChilkatTask; dispid 726;
    function DownloadSb(const remoteFilePath: WideString; const charset: WideString; 
                        const sb: IChilkatStringBuilder): Integer; dispid 227;
    function DownloadSbAsync(const remoteFilePath: WideString; const charset: WideString; 
                             const sb: IChilkatStringBuilder): IChilkatTask; dispid 727;
    function SendIgnore: Integer; dispid 228;
    function SendIgnoreAsync: IChilkatTask; dispid 728;
    function FileExists(const remotePath: WideString; followLinks: Integer): Integer; dispid 230;
    function FileExistsAsync(const remotePath: WideString; followLinks: Integer): IChilkatTask; dispid 730;
    property XferByteCount: Integer readonly dispid 231;
    property ServerIdentifier: WideString readonly dispid 233;
    function AuthenticateSecPw(const login: IChilkatSecureString; 
                               const password: IChilkatSecureString): Integer; dispid 234;
    function AuthenticateSecPwAsync(const login: IChilkatSecureString; 
                                    const password: IChilkatSecureString): IChilkatTask; dispid 734;
    function AuthenticateSecPwPk(const username: IChilkatSecureString; 
                                 const password: IChilkatSecureString; 
                                 const privateKey: IChilkatSshKey): Integer; dispid 235;
    function AuthenticateSecPwPkAsync(const username: IChilkatSecureString; 
                                      const password: IChilkatSecureString; 
                                      const privateKey: IChilkatSshKey): IChilkatTask; dispid 735;
    function SymLink(const oldPath: WideString; const newPath: WideString): Integer; dispid 237;
    function SymLinkAsync(const oldPath: WideString; const newPath: WideString): IChilkatTask; dispid 737;
    function HardLink(const oldPath: WideString; const newPath: WideString): Integer; dispid 238;
    function HardLinkAsync(const oldPath: WideString; const newPath: WideString): IChilkatTask; dispid 738;
    function Fsync(const handle: WideString): Integer; dispid 239;
    function FsyncAsync(const handle: WideString): IChilkatTask; dispid 739;
    function ReadLink(const path: WideString): WideString; dispid 240;
    function ReadLinkAsync(const path: WideString): IChilkatTask; dispid 740;
    property UncommonOptions: WideString dispid 241;
    property SyncMustMatchDir: WideString dispid 242;
    property SyncMustNotMatchDir: WideString dispid 243;
    property SyncCreateAllLocalDirs: Integer dispid 244;
    function WriteFileBd(const handle: WideString; const bd: IChilkatBinData): Integer; dispid 245;
    function WriteFileBdAsync(const handle: WideString; const bd: IChilkatBinData): IChilkatTask; dispid 745;
    function ReadFileBd(const handle: WideString; numBytes: Integer; const bd: IChilkatBinData): Integer; dispid 246;
    function ReadFileBdAsync(const handle: WideString; numBytes: Integer; const bd: IChilkatBinData): IChilkatTask; dispid 746;
    function LastJsonData: IChilkatJsonObject; dispid 247;
    function LoadTaskCaller(const task: IChilkatTask): Integer; dispid 248;
    property LastStatusCode: Integer readonly dispid 250;
    property LastStatusMessage: WideString readonly dispid 251;
  end;

// *********************************************************************//
// Interface: IChilkatSFtpDir
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {38C0D3A8-6FB8-42B1-BDC0-077177D72323}
// *********************************************************************//
  IChilkatSFtpDir = interface(IDispatch)
    ['{38C0D3A8-6FB8-42B1-BDC0-077177D72323}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastMethodSuccess: Integer; safecall;
    procedure Set_LastMethodSuccess(pVal: Integer); safecall;
    function Get_LastStringResult: WideString; safecall;
    function Get_LastBinaryResult: OleVariant; safecall;
    function Get_LastStringResultLen: Integer; safecall;
    function Get_OriginalPath: WideString; safecall;
    function Get_NumFilesAndDirs: Integer; safecall;
    function GetFilename(index: Integer): WideString; safecall;
    function GetFileObject(index: Integer): IChilkatSFtpFile; safecall;
    function LoadTaskResult(const task: IChilkatTask): Integer; safecall;
    procedure Sort(const field: WideString; ascending: Integer); safecall;
    property LastMethodSuccess: Integer read Get_LastMethodSuccess write Set_LastMethodSuccess;
    property LastStringResult: WideString read Get_LastStringResult;
    property LastBinaryResult: OleVariant read Get_LastBinaryResult;
    property LastStringResultLen: Integer read Get_LastStringResultLen;
    property OriginalPath: WideString read Get_OriginalPath;
    property NumFilesAndDirs: Integer read Get_NumFilesAndDirs;
  end;

// *********************************************************************//
// DispIntf:  IChilkatSFtpDirDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {38C0D3A8-6FB8-42B1-BDC0-077177D72323}
// *********************************************************************//
  IChilkatSFtpDirDisp = dispinterface
    ['{38C0D3A8-6FB8-42B1-BDC0-077177D72323}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastMethodSuccess: Integer dispid 9;
    property LastStringResult: WideString readonly dispid 10;
    property LastBinaryResult: OleVariant readonly dispid 11;
    property LastStringResultLen: Integer readonly dispid 12;
    property OriginalPath: WideString readonly dispid 100;
    property NumFilesAndDirs: Integer readonly dispid 101;
    function GetFilename(index: Integer): WideString; dispid 102;
    function GetFileObject(index: Integer): IChilkatSFtpFile; dispid 105;
    function LoadTaskResult(const task: IChilkatTask): Integer; dispid 106;
    procedure Sort(const field: WideString; ascending: Integer); dispid 107;
  end;

// *********************************************************************//
// Interface: IChilkatSFtpFile
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {62E25622-219C-4569-97FA-89594674076A}
// *********************************************************************//
  IChilkatSFtpFile = interface(IDispatch)
    ['{62E25622-219C-4569-97FA-89594674076A}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastMethodSuccess: Integer; safecall;
    procedure Set_LastMethodSuccess(pVal: Integer); safecall;
    function Get_LastStringResult: WideString; safecall;
    function Get_LastBinaryResult: OleVariant; safecall;
    function Get_LastStringResultLen: Integer; safecall;
    function Get_createTime: TDateTime; safecall;
    function Get_CreateTimeStr: WideString; safecall;
    function Get_FileType: WideString; safecall;
    function Get_filename: WideString; safecall;
    function Get_Gid: Integer; safecall;
    function Get_Group: WideString; safecall;
    function Get_IsAppendOnly: Integer; safecall;
    function Get_IsArchive: Integer; safecall;
    function Get_IsCaseInsensitive: Integer; safecall;
    function Get_IsCompressed: Integer; safecall;
    function Get_isDirectory: Integer; safecall;
    function Get_IsEncrypted: Integer; safecall;
    function Get_IsHidden: Integer; safecall;
    function Get_IsImmutable: Integer; safecall;
    function Get_IsReadOnly: Integer; safecall;
    function Get_IsRegular: Integer; safecall;
    function Get_IsSparse: Integer; safecall;
    function Get_IsSymLink: Integer; safecall;
    function Get_IsSync: Integer; safecall;
    function Get_IsSystem: Integer; safecall;
    function Get_lastAccessTime: TDateTime; safecall;
    function Get_LastAccessTimeStr: WideString; safecall;
    function Get_LastModifiedTime: TDateTime; safecall;
    function Get_LastModifiedTimeStr: WideString; safecall;
    function Get_Owner: WideString; safecall;
    function Get_Permissions: Integer; safecall;
    function Get_Size32: Integer; safecall;
    function Get_SizeStr: WideString; safecall;
    function Get_Uid: Integer; safecall;
    function GetLastAccessDt: ICkDateTime; safecall;
    function GetLastModifiedDt: ICkDateTime; safecall;
    function GetCreateDt: ICkDateTime; safecall;
    property LastMethodSuccess: Integer read Get_LastMethodSuccess write Set_LastMethodSuccess;
    property LastStringResult: WideString read Get_LastStringResult;
    property LastBinaryResult: OleVariant read Get_LastBinaryResult;
    property LastStringResultLen: Integer read Get_LastStringResultLen;
    property createTime: TDateTime read Get_createTime;
    property CreateTimeStr: WideString read Get_CreateTimeStr;
    property FileType: WideString read Get_FileType;
    property filename: WideString read Get_filename;
    property Gid: Integer read Get_Gid;
    property Group: WideString read Get_Group;
    property IsAppendOnly: Integer read Get_IsAppendOnly;
    property IsArchive: Integer read Get_IsArchive;
    property IsCaseInsensitive: Integer read Get_IsCaseInsensitive;
    property IsCompressed: Integer read Get_IsCompressed;
    property isDirectory: Integer read Get_isDirectory;
    property IsEncrypted: Integer read Get_IsEncrypted;
    property IsHidden: Integer read Get_IsHidden;
    property IsImmutable: Integer read Get_IsImmutable;
    property IsReadOnly: Integer read Get_IsReadOnly;
    property IsRegular: Integer read Get_IsRegular;
    property IsSparse: Integer read Get_IsSparse;
    property IsSymLink: Integer read Get_IsSymLink;
    property IsSync: Integer read Get_IsSync;
    property IsSystem: Integer read Get_IsSystem;
    property lastAccessTime: TDateTime read Get_lastAccessTime;
    property LastAccessTimeStr: WideString read Get_LastAccessTimeStr;
    property LastModifiedTime: TDateTime read Get_LastModifiedTime;
    property LastModifiedTimeStr: WideString read Get_LastModifiedTimeStr;
    property Owner: WideString read Get_Owner;
    property Permissions: Integer read Get_Permissions;
    property Size32: Integer read Get_Size32;
    property SizeStr: WideString read Get_SizeStr;
    property Uid: Integer read Get_Uid;
  end;

// *********************************************************************//
// DispIntf:  IChilkatSFtpFileDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {62E25622-219C-4569-97FA-89594674076A}
// *********************************************************************//
  IChilkatSFtpFileDisp = dispinterface
    ['{62E25622-219C-4569-97FA-89594674076A}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastMethodSuccess: Integer dispid 9;
    property LastStringResult: WideString readonly dispid 10;
    property LastBinaryResult: OleVariant readonly dispid 11;
    property LastStringResultLen: Integer readonly dispid 12;
    property createTime: TDateTime readonly dispid 100;
    property CreateTimeStr: WideString readonly dispid 101;
    property FileType: WideString readonly dispid 102;
    property filename: WideString readonly dispid 103;
    property Gid: Integer readonly dispid 104;
    property Group: WideString readonly dispid 105;
    property IsAppendOnly: Integer readonly dispid 106;
    property IsArchive: Integer readonly dispid 107;
    property IsCaseInsensitive: Integer readonly dispid 108;
    property IsCompressed: Integer readonly dispid 109;
    property isDirectory: Integer readonly dispid 110;
    property IsEncrypted: Integer readonly dispid 111;
    property IsHidden: Integer readonly dispid 112;
    property IsImmutable: Integer readonly dispid 113;
    property IsReadOnly: Integer readonly dispid 114;
    property IsRegular: Integer readonly dispid 115;
    property IsSparse: Integer readonly dispid 116;
    property IsSymLink: Integer readonly dispid 117;
    property IsSync: Integer readonly dispid 118;
    property IsSystem: Integer readonly dispid 119;
    property lastAccessTime: TDateTime readonly dispid 120;
    property LastAccessTimeStr: WideString readonly dispid 121;
    property LastModifiedTime: TDateTime readonly dispid 122;
    property LastModifiedTimeStr: WideString readonly dispid 123;
    property Owner: WideString readonly dispid 124;
    property Permissions: Integer readonly dispid 125;
    property Size32: Integer readonly dispid 126;
    property SizeStr: WideString readonly dispid 127;
    property Uid: Integer readonly dispid 128;
    function GetLastAccessDt: ICkDateTime; dispid 129;
    function GetLastModifiedDt: ICkDateTime; dispid 130;
    function GetCreateDt: ICkDateTime; dispid 133;
  end;

// *********************************************************************//
// Interface: IChilkatScMinidriver
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {472C650D-C892-415C-AA6F-B0B82DEEBCFF}
// *********************************************************************//
  IChilkatScMinidriver = interface(IDispatch)
    ['{472C650D-C892-415C-AA6F-B0B82DEEBCFF}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_LastMethodSuccess: Integer; safecall;
    procedure Set_LastMethodSuccess(pVal: Integer); safecall;
    function Get_LastStringResult: WideString; safecall;
    function Get_LastBinaryResult: OleVariant; safecall;
    function Get_LastStringResultLen: Integer; safecall;
    function AcquireContext(const readerName: WideString): Integer; safecall;
    function Get_Atr: WideString; safecall;
    function Get_CardName: WideString; safecall;
    function DeleteContext: Integer; safecall;
    function EnumFiles(const dirName: WideString; const st: IChilkatStringTable): Integer; safecall;
    function ReadFile(const dirName: WideString; const filename: WideString; 
                      const bd: IChilkatBinData): Integer; safecall;
    function GetCardProperties(const json: IChilkatJsonObject): Integer; safecall;
    function PinAuthenticate(const pinId: WideString; const pin: WideString): Integer; safecall;
    function PinDeauthenticate(const pinId: WideString): Integer; safecall;
    function PinChange(const pinId: WideString; const currentPin: WideString; 
                       const newPin: WideString): Integer; safecall;
    function SignData(containerIndex: Integer; const keySpec: WideString; 
                      const hashDataAlg: WideString; const bdData: IChilkatBinData; 
                      const bdSignedData: IChilkatBinData): Integer; safecall;
    function GetContainerKeys(containerIndex: Integer; const sigKey: IPublicKey; 
                              const kexKey: IPublicKey): Integer; safecall;
    function GenerateKey(containerIndex: Integer; const keySpec: WideString; 
                         const KeyType: WideString; KeySize: Integer; const pinId: WideString): Integer; safecall;
    function ImportKey(containerIndex: Integer; const keySpec: WideString; 
                       const privKey: IPrivateKey; const pinId: WideString): Integer; safecall;
    function DeleteKeyContainer(containerIndex: Integer): Integer; safecall;
    function Get_RsaPaddingScheme: WideString; safecall;
    procedure Set_RsaPaddingScheme(const pVal: WideString); safecall;
    function Get_RsaPaddingHash: WideString; safecall;
    procedure Set_RsaPaddingHash(const pVal: WideString); safecall;
    function GetCspContainerMap(const json: IChilkatJsonObject): Integer; safecall;
    function Get_MaxContainers: Integer; safecall;
    function ListCerts(const certPart: WideString; const st: IChilkatStringTable): Integer; safecall;
    function ImportCert(const cert: IChilkatCert; containerIndex: Integer; 
                        const keySpec: WideString; const pinId: WideString): Integer; safecall;
    function Get_UncommonOptions: WideString; safecall;
    procedure Set_UncommonOptions(const pVal: WideString); safecall;
    function WriteFile(const dirName: WideString; const filename: WideString; 
                       const bd: IChilkatBinData): Integer; safecall;
    function GetCert(containerIndex: Integer; const keySpec: WideString; const cert: IChilkatCert): Integer; safecall;
    function FindCert(const certPart: WideString; const partValue: WideString; 
                      const cert: IChilkatCert): Integer; safecall;
    function PinAuthenticateHex(const pinId: WideString; const pin: WideString): Integer; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property LastMethodSuccess: Integer read Get_LastMethodSuccess write Set_LastMethodSuccess;
    property LastStringResult: WideString read Get_LastStringResult;
    property LastBinaryResult: OleVariant read Get_LastBinaryResult;
    property LastStringResultLen: Integer read Get_LastStringResultLen;
    property Atr: WideString read Get_Atr;
    property CardName: WideString read Get_CardName;
    property RsaPaddingScheme: WideString read Get_RsaPaddingScheme write Set_RsaPaddingScheme;
    property RsaPaddingHash: WideString read Get_RsaPaddingHash write Set_RsaPaddingHash;
    property MaxContainers: Integer read Get_MaxContainers;
    property UncommonOptions: WideString read Get_UncommonOptions write Set_UncommonOptions;
  end;

// *********************************************************************//
// DispIntf:  IChilkatScMinidriverDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {472C650D-C892-415C-AA6F-B0B82DEEBCFF}
// *********************************************************************//
  IChilkatScMinidriverDisp = dispinterface
    ['{472C650D-C892-415C-AA6F-B0B82DEEBCFF}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property LastMethodSuccess: Integer dispid 9;
    property LastStringResult: WideString readonly dispid 10;
    property LastBinaryResult: OleVariant readonly dispid 11;
    property LastStringResultLen: Integer readonly dispid 12;
    function AcquireContext(const readerName: WideString): Integer; dispid 103;
    property Atr: WideString readonly dispid 104;
    property CardName: WideString readonly dispid 105;
    function DeleteContext: Integer; dispid 106;
    function EnumFiles(const dirName: WideString; const st: IChilkatStringTable): Integer; dispid 107;
    function ReadFile(const dirName: WideString; const filename: WideString; 
                      const bd: IChilkatBinData): Integer; dispid 108;
    function GetCardProperties(const json: IChilkatJsonObject): Integer; dispid 110;
    function PinAuthenticate(const pinId: WideString; const pin: WideString): Integer; dispid 111;
    function PinDeauthenticate(const pinId: WideString): Integer; dispid 112;
    function PinChange(const pinId: WideString; const currentPin: WideString; 
                       const newPin: WideString): Integer; dispid 113;
    function SignData(containerIndex: Integer; const keySpec: WideString; 
                      const hashDataAlg: WideString; const bdData: IChilkatBinData; 
                      const bdSignedData: IChilkatBinData): Integer; dispid 114;
    function GetContainerKeys(containerIndex: Integer; const sigKey: IPublicKey; 
                              const kexKey: IPublicKey): Integer; dispid 115;
    function GenerateKey(containerIndex: Integer; const keySpec: WideString; 
                         const KeyType: WideString; KeySize: Integer; const pinId: WideString): Integer; dispid 116;
    function ImportKey(containerIndex: Integer; const keySpec: WideString; 
                       const privKey: IPrivateKey; const pinId: WideString): Integer; dispid 117;
    function DeleteKeyContainer(containerIndex: Integer): Integer; dispid 118;
    property RsaPaddingScheme: WideString dispid 119;
    property RsaPaddingHash: WideString dispid 120;
    function GetCspContainerMap(const json: IChilkatJsonObject): Integer; dispid 121;
    property MaxContainers: Integer readonly dispid 122;
    function ListCerts(const certPart: WideString; const st: IChilkatStringTable): Integer; dispid 123;
    function ImportCert(const cert: IChilkatCert; containerIndex: Integer; 
                        const keySpec: WideString; const pinId: WideString): Integer; dispid 124;
    property UncommonOptions: WideString dispid 125;
    function WriteFile(const dirName: WideString; const filename: WideString; 
                       const bd: IChilkatBinData): Integer; dispid 126;
    function GetCert(containerIndex: Integer; const keySpec: WideString; const cert: IChilkatCert): Integer; dispid 127;
    function FindCert(const certPart: WideString; const partValue: WideString; 
                      const cert: IChilkatCert): Integer; dispid 128;
    function PinAuthenticateHex(const pinId: WideString; const pin: WideString): Integer; dispid 129;
  end;

// *********************************************************************//
// Interface: IChilkatScp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {416E33A0-BD55-4CD8-936B-7EEAF8850D0F}
// *********************************************************************//
  IChilkatScp = interface(IDispatch)
    ['{416E33A0-BD55-4CD8-936B-7EEAF8850D0F}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_LastMethodSuccess: Integer; safecall;
    procedure Set_LastMethodSuccess(pVal: Integer); safecall;
    function Get_LastStringResult: WideString; safecall;
    function Get_LastBinaryResult: OleVariant; safecall;
    function Get_LastStringResultLen: Integer; safecall;
    function UseSsh(const sshConnection: IChilkatSsh): Integer; safecall;
    function UploadFile(const localPath: WideString; const remotePath: WideString): Integer; safecall;
    function UploadFileAsync(const localPath: WideString; const remotePath: WideString): IChilkatTask; safecall;
    function DownloadFile(const remotePath: WideString; const localPath: WideString): Integer; safecall;
    function DownloadFileAsync(const remotePath: WideString; const localPath: WideString): IChilkatTask; safecall;
    function Get_HeartbeatMs: Integer; safecall;
    procedure Set_HeartbeatMs(pVal: Integer); safecall;
    function SyncTreeUpload(const localBaseDir: WideString; const remoteBaseDir: WideString; 
                            mode: Integer; bRecurse: Integer): Integer; safecall;
    function SyncTreeUploadAsync(const localBaseDir: WideString; const remoteBaseDir: WideString; 
                                 mode: Integer; bRecurse: Integer): IChilkatTask; safecall;
    function SyncTreeDownload(const remoteRoot: WideString; const localRoot: WideString; 
                              mode: Integer; bRecurse: Integer): Integer; safecall;
    function SyncTreeDownloadAsync(const remoteRoot: WideString; const localRoot: WideString; 
                                   mode: Integer; bRecurse: Integer): IChilkatTask; safecall;
    function Get_PercentDoneScale: Integer; safecall;
    procedure Set_PercentDoneScale(pVal: Integer); safecall;
    function Get_SyncMustMatch: WideString; safecall;
    procedure Set_SyncMustMatch(const pVal: WideString); safecall;
    function Get_SyncMustNotMatch: WideString; safecall;
    procedure Set_SyncMustNotMatch(const pVal: WideString); safecall;
    function Get_SyncedFiles: WideString; safecall;
    procedure Set_SyncedFiles(const pVal: WideString); safecall;
    function UploadString(const remotePath: WideString; const TextData: WideString; 
                          const charset: WideString): Integer; safecall;
    function UploadStringAsync(const remotePath: WideString; const TextData: WideString; 
                               const charset: WideString): IChilkatTask; safecall;
    function UploadBinaryEncoded(const remotePath: WideString; const encodedData: WideString; 
                                 const encoding: WideString): Integer; safecall;
    function UploadBinaryEncodedAsync(const remotePath: WideString; const encodedData: WideString; 
                                      const encoding: WideString): IChilkatTask; safecall;
    function DownloadBinaryEncoded(const remotePath: WideString; const encoding: WideString): WideString; safecall;
    function DownloadBinaryEncodedAsync(const remotePath: WideString; const encoding: WideString): IChilkatTask; safecall;
    function DownloadString(const remotePath: WideString; const charset: WideString): WideString; safecall;
    function DownloadStringAsync(const remotePath: WideString; const charset: WideString): IChilkatTask; safecall;
    function DownloadBinary(const remotePath: WideString): OleVariant; safecall;
    function DownloadBinaryAsync(const remotePath: WideString): IChilkatTask; safecall;
    function UploadBinary(const remotePath: WideString; binData: OleVariant): Integer; safecall;
    function UploadBinaryAsync(const remotePath: WideString; binData: OleVariant): IChilkatTask; safecall;
    function Get_AbortCurrent: Integer; safecall;
    procedure Set_AbortCurrent(pVal: Integer); safecall;
    function Get_SyncMustMatchDir: WideString; safecall;
    procedure Set_SyncMustMatchDir(const pVal: WideString); safecall;
    function Get_SyncMustNotMatchDir: WideString; safecall;
    procedure Set_SyncMustNotMatchDir(const pVal: WideString); safecall;
    function DownloadBd(const remotePath: WideString; const bd: IChilkatBinData): Integer; safecall;
    function DownloadBdAsync(const remotePath: WideString; const bd: IChilkatBinData): IChilkatTask; safecall;
    function UploadBd(const remotePath: WideString; const bd: IChilkatBinData): Integer; safecall;
    function UploadBdAsync(const remotePath: WideString; const bd: IChilkatBinData): IChilkatTask; safecall;
    function Get_UnixPermOverride: WideString; safecall;
    procedure Set_UnixPermOverride(const pVal: WideString); safecall;
    function Get_UncommonOptions: WideString; safecall;
    procedure Set_UncommonOptions(const pVal: WideString); safecall;
    function Get_SendEnv: WideString; safecall;
    procedure Set_SendEnv(const pVal: WideString); safecall;
    function LoadTaskCaller(const task: IChilkatTask): Integer; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property LastMethodSuccess: Integer read Get_LastMethodSuccess write Set_LastMethodSuccess;
    property LastStringResult: WideString read Get_LastStringResult;
    property LastBinaryResult: OleVariant read Get_LastBinaryResult;
    property LastStringResultLen: Integer read Get_LastStringResultLen;
    property HeartbeatMs: Integer read Get_HeartbeatMs write Set_HeartbeatMs;
    property PercentDoneScale: Integer read Get_PercentDoneScale write Set_PercentDoneScale;
    property SyncMustMatch: WideString read Get_SyncMustMatch write Set_SyncMustMatch;
    property SyncMustNotMatch: WideString read Get_SyncMustNotMatch write Set_SyncMustNotMatch;
    property SyncedFiles: WideString read Get_SyncedFiles write Set_SyncedFiles;
    property AbortCurrent: Integer read Get_AbortCurrent write Set_AbortCurrent;
    property SyncMustMatchDir: WideString read Get_SyncMustMatchDir write Set_SyncMustMatchDir;
    property SyncMustNotMatchDir: WideString read Get_SyncMustNotMatchDir write Set_SyncMustNotMatchDir;
    property UnixPermOverride: WideString read Get_UnixPermOverride write Set_UnixPermOverride;
    property UncommonOptions: WideString read Get_UncommonOptions write Set_UncommonOptions;
    property SendEnv: WideString read Get_SendEnv write Set_SendEnv;
  end;

// *********************************************************************//
// DispIntf:  IChilkatScpDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {416E33A0-BD55-4CD8-936B-7EEAF8850D0F}
// *********************************************************************//
  IChilkatScpDisp = dispinterface
    ['{416E33A0-BD55-4CD8-936B-7EEAF8850D0F}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property LastMethodSuccess: Integer dispid 9;
    property LastStringResult: WideString readonly dispid 10;
    property LastBinaryResult: OleVariant readonly dispid 11;
    property LastStringResultLen: Integer readonly dispid 12;
    function UseSsh(const sshConnection: IChilkatSsh): Integer; dispid 100;
    function UploadFile(const localPath: WideString; const remotePath: WideString): Integer; dispid 101;
    function UploadFileAsync(const localPath: WideString; const remotePath: WideString): IChilkatTask; dispid 601;
    function DownloadFile(const remotePath: WideString; const localPath: WideString): Integer; dispid 102;
    function DownloadFileAsync(const remotePath: WideString; const localPath: WideString): IChilkatTask; dispid 602;
    property HeartbeatMs: Integer dispid 103;
    function SyncTreeUpload(const localBaseDir: WideString; const remoteBaseDir: WideString; 
                            mode: Integer; bRecurse: Integer): Integer; dispid 105;
    function SyncTreeUploadAsync(const localBaseDir: WideString; const remoteBaseDir: WideString; 
                                 mode: Integer; bRecurse: Integer): IChilkatTask; dispid 605;
    function SyncTreeDownload(const remoteRoot: WideString; const localRoot: WideString; 
                              mode: Integer; bRecurse: Integer): Integer; dispid 106;
    function SyncTreeDownloadAsync(const remoteRoot: WideString; const localRoot: WideString; 
                                   mode: Integer; bRecurse: Integer): IChilkatTask; dispid 606;
    property PercentDoneScale: Integer dispid 107;
    property SyncMustMatch: WideString dispid 108;
    property SyncMustNotMatch: WideString dispid 109;
    property SyncedFiles: WideString dispid 110;
    function UploadString(const remotePath: WideString; const TextData: WideString; 
                          const charset: WideString): Integer; dispid 111;
    function UploadStringAsync(const remotePath: WideString; const TextData: WideString; 
                               const charset: WideString): IChilkatTask; dispid 611;
    function UploadBinaryEncoded(const remotePath: WideString; const encodedData: WideString; 
                                 const encoding: WideString): Integer; dispid 112;
    function UploadBinaryEncodedAsync(const remotePath: WideString; const encodedData: WideString; 
                                      const encoding: WideString): IChilkatTask; dispid 612;
    function DownloadBinaryEncoded(const remotePath: WideString; const encoding: WideString): WideString; dispid 113;
    function DownloadBinaryEncodedAsync(const remotePath: WideString; const encoding: WideString): IChilkatTask; dispid 613;
    function DownloadString(const remotePath: WideString; const charset: WideString): WideString; dispid 114;
    function DownloadStringAsync(const remotePath: WideString; const charset: WideString): IChilkatTask; dispid 614;
    function DownloadBinary(const remotePath: WideString): OleVariant; dispid 115;
    function DownloadBinaryAsync(const remotePath: WideString): IChilkatTask; dispid 615;
    function UploadBinary(const remotePath: WideString; binData: OleVariant): Integer; dispid 116;
    function UploadBinaryAsync(const remotePath: WideString; binData: OleVariant): IChilkatTask; dispid 616;
    property AbortCurrent: Integer dispid 118;
    property SyncMustMatchDir: WideString dispid 119;
    property SyncMustNotMatchDir: WideString dispid 120;
    function DownloadBd(const remotePath: WideString; const bd: IChilkatBinData): Integer; dispid 121;
    function DownloadBdAsync(const remotePath: WideString; const bd: IChilkatBinData): IChilkatTask; dispid 621;
    function UploadBd(const remotePath: WideString; const bd: IChilkatBinData): Integer; dispid 122;
    function UploadBdAsync(const remotePath: WideString; const bd: IChilkatBinData): IChilkatTask; dispid 622;
    property UnixPermOverride: WideString dispid 123;
    property UncommonOptions: WideString dispid 124;
    property SendEnv: WideString dispid 125;
    function LoadTaskCaller(const task: IChilkatTask): Integer; dispid 126;
  end;

// *********************************************************************//
// Interface: IChilkatServerSentEvent
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {E1DCA282-3782-4320-AEBE-B739755E6746}
// *********************************************************************//
  IChilkatServerSentEvent = interface(IDispatch)
    ['{E1DCA282-3782-4320-AEBE-B739755E6746}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastMethodSuccess: Integer; safecall;
    procedure Set_LastMethodSuccess(pVal: Integer); safecall;
    function Get_LastStringResult: WideString; safecall;
    function Get_LastBinaryResult: OleVariant; safecall;
    function Get_LastStringResultLen: Integer; safecall;
    function Get_EventName: WideString; safecall;
    function Get_data: WideString; safecall;
    function Get_LastEventId: WideString; safecall;
    function Get_Retry: Integer; safecall;
    function LoadEvent(const eventText: WideString): Integer; safecall;
    property LastMethodSuccess: Integer read Get_LastMethodSuccess write Set_LastMethodSuccess;
    property LastStringResult: WideString read Get_LastStringResult;
    property LastBinaryResult: OleVariant read Get_LastBinaryResult;
    property LastStringResultLen: Integer read Get_LastStringResultLen;
    property EventName: WideString read Get_EventName;
    property data: WideString read Get_data;
    property LastEventId: WideString read Get_LastEventId;
    property Retry: Integer read Get_Retry;
  end;

// *********************************************************************//
// DispIntf:  IChilkatServerSentEventDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {E1DCA282-3782-4320-AEBE-B739755E6746}
// *********************************************************************//
  IChilkatServerSentEventDisp = dispinterface
    ['{E1DCA282-3782-4320-AEBE-B739755E6746}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastMethodSuccess: Integer dispid 9;
    property LastStringResult: WideString readonly dispid 10;
    property LastBinaryResult: OleVariant readonly dispid 11;
    property LastStringResultLen: Integer readonly dispid 12;
    property EventName: WideString readonly dispid 100;
    property data: WideString readonly dispid 101;
    property LastEventId: WideString readonly dispid 102;
    property Retry: Integer readonly dispid 103;
    function LoadEvent(const eventText: WideString): Integer; dispid 104;
  end;

// *********************************************************************//
// Interface: IChilkatSpider
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {CB3E07ED-EBD4-4CEA-949F-53EDE8806F8F}
// *********************************************************************//
  IChilkatSpider = interface(IDispatch)
    ['{CB3E07ED-EBD4-4CEA-949F-53EDE8806F8F}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_LastMethodSuccess: Integer; safecall;
    procedure Set_LastMethodSuccess(pVal: Integer); safecall;
    function Get_LastStringResult: WideString; safecall;
    function Get_LastBinaryResult: OleVariant; safecall;
    function Get_LastStringResultLen: Integer; safecall;
    function Get_AvoidHttps: Integer; safecall;
    procedure Set_AvoidHttps(pVal: Integer); safecall;
    function Get_CacheDir: WideString; safecall;
    procedure Set_CacheDir(const pVal: WideString); safecall;
    function Get_ChopAtQuery: Integer; safecall;
    procedure Set_ChopAtQuery(pVal: Integer); safecall;
    function Get_ConnectTimeout: Integer; safecall;
    procedure Set_ConnectTimeout(pVal: Integer); safecall;
    function Get_domain: WideString; safecall;
    function Get_FetchFromCache: Integer; safecall;
    procedure Set_FetchFromCache(pVal: Integer); safecall;
    function Get_HeartbeatMs: Integer; safecall;
    procedure Set_HeartbeatMs(pVal: Integer); safecall;
    function Get_LastFromCache: Integer; safecall;
    function Get_LastHtml: WideString; safecall;
    function Get_LastHtmlDescription: WideString; safecall;
    function Get_LastHtmlKeywords: WideString; safecall;
    function Get_LastHtmlTitle: WideString; safecall;
    function Get_LastModDate: TDateTime; safecall;
    function Get_LastUrl: WideString; safecall;
    function Get_MaxResponseSize: Integer; safecall;
    procedure Set_MaxResponseSize(pVal: Integer); safecall;
    function Get_MaxUrlLen: Integer; safecall;
    procedure Set_MaxUrlLen(pVal: Integer); safecall;
    function Get_NumAvoidPatterns: Integer; safecall;
    function Get_NumFailed: Integer; safecall;
    function Get_NumOutboundLinks: Integer; safecall;
    function Get_NumSpidered: Integer; safecall;
    function Get_NumUnspidered: Integer; safecall;
    function Get_ProxyDomain: WideString; safecall;
    procedure Set_ProxyDomain(const pVal: WideString); safecall;
    function Get_ProxyLogin: WideString; safecall;
    procedure Set_ProxyLogin(const pVal: WideString); safecall;
    function Get_ProxyPassword: WideString; safecall;
    procedure Set_ProxyPassword(const pVal: WideString); safecall;
    function Get_ProxyPort: Integer; safecall;
    procedure Set_ProxyPort(pVal: Integer); safecall;
    function Get_ReadTimeout: Integer; safecall;
    procedure Set_ReadTimeout(pVal: Integer); safecall;
    function Get_UpdateCache: Integer; safecall;
    procedure Set_UpdateCache(pVal: Integer); safecall;
    function Get_UserAgent: WideString; safecall;
    procedure Set_UserAgent(const pVal: WideString); safecall;
    function Get_WindDownCount: Integer; safecall;
    procedure Set_WindDownCount(pVal: Integer); safecall;
    procedure AddAvoidOutboundLinkPattern(const pattern: WideString); safecall;
    procedure AddAvoidPattern(const pattern: WideString); safecall;
    procedure AddMustMatchPattern(const pattern: WideString); safecall;
    procedure AddUnspidered(const url: WideString); safecall;
    function CanonicalizeUrl(const url: WideString): WideString; safecall;
    procedure ClearFailedUrls; safecall;
    procedure ClearOutboundLinks; safecall;
    procedure ClearSpideredUrls; safecall;
    function CrawlNext: Integer; safecall;
    function CrawlNextAsync: IChilkatTask; safecall;
    function FetchRobotsText: WideString; safecall;
    function FetchRobotsTextAsync: IChilkatTask; safecall;
    function GetAvoidPattern(index: Integer): WideString; safecall;
    function GetBaseDomain(const domain: WideString): WideString; safecall;
    function GetFailedUrl(index: Integer): WideString; safecall;
    function GetOutboundLink(index: Integer): WideString; safecall;
    function GetSpideredUrl(index: Integer): WideString; safecall;
    function GetUnspideredUrl(index: Integer): WideString; safecall;
    function GetUrlDomain(const url: WideString): WideString; safecall;
    procedure Initialize(const domain: WideString); safecall;
    function RecrawlLast: Integer; safecall;
    function RecrawlLastAsync: IChilkatTask; safecall;
    procedure SkipUnspidered(index: Integer); safecall;
    procedure SleepMs(numMilliseconds: Integer); safecall;
    function Get_PreferIpv6: Integer; safecall;
    procedure Set_PreferIpv6(pVal: Integer); safecall;
    function Get_AbortCurrent: Integer; safecall;
    procedure Set_AbortCurrent(pVal: Integer); safecall;
    function LoadTaskCaller(const task: IChilkatTask): Integer; safecall;
    function Get_WasRedirected: Integer; safecall;
    function Get_FinalRedirectUrl: WideString; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property LastMethodSuccess: Integer read Get_LastMethodSuccess write Set_LastMethodSuccess;
    property LastStringResult: WideString read Get_LastStringResult;
    property LastBinaryResult: OleVariant read Get_LastBinaryResult;
    property LastStringResultLen: Integer read Get_LastStringResultLen;
    property AvoidHttps: Integer read Get_AvoidHttps write Set_AvoidHttps;
    property CacheDir: WideString read Get_CacheDir write Set_CacheDir;
    property ChopAtQuery: Integer read Get_ChopAtQuery write Set_ChopAtQuery;
    property ConnectTimeout: Integer read Get_ConnectTimeout write Set_ConnectTimeout;
    property domain: WideString read Get_domain;
    property FetchFromCache: Integer read Get_FetchFromCache write Set_FetchFromCache;
    property HeartbeatMs: Integer read Get_HeartbeatMs write Set_HeartbeatMs;
    property LastFromCache: Integer read Get_LastFromCache;
    property LastHtml: WideString read Get_LastHtml;
    property LastHtmlDescription: WideString read Get_LastHtmlDescription;
    property LastHtmlKeywords: WideString read Get_LastHtmlKeywords;
    property LastHtmlTitle: WideString read Get_LastHtmlTitle;
    property LastModDate: TDateTime read Get_LastModDate;
    property LastUrl: WideString read Get_LastUrl;
    property MaxResponseSize: Integer read Get_MaxResponseSize write Set_MaxResponseSize;
    property MaxUrlLen: Integer read Get_MaxUrlLen write Set_MaxUrlLen;
    property NumAvoidPatterns: Integer read Get_NumAvoidPatterns;
    property NumFailed: Integer read Get_NumFailed;
    property NumOutboundLinks: Integer read Get_NumOutboundLinks;
    property NumSpidered: Integer read Get_NumSpidered;
    property NumUnspidered: Integer read Get_NumUnspidered;
    property ProxyDomain: WideString read Get_ProxyDomain write Set_ProxyDomain;
    property ProxyLogin: WideString read Get_ProxyLogin write Set_ProxyLogin;
    property ProxyPassword: WideString read Get_ProxyPassword write Set_ProxyPassword;
    property ProxyPort: Integer read Get_ProxyPort write Set_ProxyPort;
    property ReadTimeout: Integer read Get_ReadTimeout write Set_ReadTimeout;
    property UpdateCache: Integer read Get_UpdateCache write Set_UpdateCache;
    property UserAgent: WideString read Get_UserAgent write Set_UserAgent;
    property WindDownCount: Integer read Get_WindDownCount write Set_WindDownCount;
    property PreferIpv6: Integer read Get_PreferIpv6 write Set_PreferIpv6;
    property AbortCurrent: Integer read Get_AbortCurrent write Set_AbortCurrent;
    property WasRedirected: Integer read Get_WasRedirected;
    property FinalRedirectUrl: WideString read Get_FinalRedirectUrl;
  end;

// *********************************************************************//
// DispIntf:  IChilkatSpiderDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {CB3E07ED-EBD4-4CEA-949F-53EDE8806F8F}
// *********************************************************************//
  IChilkatSpiderDisp = dispinterface
    ['{CB3E07ED-EBD4-4CEA-949F-53EDE8806F8F}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property LastMethodSuccess: Integer dispid 9;
    property LastStringResult: WideString readonly dispid 10;
    property LastBinaryResult: OleVariant readonly dispid 11;
    property LastStringResultLen: Integer readonly dispid 12;
    property AvoidHttps: Integer dispid 100;
    property CacheDir: WideString dispid 101;
    property ChopAtQuery: Integer dispid 102;
    property ConnectTimeout: Integer dispid 103;
    property domain: WideString readonly dispid 104;
    property FetchFromCache: Integer dispid 105;
    property HeartbeatMs: Integer dispid 106;
    property LastFromCache: Integer readonly dispid 107;
    property LastHtml: WideString readonly dispid 108;
    property LastHtmlDescription: WideString readonly dispid 109;
    property LastHtmlKeywords: WideString readonly dispid 110;
    property LastHtmlTitle: WideString readonly dispid 111;
    property LastModDate: TDateTime readonly dispid 112;
    property LastUrl: WideString readonly dispid 113;
    property MaxResponseSize: Integer dispid 114;
    property MaxUrlLen: Integer dispid 115;
    property NumAvoidPatterns: Integer readonly dispid 116;
    property NumFailed: Integer readonly dispid 117;
    property NumOutboundLinks: Integer readonly dispid 118;
    property NumSpidered: Integer readonly dispid 119;
    property NumUnspidered: Integer readonly dispid 120;
    property ProxyDomain: WideString dispid 121;
    property ProxyLogin: WideString dispid 122;
    property ProxyPassword: WideString dispid 123;
    property ProxyPort: Integer dispid 124;
    property ReadTimeout: Integer dispid 125;
    property UpdateCache: Integer dispid 126;
    property UserAgent: WideString dispid 127;
    property WindDownCount: Integer dispid 128;
    procedure AddAvoidOutboundLinkPattern(const pattern: WideString); dispid 129;
    procedure AddAvoidPattern(const pattern: WideString); dispid 130;
    procedure AddMustMatchPattern(const pattern: WideString); dispid 131;
    procedure AddUnspidered(const url: WideString); dispid 132;
    function CanonicalizeUrl(const url: WideString): WideString; dispid 133;
    procedure ClearFailedUrls; dispid 134;
    procedure ClearOutboundLinks; dispid 135;
    procedure ClearSpideredUrls; dispid 136;
    function CrawlNext: Integer; dispid 137;
    function CrawlNextAsync: IChilkatTask; dispid 637;
    function FetchRobotsText: WideString; dispid 138;
    function FetchRobotsTextAsync: IChilkatTask; dispid 638;
    function GetAvoidPattern(index: Integer): WideString; dispid 139;
    function GetBaseDomain(const domain: WideString): WideString; dispid 140;
    function GetFailedUrl(index: Integer): WideString; dispid 141;
    function GetOutboundLink(index: Integer): WideString; dispid 142;
    function GetSpideredUrl(index: Integer): WideString; dispid 143;
    function GetUnspideredUrl(index: Integer): WideString; dispid 144;
    function GetUrlDomain(const url: WideString): WideString; dispid 145;
    procedure Initialize(const domain: WideString); dispid 146;
    function RecrawlLast: Integer; dispid 147;
    function RecrawlLastAsync: IChilkatTask; dispid 647;
    procedure SkipUnspidered(index: Integer); dispid 148;
    procedure SleepMs(numMilliseconds: Integer); dispid 149;
    property PreferIpv6: Integer dispid 152;
    property AbortCurrent: Integer dispid 153;
    function LoadTaskCaller(const task: IChilkatTask): Integer; dispid 154;
    property WasRedirected: Integer readonly dispid 155;
    property FinalRedirectUrl: WideString readonly dispid 156;
  end;

// *********************************************************************//
// Interface: IChilkatSshTunnel
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {B777D3CD-07A8-4E22-9AB2-EC62B7160ABF}
// *********************************************************************//
  IChilkatSshTunnel = interface(IDispatch)
    ['{B777D3CD-07A8-4E22-9AB2-EC62B7160ABF}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_LastMethodSuccess: Integer; safecall;
    procedure Set_LastMethodSuccess(pVal: Integer); safecall;
    function Get_LastStringResult: WideString; safecall;
    function Get_LastBinaryResult: OleVariant; safecall;
    function Get_LastStringResultLen: Integer; safecall;
    function Get_ConnectTimeoutMs: Integer; safecall;
    procedure Set_ConnectTimeoutMs(pVal: Integer); safecall;
    function Get_DestHostname: WideString; safecall;
    procedure Set_DestHostname(const pVal: WideString); safecall;
    function Get_DestPort: Integer; safecall;
    procedure Set_DestPort(pVal: Integer); safecall;
    function Get_HttpProxyAuthMethod: WideString; safecall;
    procedure Set_HttpProxyAuthMethod(const pVal: WideString); safecall;
    function Get_HttpProxyDomain: WideString; safecall;
    procedure Set_HttpProxyDomain(const pVal: WideString); safecall;
    function Get_HttpProxyHostname: WideString; safecall;
    procedure Set_HttpProxyHostname(const pVal: WideString); safecall;
    function Get_HttpProxyPassword: WideString; safecall;
    procedure Set_HttpProxyPassword(const pVal: WideString); safecall;
    function Get_HttpProxyPort: Integer; safecall;
    procedure Set_HttpProxyPort(pVal: Integer); safecall;
    function Get_HttpProxyUsername: WideString; safecall;
    procedure Set_HttpProxyUsername(const pVal: WideString); safecall;
    function Get_IdleTimeoutMs: Integer; safecall;
    procedure Set_IdleTimeoutMs(pVal: Integer); safecall;
    function Get_IsAccepting: Integer; safecall;
    function Get_ListenBindIpAddress: WideString; safecall;
    procedure Set_ListenBindIpAddress(const pVal: WideString); safecall;
    function Get_ListenPort: Integer; safecall;
    function Get_OutboundBindIpAddress: WideString; safecall;
    procedure Set_OutboundBindIpAddress(const pVal: WideString); safecall;
    function Get_OutboundBindPort: Integer; safecall;
    procedure Set_OutboundBindPort(pVal: Integer); safecall;
    function Get_SoRcvBuf: Integer; safecall;
    procedure Set_SoRcvBuf(pVal: Integer); safecall;
    function Get_SoSndBuf: Integer; safecall;
    procedure Set_SoSndBuf(pVal: Integer); safecall;
    function Get_SocksHostname: WideString; safecall;
    procedure Set_SocksHostname(const pVal: WideString); safecall;
    function Get_SocksPassword: WideString; safecall;
    procedure Set_SocksPassword(const pVal: WideString); safecall;
    function Get_SocksPort: Integer; safecall;
    procedure Set_SocksPort(pVal: Integer); safecall;
    function Get_SocksUsername: WideString; safecall;
    procedure Set_SocksUsername(const pVal: WideString); safecall;
    function Get_SocksVersion: Integer; safecall;
    procedure Set_SocksVersion(pVal: Integer); safecall;
    function Get_TcpNoDelay: Integer; safecall;
    procedure Set_TcpNoDelay(pVal: Integer); safecall;
    function StopAccepting(waitForThread: Integer): Integer; safecall;
    function UnlockComponent(const unlockCode: WideString): Integer; safecall;
    function BeginAccepting(ListenPort: Integer): Integer; safecall;
    function BeginAcceptingAsync(ListenPort: Integer): IChilkatTask; safecall;
    function Get_DynamicPortForwarding: Integer; safecall;
    procedure Set_DynamicPortForwarding(pVal: Integer); safecall;
    function Get_InboundSocksUsername: WideString; safecall;
    procedure Set_InboundSocksUsername(const pVal: WideString); safecall;
    function Get_InboundSocksPassword: WideString; safecall;
    procedure Set_InboundSocksPassword(const pVal: WideString); safecall;
    function Connect(const hostname: WideString; port: Integer): Integer; safecall;
    function ConnectAsync(const hostname: WideString; port: Integer): IChilkatTask; safecall;
    function AuthenticatePw(const login: WideString; const password: WideString): Integer; safecall;
    function AuthenticatePwAsync(const login: WideString; const password: WideString): IChilkatTask; safecall;
    function AuthenticatePk(const username: WideString; const privateKey: IChilkatSshKey): Integer; safecall;
    function AuthenticatePkAsync(const username: WideString; const privateKey: IChilkatSshKey): IChilkatTask; safecall;
    function AuthenticatePwPk(const username: WideString; const password: WideString; 
                              const privateKey: IChilkatSshKey): Integer; safecall;
    function AuthenticatePwPkAsync(const username: WideString; const password: WideString; 
                                   const privateKey: IChilkatSshKey): IChilkatTask; safecall;
    function CloseTunnel(waitForThreads: Integer): Integer; safecall;
    function DisconnectAllClients(waitForThreads: Integer): Integer; safecall;
    function Get_KeepAcceptLog: Integer; safecall;
    procedure Set_KeepAcceptLog(pVal: Integer); safecall;
    function Get_AcceptLog: WideString; safecall;
    procedure Set_AcceptLog(const pVal: WideString); safecall;
    function Get_AcceptLogPath: WideString; safecall;
    procedure Set_AcceptLogPath(const pVal: WideString); safecall;
    function Get_TunnelLogPath: WideString; safecall;
    procedure Set_TunnelLogPath(const pVal: WideString); safecall;
    function Get_TunnelLog: WideString; safecall;
    procedure Set_TunnelLog(const pVal: WideString); safecall;
    function Get_KeepTunnelLog: Integer; safecall;
    procedure Set_KeepTunnelLog(pVal: Integer); safecall;
    function ConnectThroughSsh(const ssh: IChilkatSsh; const hostname: WideString; port: Integer): Integer; safecall;
    function ConnectThroughSshAsync(const ssh: IChilkatSsh; const hostname: WideString; 
                                    port: Integer): IChilkatTask; safecall;
    function Get_HostKeyFingerprint: WideString; safecall;
    function Get_AbortCurrent: Integer; safecall;
    procedure Set_AbortCurrent(pVal: Integer); safecall;
    function IsSshConnected: Integer; safecall;
    function GetCurrentState: WideString; safecall;
    function Get_PreferIpv6: Integer; safecall;
    procedure Set_PreferIpv6(pVal: Integer); safecall;
    function AuthenticateSecPw(const login: IChilkatSecureString; 
                               const password: IChilkatSecureString): Integer; safecall;
    function AuthenticateSecPwAsync(const login: IChilkatSecureString; 
                                    const password: IChilkatSecureString): IChilkatTask; safecall;
    function AuthenticateSecPwPk(const username: IChilkatSecureString; 
                                 const password: IChilkatSecureString; 
                                 const privateKey: IChilkatSshKey): Integer; safecall;
    function AuthenticateSecPwPkAsync(const username: IChilkatSecureString; 
                                      const password: IChilkatSecureString; 
                                      const privateKey: IChilkatSshKey): IChilkatTask; safecall;
    function Get_UncommonOptions: WideString; safecall;
    procedure Set_UncommonOptions(const pVal: WideString); safecall;
    function StartKeyboardAuth(const login: WideString): WideString; safecall;
    function StartKeyboardAuthAsync(const login: WideString): IChilkatTask; safecall;
    function ContinueKeyboardAuth(const response: WideString): WideString; safecall;
    function ContinueKeyboardAuthAsync(const response: WideString): IChilkatTask; safecall;
    function LoadTaskCaller(const task: IChilkatTask): Integer; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property LastMethodSuccess: Integer read Get_LastMethodSuccess write Set_LastMethodSuccess;
    property LastStringResult: WideString read Get_LastStringResult;
    property LastBinaryResult: OleVariant read Get_LastBinaryResult;
    property LastStringResultLen: Integer read Get_LastStringResultLen;
    property ConnectTimeoutMs: Integer read Get_ConnectTimeoutMs write Set_ConnectTimeoutMs;
    property DestHostname: WideString read Get_DestHostname write Set_DestHostname;
    property DestPort: Integer read Get_DestPort write Set_DestPort;
    property HttpProxyAuthMethod: WideString read Get_HttpProxyAuthMethod write Set_HttpProxyAuthMethod;
    property HttpProxyDomain: WideString read Get_HttpProxyDomain write Set_HttpProxyDomain;
    property HttpProxyHostname: WideString read Get_HttpProxyHostname write Set_HttpProxyHostname;
    property HttpProxyPassword: WideString read Get_HttpProxyPassword write Set_HttpProxyPassword;
    property HttpProxyPort: Integer read Get_HttpProxyPort write Set_HttpProxyPort;
    property HttpProxyUsername: WideString read Get_HttpProxyUsername write Set_HttpProxyUsername;
    property IdleTimeoutMs: Integer read Get_IdleTimeoutMs write Set_IdleTimeoutMs;
    property IsAccepting: Integer read Get_IsAccepting;
    property ListenBindIpAddress: WideString read Get_ListenBindIpAddress write Set_ListenBindIpAddress;
    property ListenPort: Integer read Get_ListenPort;
    property OutboundBindIpAddress: WideString read Get_OutboundBindIpAddress write Set_OutboundBindIpAddress;
    property OutboundBindPort: Integer read Get_OutboundBindPort write Set_OutboundBindPort;
    property SoRcvBuf: Integer read Get_SoRcvBuf write Set_SoRcvBuf;
    property SoSndBuf: Integer read Get_SoSndBuf write Set_SoSndBuf;
    property SocksHostname: WideString read Get_SocksHostname write Set_SocksHostname;
    property SocksPassword: WideString read Get_SocksPassword write Set_SocksPassword;
    property SocksPort: Integer read Get_SocksPort write Set_SocksPort;
    property SocksUsername: WideString read Get_SocksUsername write Set_SocksUsername;
    property SocksVersion: Integer read Get_SocksVersion write Set_SocksVersion;
    property TcpNoDelay: Integer read Get_TcpNoDelay write Set_TcpNoDelay;
    property DynamicPortForwarding: Integer read Get_DynamicPortForwarding write Set_DynamicPortForwarding;
    property InboundSocksUsername: WideString read Get_InboundSocksUsername write Set_InboundSocksUsername;
    property InboundSocksPassword: WideString read Get_InboundSocksPassword write Set_InboundSocksPassword;
    property KeepAcceptLog: Integer read Get_KeepAcceptLog write Set_KeepAcceptLog;
    property AcceptLog: WideString read Get_AcceptLog write Set_AcceptLog;
    property AcceptLogPath: WideString read Get_AcceptLogPath write Set_AcceptLogPath;
    property TunnelLogPath: WideString read Get_TunnelLogPath write Set_TunnelLogPath;
    property TunnelLog: WideString read Get_TunnelLog write Set_TunnelLog;
    property KeepTunnelLog: Integer read Get_KeepTunnelLog write Set_KeepTunnelLog;
    property HostKeyFingerprint: WideString read Get_HostKeyFingerprint;
    property AbortCurrent: Integer read Get_AbortCurrent write Set_AbortCurrent;
    property PreferIpv6: Integer read Get_PreferIpv6 write Set_PreferIpv6;
    property UncommonOptions: WideString read Get_UncommonOptions write Set_UncommonOptions;
  end;

// *********************************************************************//
// DispIntf:  IChilkatSshTunnelDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {B777D3CD-07A8-4E22-9AB2-EC62B7160ABF}
// *********************************************************************//
  IChilkatSshTunnelDisp = dispinterface
    ['{B777D3CD-07A8-4E22-9AB2-EC62B7160ABF}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property LastMethodSuccess: Integer dispid 9;
    property LastStringResult: WideString readonly dispid 10;
    property LastBinaryResult: OleVariant readonly dispid 11;
    property LastStringResultLen: Integer readonly dispid 12;
    property ConnectTimeoutMs: Integer dispid 102;
    property DestHostname: WideString dispid 103;
    property DestPort: Integer dispid 104;
    property HttpProxyAuthMethod: WideString dispid 105;
    property HttpProxyDomain: WideString dispid 106;
    property HttpProxyHostname: WideString dispid 107;
    property HttpProxyPassword: WideString dispid 108;
    property HttpProxyPort: Integer dispid 109;
    property HttpProxyUsername: WideString dispid 110;
    property IdleTimeoutMs: Integer dispid 111;
    property IsAccepting: Integer readonly dispid 112;
    property ListenBindIpAddress: WideString dispid 114;
    property ListenPort: Integer readonly dispid 115;
    property OutboundBindIpAddress: WideString dispid 117;
    property OutboundBindPort: Integer dispid 118;
    property SoRcvBuf: Integer dispid 119;
    property SoSndBuf: Integer dispid 120;
    property SocksHostname: WideString dispid 121;
    property SocksPassword: WideString dispid 122;
    property SocksPort: Integer dispid 123;
    property SocksUsername: WideString dispid 124;
    property SocksVersion: Integer dispid 125;
    property TcpNoDelay: Integer dispid 130;
    function StopAccepting(waitForThread: Integer): Integer; dispid 136;
    function UnlockComponent(const unlockCode: WideString): Integer; dispid 138;
    function BeginAccepting(ListenPort: Integer): Integer; dispid 139;
    function BeginAcceptingAsync(ListenPort: Integer): IChilkatTask; dispid 639;
    property DynamicPortForwarding: Integer dispid 140;
    property InboundSocksUsername: WideString dispid 141;
    property InboundSocksPassword: WideString dispid 142;
    function Connect(const hostname: WideString; port: Integer): Integer; dispid 143;
    function ConnectAsync(const hostname: WideString; port: Integer): IChilkatTask; dispid 643;
    function AuthenticatePw(const login: WideString; const password: WideString): Integer; dispid 144;
    function AuthenticatePwAsync(const login: WideString; const password: WideString): IChilkatTask; dispid 644;
    function AuthenticatePk(const username: WideString; const privateKey: IChilkatSshKey): Integer; dispid 145;
    function AuthenticatePkAsync(const username: WideString; const privateKey: IChilkatSshKey): IChilkatTask; dispid 645;
    function AuthenticatePwPk(const username: WideString; const password: WideString; 
                              const privateKey: IChilkatSshKey): Integer; dispid 146;
    function AuthenticatePwPkAsync(const username: WideString; const password: WideString; 
                                   const privateKey: IChilkatSshKey): IChilkatTask; dispid 646;
    function CloseTunnel(waitForThreads: Integer): Integer; dispid 148;
    function DisconnectAllClients(waitForThreads: Integer): Integer; dispid 149;
    property KeepAcceptLog: Integer dispid 150;
    property AcceptLog: WideString dispid 151;
    property AcceptLogPath: WideString dispid 152;
    property TunnelLogPath: WideString dispid 153;
    property TunnelLog: WideString dispid 154;
    property KeepTunnelLog: Integer dispid 155;
    function ConnectThroughSsh(const ssh: IChilkatSsh; const hostname: WideString; port: Integer): Integer; dispid 159;
    function ConnectThroughSshAsync(const ssh: IChilkatSsh; const hostname: WideString; 
                                    port: Integer): IChilkatTask; dispid 659;
    property HostKeyFingerprint: WideString readonly dispid 160;
    property AbortCurrent: Integer dispid 161;
    function IsSshConnected: Integer; dispid 162;
    function GetCurrentState: WideString; dispid 163;
    property PreferIpv6: Integer dispid 164;
    function AuthenticateSecPw(const login: IChilkatSecureString; 
                               const password: IChilkatSecureString): Integer; dispid 165;
    function AuthenticateSecPwAsync(const login: IChilkatSecureString; 
                                    const password: IChilkatSecureString): IChilkatTask; dispid 665;
    function AuthenticateSecPwPk(const username: IChilkatSecureString; 
                                 const password: IChilkatSecureString; 
                                 const privateKey: IChilkatSshKey): Integer; dispid 166;
    function AuthenticateSecPwPkAsync(const username: IChilkatSecureString; 
                                      const password: IChilkatSecureString; 
                                      const privateKey: IChilkatSshKey): IChilkatTask; dispid 666;
    property UncommonOptions: WideString dispid 167;
    function StartKeyboardAuth(const login: WideString): WideString; dispid 168;
    function StartKeyboardAuthAsync(const login: WideString): IChilkatTask; dispid 668;
    function ContinueKeyboardAuth(const response: WideString): WideString; dispid 169;
    function ContinueKeyboardAuthAsync(const response: WideString): IChilkatTask; dispid 669;
    function LoadTaskCaller(const task: IChilkatTask): Integer; dispid 170;
  end;

// *********************************************************************//
// Interface: IChilkatTar
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {6D9CB79B-EDFF-4B36-8A2B-E24A0D94838C}
// *********************************************************************//
  IChilkatTar = interface(IDispatch)
    ['{6D9CB79B-EDFF-4B36-8A2B-E24A0D94838C}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_LastMethodSuccess: Integer; safecall;
    procedure Set_LastMethodSuccess(pVal: Integer); safecall;
    function Get_LastStringResult: WideString; safecall;
    function Get_LastBinaryResult: OleVariant; safecall;
    function Get_LastStringResultLen: Integer; safecall;
    function Get_charset: WideString; safecall;
    procedure Set_charset(const pVal: WideString); safecall;
    function Get_DirMode: Integer; safecall;
    procedure Set_DirMode(pVal: Integer); safecall;
    function Get_DirPrefix: WideString; safecall;
    procedure Set_DirPrefix(const pVal: WideString); safecall;
    function Get_FileMode: Integer; safecall;
    procedure Set_FileMode(pVal: Integer); safecall;
    function Get_GroupId: Integer; safecall;
    procedure Set_GroupId(pVal: Integer); safecall;
    function Get_GroupName: WideString; safecall;
    procedure Set_GroupName(const pVal: WideString); safecall;
    function Get_HeartbeatMs: Integer; safecall;
    procedure Set_HeartbeatMs(pVal: Integer); safecall;
    function Get_NoAbsolutePaths: Integer; safecall;
    procedure Set_NoAbsolutePaths(pVal: Integer); safecall;
    function Get_NumDirRoots: Integer; safecall;
    function Get_ScriptFileMode: Integer; safecall;
    procedure Set_ScriptFileMode(pVal: Integer); safecall;
    function Get_UntarCaseSensitive: Integer; safecall;
    procedure Set_UntarCaseSensitive(pVal: Integer); safecall;
    function Get_UntarDebugLog: Integer; safecall;
    procedure Set_UntarDebugLog(pVal: Integer); safecall;
    function Get_UntarDiscardPaths: Integer; safecall;
    procedure Set_UntarDiscardPaths(pVal: Integer); safecall;
    function Get_UntarFromDir: WideString; safecall;
    procedure Set_UntarFromDir(const pVal: WideString); safecall;
    function Get_UntarMatchPattern: WideString; safecall;
    procedure Set_UntarMatchPattern(const pVal: WideString); safecall;
    function Get_UntarMaxCount: Integer; safecall;
    procedure Set_UntarMaxCount(pVal: Integer); safecall;
    function Get_UserId: Integer; safecall;
    procedure Set_UserId(pVal: Integer); safecall;
    function Get_username: WideString; safecall;
    procedure Set_username(const pVal: WideString); safecall;
    function Get_WriteFormat: WideString; safecall;
    procedure Set_WriteFormat(const pVal: WideString); safecall;
    function AddDirRoot(const dirPath: WideString): Integer; safecall;
    function GetDirRoot(index: Integer): WideString; safecall;
    function ListXml(const tarPath: WideString): WideString; safecall;
    function ListXmlAsync(const tarPath: WideString): IChilkatTask; safecall;
    function UnlockComponent(const unlockCode: WideString): Integer; safecall;
    function Untar(const tarPath: WideString): Integer; safecall;
    function UntarAsync(const tarPath: WideString): IChilkatTask; safecall;
    function UntarBz2(const tarPath: WideString): Integer; safecall;
    function UntarBz2Async(const tarPath: WideString): IChilkatTask; safecall;
    function UntarFirstMatchingToMemory(tarFileBytes: OleVariant; const matchPattern: WideString): OleVariant; safecall;
    function UntarFromMemory(tarFileBytes: OleVariant): Integer; safecall;
    function UntarFromMemoryAsync(tarFileBytes: OleVariant): IChilkatTask; safecall;
    function UnTarGz(const tarPath: WideString): Integer; safecall;
    function UnTarGzAsync(const tarPath: WideString): IChilkatTask; safecall;
    function UntarZ(const tarPath: WideString): Integer; safecall;
    function UntarZAsync(const tarPath: WideString): IChilkatTask; safecall;
    function VerifyTar(const tarPath: WideString): Integer; safecall;
    function VerifyTarAsync(const tarPath: WideString): IChilkatTask; safecall;
    function WriteTar(const tarPath: WideString): Integer; safecall;
    function WriteTarAsync(const tarPath: WideString): IChilkatTask; safecall;
    function WriteTarBz2(const bz2Path: WideString): Integer; safecall;
    function WriteTarBz2Async(const bz2Path: WideString): IChilkatTask; safecall;
    function WriteTarGz(const gzPath: WideString): Integer; safecall;
    function WriteTarGzAsync(const gzPath: WideString): IChilkatTask; safecall;
    function Get_CaptureXmlListing: Integer; safecall;
    procedure Set_CaptureXmlListing(pVal: Integer); safecall;
    function Get_MatchCaseSensitive: Integer; safecall;
    procedure Set_MatchCaseSensitive(pVal: Integer); safecall;
    function Get_MustMatch: WideString; safecall;
    procedure Set_MustMatch(const pVal: WideString); safecall;
    function Get_MustNotMatch: WideString; safecall;
    procedure Set_MustNotMatch(const pVal: WideString); safecall;
    function Get_SuppressOutput: Integer; safecall;
    procedure Set_SuppressOutput(pVal: Integer); safecall;
    function Get_XmlListing: WideString; safecall;
    procedure Set_XmlListing(const pVal: WideString); safecall;
    function AddFile(const path: WideString): Integer; safecall;
    function Get_PercentDoneScale: Integer; safecall;
    procedure Set_PercentDoneScale(pVal: Integer); safecall;
    function AddDirRoot2(const rootPrefix: WideString; const rootPath: WideString): Integer; safecall;
    function CreateDeb(const controlPath: WideString; const dataPath: WideString; 
                       const debPath: WideString): Integer; safecall;
    function AddFile2(const filePath: WideString; const pathWithinTar: WideString): Integer; safecall;
    function LoadTaskCaller(const task: IChilkatTask): Integer; safecall;
    function UntarFirstMatchingToBd(const tarPath: WideString; const matchPattern: WideString; 
                                    const bd: IChilkatBinData): Integer; safecall;
    function ClearDirRootsAndFiles: Integer; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property LastMethodSuccess: Integer read Get_LastMethodSuccess write Set_LastMethodSuccess;
    property LastStringResult: WideString read Get_LastStringResult;
    property LastBinaryResult: OleVariant read Get_LastBinaryResult;
    property LastStringResultLen: Integer read Get_LastStringResultLen;
    property charset: WideString read Get_charset write Set_charset;
    property DirMode: Integer read Get_DirMode write Set_DirMode;
    property DirPrefix: WideString read Get_DirPrefix write Set_DirPrefix;
    property FileMode: Integer read Get_FileMode write Set_FileMode;
    property GroupId: Integer read Get_GroupId write Set_GroupId;
    property GroupName: WideString read Get_GroupName write Set_GroupName;
    property HeartbeatMs: Integer read Get_HeartbeatMs write Set_HeartbeatMs;
    property NoAbsolutePaths: Integer read Get_NoAbsolutePaths write Set_NoAbsolutePaths;
    property NumDirRoots: Integer read Get_NumDirRoots;
    property ScriptFileMode: Integer read Get_ScriptFileMode write Set_ScriptFileMode;
    property UntarCaseSensitive: Integer read Get_UntarCaseSensitive write Set_UntarCaseSensitive;
    property UntarDebugLog: Integer read Get_UntarDebugLog write Set_UntarDebugLog;
    property UntarDiscardPaths: Integer read Get_UntarDiscardPaths write Set_UntarDiscardPaths;
    property UntarFromDir: WideString read Get_UntarFromDir write Set_UntarFromDir;
    property UntarMatchPattern: WideString read Get_UntarMatchPattern write Set_UntarMatchPattern;
    property UntarMaxCount: Integer read Get_UntarMaxCount write Set_UntarMaxCount;
    property UserId: Integer read Get_UserId write Set_UserId;
    property username: WideString read Get_username write Set_username;
    property WriteFormat: WideString read Get_WriteFormat write Set_WriteFormat;
    property CaptureXmlListing: Integer read Get_CaptureXmlListing write Set_CaptureXmlListing;
    property MatchCaseSensitive: Integer read Get_MatchCaseSensitive write Set_MatchCaseSensitive;
    property MustMatch: WideString read Get_MustMatch write Set_MustMatch;
    property MustNotMatch: WideString read Get_MustNotMatch write Set_MustNotMatch;
    property SuppressOutput: Integer read Get_SuppressOutput write Set_SuppressOutput;
    property XmlListing: WideString read Get_XmlListing write Set_XmlListing;
    property PercentDoneScale: Integer read Get_PercentDoneScale write Set_PercentDoneScale;
  end;

// *********************************************************************//
// DispIntf:  IChilkatTarDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {6D9CB79B-EDFF-4B36-8A2B-E24A0D94838C}
// *********************************************************************//
  IChilkatTarDisp = dispinterface
    ['{6D9CB79B-EDFF-4B36-8A2B-E24A0D94838C}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property LastMethodSuccess: Integer dispid 9;
    property LastStringResult: WideString readonly dispid 10;
    property LastBinaryResult: OleVariant readonly dispid 11;
    property LastStringResultLen: Integer readonly dispid 12;
    property charset: WideString dispid 100;
    property DirMode: Integer dispid 101;
    property DirPrefix: WideString dispid 102;
    property FileMode: Integer dispid 103;
    property GroupId: Integer dispid 104;
    property GroupName: WideString dispid 105;
    property HeartbeatMs: Integer dispid 106;
    property NoAbsolutePaths: Integer dispid 107;
    property NumDirRoots: Integer readonly dispid 108;
    property ScriptFileMode: Integer dispid 109;
    property UntarCaseSensitive: Integer dispid 110;
    property UntarDebugLog: Integer dispid 111;
    property UntarDiscardPaths: Integer dispid 112;
    property UntarFromDir: WideString dispid 113;
    property UntarMatchPattern: WideString dispid 114;
    property UntarMaxCount: Integer dispid 115;
    property UserId: Integer dispid 116;
    property username: WideString dispid 117;
    property WriteFormat: WideString dispid 118;
    function AddDirRoot(const dirPath: WideString): Integer; dispid 119;
    function GetDirRoot(index: Integer): WideString; dispid 120;
    function ListXml(const tarPath: WideString): WideString; dispid 121;
    function ListXmlAsync(const tarPath: WideString): IChilkatTask; dispid 621;
    function UnlockComponent(const unlockCode: WideString): Integer; dispid 122;
    function Untar(const tarPath: WideString): Integer; dispid 123;
    function UntarAsync(const tarPath: WideString): IChilkatTask; dispid 623;
    function UntarBz2(const tarPath: WideString): Integer; dispid 124;
    function UntarBz2Async(const tarPath: WideString): IChilkatTask; dispid 624;
    function UntarFirstMatchingToMemory(tarFileBytes: OleVariant; const matchPattern: WideString): OleVariant; dispid 125;
    function UntarFromMemory(tarFileBytes: OleVariant): Integer; dispid 126;
    function UntarFromMemoryAsync(tarFileBytes: OleVariant): IChilkatTask; dispid 626;
    function UnTarGz(const tarPath: WideString): Integer; dispid 127;
    function UnTarGzAsync(const tarPath: WideString): IChilkatTask; dispid 627;
    function UntarZ(const tarPath: WideString): Integer; dispid 128;
    function UntarZAsync(const tarPath: WideString): IChilkatTask; dispid 628;
    function VerifyTar(const tarPath: WideString): Integer; dispid 129;
    function VerifyTarAsync(const tarPath: WideString): IChilkatTask; dispid 629;
    function WriteTar(const tarPath: WideString): Integer; dispid 130;
    function WriteTarAsync(const tarPath: WideString): IChilkatTask; dispid 630;
    function WriteTarBz2(const bz2Path: WideString): Integer; dispid 131;
    function WriteTarBz2Async(const bz2Path: WideString): IChilkatTask; dispid 631;
    function WriteTarGz(const gzPath: WideString): Integer; dispid 132;
    function WriteTarGzAsync(const gzPath: WideString): IChilkatTask; dispid 632;
    property CaptureXmlListing: Integer dispid 133;
    property MatchCaseSensitive: Integer dispid 134;
    property MustMatch: WideString dispid 135;
    property MustNotMatch: WideString dispid 136;
    property SuppressOutput: Integer dispid 137;
    property XmlListing: WideString dispid 138;
    function AddFile(const path: WideString): Integer; dispid 139;
    property PercentDoneScale: Integer dispid 140;
    function AddDirRoot2(const rootPrefix: WideString; const rootPath: WideString): Integer; dispid 141;
    function CreateDeb(const controlPath: WideString; const dataPath: WideString; 
                       const debPath: WideString): Integer; dispid 142;
    function AddFile2(const filePath: WideString; const pathWithinTar: WideString): Integer; dispid 143;
    function LoadTaskCaller(const task: IChilkatTask): Integer; dispid 144;
    function UntarFirstMatchingToBd(const tarPath: WideString; const matchPattern: WideString; 
                                    const bd: IChilkatBinData): Integer; dispid 145;
    function ClearDirRootsAndFiles: Integer; dispid 146;
  end;

// *********************************************************************//
// Interface: IChilkatTaskChain
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {CCAD6703-0549-4DDE-8127-97D073A8CCF9}
// *********************************************************************//
  IChilkatTaskChain = interface(IDispatch)
    ['{CCAD6703-0549-4DDE-8127-97D073A8CCF9}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_LastMethodSuccess: Integer; safecall;
    procedure Set_LastMethodSuccess(pVal: Integer); safecall;
    function Get_LastStringResult: WideString; safecall;
    function Get_LastBinaryResult: OleVariant; safecall;
    function Get_LastStringResultLen: Integer; safecall;
    function Get_NumTasks: Integer; safecall;
    function Append(const task: IChilkatTask): Integer; safecall;
    function GetTask(index: Integer): IChilkatTask; safecall;
    function Get_StopOnFailedTask: Integer; safecall;
    procedure Set_StopOnFailedTask(pVal: Integer); safecall;
    function Run: Integer; safecall;
    function RunSynchronously: Integer; safecall;
    function Wait(maxWaitMs: Integer): Integer; safecall;
    function Cancel: Integer; safecall;
    function Get_Inert: Integer; safecall;
    function Get_Live: Integer; safecall;
    function Get_Finished: Integer; safecall;
    function Get_Status: WideString; safecall;
    procedure SleepMs(numMs: Integer); safecall;
    function Get_HeartbeatMs: Integer; safecall;
    procedure Set_HeartbeatMs(pVal: Integer); safecall;
    function Get_StatusInt: Integer; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property LastMethodSuccess: Integer read Get_LastMethodSuccess write Set_LastMethodSuccess;
    property LastStringResult: WideString read Get_LastStringResult;
    property LastBinaryResult: OleVariant read Get_LastBinaryResult;
    property LastStringResultLen: Integer read Get_LastStringResultLen;
    property NumTasks: Integer read Get_NumTasks;
    property StopOnFailedTask: Integer read Get_StopOnFailedTask write Set_StopOnFailedTask;
    property Inert: Integer read Get_Inert;
    property Live: Integer read Get_Live;
    property Finished: Integer read Get_Finished;
    property Status: WideString read Get_Status;
    property HeartbeatMs: Integer read Get_HeartbeatMs write Set_HeartbeatMs;
    property StatusInt: Integer read Get_StatusInt;
  end;

// *********************************************************************//
// DispIntf:  IChilkatTaskChainDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {CCAD6703-0549-4DDE-8127-97D073A8CCF9}
// *********************************************************************//
  IChilkatTaskChainDisp = dispinterface
    ['{CCAD6703-0549-4DDE-8127-97D073A8CCF9}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property LastMethodSuccess: Integer dispid 9;
    property LastStringResult: WideString readonly dispid 10;
    property LastBinaryResult: OleVariant readonly dispid 11;
    property LastStringResultLen: Integer readonly dispid 12;
    property NumTasks: Integer readonly dispid 100;
    function Append(const task: IChilkatTask): Integer; dispid 101;
    function GetTask(index: Integer): IChilkatTask; dispid 102;
    property StopOnFailedTask: Integer dispid 103;
    function Run: Integer; dispid 104;
    function RunSynchronously: Integer; dispid 105;
    function Wait(maxWaitMs: Integer): Integer; dispid 106;
    function Cancel: Integer; dispid 107;
    property Inert: Integer readonly dispid 108;
    property Live: Integer readonly dispid 109;
    property Finished: Integer readonly dispid 110;
    property Status: WideString readonly dispid 111;
    procedure SleepMs(numMs: Integer); dispid 112;
    property HeartbeatMs: Integer dispid 113;
    property StatusInt: Integer readonly dispid 114;
  end;

// *********************************************************************//
// Interface: IUnixCompress
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {68CB048E-A120-4A99-B9DC-650775764421}
// *********************************************************************//
  IUnixCompress = interface(IDispatch)
    ['{68CB048E-A120-4A99-B9DC-650775764421}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_LastMethodSuccess: Integer; safecall;
    procedure Set_LastMethodSuccess(pVal: Integer); safecall;
    function Get_LastStringResult: WideString; safecall;
    function Get_LastBinaryResult: OleVariant; safecall;
    function Get_LastStringResultLen: Integer; safecall;
    function Get_HeartbeatMs: Integer; safecall;
    procedure Set_HeartbeatMs(pVal: Integer); safecall;
    function CompressFile(const inFilename: WideString; const destPath: WideString): Integer; safecall;
    function CompressFileAsync(const inFilename: WideString; const destPath: WideString): IChilkatTask; safecall;
    function CompressFileToMem(const inFilename: WideString): OleVariant; safecall;
    function CompressFileToMemAsync(const inFilename: WideString): IChilkatTask; safecall;
    function CompressMemToFile(inData: OleVariant; const destPath: WideString): Integer; safecall;
    function CompressMemory(inData: OleVariant): OleVariant; safecall;
    function CompressString(const inStr: WideString; const charset: WideString): OleVariant; safecall;
    function CompressStringToFile(const inStr: WideString; const charset: WideString; 
                                  const destPath: WideString): Integer; safecall;
    function IsUnlocked: Integer; safecall;
    function UntarZ(const zFilename: WideString; const destDir: WideString; bNoAbsolute: Integer): Integer; safecall;
    function UntarZAsync(const zFilename: WideString; const destDir: WideString; 
                         bNoAbsolute: Integer): IChilkatTask; safecall;
    function UncompressFile(const inFilename: WideString; const destPath: WideString): Integer; safecall;
    function UncompressFileAsync(const inFilename: WideString; const destPath: WideString): IChilkatTask; safecall;
    function UncompressFileToMem(const inFilename: WideString): OleVariant; safecall;
    function UncompressFileToMemAsync(const inFilename: WideString): IChilkatTask; safecall;
    function UncompressFileToString(const zFilename: WideString; const charset: WideString): WideString; safecall;
    function UncompressFileToStringAsync(const zFilename: WideString; const charset: WideString): IChilkatTask; safecall;
    function UncompressMemToFile(inData: OleVariant; const destPath: WideString): Integer; safecall;
    function UncompressMemory(inData: OleVariant): OleVariant; safecall;
    function UncompressString(inCompressedData: OleVariant; const charset: WideString): WideString; safecall;
    function UnlockComponent(const unlockCode: WideString): Integer; safecall;
    function ReadFile(const filename: WideString): OleVariant; safecall;
    function WriteFile(const filename: WideString; BinaryData: OleVariant): Integer; safecall;
    function Get_AbortCurrent: Integer; safecall;
    procedure Set_AbortCurrent(pVal: Integer); safecall;
    function LoadTaskCaller(const task: IChilkatTask): Integer; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property LastMethodSuccess: Integer read Get_LastMethodSuccess write Set_LastMethodSuccess;
    property LastStringResult: WideString read Get_LastStringResult;
    property LastBinaryResult: OleVariant read Get_LastBinaryResult;
    property LastStringResultLen: Integer read Get_LastStringResultLen;
    property HeartbeatMs: Integer read Get_HeartbeatMs write Set_HeartbeatMs;
    property AbortCurrent: Integer read Get_AbortCurrent write Set_AbortCurrent;
  end;

// *********************************************************************//
// DispIntf:  IUnixCompressDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {68CB048E-A120-4A99-B9DC-650775764421}
// *********************************************************************//
  IUnixCompressDisp = dispinterface
    ['{68CB048E-A120-4A99-B9DC-650775764421}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property LastMethodSuccess: Integer dispid 9;
    property LastStringResult: WideString readonly dispid 10;
    property LastBinaryResult: OleVariant readonly dispid 11;
    property LastStringResultLen: Integer readonly dispid 12;
    property HeartbeatMs: Integer dispid 100;
    function CompressFile(const inFilename: WideString; const destPath: WideString): Integer; dispid 101;
    function CompressFileAsync(const inFilename: WideString; const destPath: WideString): IChilkatTask; dispid 601;
    function CompressFileToMem(const inFilename: WideString): OleVariant; dispid 102;
    function CompressFileToMemAsync(const inFilename: WideString): IChilkatTask; dispid 602;
    function CompressMemToFile(inData: OleVariant; const destPath: WideString): Integer; dispid 103;
    function CompressMemory(inData: OleVariant): OleVariant; dispid 104;
    function CompressString(const inStr: WideString; const charset: WideString): OleVariant; dispid 105;
    function CompressStringToFile(const inStr: WideString; const charset: WideString; 
                                  const destPath: WideString): Integer; dispid 106;
    function IsUnlocked: Integer; dispid 107;
    function UntarZ(const zFilename: WideString; const destDir: WideString; bNoAbsolute: Integer): Integer; dispid 108;
    function UntarZAsync(const zFilename: WideString; const destDir: WideString; 
                         bNoAbsolute: Integer): IChilkatTask; dispid 608;
    function UncompressFile(const inFilename: WideString; const destPath: WideString): Integer; dispid 109;
    function UncompressFileAsync(const inFilename: WideString; const destPath: WideString): IChilkatTask; dispid 609;
    function UncompressFileToMem(const inFilename: WideString): OleVariant; dispid 110;
    function UncompressFileToMemAsync(const inFilename: WideString): IChilkatTask; dispid 610;
    function UncompressFileToString(const zFilename: WideString; const charset: WideString): WideString; dispid 111;
    function UncompressFileToStringAsync(const zFilename: WideString; const charset: WideString): IChilkatTask; dispid 611;
    function UncompressMemToFile(inData: OleVariant; const destPath: WideString): Integer; dispid 112;
    function UncompressMemory(inData: OleVariant): OleVariant; dispid 113;
    function UncompressString(inCompressedData: OleVariant; const charset: WideString): WideString; dispid 114;
    function UnlockComponent(const unlockCode: WideString): Integer; dispid 115;
    function ReadFile(const filename: WideString): OleVariant; dispid 116;
    function WriteFile(const filename: WideString; BinaryData: OleVariant): Integer; dispid 117;
    property AbortCurrent: Integer dispid 118;
    function LoadTaskCaller(const task: IChilkatTask): Integer; dispid 119;
  end;

// *********************************************************************//
// Interface: IChilkatUpload
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {D72E7F04-7817-4BA7-8FC2-6C890E94BC86}
// *********************************************************************//
  IChilkatUpload = interface(IDispatch)
    ['{D72E7F04-7817-4BA7-8FC2-6C890E94BC86}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_LastMethodSuccess: Integer; safecall;
    procedure Set_LastMethodSuccess(pVal: Integer); safecall;
    function Get_LastStringResult: WideString; safecall;
    function Get_LastBinaryResult: OleVariant; safecall;
    function Get_LastStringResultLen: Integer; safecall;
    function Get_chunkSize: Integer; safecall;
    procedure Set_chunkSize(pVal: Integer); safecall;
    function Get_Expect100Continue: Integer; safecall;
    procedure Set_Expect100Continue(pVal: Integer); safecall;
    function Get_HeartbeatMs: Integer; safecall;
    procedure Set_HeartbeatMs(pVal: Integer); safecall;
    function Get_hostname: WideString; safecall;
    procedure Set_hostname(const pVal: WideString); safecall;
    function Get_IdleTimeoutMs: Integer; safecall;
    procedure Set_IdleTimeoutMs(pVal: Integer); safecall;
    function Get_login: WideString; safecall;
    procedure Set_login(const pVal: WideString); safecall;
    function Get_NumBytesSent: Integer; safecall;
    function Get_password: WideString; safecall;
    procedure Set_password(const pVal: WideString); safecall;
    function Get_path: WideString; safecall;
    procedure Set_path(const pVal: WideString); safecall;
    function Get_PercentUploaded: Integer; safecall;
    function Get_port: Integer; safecall;
    procedure Set_port(pVal: Integer); safecall;
    function Get_ProxyDomain: WideString; safecall;
    procedure Set_ProxyDomain(const pVal: WideString); safecall;
    function Get_ProxyLogin: WideString; safecall;
    procedure Set_ProxyLogin(const pVal: WideString); safecall;
    function Get_ProxyPassword: WideString; safecall;
    procedure Set_ProxyPassword(const pVal: WideString); safecall;
    function Get_ProxyPort: Integer; safecall;
    procedure Set_ProxyPort(pVal: Integer); safecall;
    function Get_responseBody: OleVariant; safecall;
    function Get_ResponseHeader: WideString; safecall;
    function Get_ResponseStatus: Integer; safecall;
    function Get_Ssl: Integer; safecall;
    procedure Set_Ssl(pVal: Integer); safecall;
    function Get_TotalUploadSize: Integer; safecall;
    function Get_UploadInProgress: Integer; safecall;
    function Get_UploadSuccess: Integer; safecall;
    procedure AbortUpload; safecall;
    procedure AddCustomHeader(const name: WideString; const value: WideString); safecall;
    procedure AddFileReference(const name: WideString; const filename: WideString); safecall;
    procedure AddParam(const name: WideString; const value: WideString); safecall;
    function BeginUpload: Integer; safecall;
    function BlockingUpload: Integer; safecall;
    function BlockingUploadAsync: IChilkatTask; safecall;
    procedure ClearFileReferences; safecall;
    procedure ClearParams; safecall;
    procedure SleepMs(millisec: Integer); safecall;
    function UploadToMemory: OleVariant; safecall;
    function Get_PreferIpv6: Integer; safecall;
    procedure Set_PreferIpv6(pVal: Integer); safecall;
    function Get_PercentDoneScale: Integer; safecall;
    procedure Set_PercentDoneScale(pVal: Integer); safecall;
    function Get_BandwidthThrottleUp: Integer; safecall;
    procedure Set_BandwidthThrottleUp(pVal: Integer); safecall;
    function Get_ClientIpAddress: WideString; safecall;
    procedure Set_ClientIpAddress(const pVal: WideString); safecall;
    function Get_TlsPinSet: WideString; safecall;
    procedure Set_TlsPinSet(const pVal: WideString); safecall;
    function Get_SslAllowedCiphers: WideString; safecall;
    procedure Set_SslAllowedCiphers(const pVal: WideString); safecall;
    function Get_SslProtocol: WideString; safecall;
    procedure Set_SslProtocol(const pVal: WideString); safecall;
    function Get_AbortCurrent: Integer; safecall;
    procedure Set_AbortCurrent(pVal: Integer); safecall;
    function LoadTaskCaller(const task: IChilkatTask): Integer; safecall;
    function Get_ResponseBodyStr: WideString; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property LastMethodSuccess: Integer read Get_LastMethodSuccess write Set_LastMethodSuccess;
    property LastStringResult: WideString read Get_LastStringResult;
    property LastBinaryResult: OleVariant read Get_LastBinaryResult;
    property LastStringResultLen: Integer read Get_LastStringResultLen;
    property chunkSize: Integer read Get_chunkSize write Set_chunkSize;
    property Expect100Continue: Integer read Get_Expect100Continue write Set_Expect100Continue;
    property HeartbeatMs: Integer read Get_HeartbeatMs write Set_HeartbeatMs;
    property hostname: WideString read Get_hostname write Set_hostname;
    property IdleTimeoutMs: Integer read Get_IdleTimeoutMs write Set_IdleTimeoutMs;
    property login: WideString read Get_login write Set_login;
    property NumBytesSent: Integer read Get_NumBytesSent;
    property password: WideString read Get_password write Set_password;
    property path: WideString read Get_path write Set_path;
    property PercentUploaded: Integer read Get_PercentUploaded;
    property port: Integer read Get_port write Set_port;
    property ProxyDomain: WideString read Get_ProxyDomain write Set_ProxyDomain;
    property ProxyLogin: WideString read Get_ProxyLogin write Set_ProxyLogin;
    property ProxyPassword: WideString read Get_ProxyPassword write Set_ProxyPassword;
    property ProxyPort: Integer read Get_ProxyPort write Set_ProxyPort;
    property responseBody: OleVariant read Get_responseBody;
    property ResponseHeader: WideString read Get_ResponseHeader;
    property ResponseStatus: Integer read Get_ResponseStatus;
    property Ssl: Integer read Get_Ssl write Set_Ssl;
    property TotalUploadSize: Integer read Get_TotalUploadSize;
    property UploadInProgress: Integer read Get_UploadInProgress;
    property UploadSuccess: Integer read Get_UploadSuccess;
    property PreferIpv6: Integer read Get_PreferIpv6 write Set_PreferIpv6;
    property PercentDoneScale: Integer read Get_PercentDoneScale write Set_PercentDoneScale;
    property BandwidthThrottleUp: Integer read Get_BandwidthThrottleUp write Set_BandwidthThrottleUp;
    property ClientIpAddress: WideString read Get_ClientIpAddress write Set_ClientIpAddress;
    property TlsPinSet: WideString read Get_TlsPinSet write Set_TlsPinSet;
    property SslAllowedCiphers: WideString read Get_SslAllowedCiphers write Set_SslAllowedCiphers;
    property SslProtocol: WideString read Get_SslProtocol write Set_SslProtocol;
    property AbortCurrent: Integer read Get_AbortCurrent write Set_AbortCurrent;
    property ResponseBodyStr: WideString read Get_ResponseBodyStr;
  end;

// *********************************************************************//
// DispIntf:  IChilkatUploadDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {D72E7F04-7817-4BA7-8FC2-6C890E94BC86}
// *********************************************************************//
  IChilkatUploadDisp = dispinterface
    ['{D72E7F04-7817-4BA7-8FC2-6C890E94BC86}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property LastMethodSuccess: Integer dispid 9;
    property LastStringResult: WideString readonly dispid 10;
    property LastBinaryResult: OleVariant readonly dispid 11;
    property LastStringResultLen: Integer readonly dispid 12;
    property chunkSize: Integer dispid 100;
    property Expect100Continue: Integer dispid 101;
    property HeartbeatMs: Integer dispid 102;
    property hostname: WideString dispid 103;
    property IdleTimeoutMs: Integer dispid 104;
    property login: WideString dispid 105;
    property NumBytesSent: Integer readonly dispid 106;
    property password: WideString dispid 107;
    property path: WideString dispid 108;
    property PercentUploaded: Integer readonly dispid 109;
    property port: Integer dispid 110;
    property ProxyDomain: WideString dispid 111;
    property ProxyLogin: WideString dispid 112;
    property ProxyPassword: WideString dispid 113;
    property ProxyPort: Integer dispid 114;
    property responseBody: OleVariant readonly dispid 115;
    property ResponseHeader: WideString readonly dispid 116;
    property ResponseStatus: Integer readonly dispid 117;
    property Ssl: Integer dispid 118;
    property TotalUploadSize: Integer readonly dispid 119;
    property UploadInProgress: Integer readonly dispid 120;
    property UploadSuccess: Integer readonly dispid 121;
    procedure AbortUpload; dispid 122;
    procedure AddCustomHeader(const name: WideString; const value: WideString); dispid 123;
    procedure AddFileReference(const name: WideString; const filename: WideString); dispid 124;
    procedure AddParam(const name: WideString; const value: WideString); dispid 125;
    function BeginUpload: Integer; dispid 126;
    function BlockingUpload: Integer; dispid 127;
    function BlockingUploadAsync: IChilkatTask; dispid 627;
    procedure ClearFileReferences; dispid 128;
    procedure ClearParams; dispid 129;
    procedure SleepMs(millisec: Integer); dispid 130;
    function UploadToMemory: OleVariant; dispid 131;
    property PreferIpv6: Integer dispid 133;
    property PercentDoneScale: Integer dispid 134;
    property BandwidthThrottleUp: Integer dispid 135;
    property ClientIpAddress: WideString dispid 136;
    property TlsPinSet: WideString dispid 137;
    property SslAllowedCiphers: WideString dispid 138;
    property SslProtocol: WideString dispid 139;
    property AbortCurrent: Integer dispid 140;
    function LoadTaskCaller(const task: IChilkatTask): Integer; dispid 141;
    property ResponseBodyStr: WideString readonly dispid 143;
  end;

// *********************************************************************//
// Interface: IChilkatWebSocket
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {01A80A1C-F3CB-4837-B577-2C67E275D441}
// *********************************************************************//
  IChilkatWebSocket = interface(IDispatch)
    ['{01A80A1C-F3CB-4837-B577-2C67E275D441}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_LastMethodSuccess: Integer; safecall;
    procedure Set_LastMethodSuccess(pVal: Integer); safecall;
    function Get_LastStringResult: WideString; safecall;
    function Get_LastBinaryResult: OleVariant; safecall;
    function Get_LastStringResultLen: Integer; safecall;
    function UseConnection(const connection: IChilkatRest): Integer; safecall;
    function AddClientHeaders: Integer; safecall;
    function ValidateServerHandshake: Integer; safecall;
    function Get_IdleTimeoutMs: Integer; safecall;
    procedure Set_IdleTimeoutMs(pVal: Integer); safecall;
    function SendFrame(const stringToSend: WideString; finalFrame: Integer): Integer; safecall;
    function SendFrameAsync(const stringToSend: WideString; finalFrame: Integer): IChilkatTask; safecall;
    function ReadFrame: Integer; safecall;
    function ReadFrameAsync: IChilkatTask; safecall;
    function Get_FrameOpcode: WideString; safecall;
    function Get_FrameDataLen: Integer; safecall;
    function Get_finalFrame: Integer; safecall;
    function GetFrameData: WideString; safecall;
    function GetFrameDataBd(const binData: IChilkatBinData): Integer; safecall;
    function GetFrameDataSb(const sb: IChilkatStringBuilder): Integer; safecall;
    function SendFrameSb(const sbToSend: IChilkatStringBuilder; finalFrame: Integer): Integer; safecall;
    function SendFrameSbAsync(const sbToSend: IChilkatStringBuilder; finalFrame: Integer): IChilkatTask; safecall;
    function SendFrameBd(const bdToSend: IChilkatBinData; finalFrame: Integer): Integer; safecall;
    function SendFrameBdAsync(const bdToSend: IChilkatBinData; finalFrame: Integer): IChilkatTask; safecall;
    function Get_IsConnected: Integer; safecall;
    function PollDataAvailable: Integer; safecall;
    function Get_CloseAutoRespond: Integer; safecall;
    procedure Set_CloseAutoRespond(pVal: Integer); safecall;
    function Get_PingAutoRespond: Integer; safecall;
    procedure Set_PingAutoRespond(pVal: Integer); safecall;
    function Get_NeedSendPong: Integer; safecall;
    function Get_CloseReceived: Integer; safecall;
    function Get_CloseStatusCode: Integer; safecall;
    function Get_CloseReason: WideString; safecall;
    function SendPing(const pingData: WideString): Integer; safecall;
    function SendPingAsync(const pingData: WideString): IChilkatTask; safecall;
    function SendPong: Integer; safecall;
    function SendPongAsync: IChilkatTask; safecall;
    function SendClose(includeStatus: Integer; StatusCode: Integer; const reason: WideString): Integer; safecall;
    function SendCloseAsync(includeStatus: Integer; StatusCode: Integer; const reason: WideString): IChilkatTask; safecall;
    function CloseConnection: Integer; safecall;
    function Get_PongAutoConsume: Integer; safecall;
    procedure Set_PongAutoConsume(pVal: Integer); safecall;
    function Get_PongConsumed: Integer; safecall;
    function Get_ReadFrameFailReason: Integer; safecall;
    function Get_FrameOpcodeInt: Integer; safecall;
    function Get_UncommonOptions: WideString; safecall;
    function LoadTaskCaller(const task: IChilkatTask): Integer; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property LastMethodSuccess: Integer read Get_LastMethodSuccess write Set_LastMethodSuccess;
    property LastStringResult: WideString read Get_LastStringResult;
    property LastBinaryResult: OleVariant read Get_LastBinaryResult;
    property LastStringResultLen: Integer read Get_LastStringResultLen;
    property IdleTimeoutMs: Integer read Get_IdleTimeoutMs write Set_IdleTimeoutMs;
    property FrameOpcode: WideString read Get_FrameOpcode;
    property FrameDataLen: Integer read Get_FrameDataLen;
    property finalFrame: Integer read Get_finalFrame;
    property IsConnected: Integer read Get_IsConnected;
    property CloseAutoRespond: Integer read Get_CloseAutoRespond write Set_CloseAutoRespond;
    property PingAutoRespond: Integer read Get_PingAutoRespond write Set_PingAutoRespond;
    property NeedSendPong: Integer read Get_NeedSendPong;
    property CloseReceived: Integer read Get_CloseReceived;
    property CloseStatusCode: Integer read Get_CloseStatusCode;
    property CloseReason: WideString read Get_CloseReason;
    property PongAutoConsume: Integer read Get_PongAutoConsume write Set_PongAutoConsume;
    property PongConsumed: Integer read Get_PongConsumed;
    property ReadFrameFailReason: Integer read Get_ReadFrameFailReason;
    property FrameOpcodeInt: Integer read Get_FrameOpcodeInt;
    property UncommonOptions: WideString read Get_UncommonOptions;
  end;

// *********************************************************************//
// DispIntf:  IChilkatWebSocketDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {01A80A1C-F3CB-4837-B577-2C67E275D441}
// *********************************************************************//
  IChilkatWebSocketDisp = dispinterface
    ['{01A80A1C-F3CB-4837-B577-2C67E275D441}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property LastMethodSuccess: Integer dispid 9;
    property LastStringResult: WideString readonly dispid 10;
    property LastBinaryResult: OleVariant readonly dispid 11;
    property LastStringResultLen: Integer readonly dispid 12;
    function UseConnection(const connection: IChilkatRest): Integer; dispid 101;
    function AddClientHeaders: Integer; dispid 105;
    function ValidateServerHandshake: Integer; dispid 106;
    property IdleTimeoutMs: Integer dispid 107;
    function SendFrame(const stringToSend: WideString; finalFrame: Integer): Integer; dispid 108;
    function SendFrameAsync(const stringToSend: WideString; finalFrame: Integer): IChilkatTask; dispid 608;
    function ReadFrame: Integer; dispid 111;
    function ReadFrameAsync: IChilkatTask; dispid 611;
    property FrameOpcode: WideString readonly dispid 112;
    property FrameDataLen: Integer readonly dispid 113;
    property finalFrame: Integer readonly dispid 114;
    function GetFrameData: WideString; dispid 115;
    function GetFrameDataBd(const binData: IChilkatBinData): Integer; dispid 116;
    function GetFrameDataSb(const sb: IChilkatStringBuilder): Integer; dispid 117;
    function SendFrameSb(const sbToSend: IChilkatStringBuilder; finalFrame: Integer): Integer; dispid 118;
    function SendFrameSbAsync(const sbToSend: IChilkatStringBuilder; finalFrame: Integer): IChilkatTask; dispid 618;
    function SendFrameBd(const bdToSend: IChilkatBinData; finalFrame: Integer): Integer; dispid 119;
    function SendFrameBdAsync(const bdToSend: IChilkatBinData; finalFrame: Integer): IChilkatTask; dispid 619;
    property IsConnected: Integer readonly dispid 120;
    function PollDataAvailable: Integer; dispid 121;
    property CloseAutoRespond: Integer dispid 122;
    property PingAutoRespond: Integer dispid 123;
    property NeedSendPong: Integer readonly dispid 124;
    property CloseReceived: Integer readonly dispid 125;
    property CloseStatusCode: Integer readonly dispid 126;
    property CloseReason: WideString readonly dispid 127;
    function SendPing(const pingData: WideString): Integer; dispid 128;
    function SendPingAsync(const pingData: WideString): IChilkatTask; dispid 628;
    function SendPong: Integer; dispid 129;
    function SendPongAsync: IChilkatTask; dispid 629;
    function SendClose(includeStatus: Integer; StatusCode: Integer; const reason: WideString): Integer; dispid 130;
    function SendCloseAsync(includeStatus: Integer; StatusCode: Integer; const reason: WideString): IChilkatTask; dispid 630;
    function CloseConnection: Integer; dispid 131;
    property PongAutoConsume: Integer dispid 132;
    property PongConsumed: Integer readonly dispid 133;
    property ReadFrameFailReason: Integer readonly dispid 134;
    property FrameOpcodeInt: Integer readonly dispid 135;
    property UncommonOptions: WideString readonly dispid 136;
    function LoadTaskCaller(const task: IChilkatTask): Integer; dispid 137;
  end;

// *********************************************************************//
// Interface: IChilkatXml
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2077C1B5-FBD0-40DF-B7AA-E07CBA589CB0}
// *********************************************************************//
  IChilkatXml = interface(IDispatch)
    ['{2077C1B5-FBD0-40DF-B7AA-E07CBA589CB0}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_LastMethodSuccess: Integer; safecall;
    procedure Set_LastMethodSuccess(pVal: Integer); safecall;
    function Get_LastStringResult: WideString; safecall;
    function Get_LastBinaryResult: OleVariant; safecall;
    function Get_LastStringResultLen: Integer; safecall;
    function Get_Cdata: Integer; safecall;
    procedure Set_Cdata(pVal: Integer); safecall;
    function Get_content: WideString; safecall;
    procedure Set_content(const pVal: WideString); safecall;
    function Get_ContentInt: Integer; safecall;
    procedure Set_ContentInt(pVal: Integer); safecall;
    function Get_DocType: WideString; safecall;
    procedure Set_DocType(const pVal: WideString); safecall;
    function Get_EmitXmlDecl: Integer; safecall;
    procedure Set_EmitXmlDecl(pVal: Integer); safecall;
    function Get_encoding: WideString; safecall;
    procedure Set_encoding(const pVal: WideString); safecall;
    function Get_NumAttributes: Integer; safecall;
    function Get_NumChildren: Integer; safecall;
    function Get_SortCaseInsensitive: Integer; safecall;
    procedure Set_SortCaseInsensitive(pVal: Integer); safecall;
    function Get_Standalone: Integer; safecall;
    procedure Set_Standalone(pVal: Integer); safecall;
    function Get_Tag: WideString; safecall;
    procedure Set_Tag(const pVal: WideString); safecall;
    function Get_TreeId: Integer; safecall;
    function AccumulateTagContent(const Tag: WideString; const skipTags: WideString): WideString; safecall;
    function AddAttribute(const name: WideString; const value: WideString): Integer; safecall;
    function AddAttributeInt(const name: WideString; value: Integer): Integer; safecall;
    function AddChildTree(const tree: IChilkatXml): Integer; safecall;
    procedure AddOrUpdateAttribute(const name: WideString; const value: WideString); safecall;
    procedure AddOrUpdateAttributeI(const name: WideString; value: Integer); safecall;
    procedure AddStyleSheet(const styleSheet: WideString); safecall;
    procedure AddToAttribute(const name: WideString; amount: Integer); safecall;
    procedure AddToChildContent(const Tag: WideString; amount: Integer); safecall;
    procedure AddToContent(amount: Integer); safecall;
    function AppendToContent(const str: WideString): Integer; safecall;
    function BEncodeContent(const charset: WideString; inData: OleVariant): Integer; safecall;
    function ChildContentMatches(const tagPath: WideString; const pattern: WideString; 
                                 caseSensitive: Integer): Integer; safecall;
    function ChilkatPath(const pathCmd: WideString): WideString; safecall;
    procedure Clear; safecall;
    function ContentMatches(const pattern: WideString; caseSensitive: Integer): Integer; safecall;
    procedure Copy(const node: IChilkatXml); safecall;
    procedure CopyRef(const copyFromNode: IChilkatXml); safecall;
    function DecodeContent: OleVariant; safecall;
    function DecodeEntities(const str: WideString): WideString; safecall;
    function DecryptContent(const password: WideString): Integer; safecall;
    function EncryptContent(const password: WideString): Integer; safecall;
    function ExtractChildByIndex(index: Integer): IChilkatXml; safecall;
    function ExtractChildByName(const tagPath: WideString; const attrName: WideString; 
                                const attrValue: WideString): IChilkatXml; safecall;
    function FindChild(const tagPath: WideString): IChilkatXml; safecall;
    function FindChild2(const tagPath: WideString): Integer; safecall;
    function FindNextRecord(const tagPath: WideString; const contentPattern: WideString): IChilkatXml; safecall;
    function FindOrAddNewChild(const tagPath: WideString): IChilkatXml; safecall;
    function FirstChild: IChilkatXml; safecall;
    function FirstChild2: Integer; safecall;
    function GetAttrValue(const name: WideString): WideString; safecall;
    function GetAttrValueInt(const name: WideString): Integer; safecall;
    function GetAttributeName(index: Integer): WideString; safecall;
    function GetAttributeValue(index: Integer): WideString; safecall;
    function GetAttributeValueInt(index: Integer): Integer; safecall;
    function GetBinaryContent(unzipFlag: Integer; decryptFlag: Integer; const password: WideString): OleVariant; safecall;
    function GetChild(index: Integer): IChilkatXml; safecall;
    function GetChild2(index: Integer): Integer; safecall;
    function GetChildBoolValue(const tagPath: WideString): Integer; safecall;
    function GetChildContent(const tagPath: WideString): WideString; safecall;
    function GetChildContentByIndex(index: Integer): WideString; safecall;
    function GetChildExact(const Tag: WideString; const content: WideString): IChilkatXml; safecall;
    function GetChildIntValue(const tagPath: WideString): Integer; safecall;
    function GetChildTag(index: Integer): WideString; safecall;
    function GetChildTagByIndex(index: Integer): WideString; safecall;
    function GetChildWithAttr(const tagPath: WideString; const attrName: WideString; 
                              const attrValue: WideString): IChilkatXml; safecall;
    function GetChildWithContent(const content: WideString): IChilkatXml; safecall;
    function GetChildWithTag(const tagPath: WideString): IChilkatXml; safecall;
    function GetNthChildWithTag(const Tag: WideString; n: Integer): IChilkatXml; safecall;
    function GetNthChildWithTag2(const Tag: WideString; n: Integer): Integer; safecall;
    function GetParent: IChilkatXml; safecall;
    function GetParent2: Integer; safecall;
    function GetRoot: IChilkatXml; safecall;
    procedure GetRoot2; safecall;
    function GetSelf: IChilkatXml; safecall;
    function GetXml: WideString; safecall;
    function HasAttrWithValue(const name: WideString; const value: WideString): Integer; safecall;
    function HasAttribute(const name: WideString): Integer; safecall;
    function HasChildWithContent(const content: WideString): Integer; safecall;
    function HasChildWithTag(const tagPath: WideString): Integer; safecall;
    function HasChildWithTagAndContent(const tagPath: WideString; const content: WideString): Integer; safecall;
    procedure InsertChildTreeAfter(index: Integer; const tree: IChilkatXml); safecall;
    procedure InsertChildTreeBefore(index: Integer; const tree: IChilkatXml); safecall;
    function LastChild: IChilkatXml; safecall;
    function LastChild2: Integer; safecall;
    function LoadXml(const xmlData: WideString): Integer; safecall;
    function LoadXml2(const xmlData: WideString; AutoTrim: Integer): Integer; safecall;
    function LoadXmlFile(const filename: WideString): Integer; safecall;
    function LoadXmlFile2(const filename: WideString; AutoTrim: Integer): Integer; safecall;
    function NewChild(const tagPath: WideString; const content: WideString): IChilkatXml; safecall;
    procedure NewChild2(const tagPath: WideString; const content: WideString); safecall;
    function NewChildAfter(index: Integer; const Tag: WideString; const content: WideString): IChilkatXml; safecall;
    function NewChildBefore(index: Integer; const Tag: WideString; const content: WideString): IChilkatXml; safecall;
    procedure NewChildInt2(const tagPath: WideString; value: Integer); safecall;
    function NextSibling: IChilkatXml; safecall;
    function NextSibling2: Integer; safecall;
    function NumChildrenHavingTag(const Tag: WideString): Integer; safecall;
    function PreviousSibling: IChilkatXml; safecall;
    function PreviousSibling2: Integer; safecall;
    function QEncodeContent(const charset: WideString; inData: OleVariant): Integer; safecall;
    function RemoveAllAttributes: Integer; safecall;
    procedure RemoveAllChildren; safecall;
    function RemoveAttribute(const name: WideString): Integer; safecall;
    procedure RemoveChild(const tagPath: WideString); safecall;
    procedure RemoveChildByIndex(index: Integer); safecall;
    procedure RemoveChildWithContent(const content: WideString); safecall;
    procedure RemoveFromTree; safecall;
    function SaveBinaryContent(const filename: WideString; unzipFlag: Integer; 
                               decryptFlag: Integer; const password: WideString): Integer; safecall;
    function SaveXml(const filename: WideString): Integer; safecall;
    function SearchAllForContent(const afterPtr: IChilkatXml; const contentPattern: WideString): IChilkatXml; safecall;
    function SearchAllForContent2(const afterPtr: IChilkatXml; const contentPattern: WideString): Integer; safecall;
    function SearchForAttribute(const afterPtr: IChilkatXml; const Tag: WideString; 
                                const attr: WideString; const valuePattern: WideString): IChilkatXml; safecall;
    function SearchForAttribute2(const afterPtr: IChilkatXml; const Tag: WideString; 
                                 const attr: WideString; const valuePattern: WideString): Integer; safecall;
    function SearchForContent(const afterPtr: IChilkatXml; const Tag: WideString; 
                              const contentPattern: WideString): IChilkatXml; safecall;
    function SearchForContent2(const afterPtr: IChilkatXml; const Tag: WideString; 
                               const contentPattern: WideString): Integer; safecall;
    function SearchForTag(const afterPtr: IChilkatXml; const Tag: WideString): IChilkatXml; safecall;
    function SearchForTag2(const afterPtr: IChilkatXml; const Tag: WideString): Integer; safecall;
    function SetBinaryContent(inData: OleVariant; zipFlag: Integer; encryptFlag: Integer; 
                              const password: WideString): Integer; safecall;
    function SetBinaryContentFromFile(const filename: WideString; zipFlag: Integer; 
                                      encryptFlag: Integer; const password: WideString): Integer; safecall;
    procedure SortByAttribute(const attrName: WideString; ascending: Integer); safecall;
    procedure SortByAttributeInt(const attrName: WideString; ascending: Integer); safecall;
    procedure SortByContent(ascending: Integer); safecall;
    procedure SortByTag(ascending: Integer); safecall;
    procedure SortRecordsByAttribute(const sortTag: WideString; const attrName: WideString; 
                                     ascending: Integer); safecall;
    procedure SortRecordsByContent(const sortTag: WideString; ascending: Integer); safecall;
    procedure SortRecordsByContentInt(const sortTag: WideString; ascending: Integer); safecall;
    function SwapNode(const node: IChilkatXml): Integer; safecall;
    function SwapTree(const tree: IChilkatXml): Integer; safecall;
    function TagContent(const tagName: WideString): WideString; safecall;
    function TagEquals(const Tag: WideString): Integer; safecall;
    function UnzipContent: Integer; safecall;
    function UnzipTree: Integer; safecall;
    function UpdateAttribute(const attrName: WideString; const attrValue: WideString): Integer; safecall;
    function UpdateAttributeInt(const attrName: WideString; value: Integer): Integer; safecall;
    procedure UpdateChildContent(const tagPath: WideString; const value: WideString); safecall;
    procedure UpdateChildContentInt(const tagPath: WideString; value: Integer); safecall;
    function ZipContent: Integer; safecall;
    function ZipTree: Integer; safecall;
    function Get_emitBom: Integer; safecall;
    procedure Set_emitBom(pVal: Integer); safecall;
    function LoadSb(const sb: IChilkatStringBuilder; AutoTrim: Integer): Integer; safecall;
    function GetXmlSb(const sb: IChilkatStringBuilder): Integer; safecall;
    function Get_I: Integer; safecall;
    procedure Set_I(pVal: Integer); safecall;
    function Get_J: Integer; safecall;
    procedure Set_J(pVal: Integer); safecall;
    function Get_K: Integer; safecall;
    procedure Set_K(pVal: Integer); safecall;
    function NumChildrenAt(const tagPath: WideString): Integer; safecall;
    function UpdateAt(const tagPath: WideString; autoCreate: Integer; const value: WideString): Integer; safecall;
    function UpdateAttrAt(const tagPath: WideString; autoCreate: Integer; 
                          const attrName: WideString; const attrValue: WideString): Integer; safecall;
    function Get_EmitCompact: Integer; safecall;
    procedure Set_EmitCompact(pVal: Integer); safecall;
    function GetChildContentSb(const tagPath: WideString; const sb: IChilkatStringBuilder): Integer; safecall;
    function TagIndex(const tagPath: WideString): Integer; safecall;
    function Get_IsBase64: Integer; safecall;
    function Get_TagNsPrefix: WideString; safecall;
    procedure Set_TagNsPrefix(const pVal: WideString); safecall;
    function Get_TagUnprefixed: WideString; safecall;
    procedure Set_TagUnprefixed(const pVal: WideString); safecall;
    function TagNsEquals(const ns: WideString): Integer; safecall;
    function TagUnpEquals(const unprefixedTag: WideString): Integer; safecall;
    function GetChildAttrValue(const tagPath: WideString; const attrName: WideString): WideString; safecall;
    function RemoveStyleSheet(const attrName: WideString; const attrValue: WideString): Integer; safecall;
    function PruneAttribute(const attrName: WideString): Integer; safecall;
    function PruneTag(const Tag: WideString): Integer; safecall;
    procedure Scrub(const directives: WideString); safecall;
    function LoadBd(const bd: IChilkatBinData; AutoTrim: Integer): Integer; safecall;
    function GetXmlBd(const bd: IChilkatBinData): Integer; safecall;
    function Get_tagPath: WideString; safecall;
    function NextInTraversal2(const sbState: IChilkatStringBuilder): Integer; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property LastMethodSuccess: Integer read Get_LastMethodSuccess write Set_LastMethodSuccess;
    property LastStringResult: WideString read Get_LastStringResult;
    property LastBinaryResult: OleVariant read Get_LastBinaryResult;
    property LastStringResultLen: Integer read Get_LastStringResultLen;
    property Cdata: Integer read Get_Cdata write Set_Cdata;
    property content: WideString read Get_content write Set_content;
    property ContentInt: Integer read Get_ContentInt write Set_ContentInt;
    property DocType: WideString read Get_DocType write Set_DocType;
    property EmitXmlDecl: Integer read Get_EmitXmlDecl write Set_EmitXmlDecl;
    property encoding: WideString read Get_encoding write Set_encoding;
    property NumAttributes: Integer read Get_NumAttributes;
    property NumChildren: Integer read Get_NumChildren;
    property SortCaseInsensitive: Integer read Get_SortCaseInsensitive write Set_SortCaseInsensitive;
    property Standalone: Integer read Get_Standalone write Set_Standalone;
    property Tag: WideString read Get_Tag write Set_Tag;
    property TreeId: Integer read Get_TreeId;
    property emitBom: Integer read Get_emitBom write Set_emitBom;
    property I: Integer read Get_I write Set_I;
    property J: Integer read Get_J write Set_J;
    property K: Integer read Get_K write Set_K;
    property EmitCompact: Integer read Get_EmitCompact write Set_EmitCompact;
    property IsBase64: Integer read Get_IsBase64;
    property TagNsPrefix: WideString read Get_TagNsPrefix write Set_TagNsPrefix;
    property TagUnprefixed: WideString read Get_TagUnprefixed write Set_TagUnprefixed;
    property tagPath: WideString read Get_tagPath;
  end;

// *********************************************************************//
// DispIntf:  IChilkatXmlDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2077C1B5-FBD0-40DF-B7AA-E07CBA589CB0}
// *********************************************************************//
  IChilkatXmlDisp = dispinterface
    ['{2077C1B5-FBD0-40DF-B7AA-E07CBA589CB0}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property LastMethodSuccess: Integer dispid 9;
    property LastStringResult: WideString readonly dispid 10;
    property LastBinaryResult: OleVariant readonly dispid 11;
    property LastStringResultLen: Integer readonly dispid 12;
    property Cdata: Integer dispid 100;
    property content: WideString dispid 101;
    property ContentInt: Integer dispid 102;
    property DocType: WideString dispid 103;
    property EmitXmlDecl: Integer dispid 104;
    property encoding: WideString dispid 105;
    property NumAttributes: Integer readonly dispid 106;
    property NumChildren: Integer readonly dispid 107;
    property SortCaseInsensitive: Integer dispid 108;
    property Standalone: Integer dispid 109;
    property Tag: WideString dispid 110;
    property TreeId: Integer readonly dispid 111;
    function AccumulateTagContent(const Tag: WideString; const skipTags: WideString): WideString; dispid 112;
    function AddAttribute(const name: WideString; const value: WideString): Integer; dispid 113;
    function AddAttributeInt(const name: WideString; value: Integer): Integer; dispid 114;
    function AddChildTree(const tree: IChilkatXml): Integer; dispid 115;
    procedure AddOrUpdateAttribute(const name: WideString; const value: WideString); dispid 116;
    procedure AddOrUpdateAttributeI(const name: WideString; value: Integer); dispid 117;
    procedure AddStyleSheet(const styleSheet: WideString); dispid 118;
    procedure AddToAttribute(const name: WideString; amount: Integer); dispid 119;
    procedure AddToChildContent(const Tag: WideString; amount: Integer); dispid 120;
    procedure AddToContent(amount: Integer); dispid 121;
    function AppendToContent(const str: WideString): Integer; dispid 122;
    function BEncodeContent(const charset: WideString; inData: OleVariant): Integer; dispid 123;
    function ChildContentMatches(const tagPath: WideString; const pattern: WideString; 
                                 caseSensitive: Integer): Integer; dispid 124;
    function ChilkatPath(const pathCmd: WideString): WideString; dispid 125;
    procedure Clear; dispid 126;
    function ContentMatches(const pattern: WideString; caseSensitive: Integer): Integer; dispid 127;
    procedure Copy(const node: IChilkatXml); dispid 128;
    procedure CopyRef(const copyFromNode: IChilkatXml); dispid 129;
    function DecodeContent: OleVariant; dispid 130;
    function DecodeEntities(const str: WideString): WideString; dispid 131;
    function DecryptContent(const password: WideString): Integer; dispid 132;
    function EncryptContent(const password: WideString): Integer; dispid 133;
    function ExtractChildByIndex(index: Integer): IChilkatXml; dispid 134;
    function ExtractChildByName(const tagPath: WideString; const attrName: WideString; 
                                const attrValue: WideString): IChilkatXml; dispid 135;
    function FindChild(const tagPath: WideString): IChilkatXml; dispid 136;
    function FindChild2(const tagPath: WideString): Integer; dispid 137;
    function FindNextRecord(const tagPath: WideString; const contentPattern: WideString): IChilkatXml; dispid 138;
    function FindOrAddNewChild(const tagPath: WideString): IChilkatXml; dispid 139;
    function FirstChild: IChilkatXml; dispid 140;
    function FirstChild2: Integer; dispid 141;
    function GetAttrValue(const name: WideString): WideString; dispid 142;
    function GetAttrValueInt(const name: WideString): Integer; dispid 143;
    function GetAttributeName(index: Integer): WideString; dispid 144;
    function GetAttributeValue(index: Integer): WideString; dispid 145;
    function GetAttributeValueInt(index: Integer): Integer; dispid 146;
    function GetBinaryContent(unzipFlag: Integer; decryptFlag: Integer; const password: WideString): OleVariant; dispid 147;
    function GetChild(index: Integer): IChilkatXml; dispid 148;
    function GetChild2(index: Integer): Integer; dispid 149;
    function GetChildBoolValue(const tagPath: WideString): Integer; dispid 150;
    function GetChildContent(const tagPath: WideString): WideString; dispid 151;
    function GetChildContentByIndex(index: Integer): WideString; dispid 152;
    function GetChildExact(const Tag: WideString; const content: WideString): IChilkatXml; dispid 153;
    function GetChildIntValue(const tagPath: WideString): Integer; dispid 154;
    function GetChildTag(index: Integer): WideString; dispid 155;
    function GetChildTagByIndex(index: Integer): WideString; dispid 156;
    function GetChildWithAttr(const tagPath: WideString; const attrName: WideString; 
                              const attrValue: WideString): IChilkatXml; dispid 157;
    function GetChildWithContent(const content: WideString): IChilkatXml; dispid 158;
    function GetChildWithTag(const tagPath: WideString): IChilkatXml; dispid 159;
    function GetNthChildWithTag(const Tag: WideString; n: Integer): IChilkatXml; dispid 160;
    function GetNthChildWithTag2(const Tag: WideString; n: Integer): Integer; dispid 161;
    function GetParent: IChilkatXml; dispid 162;
    function GetParent2: Integer; dispid 163;
    function GetRoot: IChilkatXml; dispid 164;
    procedure GetRoot2; dispid 165;
    function GetSelf: IChilkatXml; dispid 166;
    function GetXml: WideString; dispid 167;
    function HasAttrWithValue(const name: WideString; const value: WideString): Integer; dispid 168;
    function HasAttribute(const name: WideString): Integer; dispid 169;
    function HasChildWithContent(const content: WideString): Integer; dispid 170;
    function HasChildWithTag(const tagPath: WideString): Integer; dispid 171;
    function HasChildWithTagAndContent(const tagPath: WideString; const content: WideString): Integer; dispid 172;
    procedure InsertChildTreeAfter(index: Integer; const tree: IChilkatXml); dispid 173;
    procedure InsertChildTreeBefore(index: Integer; const tree: IChilkatXml); dispid 174;
    function LastChild: IChilkatXml; dispid 175;
    function LastChild2: Integer; dispid 176;
    function LoadXml(const xmlData: WideString): Integer; dispid 177;
    function LoadXml2(const xmlData: WideString; AutoTrim: Integer): Integer; dispid 178;
    function LoadXmlFile(const filename: WideString): Integer; dispid 179;
    function LoadXmlFile2(const filename: WideString; AutoTrim: Integer): Integer; dispid 180;
    function NewChild(const tagPath: WideString; const content: WideString): IChilkatXml; dispid 181;
    procedure NewChild2(const tagPath: WideString; const content: WideString); dispid 182;
    function NewChildAfter(index: Integer; const Tag: WideString; const content: WideString): IChilkatXml; dispid 183;
    function NewChildBefore(index: Integer; const Tag: WideString; const content: WideString): IChilkatXml; dispid 184;
    procedure NewChildInt2(const tagPath: WideString; value: Integer); dispid 185;
    function NextSibling: IChilkatXml; dispid 186;
    function NextSibling2: Integer; dispid 187;
    function NumChildrenHavingTag(const Tag: WideString): Integer; dispid 188;
    function PreviousSibling: IChilkatXml; dispid 189;
    function PreviousSibling2: Integer; dispid 190;
    function QEncodeContent(const charset: WideString; inData: OleVariant): Integer; dispid 191;
    function RemoveAllAttributes: Integer; dispid 192;
    procedure RemoveAllChildren; dispid 193;
    function RemoveAttribute(const name: WideString): Integer; dispid 194;
    procedure RemoveChild(const tagPath: WideString); dispid 195;
    procedure RemoveChildByIndex(index: Integer); dispid 196;
    procedure RemoveChildWithContent(const content: WideString); dispid 197;
    procedure RemoveFromTree; dispid 198;
    function SaveBinaryContent(const filename: WideString; unzipFlag: Integer; 
                               decryptFlag: Integer; const password: WideString): Integer; dispid 199;
    function SaveXml(const filename: WideString): Integer; dispid 200;
    function SearchAllForContent(const afterPtr: IChilkatXml; const contentPattern: WideString): IChilkatXml; dispid 201;
    function SearchAllForContent2(const afterPtr: IChilkatXml; const contentPattern: WideString): Integer; dispid 202;
    function SearchForAttribute(const afterPtr: IChilkatXml; const Tag: WideString; 
                                const attr: WideString; const valuePattern: WideString): IChilkatXml; dispid 203;
    function SearchForAttribute2(const afterPtr: IChilkatXml; const Tag: WideString; 
                                 const attr: WideString; const valuePattern: WideString): Integer; dispid 204;
    function SearchForContent(const afterPtr: IChilkatXml; const Tag: WideString; 
                              const contentPattern: WideString): IChilkatXml; dispid 205;
    function SearchForContent2(const afterPtr: IChilkatXml; const Tag: WideString; 
                               const contentPattern: WideString): Integer; dispid 206;
    function SearchForTag(const afterPtr: IChilkatXml; const Tag: WideString): IChilkatXml; dispid 207;
    function SearchForTag2(const afterPtr: IChilkatXml; const Tag: WideString): Integer; dispid 208;
    function SetBinaryContent(inData: OleVariant; zipFlag: Integer; encryptFlag: Integer; 
                              const password: WideString): Integer; dispid 209;
    function SetBinaryContentFromFile(const filename: WideString; zipFlag: Integer; 
                                      encryptFlag: Integer; const password: WideString): Integer; dispid 210;
    procedure SortByAttribute(const attrName: WideString; ascending: Integer); dispid 211;
    procedure SortByAttributeInt(const attrName: WideString; ascending: Integer); dispid 212;
    procedure SortByContent(ascending: Integer); dispid 213;
    procedure SortByTag(ascending: Integer); dispid 214;
    procedure SortRecordsByAttribute(const sortTag: WideString; const attrName: WideString; 
                                     ascending: Integer); dispid 215;
    procedure SortRecordsByContent(const sortTag: WideString; ascending: Integer); dispid 216;
    procedure SortRecordsByContentInt(const sortTag: WideString; ascending: Integer); dispid 217;
    function SwapNode(const node: IChilkatXml): Integer; dispid 218;
    function SwapTree(const tree: IChilkatXml): Integer; dispid 219;
    function TagContent(const tagName: WideString): WideString; dispid 220;
    function TagEquals(const Tag: WideString): Integer; dispid 221;
    function UnzipContent: Integer; dispid 222;
    function UnzipTree: Integer; dispid 223;
    function UpdateAttribute(const attrName: WideString; const attrValue: WideString): Integer; dispid 224;
    function UpdateAttributeInt(const attrName: WideString; value: Integer): Integer; dispid 225;
    procedure UpdateChildContent(const tagPath: WideString; const value: WideString); dispid 226;
    procedure UpdateChildContentInt(const tagPath: WideString; value: Integer); dispid 227;
    function ZipContent: Integer; dispid 228;
    function ZipTree: Integer; dispid 229;
    property emitBom: Integer dispid 237;
    function LoadSb(const sb: IChilkatStringBuilder; AutoTrim: Integer): Integer; dispid 238;
    function GetXmlSb(const sb: IChilkatStringBuilder): Integer; dispid 239;
    property I: Integer dispid 240;
    property J: Integer dispid 241;
    property K: Integer dispid 242;
    function NumChildrenAt(const tagPath: WideString): Integer; dispid 243;
    function UpdateAt(const tagPath: WideString; autoCreate: Integer; const value: WideString): Integer; dispid 244;
    function UpdateAttrAt(const tagPath: WideString; autoCreate: Integer; 
                          const attrName: WideString; const attrValue: WideString): Integer; dispid 245;
    property EmitCompact: Integer dispid 246;
    function GetChildContentSb(const tagPath: WideString; const sb: IChilkatStringBuilder): Integer; dispid 247;
    function TagIndex(const tagPath: WideString): Integer; dispid 248;
    property IsBase64: Integer readonly dispid 249;
    property TagNsPrefix: WideString dispid 250;
    property TagUnprefixed: WideString dispid 251;
    function TagNsEquals(const ns: WideString): Integer; dispid 252;
    function TagUnpEquals(const unprefixedTag: WideString): Integer; dispid 253;
    function GetChildAttrValue(const tagPath: WideString; const attrName: WideString): WideString; dispid 254;
    function RemoveStyleSheet(const attrName: WideString; const attrValue: WideString): Integer; dispid 255;
    function PruneAttribute(const attrName: WideString): Integer; dispid 256;
    function PruneTag(const Tag: WideString): Integer; dispid 257;
    procedure Scrub(const directives: WideString); dispid 258;
    function LoadBd(const bd: IChilkatBinData; AutoTrim: Integer): Integer; dispid 259;
    function GetXmlBd(const bd: IChilkatBinData): Integer; dispid 260;
    property tagPath: WideString readonly dispid 261;
    function NextInTraversal2(const sbState: IChilkatStringBuilder): Integer; dispid 262;
  end;

// *********************************************************************//
// Interface: IChilkatXmlDSig
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {A488AA74-6A93-440C-B18D-26751B20625C}
// *********************************************************************//
  IChilkatXmlDSig = interface(IDispatch)
    ['{A488AA74-6A93-440C-B18D-26751B20625C}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_LastMethodSuccess: Integer; safecall;
    procedure Set_LastMethodSuccess(pVal: Integer); safecall;
    function Get_LastStringResult: WideString; safecall;
    function Get_LastBinaryResult: OleVariant; safecall;
    function Get_LastStringResultLen: Integer; safecall;
    function Get_WithComments: Integer; safecall;
    procedure Set_WithComments(pVal: Integer); safecall;
    function CanonicalizeXml(const xml: WideString; const Version: WideString; WithComments: Integer): WideString; safecall;
    function LoadSignature(const xmlSig: WideString): Integer; safecall;
    function LoadSignatureSb(const sbXmlSig: IChilkatStringBuilder): Integer; safecall;
    function Get_NumReferences: Integer; safecall;
    function IsReferenceExternal(index: Integer): Integer; safecall;
    function ReferenceUri(index: Integer): WideString; safecall;
    function SetRefDataSb(index: Integer; const sb: IChilkatStringBuilder; const charset: WideString): Integer; safecall;
    function SetRefDataBd(index: Integer; const binData: IChilkatBinData): Integer; safecall;
    function SetRefDataFile(index: Integer; const path: WideString): Integer; safecall;
    function VerifyReferenceDigest(index: Integer): Integer; safecall;
    function Get_NumSignatures: Integer; safecall;
    function Get_selector: Integer; safecall;
    procedure Set_selector(pVal: Integer); safecall;
    function CanonicalizeFragment(const xml: WideString; const fragmentId: WideString; 
                                  const Version: WideString; const prefixList: WideString; 
                                  WithComments: Integer): WideString; safecall;
    function LoadSignatureBd(const binData: IChilkatBinData): Integer; safecall;
    function VerifySignature(verifyReferenceDigests: Integer): Integer; safecall;
    function GetKeyInfo: IChilkatXml; safecall;
    function GetPublicKey: IPublicKey; safecall;
    function UseCertVault(const certVault: IChilkatXmlCertVault): Integer; safecall;
    function SetHmacKey(const key: WideString; const encoding: WideString): Integer; safecall;
    function SetPublicKey(const pubKey: IPublicKey): Integer; safecall;
    function GetCerts(const sa: ICkStringArray): Integer; safecall;
    function Get_IgnoreExternalRefs: Integer; safecall;
    procedure Set_IgnoreExternalRefs(pVal: Integer); safecall;
    function Get_RefFailReason: Integer; safecall;
    function Get_ExternalRefDirs: WideString; safecall;
    procedure Set_ExternalRefDirs(const pVal: WideString); safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property LastMethodSuccess: Integer read Get_LastMethodSuccess write Set_LastMethodSuccess;
    property LastStringResult: WideString read Get_LastStringResult;
    property LastBinaryResult: OleVariant read Get_LastBinaryResult;
    property LastStringResultLen: Integer read Get_LastStringResultLen;
    property WithComments: Integer read Get_WithComments write Set_WithComments;
    property NumReferences: Integer read Get_NumReferences;
    property NumSignatures: Integer read Get_NumSignatures;
    property selector: Integer read Get_selector write Set_selector;
    property IgnoreExternalRefs: Integer read Get_IgnoreExternalRefs write Set_IgnoreExternalRefs;
    property RefFailReason: Integer read Get_RefFailReason;
    property ExternalRefDirs: WideString read Get_ExternalRefDirs write Set_ExternalRefDirs;
  end;

// *********************************************************************//
// DispIntf:  IChilkatXmlDSigDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {A488AA74-6A93-440C-B18D-26751B20625C}
// *********************************************************************//
  IChilkatXmlDSigDisp = dispinterface
    ['{A488AA74-6A93-440C-B18D-26751B20625C}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property LastMethodSuccess: Integer dispid 9;
    property LastStringResult: WideString readonly dispid 10;
    property LastBinaryResult: OleVariant readonly dispid 11;
    property LastStringResultLen: Integer readonly dispid 12;
    property WithComments: Integer dispid 100;
    function CanonicalizeXml(const xml: WideString; const Version: WideString; WithComments: Integer): WideString; dispid 101;
    function LoadSignature(const xmlSig: WideString): Integer; dispid 102;
    function LoadSignatureSb(const sbXmlSig: IChilkatStringBuilder): Integer; dispid 103;
    property NumReferences: Integer readonly dispid 104;
    function IsReferenceExternal(index: Integer): Integer; dispid 105;
    function ReferenceUri(index: Integer): WideString; dispid 106;
    function SetRefDataSb(index: Integer; const sb: IChilkatStringBuilder; const charset: WideString): Integer; dispid 107;
    function SetRefDataBd(index: Integer; const binData: IChilkatBinData): Integer; dispid 108;
    function SetRefDataFile(index: Integer; const path: WideString): Integer; dispid 109;
    function VerifyReferenceDigest(index: Integer): Integer; dispid 110;
    property NumSignatures: Integer readonly dispid 111;
    property selector: Integer dispid 112;
    function CanonicalizeFragment(const xml: WideString; const fragmentId: WideString; 
                                  const Version: WideString; const prefixList: WideString; 
                                  WithComments: Integer): WideString; dispid 113;
    function LoadSignatureBd(const binData: IChilkatBinData): Integer; dispid 114;
    function VerifySignature(verifyReferenceDigests: Integer): Integer; dispid 115;
    function GetKeyInfo: IChilkatXml; dispid 116;
    function GetPublicKey: IPublicKey; dispid 117;
    function UseCertVault(const certVault: IChilkatXmlCertVault): Integer; dispid 118;
    function SetHmacKey(const key: WideString; const encoding: WideString): Integer; dispid 119;
    function SetPublicKey(const pubKey: IPublicKey): Integer; dispid 120;
    function GetCerts(const sa: ICkStringArray): Integer; dispid 121;
    property IgnoreExternalRefs: Integer dispid 123;
    property RefFailReason: Integer readonly dispid 124;
    property ExternalRefDirs: WideString dispid 125;
  end;

// *********************************************************************//
// Interface: IChilkatXmlDSigGen
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {07530635-48E4-4E43-B3C5-7BF9FF08C2C5}
// *********************************************************************//
  IChilkatXmlDSigGen = interface(IDispatch)
    ['{07530635-48E4-4E43-B3C5-7BF9FF08C2C5}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_LastMethodSuccess: Integer; safecall;
    procedure Set_LastMethodSuccess(pVal: Integer); safecall;
    function Get_LastStringResult: WideString; safecall;
    function Get_LastBinaryResult: OleVariant; safecall;
    function Get_LastStringResultLen: Integer; safecall;
    function Get_SigLocation: WideString; safecall;
    procedure Set_SigLocation(const pVal: WideString); safecall;
    function Get_SigNamespaceUri: WideString; safecall;
    procedure Set_SigNamespaceUri(const pVal: WideString); safecall;
    function Get_SigNamespacePrefix: WideString; safecall;
    procedure Set_SigNamespacePrefix(const pVal: WideString); safecall;
    function AddEnvelopedRef(const id: WideString; const content: IChilkatStringBuilder; 
                             const digestMethod: WideString; const canonMethod: WideString; 
                             const refType: WideString): Integer; safecall;
    function AddSameDocRef(const id: WideString; const digestMethod: WideString; 
                           const canonMethod: WideString; const prefixList: WideString; 
                           const refType: WideString): Integer; safecall;
    function SetPrivateKey(const privKey: IPrivateKey): Integer; safecall;
    function Get_SigningAlg: WideString; safecall;
    procedure Set_SigningAlg(const pVal: WideString); safecall;
    function Get_SignedInfoCanonAlg: WideString; safecall;
    procedure Set_SignedInfoCanonAlg(const pVal: WideString); safecall;
    function Get_SignedInfoPrefixList: WideString; safecall;
    procedure Set_SignedInfoPrefixList(const pVal: WideString); safecall;
    function Get_SignedInfoDigestMethod: WideString; safecall;
    procedure Set_SignedInfoDigestMethod(const pVal: WideString); safecall;
    function Get_KeyInfoType: WideString; safecall;
    procedure Set_KeyInfoType(const pVal: WideString); safecall;
    function CreateXmlDSig(const inXml: WideString): WideString; safecall;
    function Get_X509Type: WideString; safecall;
    procedure Set_X509Type(const pVal: WideString); safecall;
    function SetX509Cert(const cert: IChilkatCert; usePrivateKey: Integer): Integer; safecall;
    function Get_CustomKeyInfoXml: WideString; safecall;
    procedure Set_CustomKeyInfoXml(const pVal: WideString); safecall;
    function Get_SigId: WideString; safecall;
    procedure Set_SigId(const pVal: WideString); safecall;
    function SetHmacKey(const key: WideString; const encoding: WideString): Integer; safecall;
    function AddExternalFileRef(const uri: WideString; const localFilePath: WideString; 
                                const digestMethod: WideString; const refType: WideString): Integer; safecall;
    function AddExternalBinaryRef(const uri: WideString; const content: IChilkatBinData; 
                                  const digestMethod: WideString; const refType: WideString): Integer; safecall;
    function AddExternalTextRef(const uri: WideString; const content: IChilkatStringBuilder; 
                                const charset: WideString; includeBom: Integer; 
                                const digestMethod: WideString; const refType: WideString): Integer; safecall;
    function AddExternalXmlRef(const uri: WideString; const content: IChilkatStringBuilder; 
                               const digestMethod: WideString; const canonMethod: WideString; 
                               const refType: WideString): Integer; safecall;
    function Get_KeyInfoKeyName: WideString; safecall;
    procedure Set_KeyInfoKeyName(const pVal: WideString); safecall;
    function CreateXmlDSigSb(const sbXml: IChilkatStringBuilder): Integer; safecall;
    function Get_IncNamespacePrefix: WideString; safecall;
    procedure Set_IncNamespacePrefix(const pVal: WideString); safecall;
    function Get_IncNamespaceUri: WideString; safecall;
    procedure Set_IncNamespaceUri(const pVal: WideString); safecall;
    function Get_Behaviors: WideString; safecall;
    procedure Set_Behaviors(const pVal: WideString); safecall;
    function ConstructSignedInfo(const sbXml: IChilkatStringBuilder): WideString; safecall;
    function Get_KeyInfoId: WideString; safecall;
    procedure Set_KeyInfoId(const pVal: WideString); safecall;
    function SetRefIdAttr(const uri_or_id: WideString; const value: WideString): Integer; safecall;
    function AddObject(const id: WideString; const content: WideString; const mimeType: WideString; 
                       const encoding: WideString): Integer; safecall;
    function AddObjectRef(const id: WideString; const digestMethod: WideString; 
                          const canonMethod: WideString; const prefixList: WideString; 
                          const refType: WideString): Integer; safecall;
    function AddSignatureNamespace(const nsPrefix: WideString; const nsUri: WideString): Integer; safecall;
    function Get_SignedInfoId: WideString; safecall;
    procedure Set_SignedInfoId(const pVal: WideString); safecall;
    function Get_SigValueId: WideString; safecall;
    procedure Set_SigValueId(const pVal: WideString); safecall;
    function Get_SigLocationMod: Integer; safecall;
    procedure Set_SigLocationMod(pVal: Integer); safecall;
    function Get_UncommonOptions: WideString; safecall;
    procedure Set_UncommonOptions(const pVal: WideString); safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property LastMethodSuccess: Integer read Get_LastMethodSuccess write Set_LastMethodSuccess;
    property LastStringResult: WideString read Get_LastStringResult;
    property LastBinaryResult: OleVariant read Get_LastBinaryResult;
    property LastStringResultLen: Integer read Get_LastStringResultLen;
    property SigLocation: WideString read Get_SigLocation write Set_SigLocation;
    property SigNamespaceUri: WideString read Get_SigNamespaceUri write Set_SigNamespaceUri;
    property SigNamespacePrefix: WideString read Get_SigNamespacePrefix write Set_SigNamespacePrefix;
    property SigningAlg: WideString read Get_SigningAlg write Set_SigningAlg;
    property SignedInfoCanonAlg: WideString read Get_SignedInfoCanonAlg write Set_SignedInfoCanonAlg;
    property SignedInfoPrefixList: WideString read Get_SignedInfoPrefixList write Set_SignedInfoPrefixList;
    property SignedInfoDigestMethod: WideString read Get_SignedInfoDigestMethod write Set_SignedInfoDigestMethod;
    property KeyInfoType: WideString read Get_KeyInfoType write Set_KeyInfoType;
    property X509Type: WideString read Get_X509Type write Set_X509Type;
    property CustomKeyInfoXml: WideString read Get_CustomKeyInfoXml write Set_CustomKeyInfoXml;
    property SigId: WideString read Get_SigId write Set_SigId;
    property KeyInfoKeyName: WideString read Get_KeyInfoKeyName write Set_KeyInfoKeyName;
    property IncNamespacePrefix: WideString read Get_IncNamespacePrefix write Set_IncNamespacePrefix;
    property IncNamespaceUri: WideString read Get_IncNamespaceUri write Set_IncNamespaceUri;
    property Behaviors: WideString read Get_Behaviors write Set_Behaviors;
    property KeyInfoId: WideString read Get_KeyInfoId write Set_KeyInfoId;
    property SignedInfoId: WideString read Get_SignedInfoId write Set_SignedInfoId;
    property SigValueId: WideString read Get_SigValueId write Set_SigValueId;
    property SigLocationMod: Integer read Get_SigLocationMod write Set_SigLocationMod;
    property UncommonOptions: WideString read Get_UncommonOptions write Set_UncommonOptions;
  end;

// *********************************************************************//
// DispIntf:  IChilkatXmlDSigGenDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {07530635-48E4-4E43-B3C5-7BF9FF08C2C5}
// *********************************************************************//
  IChilkatXmlDSigGenDisp = dispinterface
    ['{07530635-48E4-4E43-B3C5-7BF9FF08C2C5}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property LastMethodSuccess: Integer dispid 9;
    property LastStringResult: WideString readonly dispid 10;
    property LastBinaryResult: OleVariant readonly dispid 11;
    property LastStringResultLen: Integer readonly dispid 12;
    property SigLocation: WideString dispid 102;
    property SigNamespaceUri: WideString dispid 103;
    property SigNamespacePrefix: WideString dispid 104;
    function AddEnvelopedRef(const id: WideString; const content: IChilkatStringBuilder; 
                             const digestMethod: WideString; const canonMethod: WideString; 
                             const refType: WideString): Integer; dispid 105;
    function AddSameDocRef(const id: WideString; const digestMethod: WideString; 
                           const canonMethod: WideString; const prefixList: WideString; 
                           const refType: WideString): Integer; dispid 106;
    function SetPrivateKey(const privKey: IPrivateKey): Integer; dispid 107;
    property SigningAlg: WideString dispid 108;
    property SignedInfoCanonAlg: WideString dispid 109;
    property SignedInfoPrefixList: WideString dispid 110;
    property SignedInfoDigestMethod: WideString dispid 111;
    property KeyInfoType: WideString dispid 112;
    function CreateXmlDSig(const inXml: WideString): WideString; dispid 113;
    property X509Type: WideString dispid 114;
    function SetX509Cert(const cert: IChilkatCert; usePrivateKey: Integer): Integer; dispid 115;
    property CustomKeyInfoXml: WideString dispid 118;
    property SigId: WideString dispid 119;
    function SetHmacKey(const key: WideString; const encoding: WideString): Integer; dispid 120;
    function AddExternalFileRef(const uri: WideString; const localFilePath: WideString; 
                                const digestMethod: WideString; const refType: WideString): Integer; dispid 121;
    function AddExternalBinaryRef(const uri: WideString; const content: IChilkatBinData; 
                                  const digestMethod: WideString; const refType: WideString): Integer; dispid 122;
    function AddExternalTextRef(const uri: WideString; const content: IChilkatStringBuilder; 
                                const charset: WideString; includeBom: Integer; 
                                const digestMethod: WideString; const refType: WideString): Integer; dispid 123;
    function AddExternalXmlRef(const uri: WideString; const content: IChilkatStringBuilder; 
                               const digestMethod: WideString; const canonMethod: WideString; 
                               const refType: WideString): Integer; dispid 124;
    property KeyInfoKeyName: WideString dispid 125;
    function CreateXmlDSigSb(const sbXml: IChilkatStringBuilder): Integer; dispid 126;
    property IncNamespacePrefix: WideString dispid 127;
    property IncNamespaceUri: WideString dispid 128;
    property Behaviors: WideString dispid 129;
    function ConstructSignedInfo(const sbXml: IChilkatStringBuilder): WideString; dispid 130;
    property KeyInfoId: WideString dispid 131;
    function SetRefIdAttr(const uri_or_id: WideString; const value: WideString): Integer; dispid 132;
    function AddObject(const id: WideString; const content: WideString; const mimeType: WideString; 
                       const encoding: WideString): Integer; dispid 133;
    function AddObjectRef(const id: WideString; const digestMethod: WideString; 
                          const canonMethod: WideString; const prefixList: WideString; 
                          const refType: WideString): Integer; dispid 134;
    function AddSignatureNamespace(const nsPrefix: WideString; const nsUri: WideString): Integer; dispid 135;
    property SignedInfoId: WideString dispid 136;
    property SigValueId: WideString dispid 137;
    property SigLocationMod: Integer dispid 138;
    property UncommonOptions: WideString dispid 139;
  end;

// *********************************************************************//
// Interface: IChilkatXmp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {17F00BC0-F47D-4AC2-9C20-16D73BA9D42D}
// *********************************************************************//
  IChilkatXmp = interface(IDispatch)
    ['{17F00BC0-F47D-4AC2-9C20-16D73BA9D42D}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_LastMethodSuccess: Integer; safecall;
    procedure Set_LastMethodSuccess(pVal: Integer); safecall;
    function Get_LastStringResult: WideString; safecall;
    function Get_LastBinaryResult: OleVariant; safecall;
    function Get_LastStringResultLen: Integer; safecall;
    function Get_StructInnerDescrip: Integer; safecall;
    procedure Set_StructInnerDescrip(pVal: Integer); safecall;
    function Get_NumEmbedded: Integer; safecall;
    function AddArray(const xml: IChilkatXml; const arrType: WideString; 
                      const propName: WideString; const values: ICkStringArray): Integer; safecall;
    procedure AddNsMapping(const ns: WideString; const uri: WideString); safecall;
    function AddSimpleDate(const iXml: IChilkatXml; const propName: WideString; propVal: TDateTime): Integer; safecall;
    function AddSimpleInt(const iXml: IChilkatXml; const propName: WideString; propVal: Integer): Integer; safecall;
    function AddSimpleStr(const iXml: IChilkatXml; const propName: WideString; 
                          const propVal: WideString): Integer; safecall;
    function AddStructProp(const IChilkatXml: IChilkatXml; const structName: WideString; 
                           const propName: WideString; const propValue: WideString): Integer; safecall;
    function Append(const iXml: IChilkatXml): Integer; safecall;
    function DateToString(d: TDateTime): WideString; safecall;
    function GetArray(const iXml: IChilkatXml; const propName: WideString): ICkStringArray; safecall;
    function GetEmbedded(index: Integer): IChilkatXml; safecall;
    function GetProperty(const iXml: IChilkatXml; const propName: WideString): IChilkatXml; safecall;
    function GetSimpleDate(const iXml: IChilkatXml; const propName: WideString): TDateTime; safecall;
    function GetSimpleInt(const iXml: IChilkatXml; const propName: WideString): Integer; safecall;
    function GetSimpleStr(const iXml: IChilkatXml; const propName: WideString): WideString; safecall;
    function GetStructPropNames(const iXml: IChilkatXml; const structName: WideString): ICkStringArray; safecall;
    function GetStructValue(const iXml: IChilkatXml; const structName: WideString; 
                            const propName: WideString): WideString; safecall;
    function LoadAppFile(const filename: WideString): Integer; safecall;
    function LoadFromBuffer(fileData: OleVariant; const ext: WideString): Integer; safecall;
    function NewXmp: IChilkatXml; safecall;
    function RemoveAllEmbedded: Integer; safecall;
    function RemoveArray(const iXml: IChilkatXml; const propName: WideString): Integer; safecall;
    function RemoveEmbedded(index: Integer): Integer; safecall;
    procedure RemoveNsMapping(const ns: WideString); safecall;
    function RemoveSimple(const iXml: IChilkatXml; const propName: WideString): Integer; safecall;
    function RemoveStruct(const iXml: IChilkatXml; const structName: WideString): Integer; safecall;
    function RemoveStructProp(const iXml: IChilkatXml; const structName: WideString; 
                              const propName: WideString): Integer; safecall;
    function SaveAppFile(const filename: WideString): Integer; safecall;
    function SaveToBuffer: OleVariant; safecall;
    function StringToDate(const str: WideString): TDateTime; safecall;
    function UnlockComponent(const unlockCode: WideString): Integer; safecall;
    function Get_UncommonOptions: WideString; safecall;
    procedure Set_UncommonOptions(const pVal: WideString); safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property LastMethodSuccess: Integer read Get_LastMethodSuccess write Set_LastMethodSuccess;
    property LastStringResult: WideString read Get_LastStringResult;
    property LastBinaryResult: OleVariant read Get_LastBinaryResult;
    property LastStringResultLen: Integer read Get_LastStringResultLen;
    property StructInnerDescrip: Integer read Get_StructInnerDescrip write Set_StructInnerDescrip;
    property NumEmbedded: Integer read Get_NumEmbedded;
    property UncommonOptions: WideString read Get_UncommonOptions write Set_UncommonOptions;
  end;

// *********************************************************************//
// DispIntf:  IChilkatXmpDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {17F00BC0-F47D-4AC2-9C20-16D73BA9D42D}
// *********************************************************************//
  IChilkatXmpDisp = dispinterface
    ['{17F00BC0-F47D-4AC2-9C20-16D73BA9D42D}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property LastMethodSuccess: Integer dispid 9;
    property LastStringResult: WideString readonly dispid 10;
    property LastBinaryResult: OleVariant readonly dispid 11;
    property LastStringResultLen: Integer readonly dispid 12;
    property StructInnerDescrip: Integer dispid 100;
    property NumEmbedded: Integer readonly dispid 101;
    function AddArray(const xml: IChilkatXml; const arrType: WideString; 
                      const propName: WideString; const values: ICkStringArray): Integer; dispid 102;
    procedure AddNsMapping(const ns: WideString; const uri: WideString); dispid 103;
    function AddSimpleDate(const iXml: IChilkatXml; const propName: WideString; propVal: TDateTime): Integer; dispid 104;
    function AddSimpleInt(const iXml: IChilkatXml; const propName: WideString; propVal: Integer): Integer; dispid 105;
    function AddSimpleStr(const iXml: IChilkatXml; const propName: WideString; 
                          const propVal: WideString): Integer; dispid 106;
    function AddStructProp(const IChilkatXml: IChilkatXml; const structName: WideString; 
                           const propName: WideString; const propValue: WideString): Integer; dispid 107;
    function Append(const iXml: IChilkatXml): Integer; dispid 108;
    function DateToString(d: TDateTime): WideString; dispid 109;
    function GetArray(const iXml: IChilkatXml; const propName: WideString): ICkStringArray; dispid 110;
    function GetEmbedded(index: Integer): IChilkatXml; dispid 111;
    function GetProperty(const iXml: IChilkatXml; const propName: WideString): IChilkatXml; dispid 112;
    function GetSimpleDate(const iXml: IChilkatXml; const propName: WideString): TDateTime; dispid 113;
    function GetSimpleInt(const iXml: IChilkatXml; const propName: WideString): Integer; dispid 114;
    function GetSimpleStr(const iXml: IChilkatXml; const propName: WideString): WideString; dispid 115;
    function GetStructPropNames(const iXml: IChilkatXml; const structName: WideString): ICkStringArray; dispid 116;
    function GetStructValue(const iXml: IChilkatXml; const structName: WideString; 
                            const propName: WideString): WideString; dispid 117;
    function LoadAppFile(const filename: WideString): Integer; dispid 118;
    function LoadFromBuffer(fileData: OleVariant; const ext: WideString): Integer; dispid 119;
    function NewXmp: IChilkatXml; dispid 120;
    function RemoveAllEmbedded: Integer; dispid 121;
    function RemoveArray(const iXml: IChilkatXml; const propName: WideString): Integer; dispid 122;
    function RemoveEmbedded(index: Integer): Integer; dispid 123;
    procedure RemoveNsMapping(const ns: WideString); dispid 124;
    function RemoveSimple(const iXml: IChilkatXml; const propName: WideString): Integer; dispid 125;
    function RemoveStruct(const iXml: IChilkatXml; const structName: WideString): Integer; dispid 126;
    function RemoveStructProp(const iXml: IChilkatXml; const structName: WideString; 
                              const propName: WideString): Integer; dispid 127;
    function SaveAppFile(const filename: WideString): Integer; dispid 128;
    function SaveToBuffer: OleVariant; dispid 129;
    function StringToDate(const str: WideString): TDateTime; dispid 130;
    function UnlockComponent(const unlockCode: WideString): Integer; dispid 131;
    property UncommonOptions: WideString dispid 133;
  end;

// *********************************************************************//
// Interface: IChilkatZip
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {EFE9ADE4-0851-49E2-BC0B-AB26E0353B1B}
// *********************************************************************//
  IChilkatZip = interface(IDispatch)
    ['{EFE9ADE4-0851-49E2-BC0B-AB26E0353B1B}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_LastMethodSuccess: Integer; safecall;
    procedure Set_LastMethodSuccess(pVal: Integer); safecall;
    function Get_LastStringResult: WideString; safecall;
    function Get_LastBinaryResult: OleVariant; safecall;
    function Get_LastStringResultLen: Integer; safecall;
    function Get_AppendFromDir: WideString; safecall;
    procedure Set_AppendFromDir(const pVal: WideString); safecall;
    function Get_AutoRun: WideString; safecall;
    procedure Set_AutoRun(const pVal: WideString); safecall;
    function Get_AutoRunParams: WideString; safecall;
    procedure Set_AutoRunParams(const pVal: WideString); safecall;
    function Get_AutoTemp: Integer; safecall;
    procedure Set_AutoTemp(pVal: Integer); safecall;
    function Get_caseSensitive: Integer; safecall;
    procedure Set_caseSensitive(pVal: Integer); safecall;
    function Get_ClearArchiveAttribute: Integer; safecall;
    procedure Set_ClearArchiveAttribute(pVal: Integer); safecall;
    function Get_ClearReadOnlyAttr: Integer; safecall;
    procedure Set_ClearReadOnlyAttr(pVal: Integer); safecall;
    function Get_Comment: WideString; safecall;
    procedure Set_Comment(const pVal: WideString); safecall;
    function Get_DecryptPassword: WideString; safecall;
    procedure Set_DecryptPassword(const pVal: WideString); safecall;
    function Get_DiscardPaths: Integer; safecall;
    procedure Set_DiscardPaths(pVal: Integer); safecall;
    function Get_EncryptKeyLength: Integer; safecall;
    procedure Set_EncryptKeyLength(pVal: Integer); safecall;
    function Get_EncryptPassword: WideString; safecall;
    procedure Set_EncryptPassword(const pVal: WideString); safecall;
    function Get_Encryption: Integer; safecall;
    procedure Set_Encryption(pVal: Integer); safecall;
    function Get_ExeDefaultDir: WideString; safecall;
    procedure Set_ExeDefaultDir(const pVal: WideString); safecall;
    function Get_ExeFinishNotifier: Integer; safecall;
    procedure Set_ExeFinishNotifier(pVal: Integer); safecall;
    function Get_ExeIconFile: WideString; safecall;
    procedure Set_ExeIconFile(const pVal: WideString); safecall;
    function Get_ExeNoInterface: Integer; safecall;
    procedure Set_ExeNoInterface(pVal: Integer); safecall;
    function Get_ExeSilentProgress: Integer; safecall;
    procedure Set_ExeSilentProgress(pVal: Integer); safecall;
    function Get_ExeTitle: WideString; safecall;
    procedure Set_ExeTitle(const pVal: WideString); safecall;
    function Get_ExeUnzipCaption: WideString; safecall;
    procedure Set_ExeUnzipCaption(const pVal: WideString); safecall;
    function Get_ExeUnzipDir: WideString; safecall;
    procedure Set_ExeUnzipDir(const pVal: WideString); safecall;
    function Get_ExeWaitForSetup: Integer; safecall;
    procedure Set_ExeWaitForSetup(pVal: Integer); safecall;
    function Get_ExeXmlConfig: WideString; safecall;
    procedure Set_ExeXmlConfig(const pVal: WideString); safecall;
    function Get_FileCount: Integer; safecall;
    function Get_filename: WideString; safecall;
    procedure Set_filename(const pVal: WideString); safecall;
    function Get_HasZipFormatErrors: Integer; safecall;
    function Get_HeartbeatMs: Integer; safecall;
    procedure Set_HeartbeatMs(pVal: Integer); safecall;
    function Get_IgnoreAccessDenied: Integer; safecall;
    procedure Set_IgnoreAccessDenied(pVal: Integer); safecall;
    function Get_NumEntries: Integer; safecall;
    function Get_OemCodePage: Integer; safecall;
    procedure Set_OemCodePage(pVal: Integer); safecall;
    function Get_OverwriteExisting: Integer; safecall;
    procedure Set_OverwriteExisting(pVal: Integer); safecall;
    function Get_PasswordProtect: Integer; safecall;
    procedure Set_PasswordProtect(pVal: Integer); safecall;
    function Get_PathPrefix: WideString; safecall;
    procedure Set_PathPrefix(const pVal: WideString); safecall;
    function Get_TempDir: WideString; safecall;
    procedure Set_TempDir(const pVal: WideString); safecall;
    function Get_TextFlag: Integer; safecall;
    procedure Set_TextFlag(pVal: Integer); safecall;
    function Get_Zipx: Integer; safecall;
    procedure Set_Zipx(pVal: Integer); safecall;
    function Get_ZipxDefaultAlg: WideString; safecall;
    procedure Set_ZipxDefaultAlg(const pVal: WideString); safecall;
    function AddEmbedded(const exeFilename: WideString; const resourceName: WideString; 
                         const zipFilename: WideString): Integer; safecall;
    procedure AddNoCompressExtension(const fileExtension: WideString); safecall;
    function AppendBase64(const filename: WideString; const encodedCompressedData: WideString): IChilkatZipEntry; safecall;
    function AppendCompressed(const filename: WideString; inData: OleVariant): IChilkatZipEntry; safecall;
    function AppendData(const filename: WideString; inData: OleVariant): IChilkatZipEntry; safecall;
    function AppendFiles(const filePattern: WideString; Recurse: Integer): Integer; safecall;
    function AppendFilesAsync(const filePattern: WideString; Recurse: Integer): IChilkatTask; safecall;
    function AppendFilesEx(const filePattern: WideString; Recurse: Integer; saveExtraPath: Integer; 
                           archiveOnly: Integer; includeHidden: Integer; includeSystem: Integer): Integer; safecall;
    function AppendFilesExAsync(const filePattern: WideString; Recurse: Integer; 
                                saveExtraPath: Integer; archiveOnly: Integer; 
                                includeHidden: Integer; includeSystem: Integer): IChilkatTask; safecall;
    function AppendHex(const filename: WideString; const encodedCompressedData: WideString): IChilkatZipEntry; safecall;
    function AppendMultiple(const fileSpecs: ICkStringArray; Recurse: Integer): Integer; safecall;
    function AppendMultipleAsync(const fileSpecs: ICkStringArray; Recurse: Integer): IChilkatTask; safecall;
    function AppendNew(const filename: WideString): IChilkatZipEntry; safecall;
    function AppendNewDir(const dirName: WideString): IChilkatZipEntry; safecall;
    function AppendOneFileOrDir(const fileOrDirPath: WideString; saveExtraPath: Integer): Integer; safecall;
    function AppendOneFileOrDirAsync(const fileOrDirPath: WideString; saveExtraPath: Integer): IChilkatTask; safecall;
    function AppendString(const internalZipFilepath: WideString; const TextData: WideString): IChilkatZipEntry; safecall;
    function AppendString2(const internalZipFilepath: WideString; const TextData: WideString; 
                           const charset: WideString): IChilkatZipEntry; safecall;
    function AppendZip(const zipFilename: WideString): Integer; safecall;
    procedure CloseZip; safecall;
    function DeleteEntry(const entry: IChilkatZipEntry): Integer; safecall;
    procedure ExcludeDir(const dirName: WideString); safecall;
    function Extract(const dirPath: WideString): Integer; safecall;
    function ExtractAsync(const dirPath: WideString): IChilkatTask; safecall;
    function FirstEntry: IChilkatZipEntry; safecall;
    function FirstMatchingEntry(const pattern: WideString): IChilkatZipEntry; safecall;
    function GetDirectoryAsXML: WideString; safecall;
    function GetEntryByID(EntryID: Integer): IChilkatZipEntry; safecall;
    function GetEntryByIndex(index: Integer): IChilkatZipEntry; safecall;
    function GetEntryByName(const entryName: WideString): IChilkatZipEntry; safecall;
    function GetExclusions: ICkStringArray; safecall;
    function GetExeConfigParam(const name: WideString): WideString; safecall;
    function InsertNew(const filename: WideString; beforeIndex: Integer): IChilkatZipEntry; safecall;
    function IsNoCompressExtension(const fileExtension: WideString): Integer; safecall;
    function IsPasswordProtected(const zipFilename: WideString): Integer; safecall;
    function IsUnlocked: Integer; safecall;
    function NewZip(const zipFilePath: WideString): Integer; safecall;
    function OpenEmbedded(const exeFilename: WideString; const resourceName: WideString): Integer; safecall;
    function OpenFromByteData(byteData: OleVariant): Integer; safecall;
    function OpenFromMemory(inData: OleVariant): Integer; safecall;
    function OpenMyEmbedded(const resourceName: WideString): Integer; safecall;
    function OpenZip(const zipPath: WideString): Integer; safecall;
    function OpenZipAsync(const zipPath: WideString): IChilkatTask; safecall;
    function QuickAppend(const zipFilename: WideString): Integer; safecall;
    function QuickAppendAsync(const zipFilename: WideString): IChilkatTask; safecall;
    function RemoveEmbedded(const exeFilename: WideString; const resourceName: WideString): Integer; safecall;
    procedure RemoveNoCompressExtension(const fileExtension: WideString); safecall;
    function ReplaceEmbedded(const exeFilename: WideString; const resourceName: WideString; 
                             const zipFilename: WideString): Integer; safecall;
    procedure SetCompressionLevel(Level: Integer); safecall;
    procedure SetExclusions(const excludePatterns: ICkStringArray); safecall;
    procedure SetExeConfigParam(const paramName: WideString; const paramValue: WideString); safecall;
    procedure SetPassword(const password: WideString); safecall;
    function UnlockComponent(const regCode: WideString): Integer; safecall;
    function Unzip(const dirPath: WideString): Integer; safecall;
    function UnzipAsync(const dirPath: WideString): IChilkatTask; safecall;
    function UnzipInto(const dirPath: WideString): Integer; safecall;
    function UnzipIntoAsync(const dirPath: WideString): IChilkatTask; safecall;
    function UnzipMatching(const dirPath: WideString; const pattern: WideString; verbose: Integer): Integer; safecall;
    function UnzipMatchingAsync(const dirPath: WideString; const pattern: WideString; 
                                verbose: Integer): IChilkatTask; safecall;
    function UnzipMatchingInto(const dirPath: WideString; const pattern: WideString; 
                               verbose: Integer): Integer; safecall;
    function UnzipMatchingIntoAsync(const dirPath: WideString; const pattern: WideString; 
                                    verbose: Integer): IChilkatTask; safecall;
    function UnzipNewer(const dirPath: WideString): Integer; safecall;
    function UnzipNewerAsync(const dirPath: WideString): IChilkatTask; safecall;
    function VerifyPassword: Integer; safecall;
    function WriteExe(const exeFilename: WideString): Integer; safecall;
    function WriteExe2(const exePath: WideString; const destExePath: WideString; 
                       bAesEncrypt: Integer; KeyLength: Integer; const password: WideString): Integer; safecall;
    function WriteExeToMemory: OleVariant; safecall;
    function WriteToMemory: OleVariant; safecall;
    function WriteToMemoryAsync: IChilkatTask; safecall;
    function WriteZip: Integer; safecall;
    function WriteZipAsync: IChilkatTask; safecall;
    function WriteZipAndClose: Integer; safecall;
    function WriteZipAndCloseAsync: IChilkatTask; safecall;
    function ExtractExe(const exePath: WideString; const dirPath: WideString): Integer; safecall;
    function ExtractExeAsync(const exePath: WideString; const dirPath: WideString): IChilkatTask; safecall;
    function Get_PercentDoneScale: Integer; safecall;
    procedure Set_PercentDoneScale(pVal: Integer); safecall;
    function Get_AbortCurrent: Integer; safecall;
    procedure Set_AbortCurrent(pVal: Integer); safecall;
    function AppendDataEncoded(const filename: WideString; const encoding: WideString; 
                               const data: WideString): IChilkatZipEntry; safecall;
    function WriteBd(const binData: IChilkatBinData): Integer; safecall;
    function WriteBdAsync(const binData: IChilkatBinData): IChilkatTask; safecall;
    function OpenBd(const binData: IChilkatBinData): Integer; safecall;
    function AppendBd(const pathInZip: WideString; const byteData: IChilkatBinData): IChilkatZipEntry; safecall;
    function Get_PwdProtCharset: WideString; safecall;
    procedure Set_PwdProtCharset(const pVal: WideString); safecall;
    function LoadTaskCaller(const task: IChilkatTask): Integer; safecall;
    function Get_UncommonOptions: WideString; safecall;
    procedure Set_UncommonOptions(const pVal: WideString); safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property LastMethodSuccess: Integer read Get_LastMethodSuccess write Set_LastMethodSuccess;
    property LastStringResult: WideString read Get_LastStringResult;
    property LastBinaryResult: OleVariant read Get_LastBinaryResult;
    property LastStringResultLen: Integer read Get_LastStringResultLen;
    property AppendFromDir: WideString read Get_AppendFromDir write Set_AppendFromDir;
    property AutoRun: WideString read Get_AutoRun write Set_AutoRun;
    property AutoRunParams: WideString read Get_AutoRunParams write Set_AutoRunParams;
    property AutoTemp: Integer read Get_AutoTemp write Set_AutoTemp;
    property caseSensitive: Integer read Get_caseSensitive write Set_caseSensitive;
    property ClearArchiveAttribute: Integer read Get_ClearArchiveAttribute write Set_ClearArchiveAttribute;
    property ClearReadOnlyAttr: Integer read Get_ClearReadOnlyAttr write Set_ClearReadOnlyAttr;
    property Comment: WideString read Get_Comment write Set_Comment;
    property DecryptPassword: WideString read Get_DecryptPassword write Set_DecryptPassword;
    property DiscardPaths: Integer read Get_DiscardPaths write Set_DiscardPaths;
    property EncryptKeyLength: Integer read Get_EncryptKeyLength write Set_EncryptKeyLength;
    property EncryptPassword: WideString read Get_EncryptPassword write Set_EncryptPassword;
    property Encryption: Integer read Get_Encryption write Set_Encryption;
    property ExeDefaultDir: WideString read Get_ExeDefaultDir write Set_ExeDefaultDir;
    property ExeFinishNotifier: Integer read Get_ExeFinishNotifier write Set_ExeFinishNotifier;
    property ExeIconFile: WideString read Get_ExeIconFile write Set_ExeIconFile;
    property ExeNoInterface: Integer read Get_ExeNoInterface write Set_ExeNoInterface;
    property ExeSilentProgress: Integer read Get_ExeSilentProgress write Set_ExeSilentProgress;
    property ExeTitle: WideString read Get_ExeTitle write Set_ExeTitle;
    property ExeUnzipCaption: WideString read Get_ExeUnzipCaption write Set_ExeUnzipCaption;
    property ExeUnzipDir: WideString read Get_ExeUnzipDir write Set_ExeUnzipDir;
    property ExeWaitForSetup: Integer read Get_ExeWaitForSetup write Set_ExeWaitForSetup;
    property ExeXmlConfig: WideString read Get_ExeXmlConfig write Set_ExeXmlConfig;
    property FileCount: Integer read Get_FileCount;
    property filename: WideString read Get_filename write Set_filename;
    property HasZipFormatErrors: Integer read Get_HasZipFormatErrors;
    property HeartbeatMs: Integer read Get_HeartbeatMs write Set_HeartbeatMs;
    property IgnoreAccessDenied: Integer read Get_IgnoreAccessDenied write Set_IgnoreAccessDenied;
    property NumEntries: Integer read Get_NumEntries;
    property OemCodePage: Integer read Get_OemCodePage write Set_OemCodePage;
    property OverwriteExisting: Integer read Get_OverwriteExisting write Set_OverwriteExisting;
    property PasswordProtect: Integer read Get_PasswordProtect write Set_PasswordProtect;
    property PathPrefix: WideString read Get_PathPrefix write Set_PathPrefix;
    property TempDir: WideString read Get_TempDir write Set_TempDir;
    property TextFlag: Integer read Get_TextFlag write Set_TextFlag;
    property Zipx: Integer read Get_Zipx write Set_Zipx;
    property ZipxDefaultAlg: WideString read Get_ZipxDefaultAlg write Set_ZipxDefaultAlg;
    property PercentDoneScale: Integer read Get_PercentDoneScale write Set_PercentDoneScale;
    property AbortCurrent: Integer read Get_AbortCurrent write Set_AbortCurrent;
    property PwdProtCharset: WideString read Get_PwdProtCharset write Set_PwdProtCharset;
    property UncommonOptions: WideString read Get_UncommonOptions write Set_UncommonOptions;
  end;

// *********************************************************************//
// DispIntf:  IChilkatZipDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {EFE9ADE4-0851-49E2-BC0B-AB26E0353B1B}
// *********************************************************************//
  IChilkatZipDisp = dispinterface
    ['{EFE9ADE4-0851-49E2-BC0B-AB26E0353B1B}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property LastMethodSuccess: Integer dispid 9;
    property LastStringResult: WideString readonly dispid 10;
    property LastBinaryResult: OleVariant readonly dispid 11;
    property LastStringResultLen: Integer readonly dispid 12;
    property AppendFromDir: WideString dispid 100;
    property AutoRun: WideString dispid 101;
    property AutoRunParams: WideString dispid 102;
    property AutoTemp: Integer dispid 103;
    property caseSensitive: Integer dispid 104;
    property ClearArchiveAttribute: Integer dispid 105;
    property ClearReadOnlyAttr: Integer dispid 106;
    property Comment: WideString dispid 107;
    property DecryptPassword: WideString dispid 108;
    property DiscardPaths: Integer dispid 109;
    property EncryptKeyLength: Integer dispid 110;
    property EncryptPassword: WideString dispid 111;
    property Encryption: Integer dispid 112;
    property ExeDefaultDir: WideString dispid 113;
    property ExeFinishNotifier: Integer dispid 114;
    property ExeIconFile: WideString dispid 115;
    property ExeNoInterface: Integer dispid 116;
    property ExeSilentProgress: Integer dispid 117;
    property ExeTitle: WideString dispid 118;
    property ExeUnzipCaption: WideString dispid 119;
    property ExeUnzipDir: WideString dispid 120;
    property ExeWaitForSetup: Integer dispid 121;
    property ExeXmlConfig: WideString dispid 122;
    property FileCount: Integer readonly dispid 123;
    property filename: WideString dispid 124;
    property HasZipFormatErrors: Integer readonly dispid 125;
    property HeartbeatMs: Integer dispid 126;
    property IgnoreAccessDenied: Integer dispid 127;
    property NumEntries: Integer readonly dispid 128;
    property OemCodePage: Integer dispid 129;
    property OverwriteExisting: Integer dispid 130;
    property PasswordProtect: Integer dispid 131;
    property PathPrefix: WideString dispid 132;
    property TempDir: WideString dispid 134;
    property TextFlag: Integer dispid 135;
    property Zipx: Integer dispid 136;
    property ZipxDefaultAlg: WideString dispid 137;
    function AddEmbedded(const exeFilename: WideString; const resourceName: WideString; 
                         const zipFilename: WideString): Integer; dispid 138;
    procedure AddNoCompressExtension(const fileExtension: WideString); dispid 139;
    function AppendBase64(const filename: WideString; const encodedCompressedData: WideString): IChilkatZipEntry; dispid 140;
    function AppendCompressed(const filename: WideString; inData: OleVariant): IChilkatZipEntry; dispid 141;
    function AppendData(const filename: WideString; inData: OleVariant): IChilkatZipEntry; dispid 142;
    function AppendFiles(const filePattern: WideString; Recurse: Integer): Integer; dispid 143;
    function AppendFilesAsync(const filePattern: WideString; Recurse: Integer): IChilkatTask; dispid 643;
    function AppendFilesEx(const filePattern: WideString; Recurse: Integer; saveExtraPath: Integer; 
                           archiveOnly: Integer; includeHidden: Integer; includeSystem: Integer): Integer; dispid 144;
    function AppendFilesExAsync(const filePattern: WideString; Recurse: Integer; 
                                saveExtraPath: Integer; archiveOnly: Integer; 
                                includeHidden: Integer; includeSystem: Integer): IChilkatTask; dispid 644;
    function AppendHex(const filename: WideString; const encodedCompressedData: WideString): IChilkatZipEntry; dispid 145;
    function AppendMultiple(const fileSpecs: ICkStringArray; Recurse: Integer): Integer; dispid 146;
    function AppendMultipleAsync(const fileSpecs: ICkStringArray; Recurse: Integer): IChilkatTask; dispid 646;
    function AppendNew(const filename: WideString): IChilkatZipEntry; dispid 147;
    function AppendNewDir(const dirName: WideString): IChilkatZipEntry; dispid 148;
    function AppendOneFileOrDir(const fileOrDirPath: WideString; saveExtraPath: Integer): Integer; dispid 149;
    function AppendOneFileOrDirAsync(const fileOrDirPath: WideString; saveExtraPath: Integer): IChilkatTask; dispid 649;
    function AppendString(const internalZipFilepath: WideString; const TextData: WideString): IChilkatZipEntry; dispid 150;
    function AppendString2(const internalZipFilepath: WideString; const TextData: WideString; 
                           const charset: WideString): IChilkatZipEntry; dispid 151;
    function AppendZip(const zipFilename: WideString): Integer; dispid 152;
    procedure CloseZip; dispid 153;
    function DeleteEntry(const entry: IChilkatZipEntry): Integer; dispid 154;
    procedure ExcludeDir(const dirName: WideString); dispid 155;
    function Extract(const dirPath: WideString): Integer; dispid 156;
    function ExtractAsync(const dirPath: WideString): IChilkatTask; dispid 656;
    function FirstEntry: IChilkatZipEntry; dispid 157;
    function FirstMatchingEntry(const pattern: WideString): IChilkatZipEntry; dispid 158;
    function GetDirectoryAsXML: WideString; dispid 159;
    function GetEntryByID(EntryID: Integer): IChilkatZipEntry; dispid 160;
    function GetEntryByIndex(index: Integer): IChilkatZipEntry; dispid 161;
    function GetEntryByName(const entryName: WideString): IChilkatZipEntry; dispid 162;
    function GetExclusions: ICkStringArray; dispid 163;
    function GetExeConfigParam(const name: WideString): WideString; dispid 164;
    function InsertNew(const filename: WideString; beforeIndex: Integer): IChilkatZipEntry; dispid 165;
    function IsNoCompressExtension(const fileExtension: WideString): Integer; dispid 166;
    function IsPasswordProtected(const zipFilename: WideString): Integer; dispid 167;
    function IsUnlocked: Integer; dispid 168;
    function NewZip(const zipFilePath: WideString): Integer; dispid 169;
    function OpenEmbedded(const exeFilename: WideString; const resourceName: WideString): Integer; dispid 170;
    function OpenFromByteData(byteData: OleVariant): Integer; dispid 171;
    function OpenFromMemory(inData: OleVariant): Integer; dispid 172;
    function OpenMyEmbedded(const resourceName: WideString): Integer; dispid 174;
    function OpenZip(const zipPath: WideString): Integer; dispid 175;
    function OpenZipAsync(const zipPath: WideString): IChilkatTask; dispid 675;
    function QuickAppend(const zipFilename: WideString): Integer; dispid 176;
    function QuickAppendAsync(const zipFilename: WideString): IChilkatTask; dispid 676;
    function RemoveEmbedded(const exeFilename: WideString; const resourceName: WideString): Integer; dispid 177;
    procedure RemoveNoCompressExtension(const fileExtension: WideString); dispid 178;
    function ReplaceEmbedded(const exeFilename: WideString; const resourceName: WideString; 
                             const zipFilename: WideString): Integer; dispid 179;
    procedure SetCompressionLevel(Level: Integer); dispid 180;
    procedure SetExclusions(const excludePatterns: ICkStringArray); dispid 181;
    procedure SetExeConfigParam(const paramName: WideString; const paramValue: WideString); dispid 182;
    procedure SetPassword(const password: WideString); dispid 183;
    function UnlockComponent(const regCode: WideString): Integer; dispid 184;
    function Unzip(const dirPath: WideString): Integer; dispid 185;
    function UnzipAsync(const dirPath: WideString): IChilkatTask; dispid 685;
    function UnzipInto(const dirPath: WideString): Integer; dispid 186;
    function UnzipIntoAsync(const dirPath: WideString): IChilkatTask; dispid 686;
    function UnzipMatching(const dirPath: WideString; const pattern: WideString; verbose: Integer): Integer; dispid 187;
    function UnzipMatchingAsync(const dirPath: WideString; const pattern: WideString; 
                                verbose: Integer): IChilkatTask; dispid 687;
    function UnzipMatchingInto(const dirPath: WideString; const pattern: WideString; 
                               verbose: Integer): Integer; dispid 188;
    function UnzipMatchingIntoAsync(const dirPath: WideString; const pattern: WideString; 
                                    verbose: Integer): IChilkatTask; dispid 688;
    function UnzipNewer(const dirPath: WideString): Integer; dispid 189;
    function UnzipNewerAsync(const dirPath: WideString): IChilkatTask; dispid 689;
    function VerifyPassword: Integer; dispid 190;
    function WriteExe(const exeFilename: WideString): Integer; dispid 191;
    function WriteExe2(const exePath: WideString; const destExePath: WideString; 
                       bAesEncrypt: Integer; KeyLength: Integer; const password: WideString): Integer; dispid 192;
    function WriteExeToMemory: OleVariant; dispid 193;
    function WriteToMemory: OleVariant; dispid 194;
    function WriteToMemoryAsync: IChilkatTask; dispid 694;
    function WriteZip: Integer; dispid 195;
    function WriteZipAsync: IChilkatTask; dispid 695;
    function WriteZipAndClose: Integer; dispid 196;
    function WriteZipAndCloseAsync: IChilkatTask; dispid 696;
    function ExtractExe(const exePath: WideString; const dirPath: WideString): Integer; dispid 197;
    function ExtractExeAsync(const exePath: WideString; const dirPath: WideString): IChilkatTask; dispid 697;
    property PercentDoneScale: Integer dispid 198;
    property AbortCurrent: Integer dispid 199;
    function AppendDataEncoded(const filename: WideString; const encoding: WideString; 
                               const data: WideString): IChilkatZipEntry; dispid 200;
    function WriteBd(const binData: IChilkatBinData): Integer; dispid 202;
    function WriteBdAsync(const binData: IChilkatBinData): IChilkatTask; dispid 702;
    function OpenBd(const binData: IChilkatBinData): Integer; dispid 203;
    function AppendBd(const pathInZip: WideString; const byteData: IChilkatBinData): IChilkatZipEntry; dispid 204;
    property PwdProtCharset: WideString dispid 205;
    function LoadTaskCaller(const task: IChilkatTask): Integer; dispid 206;
    property UncommonOptions: WideString dispid 207;
  end;

// *********************************************************************//
// Interface: IChilkatZipEntry
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {C68497C9-2779-48A4-9062-6DAD6EA5E1C6}
// *********************************************************************//
  IChilkatZipEntry = interface(IDispatch)
    ['{C68497C9-2779-48A4-9062-6DAD6EA5E1C6}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_LastMethodSuccess: Integer; safecall;
    procedure Set_LastMethodSuccess(pVal: Integer); safecall;
    function Get_LastStringResult: WideString; safecall;
    function Get_LastBinaryResult: OleVariant; safecall;
    function Get_LastStringResultLen: Integer; safecall;
    function Get_Comment: WideString; safecall;
    procedure Set_Comment(const pVal: WideString); safecall;
    function Get_CompressedLength: Integer; safecall;
    function Get_CompressedLengthStr: WideString; safecall;
    function Get_CompressionLevel: Integer; safecall;
    procedure Set_CompressionLevel(pVal: Integer); safecall;
    function Get_CompressionMethod: Integer; safecall;
    procedure Set_CompressionMethod(pVal: Integer); safecall;
    function Get_Crc: Integer; safecall;
    function Get_EntryID: Integer; safecall;
    function Get_entryType: Integer; safecall;
    function Get_FileDateTime: TDateTime; safecall;
    procedure Set_FileDateTime(pVal: TDateTime); safecall;
    function Get_FileDateTimeStr: WideString; safecall;
    procedure Set_FileDateTimeStr(const pVal: WideString); safecall;
    function Get_filename: WideString; safecall;
    procedure Set_filename(const pVal: WideString); safecall;
    function Get_HeartbeatMs: Integer; safecall;
    procedure Set_HeartbeatMs(pVal: Integer); safecall;
    function Get_isDirectory: Integer; safecall;
    function Get_TextFlag: Integer; safecall;
    procedure Set_TextFlag(pVal: Integer); safecall;
    function Get_UncompressedLength: Integer; safecall;
    function Get_UncompressedLengthStr: WideString; safecall;
    function AppendData(inData: OleVariant): Integer; safecall;
    function AppendDataAsync(inData: OleVariant): IChilkatTask; safecall;
    function AppendString(const strContent: WideString; const charset: WideString): Integer; safecall;
    function AppendStringAsync(const strContent: WideString; const charset: WideString): IChilkatTask; safecall;
    function Copy: OleVariant; safecall;
    function CopyToBase64: WideString; safecall;
    function CopyToHex: WideString; safecall;
    function Extract(const dirPath: WideString): Integer; safecall;
    function ExtractAsync(const dirPath: WideString): IChilkatTask; safecall;
    function ExtractInto(const dirPath: WideString): Integer; safecall;
    function ExtractIntoAsync(const dirPath: WideString): IChilkatTask; safecall;
    function GetDt: ICkDateTime; safecall;
    function Inflate: OleVariant; safecall;
    function InflateAsync: IChilkatTask; safecall;
    function NextEntry: IChilkatZipEntry; safecall;
    function ReplaceData(inData: OleVariant): Integer; safecall;
    function replaceString(const strContent: WideString; const charset: WideString): Integer; safecall;
    procedure SetDt(const dt: ICkDateTime); safecall;
    function UnzipToString(lineEndingBehavior: Integer; const srcCharset: WideString): WideString; safecall;
    function UnzipToStringAsync(lineEndingBehavior: Integer; const srcCharset: WideString): IChilkatTask; safecall;
    function Get_FileNameHex: WideString; safecall;
    function NextMatchingEntry(const matchStr: WideString): IChilkatZipEntry; safecall;
    function UnzipToStream(const toStream: IChilkatStream): Integer; safecall;
    function UnzipToStreamAsync(const toStream: IChilkatStream): IChilkatTask; safecall;
    function UnzipToBd(const binData: IChilkatBinData): Integer; safecall;
    function UnzipToBdAsync(const binData: IChilkatBinData): IChilkatTask; safecall;
    function UnzipToSb(lineEndingBehavior: Integer; const srcCharset: WideString; 
                       const sb: IChilkatStringBuilder): Integer; safecall;
    function UnzipToSbAsync(lineEndingBehavior: Integer; const srcCharset: WideString; 
                            const sb: IChilkatStringBuilder): IChilkatTask; safecall;
    function Get_IsAesEncrypted: Integer; safecall;
    function Get_EncryptionKeyLen: Integer; safecall;
    function LoadTaskCaller(const task: IChilkatTask): Integer; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property LastMethodSuccess: Integer read Get_LastMethodSuccess write Set_LastMethodSuccess;
    property LastStringResult: WideString read Get_LastStringResult;
    property LastBinaryResult: OleVariant read Get_LastBinaryResult;
    property LastStringResultLen: Integer read Get_LastStringResultLen;
    property Comment: WideString read Get_Comment write Set_Comment;
    property CompressedLength: Integer read Get_CompressedLength;
    property CompressedLengthStr: WideString read Get_CompressedLengthStr;
    property CompressionLevel: Integer read Get_CompressionLevel write Set_CompressionLevel;
    property CompressionMethod: Integer read Get_CompressionMethod write Set_CompressionMethod;
    property Crc: Integer read Get_Crc;
    property EntryID: Integer read Get_EntryID;
    property entryType: Integer read Get_entryType;
    property FileDateTime: TDateTime read Get_FileDateTime write Set_FileDateTime;
    property FileDateTimeStr: WideString read Get_FileDateTimeStr write Set_FileDateTimeStr;
    property filename: WideString read Get_filename write Set_filename;
    property HeartbeatMs: Integer read Get_HeartbeatMs write Set_HeartbeatMs;
    property isDirectory: Integer read Get_isDirectory;
    property TextFlag: Integer read Get_TextFlag write Set_TextFlag;
    property UncompressedLength: Integer read Get_UncompressedLength;
    property UncompressedLengthStr: WideString read Get_UncompressedLengthStr;
    property FileNameHex: WideString read Get_FileNameHex;
    property IsAesEncrypted: Integer read Get_IsAesEncrypted;
    property EncryptionKeyLen: Integer read Get_EncryptionKeyLen;
  end;

// *********************************************************************//
// DispIntf:  IChilkatZipEntryDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {C68497C9-2779-48A4-9062-6DAD6EA5E1C6}
// *********************************************************************//
  IChilkatZipEntryDisp = dispinterface
    ['{C68497C9-2779-48A4-9062-6DAD6EA5E1C6}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property LastMethodSuccess: Integer dispid 9;
    property LastStringResult: WideString readonly dispid 10;
    property LastBinaryResult: OleVariant readonly dispid 11;
    property LastStringResultLen: Integer readonly dispid 12;
    property Comment: WideString dispid 100;
    property CompressedLength: Integer readonly dispid 101;
    property CompressedLengthStr: WideString readonly dispid 102;
    property CompressionLevel: Integer dispid 103;
    property CompressionMethod: Integer dispid 104;
    property Crc: Integer readonly dispid 105;
    property EntryID: Integer readonly dispid 106;
    property entryType: Integer readonly dispid 107;
    property FileDateTime: TDateTime dispid 108;
    property FileDateTimeStr: WideString dispid 109;
    property filename: WideString dispid 110;
    property HeartbeatMs: Integer dispid 111;
    property isDirectory: Integer readonly dispid 112;
    property TextFlag: Integer dispid 113;
    property UncompressedLength: Integer readonly dispid 114;
    property UncompressedLengthStr: WideString readonly dispid 115;
    function AppendData(inData: OleVariant): Integer; dispid 116;
    function AppendDataAsync(inData: OleVariant): IChilkatTask; dispid 616;
    function AppendString(const strContent: WideString; const charset: WideString): Integer; dispid 117;
    function AppendStringAsync(const strContent: WideString; const charset: WideString): IChilkatTask; dispid 617;
    function Copy: OleVariant; dispid 118;
    function CopyToBase64: WideString; dispid 119;
    function CopyToHex: WideString; dispid 120;
    function Extract(const dirPath: WideString): Integer; dispid 121;
    function ExtractAsync(const dirPath: WideString): IChilkatTask; dispid 621;
    function ExtractInto(const dirPath: WideString): Integer; dispid 122;
    function ExtractIntoAsync(const dirPath: WideString): IChilkatTask; dispid 622;
    function GetDt: ICkDateTime; dispid 123;
    function Inflate: OleVariant; dispid 124;
    function InflateAsync: IChilkatTask; dispid 624;
    function NextEntry: IChilkatZipEntry; dispid 125;
    function ReplaceData(inData: OleVariant): Integer; dispid 126;
    function replaceString(const strContent: WideString; const charset: WideString): Integer; dispid 127;
    procedure SetDt(const dt: ICkDateTime); dispid 128;
    function UnzipToString(lineEndingBehavior: Integer; const srcCharset: WideString): WideString; dispid 129;
    function UnzipToStringAsync(lineEndingBehavior: Integer; const srcCharset: WideString): IChilkatTask; dispid 629;
    property FileNameHex: WideString readonly dispid 133;
    function NextMatchingEntry(const matchStr: WideString): IChilkatZipEntry; dispid 134;
    function UnzipToStream(const toStream: IChilkatStream): Integer; dispid 135;
    function UnzipToStreamAsync(const toStream: IChilkatStream): IChilkatTask; dispid 635;
    function UnzipToBd(const binData: IChilkatBinData): Integer; dispid 136;
    function UnzipToBdAsync(const binData: IChilkatBinData): IChilkatTask; dispid 636;
    function UnzipToSb(lineEndingBehavior: Integer; const srcCharset: WideString; 
                       const sb: IChilkatStringBuilder): Integer; dispid 137;
    function UnzipToSbAsync(lineEndingBehavior: Integer; const srcCharset: WideString; 
                            const sb: IChilkatStringBuilder): IChilkatTask; dispid 637;
    property IsAesEncrypted: Integer readonly dispid 138;
    property EncryptionKeyLen: Integer readonly dispid 139;
    function LoadTaskCaller(const task: IChilkatTask): Integer; dispid 140;
  end;

// *********************************************************************//
// Interface: IChilkatZipCrc
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {8C819F76-4B5C-4E9C-A49A-D6BF2190C09C}
// *********************************************************************//
  IChilkatZipCrc = interface(IDispatch)
    ['{8C819F76-4B5C-4E9C-A49A-D6BF2190C09C}']
    function GetImplAddrStr: WideString; safecall;
    function Get_LastErrorHtml: WideString; safecall;
    function Get_LastErrorText: WideString; safecall;
    function Get_LastErrorXml: WideString; safecall;
    function Get_Version: WideString; safecall;
    function Get_DebugLogFilePath: WideString; safecall;
    procedure Set_DebugLogFilePath(const pVal: WideString); safecall;
    function Get_VerboseLogging: Integer; safecall;
    procedure Set_VerboseLogging(pVal: Integer); safecall;
    function Get_LastMethodSuccess: Integer; safecall;
    procedure Set_LastMethodSuccess(pVal: Integer); safecall;
    function Get_LastStringResult: WideString; safecall;
    function Get_LastBinaryResult: OleVariant; safecall;
    function Get_LastStringResultLen: Integer; safecall;
    procedure BeginStream; safecall;
    function CalculateCrc(data: OleVariant): Integer; safecall;
    function EndStream: Integer; safecall;
    function FileCrc(const path: WideString): Integer; safecall;
    function FileCrcAsync(const path: WideString): IChilkatTask; safecall;
    procedure MoreData(data: OleVariant); safecall;
    function ToHex(Crc: Integer): WideString; safecall;
    function CrcString(const str: WideString; const charset: WideString): Integer; safecall;
    function CrcSb(const sb: IChilkatStringBuilder; const charset: WideString): Integer; safecall;
    function CrcBd(const bd: IChilkatBinData): Integer; safecall;
    function LoadTaskCaller(const task: IChilkatTask): Integer; safecall;
    property LastErrorHtml: WideString read Get_LastErrorHtml;
    property LastErrorText: WideString read Get_LastErrorText;
    property LastErrorXml: WideString read Get_LastErrorXml;
    property Version: WideString read Get_Version;
    property DebugLogFilePath: WideString read Get_DebugLogFilePath write Set_DebugLogFilePath;
    property VerboseLogging: Integer read Get_VerboseLogging write Set_VerboseLogging;
    property LastMethodSuccess: Integer read Get_LastMethodSuccess write Set_LastMethodSuccess;
    property LastStringResult: WideString read Get_LastStringResult;
    property LastBinaryResult: OleVariant read Get_LastBinaryResult;
    property LastStringResultLen: Integer read Get_LastStringResultLen;
  end;

// *********************************************************************//
// DispIntf:  IChilkatZipCrcDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {8C819F76-4B5C-4E9C-A49A-D6BF2190C09C}
// *********************************************************************//
  IChilkatZipCrcDisp = dispinterface
    ['{8C819F76-4B5C-4E9C-A49A-D6BF2190C09C}']
    function GetImplAddrStr: WideString; dispid 99;
    property LastErrorHtml: WideString readonly dispid 1;
    property LastErrorText: WideString readonly dispid 2;
    property LastErrorXml: WideString readonly dispid 3;
    property Version: WideString readonly dispid 4;
    property DebugLogFilePath: WideString dispid 5;
    property VerboseLogging: Integer dispid 6;
    property LastMethodSuccess: Integer dispid 9;
    property LastStringResult: WideString readonly dispid 10;
    property LastBinaryResult: OleVariant readonly dispid 11;
    property LastStringResultLen: Integer readonly dispid 12;
    procedure BeginStream; dispid 100;
    function CalculateCrc(data: OleVariant): Integer; dispid 101;
    function EndStream: Integer; dispid 102;
    function FileCrc(const path: WideString): Integer; dispid 103;
    function FileCrcAsync(const path: WideString): IChilkatTask; dispid 603;
    procedure MoreData(data: OleVariant); dispid 104;
    function ToHex(Crc: Integer): WideString; dispid 105;
    function CrcString(const str: WideString; const charset: WideString): Integer; dispid 106;
    function CrcSb(const sb: IChilkatStringBuilder; const charset: WideString): Integer; dispid 107;
    function CrcBd(const bd: IChilkatBinData): Integer; dispid 108;
    function LoadTaskCaller(const task: IChilkatTask): Integer; dispid 109;
  end;

implementation

uses System.Win.ComObj;

end.
