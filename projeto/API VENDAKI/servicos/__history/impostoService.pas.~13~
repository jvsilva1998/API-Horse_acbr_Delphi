unit impostoService;

interface

uses
  XData.Server.Module,
  XData.Service.Common,
  parametros,
  Json,
  funcoes,
  imposto,
  retornos;

type
  [ServiceContract]
  Iimpostos= interface(IInvokable)
    ['{04FB9CCB-F5E2-477C-9AD3-639CCB8D5592}']
    [httppost]   function cadastrar(dados:parametros.PerfilTibutario):TJSONObject;
    [httpdelete] function remover([FromPath]codigo:string):TJSONObject;
    [httpput]    function alterar(codigo:string;dados:parametros.PerfilTibutario):TJSonObject;
    [httpget]    function buscar(descricao:string):TJSONObject;
  end;

  [ServiceImplementation]
  TIimpostos = class(TInterfacedObject, Iimpostos)
  private
    function cadastrar(dados:parametros.PerfilTibutario):TJSONObject;
    function remover(codigo:string):TJSONObject;
    function alterar(codigo:string;dados:parametros.PerfilTibutario):TJSonObject;
    function buscar(descricao:string):TJSONObject;
  end;

implementation

 {ALTERAR}
function TIimpostos.alterar(codigo: string; dados: parametros.PerfilTibutario): TJSonObject;
    var
  resultado :integer;
 begin
    if funcoes.verificaTokenlogado(TXDataOperationContext.Current.Request.Headers.Get('Authorization')) = true then
      begin
            resultado :=  imposto.alterar_imposto(codigo,dados);
            result := TJSonObject.ParseJSONValue(retornos.retorno) as TJSonObject;
            funcoes.statusHTTP(resultado);
      end else
           begin
             result := TJSonObject.ParseJSONValue(retornos.retorno) as TJSonObject;
           end;
 end;

 {BUSCAR}
function TIimpostos.buscar(descricao:string): TJSONObject;
 var
  resultado :integer;
 begin
    if funcoes.verificaTokenlogado(TXDataOperationContext.Current.Request.Headers.Get('Authorization')) = true then
      begin
            resultado := imposto.buscar_imposto(descricao);
            result    := TJSonObject.ParseJSONValue(funcoes.ResultadoJson) as TJSonObject;
            funcoes.statusHTTP(resultado);
      end else
           begin
            result := TJSonObject.ParseJSONValue(retornos.retorno) as TJSonObject;
           end;
 end;

 {CADASTRAR}
function TIimpostos.cadastrar(dados: parametros.PerfilTibutario):TJSONObject;
  var
  resultado :integer;
 begin
    if funcoes.verificaTokenlogado(TXDataOperationContext.Current.Request.Headers.Get('Authorization')) = true then
      begin
            resultado  := imposto.cadastra_imposto(dados);
            result     := TJSonObject.ParseJSONValue(retornos.retorno) as TJSonObject;
            funcoes.statusHTTP(resultado);
      end else
           begin
             result := TJSonObject.ParseJSONValue(retornos.retorno) as TJSonObject;
           end;
 end;

 {REMOVER}
function TIimpostos.remover(codigo: string): TJSonObject;
 var
  resultado :integer;
 begin
      if funcoes.verificaTokenlogado(TXDataOperationContext.Current.Request.Headers.Get('Authorization')) = true then
      begin
            resultado :=  imposto.remover_imposto(codigo);
            result := TJSonObject.ParseJSONValue(retornos.retorno) as TJSonObject;
            funcoes.statusHTTP(resultado);
      end else
           begin
             result := TJSonObject.ParseJSONValue(retornos.retorno) as TJSonObject;
           end;
 end;

initialization
  RegisterServiceType(TypeInfo(Iimpostos));
  RegisterServiceType(TIimpostos);

end.

